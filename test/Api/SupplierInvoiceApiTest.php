<?php
/**
 * SupplierInvoiceApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Ekstralys\VismaNetApi;

use \Ekstralys\VismaNetApi\Configuration;
use \Ekstralys\VismaNetApi\ApiException;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * SupplierInvoiceApiTest Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupplierInvoiceApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for supplierInvoiceCreateHeaderAttachmentByTypeBydocumentTypeinvoiceNumber
     *
     * Creates an attachment and associates it with a supplier invoice. If the file already exists, a new revision is created..
     *
     */
    public function testSupplierInvoiceCreateHeaderAttachmentByTypeBydocumentTypeinvoiceNumber()
    {
    }

    /**
     * Test case for supplierInvoiceCreateHeaderAttachmentByinvoiceNumber
     *
     * Creates an attachment and associates it with a supplier invoice. If the file already exists, a new revision is created..
     *
     */
    public function testSupplierInvoiceCreateHeaderAttachmentByinvoiceNumber()
    {
    }

    /**
     * Test case for supplierInvoiceCreateLineAttachmentByTypeBydocumentTypeinvoiceNumberlineNumber
     *
     * Creates an attachment and associates it with a certain supplier invoice line. If the file already exists, a new revision is created..
     *
     */
    public function testSupplierInvoiceCreateLineAttachmentByTypeBydocumentTypeinvoiceNumberlineNumber()
    {
    }

    /**
     * Test case for supplierInvoiceCreateLineAttachmentByinvoiceNumberlineNumber
     *
     * Creates an attachment and associates it with a certain supplier invoice line. If the file already exists, a new revision is created..
     *
     */
    public function testSupplierInvoiceCreateLineAttachmentByinvoiceNumberlineNumber()
    {
    }

    /**
     * Test case for supplierInvoiceDeleteBydocumentTypeinvoiceNumber
     *
     * Deletes a specific Supplier Invoice.
     *
     */
    public function testSupplierInvoiceDeleteBydocumentTypeinvoiceNumber()
    {
    }

    /**
     * Test case for supplierInvoiceDeleteByinvoiceNumber
     *
     * Deletes a specific Supplier Invoice.
     *
     */
    public function testSupplierInvoiceDeleteByinvoiceNumber()
    {
    }

    /**
     * Test case for supplierInvoiceGetAllInvoices
     *
     * Get a range of Invoices - ScreenId=AP301000.   Request page size must be lower or equal to the allowed max page size which is returned as part of the metadata information.  If requested page size is greater than allowed max page size, request will be limited to max page size.
     *
     */
    public function testSupplierInvoiceGetAllInvoices()
    {
    }

    /**
     * Test case for supplierInvoiceGetByApprovalDocumentId
     *
     * Get an invoice based on the systemId. SystemID is used for approving supplier invoices.
     *
     */
    public function testSupplierInvoiceGetByApprovalDocumentId()
    {
    }

    /**
     * Test case for supplierInvoiceGetByTypeBydocumentTypeinvoiceNumber
     *
     * Get a specific Invoice.
     *
     */
    public function testSupplierInvoiceGetByTypeBydocumentTypeinvoiceNumber()
    {
    }

    /**
     * Test case for supplierInvoiceGetByinvoiceNumber
     *
     * Get a specific Invoice.
     *
     */
    public function testSupplierInvoiceGetByinvoiceNumber()
    {
    }

    /**
     * Test case for supplierInvoicePost
     *
     * Create an SupplierInvoice.
     *
     */
    public function testSupplierInvoicePost()
    {
    }

    /**
     * Test case for supplierInvoicePrebookInvoiceBydocumentTypeinvoiceNumber
     *
     * Pre-Book invoice operation.
     *
     */
    public function testSupplierInvoicePrebookInvoiceBydocumentTypeinvoiceNumber()
    {
    }

    /**
     * Test case for supplierInvoicePutByTypeBydocumentTypesupplierInvoiceNumber
     *
     * Update a specific SupplierInvoice.
     *
     */
    public function testSupplierInvoicePutByTypeBydocumentTypesupplierInvoiceNumber()
    {
    }

    /**
     * Test case for supplierInvoicePutBysupplierInvoiceNumber
     *
     * Update a specific SupplierInvoice.
     *
     */
    public function testSupplierInvoicePutBysupplierInvoiceNumber()
    {
    }

    /**
     * Test case for supplierInvoiceReleaseInvoiceByTypeBydocumentTypeinvoiceNumber
     *
     * Release invoice operation.
     *
     */
    public function testSupplierInvoiceReleaseInvoiceByTypeBydocumentTypeinvoiceNumber()
    {
    }

    /**
     * Test case for supplierInvoiceReleaseInvoiceByinvoiceNumber
     *
     * Release invoice operation.
     *
     */
    public function testSupplierInvoiceReleaseInvoiceByinvoiceNumber()
    {
    }

    /**
     * Test case for supplierInvoiceVoidInvoiceBydocumentTypeinvoiceNumber
     *
     * Void invoice operation.
     *
     */
    public function testSupplierInvoiceVoidInvoiceBydocumentTypeinvoiceNumber()
    {
    }
}
