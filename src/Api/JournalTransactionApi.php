<?php
/**
 * JournalTransactionApi
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ekstralys\VismaNetApi\ApiException;
use Ekstralys\VismaNetApi\Configuration;
use Ekstralys\VismaNetApi\HeaderSelector;
use Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * JournalTransactionApi Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JournalTransactionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation journalTransactionCreateHeaderAttachmentByjournalTransactionNumber
     *
     * Creates an attachment and associates it with an journalTransaction. If the file already exists, a new revision is created.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function journalTransactionCreateHeaderAttachmentByjournalTransactionNumber($journal_transaction_number)
    {
        list($response) = $this->journalTransactionCreateHeaderAttachmentByjournalTransactionNumberWithHttpInfo($journal_transaction_number);
        return $response;
    }

    /**
     * Operation journalTransactionCreateHeaderAttachmentByjournalTransactionNumberWithHttpInfo
     *
     * Creates an attachment and associates it with an journalTransaction. If the file already exists, a new revision is created.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function journalTransactionCreateHeaderAttachmentByjournalTransactionNumberWithHttpInfo($journal_transaction_number)
    {
        $returnType = 'object';
        $request = $this->journalTransactionCreateHeaderAttachmentByjournalTransactionNumberRequest($journal_transaction_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation journalTransactionCreateHeaderAttachmentByjournalTransactionNumberAsync
     *
     * Creates an attachment and associates it with an journalTransaction. If the file already exists, a new revision is created.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionCreateHeaderAttachmentByjournalTransactionNumberAsync($journal_transaction_number)
    {
        return $this->journalTransactionCreateHeaderAttachmentByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation journalTransactionCreateHeaderAttachmentByjournalTransactionNumberAsyncWithHttpInfo
     *
     * Creates an attachment and associates it with an journalTransaction. If the file already exists, a new revision is created.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionCreateHeaderAttachmentByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number)
    {
        $returnType = 'object';
        $request = $this->journalTransactionCreateHeaderAttachmentByjournalTransactionNumberRequest($journal_transaction_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'journalTransactionCreateHeaderAttachmentByjournalTransactionNumber'
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function journalTransactionCreateHeaderAttachmentByjournalTransactionNumberRequest($journal_transaction_number)
    {
        // verify the required parameter 'journal_transaction_number' is set
        if ($journal_transaction_number === null || (is_array($journal_transaction_number) && count($journal_transaction_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_transaction_number when calling journalTransactionCreateHeaderAttachmentByjournalTransactionNumber'
            );
        }

        $resourcePath = '/controller/api/v1/journaltransaction/{journalTransactionNumber}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($journal_transaction_number !== null) {
            $resourcePath = str_replace(
                '{' . 'journalTransactionNumber' . '}',
                ObjectSerializer::toPathValue($journal_transaction_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumber
     *
     * Creates an attachment and associates it with a certain journalTransaction line. If the file already exists, a new revision is created.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumber($journal_transaction_number, $line_number)
    {
        list($response) = $this->journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumberWithHttpInfo($journal_transaction_number, $line_number);
        return $response;
    }

    /**
     * Operation journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumberWithHttpInfo
     *
     * Creates an attachment and associates it with a certain journalTransaction line. If the file already exists, a new revision is created.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumberWithHttpInfo($journal_transaction_number, $line_number)
    {
        $returnType = 'object';
        $request = $this->journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumberRequest($journal_transaction_number, $line_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumberAsync
     *
     * Creates an attachment and associates it with a certain journalTransaction line. If the file already exists, a new revision is created.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumberAsync($journal_transaction_number, $line_number)
    {
        return $this->journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumberAsyncWithHttpInfo($journal_transaction_number, $line_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumberAsyncWithHttpInfo
     *
     * Creates an attachment and associates it with a certain journalTransaction line. If the file already exists, a new revision is created.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumberAsyncWithHttpInfo($journal_transaction_number, $line_number)
    {
        $returnType = 'object';
        $request = $this->journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumberRequest($journal_transaction_number, $line_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumber'
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumberRequest($journal_transaction_number, $line_number)
    {
        // verify the required parameter 'journal_transaction_number' is set
        if ($journal_transaction_number === null || (is_array($journal_transaction_number) && count($journal_transaction_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_transaction_number when calling journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumber'
            );
        }
        // verify the required parameter 'line_number' is set
        if ($line_number === null || (is_array($line_number) && count($line_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_number when calling journalTransactionCreateLineAttachmentByjournalTransactionNumberlineNumber'
            );
        }

        $resourcePath = '/controller/api/v1/journaltransaction/{journalTransactionNumber}/{lineNumber}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($journal_transaction_number !== null) {
            $resourcePath = str_replace(
                '{' . 'journalTransactionNumber' . '}',
                ObjectSerializer::toPathValue($journal_transaction_number),
                $resourcePath
            );
        }
        // path params
        if ($line_number !== null) {
            $resourcePath = str_replace(
                '{' . 'lineNumber' . '}',
                ObjectSerializer::toPathValue($line_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation journalTransactionGetAllJournalTransactions
     *
     * Get a range of Journal Transactions - ScreenId=GL301000  When using pagination, the transactions for one specific batch can be split into several responses.  When using pagination, pagesize (totalcount) denotes number of JournalTransaction lines.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $greater_than_value greater_than_value (optional)
     * @param  string $last_modified_date_time System retrieved information for last modified date and time. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for date, time and state/condition. (optional)
     * @param  string $customer_supplier_start  (optional)
     * @param  string $customer_supplier_end customer_supplier_end (optional)
     * @param  int $released Filter by the date when the batch was released. (optional)
     * @param  bool $expand_attachments Set to true if you want to see all attachments regarding batch. (optional)
     * @param  string $branch Branch to query data for. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\JournalTransactionDto[]
     */
    public function journalTransactionGetAllJournalTransactions($greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $customer_supplier_start = null, $customer_supplier_end = null, $released = null, $expand_attachments = null, $branch = null, $page_number = null, $page_size = null)
    {
        list($response) = $this->journalTransactionGetAllJournalTransactionsWithHttpInfo($greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $customer_supplier_start, $customer_supplier_end, $released, $expand_attachments, $branch, $page_number, $page_size);
        return $response;
    }

    /**
     * Operation journalTransactionGetAllJournalTransactionsWithHttpInfo
     *
     * Get a range of Journal Transactions - ScreenId=GL301000  When using pagination, the transactions for one specific batch can be split into several responses.  When using pagination, pagesize (totalcount) denotes number of JournalTransaction lines.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $greater_than_value (optional)
     * @param  string $last_modified_date_time System retrieved information for last modified date and time. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for date, time and state/condition. (optional)
     * @param  string $customer_supplier_start  (optional)
     * @param  string $customer_supplier_end (optional)
     * @param  int $released Filter by the date when the batch was released. (optional)
     * @param  bool $expand_attachments Set to true if you want to see all attachments regarding batch. (optional)
     * @param  string $branch Branch to query data for. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\JournalTransactionDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function journalTransactionGetAllJournalTransactionsWithHttpInfo($greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $customer_supplier_start = null, $customer_supplier_end = null, $released = null, $expand_attachments = null, $branch = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\JournalTransactionDto[]';
        $request = $this->journalTransactionGetAllJournalTransactionsRequest($greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $customer_supplier_start, $customer_supplier_end, $released, $expand_attachments, $branch, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\JournalTransactionDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation journalTransactionGetAllJournalTransactionsAsync
     *
     * Get a range of Journal Transactions - ScreenId=GL301000  When using pagination, the transactions for one specific batch can be split into several responses.  When using pagination, pagesize (totalcount) denotes number of JournalTransaction lines.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $greater_than_value (optional)
     * @param  string $last_modified_date_time System retrieved information for last modified date and time. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for date, time and state/condition. (optional)
     * @param  string $customer_supplier_start  (optional)
     * @param  string $customer_supplier_end (optional)
     * @param  int $released Filter by the date when the batch was released. (optional)
     * @param  bool $expand_attachments Set to true if you want to see all attachments regarding batch. (optional)
     * @param  string $branch Branch to query data for. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionGetAllJournalTransactionsAsync($greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $customer_supplier_start = null, $customer_supplier_end = null, $released = null, $expand_attachments = null, $branch = null, $page_number = null, $page_size = null)
    {
        return $this->journalTransactionGetAllJournalTransactionsAsyncWithHttpInfo($greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $customer_supplier_start, $customer_supplier_end, $released, $expand_attachments, $branch, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation journalTransactionGetAllJournalTransactionsAsyncWithHttpInfo
     *
     * Get a range of Journal Transactions - ScreenId=GL301000  When using pagination, the transactions for one specific batch can be split into several responses.  When using pagination, pagesize (totalcount) denotes number of JournalTransaction lines.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $greater_than_value (optional)
     * @param  string $last_modified_date_time System retrieved information for last modified date and time. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for date, time and state/condition. (optional)
     * @param  string $customer_supplier_start  (optional)
     * @param  string $customer_supplier_end (optional)
     * @param  int $released Filter by the date when the batch was released. (optional)
     * @param  bool $expand_attachments Set to true if you want to see all attachments regarding batch. (optional)
     * @param  string $branch Branch to query data for. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionGetAllJournalTransactionsAsyncWithHttpInfo($greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $customer_supplier_start = null, $customer_supplier_end = null, $released = null, $expand_attachments = null, $branch = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\JournalTransactionDto[]';
        $request = $this->journalTransactionGetAllJournalTransactionsRequest($greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $customer_supplier_start, $customer_supplier_end, $released, $expand_attachments, $branch, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'journalTransactionGetAllJournalTransactions'
     *
     * @param  string $greater_than_value (optional)
     * @param  string $last_modified_date_time System retrieved information for last modified date and time. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for date, time and state/condition. (optional)
     * @param  string $customer_supplier_start  (optional)
     * @param  string $customer_supplier_end (optional)
     * @param  int $released Filter by the date when the batch was released. (optional)
     * @param  bool $expand_attachments Set to true if you want to see all attachments regarding batch. (optional)
     * @param  string $branch Branch to query data for. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function journalTransactionGetAllJournalTransactionsRequest($greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $customer_supplier_start = null, $customer_supplier_end = null, $released = null, $expand_attachments = null, $branch = null, $page_number = null, $page_size = null)
    {

        $resourcePath = '/controller/api/v1/journaltransaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($greater_than_value !== null) {
            $queryParams['greaterThanValue'] = ObjectSerializer::toQueryValue($greater_than_value);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }
        // query params
        if ($customer_supplier_start !== null) {
            $queryParams['customerSupplierStart'] = ObjectSerializer::toQueryValue($customer_supplier_start);
        }
        // query params
        if ($customer_supplier_end !== null) {
            $queryParams['customerSupplierEnd'] = ObjectSerializer::toQueryValue($customer_supplier_end);
        }
        // query params
        if ($released !== null) {
            $queryParams['released'] = ObjectSerializer::toQueryValue($released);
        }
        // query params
        if ($expand_attachments !== null) {
            $queryParams['expandAttachments'] = ObjectSerializer::toQueryValue($expand_attachments);
        }
        // query params
        if ($branch !== null) {
            $queryParams['branch'] = ObjectSerializer::toQueryValue($branch);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumber
     *
     * Get a specific Journal Transaction. Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\JournalTransactionDto
     */
    public function journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumber($journal_transaction_number)
    {
        list($response) = $this->journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumberWithHttpInfo($journal_transaction_number);
        return $response;
    }

    /**
     * Operation journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumberWithHttpInfo
     *
     * Get a specific Journal Transaction. Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\JournalTransactionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumberWithHttpInfo($journal_transaction_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\JournalTransactionDto';
        $request = $this->journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumberRequest($journal_transaction_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\JournalTransactionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumberAsync
     *
     * Get a specific Journal Transaction. Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumberAsync($journal_transaction_number)
    {
        return $this->journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumberAsyncWithHttpInfo
     *
     * Get a specific Journal Transaction. Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\JournalTransactionDto';
        $request = $this->journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumberRequest($journal_transaction_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumber'
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumberRequest($journal_transaction_number)
    {
        // verify the required parameter 'journal_transaction_number' is set
        if ($journal_transaction_number === null || (is_array($journal_transaction_number) && count($journal_transaction_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_transaction_number when calling journalTransactionGetSpecificJournalTransactionsByjournalTransactionNumber'
            );
        }

        $resourcePath = '/controller/api/v1/journaltransaction/{journalTransactionNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($journal_transaction_number !== null) {
            $resourcePath = str_replace(
                '{' . 'journalTransactionNumber' . '}',
                ObjectSerializer::toPathValue($journal_transaction_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation journalTransactionPost
     *
     * Create a Journal Transaction.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to create (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function journalTransactionPost($journal_transaction)
    {
        list($response) = $this->journalTransactionPostWithHttpInfo($journal_transaction);
        return $response;
    }

    /**
     * Operation journalTransactionPostWithHttpInfo
     *
     * Create a Journal Transaction.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to create (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function journalTransactionPostWithHttpInfo($journal_transaction)
    {
        $returnType = 'object';
        $request = $this->journalTransactionPostRequest($journal_transaction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation journalTransactionPostAsync
     *
     * Create a Journal Transaction.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionPostAsync($journal_transaction)
    {
        return $this->journalTransactionPostAsyncWithHttpInfo($journal_transaction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation journalTransactionPostAsyncWithHttpInfo
     *
     * Create a Journal Transaction.   Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionPostAsyncWithHttpInfo($journal_transaction)
    {
        $returnType = 'object';
        $request = $this->journalTransactionPostRequest($journal_transaction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'journalTransactionPost'
     *
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function journalTransactionPostRequest($journal_transaction)
    {
        // verify the required parameter 'journal_transaction' is set
        if ($journal_transaction === null || (is_array($journal_transaction) && count($journal_transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_transaction when calling journalTransactionPost'
            );
        }

        $resourcePath = '/controller/api/v1/journaltransaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($journal_transaction)) {
            $_tempBody = $journal_transaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation journalTransactionPutByjournalTransactionNumber
     *
     * Update a Journal Transaction. Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to update (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function journalTransactionPutByjournalTransactionNumber($journal_transaction_number, $journal_transaction)
    {
        list($response) = $this->journalTransactionPutByjournalTransactionNumberWithHttpInfo($journal_transaction_number, $journal_transaction);
        return $response;
    }

    /**
     * Operation journalTransactionPutByjournalTransactionNumberWithHttpInfo
     *
     * Update a Journal Transaction. Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to update (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function journalTransactionPutByjournalTransactionNumberWithHttpInfo($journal_transaction_number, $journal_transaction)
    {
        $returnType = 'object';
        $request = $this->journalTransactionPutByjournalTransactionNumberRequest($journal_transaction_number, $journal_transaction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation journalTransactionPutByjournalTransactionNumberAsync
     *
     * Update a Journal Transaction. Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionPutByjournalTransactionNumberAsync($journal_transaction_number, $journal_transaction)
    {
        return $this->journalTransactionPutByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number, $journal_transaction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation journalTransactionPutByjournalTransactionNumberAsyncWithHttpInfo
     *
     * Update a Journal Transaction. Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionPutByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number, $journal_transaction)
    {
        $returnType = 'object';
        $request = $this->journalTransactionPutByjournalTransactionNumberRequest($journal_transaction_number, $journal_transaction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'journalTransactionPutByjournalTransactionNumber'
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function journalTransactionPutByjournalTransactionNumberRequest($journal_transaction_number, $journal_transaction)
    {
        // verify the required parameter 'journal_transaction_number' is set
        if ($journal_transaction_number === null || (is_array($journal_transaction_number) && count($journal_transaction_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_transaction_number when calling journalTransactionPutByjournalTransactionNumber'
            );
        }
        // verify the required parameter 'journal_transaction' is set
        if ($journal_transaction === null || (is_array($journal_transaction) && count($journal_transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_transaction when calling journalTransactionPutByjournalTransactionNumber'
            );
        }

        $resourcePath = '/controller/api/v1/journaltransaction/{journalTransactionNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($journal_transaction_number !== null) {
            $resourcePath = str_replace(
                '{' . 'journalTransactionNumber' . '}',
                ObjectSerializer::toPathValue($journal_transaction_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($journal_transaction)) {
            $_tempBody = $journal_transaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation journalTransactionReleaseJournalTransactionByjournalTransactionNumber
     *
     * Release journal transaction operation. Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Reference number of the journal transaction to be released (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\ReleaseJournalTransactionActionResultDto
     */
    public function journalTransactionReleaseJournalTransactionByjournalTransactionNumber($journal_transaction_number)
    {
        list($response) = $this->journalTransactionReleaseJournalTransactionByjournalTransactionNumberWithHttpInfo($journal_transaction_number);
        return $response;
    }

    /**
     * Operation journalTransactionReleaseJournalTransactionByjournalTransactionNumberWithHttpInfo
     *
     * Release journal transaction operation. Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Reference number of the journal transaction to be released (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\ReleaseJournalTransactionActionResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function journalTransactionReleaseJournalTransactionByjournalTransactionNumberWithHttpInfo($journal_transaction_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ReleaseJournalTransactionActionResultDto';
        $request = $this->journalTransactionReleaseJournalTransactionByjournalTransactionNumberRequest($journal_transaction_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\ReleaseJournalTransactionActionResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation journalTransactionReleaseJournalTransactionByjournalTransactionNumberAsync
     *
     * Release journal transaction operation. Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Reference number of the journal transaction to be released (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionReleaseJournalTransactionByjournalTransactionNumberAsync($journal_transaction_number)
    {
        return $this->journalTransactionReleaseJournalTransactionByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation journalTransactionReleaseJournalTransactionByjournalTransactionNumberAsyncWithHttpInfo
     *
     * Release journal transaction operation. Method is deprecated and will be removed in September 2020 - start using new method on journalTransactionV2
     *
     * @param  string $journal_transaction_number Reference number of the journal transaction to be released (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionReleaseJournalTransactionByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ReleaseJournalTransactionActionResultDto';
        $request = $this->journalTransactionReleaseJournalTransactionByjournalTransactionNumberRequest($journal_transaction_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'journalTransactionReleaseJournalTransactionByjournalTransactionNumber'
     *
     * @param  string $journal_transaction_number Reference number of the journal transaction to be released (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function journalTransactionReleaseJournalTransactionByjournalTransactionNumberRequest($journal_transaction_number)
    {
        // verify the required parameter 'journal_transaction_number' is set
        if ($journal_transaction_number === null || (is_array($journal_transaction_number) && count($journal_transaction_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_transaction_number when calling journalTransactionReleaseJournalTransactionByjournalTransactionNumber'
            );
        }

        $resourcePath = '/controller/api/v1/journaltransaction/{journalTransactionNumber}/action/release';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($journal_transaction_number !== null) {
            $resourcePath = str_replace(
                '{' . 'journalTransactionNumber' . '}',
                ObjectSerializer::toPathValue($journal_transaction_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
