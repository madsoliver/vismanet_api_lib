<?php
/**
 * EmployeeApi
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ekstralys\VismaNetApi\ApiException;
use Ekstralys\VismaNetApi\Configuration;
use Ekstralys\VismaNetApi\HeaderSelector;
use Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * EmployeeApi Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmployeeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation employeeChangeEmployeeNrActionByinternalId
     *
     * Updates the EmployeeNr for the specified employee
     *
     * @param  int $internal_id Internal identifier of the employee for which the employee Nr will be changed (required)
     * @param  \Ekstralys\VismaNetApi\Model\ChangeEmployeeNrActionDto $change_employee_nr_action_dto Defines the new employee Nr for the employee (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\ChangeEmployeeNrActionResultDto
     */
    public function employeeChangeEmployeeNrActionByinternalId($internal_id, $change_employee_nr_action_dto)
    {
        list($response) = $this->employeeChangeEmployeeNrActionByinternalIdWithHttpInfo($internal_id, $change_employee_nr_action_dto);
        return $response;
    }

    /**
     * Operation employeeChangeEmployeeNrActionByinternalIdWithHttpInfo
     *
     * Updates the EmployeeNr for the specified employee
     *
     * @param  int $internal_id Internal identifier of the employee for which the employee Nr will be changed (required)
     * @param  \Ekstralys\VismaNetApi\Model\ChangeEmployeeNrActionDto $change_employee_nr_action_dto Defines the new employee Nr for the employee (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\ChangeEmployeeNrActionResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeChangeEmployeeNrActionByinternalIdWithHttpInfo($internal_id, $change_employee_nr_action_dto)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ChangeEmployeeNrActionResultDto';
        $request = $this->employeeChangeEmployeeNrActionByinternalIdRequest($internal_id, $change_employee_nr_action_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\ChangeEmployeeNrActionResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeChangeEmployeeNrActionByinternalIdAsync
     *
     * Updates the EmployeeNr for the specified employee
     *
     * @param  int $internal_id Internal identifier of the employee for which the employee Nr will be changed (required)
     * @param  \Ekstralys\VismaNetApi\Model\ChangeEmployeeNrActionDto $change_employee_nr_action_dto Defines the new employee Nr for the employee (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeChangeEmployeeNrActionByinternalIdAsync($internal_id, $change_employee_nr_action_dto)
    {
        return $this->employeeChangeEmployeeNrActionByinternalIdAsyncWithHttpInfo($internal_id, $change_employee_nr_action_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeChangeEmployeeNrActionByinternalIdAsyncWithHttpInfo
     *
     * Updates the EmployeeNr for the specified employee
     *
     * @param  int $internal_id Internal identifier of the employee for which the employee Nr will be changed (required)
     * @param  \Ekstralys\VismaNetApi\Model\ChangeEmployeeNrActionDto $change_employee_nr_action_dto Defines the new employee Nr for the employee (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeChangeEmployeeNrActionByinternalIdAsyncWithHttpInfo($internal_id, $change_employee_nr_action_dto)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ChangeEmployeeNrActionResultDto';
        $request = $this->employeeChangeEmployeeNrActionByinternalIdRequest($internal_id, $change_employee_nr_action_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeChangeEmployeeNrActionByinternalId'
     *
     * @param  int $internal_id Internal identifier of the employee for which the employee Nr will be changed (required)
     * @param  \Ekstralys\VismaNetApi\Model\ChangeEmployeeNrActionDto $change_employee_nr_action_dto Defines the new employee Nr for the employee (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function employeeChangeEmployeeNrActionByinternalIdRequest($internal_id, $change_employee_nr_action_dto)
    {
        // verify the required parameter 'internal_id' is set
        if ($internal_id === null || (is_array($internal_id) && count($internal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $internal_id when calling employeeChangeEmployeeNrActionByinternalId'
            );
        }
        // verify the required parameter 'change_employee_nr_action_dto' is set
        if ($change_employee_nr_action_dto === null || (is_array($change_employee_nr_action_dto) && count($change_employee_nr_action_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $change_employee_nr_action_dto when calling employeeChangeEmployeeNrActionByinternalId'
            );
        }

        $resourcePath = '/controller/api/v1/employee/action/changeEmployeeCd/{internalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($internal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'internalId' . '}',
                ObjectSerializer::toPathValue($internal_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($change_employee_nr_action_dto)) {
            $_tempBody = $change_employee_nr_action_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeGetAllEmployees
     *
     * Get a range of employees - ScreenId=EP203000
     *
     * @param  bool $linked_to_user If the employee is linked to a user. (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\EmployeeDto[]
     */
    public function employeeGetAllEmployees($linked_to_user = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        list($response) = $this->employeeGetAllEmployeesWithHttpInfo($linked_to_user, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size);
        return $response;
    }

    /**
     * Operation employeeGetAllEmployeesWithHttpInfo
     *
     * Get a range of employees - ScreenId=EP203000
     *
     * @param  bool $linked_to_user If the employee is linked to a user. (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\EmployeeDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeGetAllEmployeesWithHttpInfo($linked_to_user = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\EmployeeDto[]';
        $request = $this->employeeGetAllEmployeesRequest($linked_to_user, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\EmployeeDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeGetAllEmployeesAsync
     *
     * Get a range of employees - ScreenId=EP203000
     *
     * @param  bool $linked_to_user If the employee is linked to a user. (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeGetAllEmployeesAsync($linked_to_user = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        return $this->employeeGetAllEmployeesAsyncWithHttpInfo($linked_to_user, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeGetAllEmployeesAsyncWithHttpInfo
     *
     * Get a range of employees - ScreenId=EP203000
     *
     * @param  bool $linked_to_user If the employee is linked to a user. (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeGetAllEmployeesAsyncWithHttpInfo($linked_to_user = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\EmployeeDto[]';
        $request = $this->employeeGetAllEmployeesRequest($linked_to_user, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeGetAllEmployees'
     *
     * @param  bool $linked_to_user If the employee is linked to a user. (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function employeeGetAllEmployeesRequest($linked_to_user = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {

        $resourcePath = '/controller/api/v1/employee';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($linked_to_user !== null) {
            $queryParams['linkedToUser'] = ObjectSerializer::toQueryValue($linked_to_user);
        }
        // query params
        if ($greater_than_value !== null) {
            $queryParams['greaterThanValue'] = ObjectSerializer::toQueryValue($greater_than_value);
        }
        // query params
        if ($number_to_read !== null) {
            $queryParams['numberToRead'] = ObjectSerializer::toQueryValue($number_to_read);
        }
        // query params
        if ($skip_records !== null) {
            $queryParams['skipRecords'] = ObjectSerializer::toQueryValue($skip_records);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeGetEmployeeByemployeeCd
     *
     * Get a specific employee
     *
     * @param  string $employee_cd Identifies the employee (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\EmployeeDto
     */
    public function employeeGetEmployeeByemployeeCd($employee_cd)
    {
        list($response) = $this->employeeGetEmployeeByemployeeCdWithHttpInfo($employee_cd);
        return $response;
    }

    /**
     * Operation employeeGetEmployeeByemployeeCdWithHttpInfo
     *
     * Get a specific employee
     *
     * @param  string $employee_cd Identifies the employee (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\EmployeeDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeGetEmployeeByemployeeCdWithHttpInfo($employee_cd)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\EmployeeDto';
        $request = $this->employeeGetEmployeeByemployeeCdRequest($employee_cd);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\EmployeeDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeGetEmployeeByemployeeCdAsync
     *
     * Get a specific employee
     *
     * @param  string $employee_cd Identifies the employee (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeGetEmployeeByemployeeCdAsync($employee_cd)
    {
        return $this->employeeGetEmployeeByemployeeCdAsyncWithHttpInfo($employee_cd)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeGetEmployeeByemployeeCdAsyncWithHttpInfo
     *
     * Get a specific employee
     *
     * @param  string $employee_cd Identifies the employee (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeGetEmployeeByemployeeCdAsyncWithHttpInfo($employee_cd)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\EmployeeDto';
        $request = $this->employeeGetEmployeeByemployeeCdRequest($employee_cd);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeGetEmployeeByemployeeCd'
     *
     * @param  string $employee_cd Identifies the employee (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function employeeGetEmployeeByemployeeCdRequest($employee_cd)
    {
        // verify the required parameter 'employee_cd' is set
        if ($employee_cd === null || (is_array($employee_cd) && count($employee_cd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_cd when calling employeeGetEmployeeByemployeeCd'
            );
        }

        $resourcePath = '/controller/api/v1/employee/{employeeCd}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($employee_cd !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeCd' . '}',
                ObjectSerializer::toPathValue($employee_cd),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeGetEmployeeExpenseClaimsByemployeeCd
     *
     * Get expense claims for a specific employee
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $status The status of the document. (optional)
     * @param  \DateTime $date The date of the document (optional)
     * @param  string $customer The customer from the document (optional)
     * @param  string $department_id Identifies the department (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\ExpenseClaimDto[]
     */
    public function employeeGetEmployeeExpenseClaimsByemployeeCd($employee_cd, $status = null, $date = null, $customer = null, $department_id = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        list($response) = $this->employeeGetEmployeeExpenseClaimsByemployeeCdWithHttpInfo($employee_cd, $status, $date, $customer, $department_id, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition);
        return $response;
    }

    /**
     * Operation employeeGetEmployeeExpenseClaimsByemployeeCdWithHttpInfo
     *
     * Get expense claims for a specific employee
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $status The status of the document. (optional)
     * @param  \DateTime $date The date of the document (optional)
     * @param  string $customer The customer from the document (optional)
     * @param  string $department_id Identifies the department (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\ExpenseClaimDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeGetEmployeeExpenseClaimsByemployeeCdWithHttpInfo($employee_cd, $status = null, $date = null, $customer = null, $department_id = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ExpenseClaimDto[]';
        $request = $this->employeeGetEmployeeExpenseClaimsByemployeeCdRequest($employee_cd, $status, $date, $customer, $department_id, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\ExpenseClaimDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeGetEmployeeExpenseClaimsByemployeeCdAsync
     *
     * Get expense claims for a specific employee
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $status The status of the document. (optional)
     * @param  \DateTime $date The date of the document (optional)
     * @param  string $customer The customer from the document (optional)
     * @param  string $department_id Identifies the department (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeGetEmployeeExpenseClaimsByemployeeCdAsync($employee_cd, $status = null, $date = null, $customer = null, $department_id = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        return $this->employeeGetEmployeeExpenseClaimsByemployeeCdAsyncWithHttpInfo($employee_cd, $status, $date, $customer, $department_id, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeGetEmployeeExpenseClaimsByemployeeCdAsyncWithHttpInfo
     *
     * Get expense claims for a specific employee
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $status The status of the document. (optional)
     * @param  \DateTime $date The date of the document (optional)
     * @param  string $customer The customer from the document (optional)
     * @param  string $department_id Identifies the department (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeGetEmployeeExpenseClaimsByemployeeCdAsyncWithHttpInfo($employee_cd, $status = null, $date = null, $customer = null, $department_id = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ExpenseClaimDto[]';
        $request = $this->employeeGetEmployeeExpenseClaimsByemployeeCdRequest($employee_cd, $status, $date, $customer, $department_id, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeGetEmployeeExpenseClaimsByemployeeCd'
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $status The status of the document. (optional)
     * @param  \DateTime $date The date of the document (optional)
     * @param  string $customer The customer from the document (optional)
     * @param  string $department_id Identifies the department (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function employeeGetEmployeeExpenseClaimsByemployeeCdRequest($employee_cd, $status = null, $date = null, $customer = null, $department_id = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        // verify the required parameter 'employee_cd' is set
        if ($employee_cd === null || (is_array($employee_cd) && count($employee_cd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_cd when calling employeeGetEmployeeExpenseClaimsByemployeeCd'
            );
        }

        $resourcePath = '/controller/api/v1/employee/{employeeCd}/expenseClaim';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($date !== null) {
            $queryParams['date'] = ObjectSerializer::toQueryValue($date);
        }
        // query params
        if ($customer !== null) {
            $queryParams['customer'] = ObjectSerializer::toQueryValue($customer);
        }
        // query params
        if ($department_id !== null) {
            $queryParams['departmentId'] = ObjectSerializer::toQueryValue($department_id);
        }
        // query params
        if ($greater_than_value !== null) {
            $queryParams['greaterThanValue'] = ObjectSerializer::toQueryValue($greater_than_value);
        }
        // query params
        if ($number_to_read !== null) {
            $queryParams['numberToRead'] = ObjectSerializer::toQueryValue($number_to_read);
        }
        // query params
        if ($skip_records !== null) {
            $queryParams['skipRecords'] = ObjectSerializer::toQueryValue($skip_records);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }

        // path params
        if ($employee_cd !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeCd' . '}',
                ObjectSerializer::toPathValue($employee_cd),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeGetEmployeeExpenseReceiptsByemployeeCd
     *
     * Get expense receipts for a specific employee
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $date The date of the document (optional)
     * @param  string $date_condition date_condition (optional)
     * @param  string $inventory Identifies the inventory item from the document (optional)
     * @param  string $project Identifies the project from the document (optional)
     * @param  string $claimed_by Identifies the employee from the document (optional)
     * @param  string $project_task Filter on Task ID. (optional)
     * @param  bool $invoiceable If the document is invoiceable (optional)
     * @param  string $status The status of the document. (optional)
     * @param  string $customer Identifies the customer from the document (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\ExpenseReceiptDto[]
     */
    public function employeeGetEmployeeExpenseReceiptsByemployeeCd($employee_cd, $date = null, $date_condition = null, $inventory = null, $project = null, $claimed_by = null, $project_task = null, $invoiceable = null, $status = null, $customer = null)
    {
        list($response) = $this->employeeGetEmployeeExpenseReceiptsByemployeeCdWithHttpInfo($employee_cd, $date, $date_condition, $inventory, $project, $claimed_by, $project_task, $invoiceable, $status, $customer);
        return $response;
    }

    /**
     * Operation employeeGetEmployeeExpenseReceiptsByemployeeCdWithHttpInfo
     *
     * Get expense receipts for a specific employee
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $date The date of the document (optional)
     * @param  string $date_condition (optional)
     * @param  string $inventory Identifies the inventory item from the document (optional)
     * @param  string $project Identifies the project from the document (optional)
     * @param  string $claimed_by Identifies the employee from the document (optional)
     * @param  string $project_task Filter on Task ID. (optional)
     * @param  bool $invoiceable If the document is invoiceable (optional)
     * @param  string $status The status of the document. (optional)
     * @param  string $customer Identifies the customer from the document (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\ExpenseReceiptDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeGetEmployeeExpenseReceiptsByemployeeCdWithHttpInfo($employee_cd, $date = null, $date_condition = null, $inventory = null, $project = null, $claimed_by = null, $project_task = null, $invoiceable = null, $status = null, $customer = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ExpenseReceiptDto[]';
        $request = $this->employeeGetEmployeeExpenseReceiptsByemployeeCdRequest($employee_cd, $date, $date_condition, $inventory, $project, $claimed_by, $project_task, $invoiceable, $status, $customer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\ExpenseReceiptDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeGetEmployeeExpenseReceiptsByemployeeCdAsync
     *
     * Get expense receipts for a specific employee
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $date The date of the document (optional)
     * @param  string $date_condition (optional)
     * @param  string $inventory Identifies the inventory item from the document (optional)
     * @param  string $project Identifies the project from the document (optional)
     * @param  string $claimed_by Identifies the employee from the document (optional)
     * @param  string $project_task Filter on Task ID. (optional)
     * @param  bool $invoiceable If the document is invoiceable (optional)
     * @param  string $status The status of the document. (optional)
     * @param  string $customer Identifies the customer from the document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeGetEmployeeExpenseReceiptsByemployeeCdAsync($employee_cd, $date = null, $date_condition = null, $inventory = null, $project = null, $claimed_by = null, $project_task = null, $invoiceable = null, $status = null, $customer = null)
    {
        return $this->employeeGetEmployeeExpenseReceiptsByemployeeCdAsyncWithHttpInfo($employee_cd, $date, $date_condition, $inventory, $project, $claimed_by, $project_task, $invoiceable, $status, $customer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeGetEmployeeExpenseReceiptsByemployeeCdAsyncWithHttpInfo
     *
     * Get expense receipts for a specific employee
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $date The date of the document (optional)
     * @param  string $date_condition (optional)
     * @param  string $inventory Identifies the inventory item from the document (optional)
     * @param  string $project Identifies the project from the document (optional)
     * @param  string $claimed_by Identifies the employee from the document (optional)
     * @param  string $project_task Filter on Task ID. (optional)
     * @param  bool $invoiceable If the document is invoiceable (optional)
     * @param  string $status The status of the document. (optional)
     * @param  string $customer Identifies the customer from the document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeGetEmployeeExpenseReceiptsByemployeeCdAsyncWithHttpInfo($employee_cd, $date = null, $date_condition = null, $inventory = null, $project = null, $claimed_by = null, $project_task = null, $invoiceable = null, $status = null, $customer = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ExpenseReceiptDto[]';
        $request = $this->employeeGetEmployeeExpenseReceiptsByemployeeCdRequest($employee_cd, $date, $date_condition, $inventory, $project, $claimed_by, $project_task, $invoiceable, $status, $customer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeGetEmployeeExpenseReceiptsByemployeeCd'
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $date The date of the document (optional)
     * @param  string $date_condition (optional)
     * @param  string $inventory Identifies the inventory item from the document (optional)
     * @param  string $project Identifies the project from the document (optional)
     * @param  string $claimed_by Identifies the employee from the document (optional)
     * @param  string $project_task Filter on Task ID. (optional)
     * @param  bool $invoiceable If the document is invoiceable (optional)
     * @param  string $status The status of the document. (optional)
     * @param  string $customer Identifies the customer from the document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function employeeGetEmployeeExpenseReceiptsByemployeeCdRequest($employee_cd, $date = null, $date_condition = null, $inventory = null, $project = null, $claimed_by = null, $project_task = null, $invoiceable = null, $status = null, $customer = null)
    {
        // verify the required parameter 'employee_cd' is set
        if ($employee_cd === null || (is_array($employee_cd) && count($employee_cd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_cd when calling employeeGetEmployeeExpenseReceiptsByemployeeCd'
            );
        }

        $resourcePath = '/controller/api/v1/employee/{employeeCd}/expenseReceipt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($date !== null) {
            $queryParams['date'] = ObjectSerializer::toQueryValue($date);
        }
        // query params
        if ($date_condition !== null) {
            $queryParams['dateCondition'] = ObjectSerializer::toQueryValue($date_condition);
        }
        // query params
        if ($inventory !== null) {
            $queryParams['inventory'] = ObjectSerializer::toQueryValue($inventory);
        }
        // query params
        if ($project !== null) {
            $queryParams['project'] = ObjectSerializer::toQueryValue($project);
        }
        // query params
        if ($claimed_by !== null) {
            $queryParams['claimedBy'] = ObjectSerializer::toQueryValue($claimed_by);
        }
        // query params
        if ($project_task !== null) {
            $queryParams['projectTask'] = ObjectSerializer::toQueryValue($project_task);
        }
        // query params
        if ($invoiceable !== null) {
            $queryParams['invoiceable'] = ObjectSerializer::toQueryValue($invoiceable);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($customer !== null) {
            $queryParams['customer'] = ObjectSerializer::toQueryValue($customer);
        }

        // path params
        if ($employee_cd !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeCd' . '}',
                ObjectSerializer::toPathValue($employee_cd),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeGetEmployeeTimeCardsByemployeeCd
     *
     * Get a specific employee time cards
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $status The status of the document. (optional)
     * @param  string $week Identifies the week number of the time card (optional)
     * @param  string $type Identifies the type of the time card (Normal, Corrected, NormalCorrected) (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\TimeCardDto[]
     */
    public function employeeGetEmployeeTimeCardsByemployeeCd($employee_cd, $status = null, $week = null, $type = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        list($response) = $this->employeeGetEmployeeTimeCardsByemployeeCdWithHttpInfo($employee_cd, $status, $week, $type, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition);
        return $response;
    }

    /**
     * Operation employeeGetEmployeeTimeCardsByemployeeCdWithHttpInfo
     *
     * Get a specific employee time cards
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $status The status of the document. (optional)
     * @param  string $week Identifies the week number of the time card (optional)
     * @param  string $type Identifies the type of the time card (Normal, Corrected, NormalCorrected) (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\TimeCardDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeGetEmployeeTimeCardsByemployeeCdWithHttpInfo($employee_cd, $status = null, $week = null, $type = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\TimeCardDto[]';
        $request = $this->employeeGetEmployeeTimeCardsByemployeeCdRequest($employee_cd, $status, $week, $type, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\TimeCardDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeGetEmployeeTimeCardsByemployeeCdAsync
     *
     * Get a specific employee time cards
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $status The status of the document. (optional)
     * @param  string $week Identifies the week number of the time card (optional)
     * @param  string $type Identifies the type of the time card (Normal, Corrected, NormalCorrected) (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeGetEmployeeTimeCardsByemployeeCdAsync($employee_cd, $status = null, $week = null, $type = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        return $this->employeeGetEmployeeTimeCardsByemployeeCdAsyncWithHttpInfo($employee_cd, $status, $week, $type, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeGetEmployeeTimeCardsByemployeeCdAsyncWithHttpInfo
     *
     * Get a specific employee time cards
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $status The status of the document. (optional)
     * @param  string $week Identifies the week number of the time card (optional)
     * @param  string $type Identifies the type of the time card (Normal, Corrected, NormalCorrected) (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeGetEmployeeTimeCardsByemployeeCdAsyncWithHttpInfo($employee_cd, $status = null, $week = null, $type = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\TimeCardDto[]';
        $request = $this->employeeGetEmployeeTimeCardsByemployeeCdRequest($employee_cd, $status, $week, $type, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeGetEmployeeTimeCardsByemployeeCd'
     *
     * @param  string $employee_cd Identifies the employee (required)
     * @param  string $status The status of the document. (optional)
     * @param  string $week Identifies the week number of the time card (optional)
     * @param  string $type Identifies the type of the time card (Normal, Corrected, NormalCorrected) (optional)
     * @param  string $greater_than_value Greater-than value. The item which is the object for this, varies from API to API. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  string $last_modified_date_time System-generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System-retrieved information for state/condition. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function employeeGetEmployeeTimeCardsByemployeeCdRequest($employee_cd, $status = null, $week = null, $type = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        // verify the required parameter 'employee_cd' is set
        if ($employee_cd === null || (is_array($employee_cd) && count($employee_cd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_cd when calling employeeGetEmployeeTimeCardsByemployeeCd'
            );
        }

        $resourcePath = '/controller/api/v1/employee/{employeeCd}/timecards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($week !== null) {
            $queryParams['week'] = ObjectSerializer::toQueryValue($week);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($greater_than_value !== null) {
            $queryParams['greaterThanValue'] = ObjectSerializer::toQueryValue($greater_than_value);
        }
        // query params
        if ($number_to_read !== null) {
            $queryParams['numberToRead'] = ObjectSerializer::toQueryValue($number_to_read);
        }
        // query params
        if ($skip_records !== null) {
            $queryParams['skipRecords'] = ObjectSerializer::toQueryValue($skip_records);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }

        // path params
        if ($employee_cd !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeCd' . '}',
                ObjectSerializer::toPathValue($employee_cd),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
