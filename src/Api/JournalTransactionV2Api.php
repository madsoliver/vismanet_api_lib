<?php
/**
 * JournalTransactionV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ekstralys\VismaNetApi\ApiException;
use Ekstralys\VismaNetApi\Configuration;
use Ekstralys\VismaNetApi\HeaderSelector;
use Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * JournalTransactionV2Api Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JournalTransactionV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumber
     *
     * Creates an attachment and associates it with an journalTransaction. If the file already exists, a new revision is created.
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumber($journal_transaction_number)
    {
        list($response) = $this->journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumberWithHttpInfo($journal_transaction_number);
        return $response;
    }

    /**
     * Operation journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumberWithHttpInfo
     *
     * Creates an attachment and associates it with an journalTransaction. If the file already exists, a new revision is created.
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumberWithHttpInfo($journal_transaction_number)
    {
        $returnType = 'object';
        $request = $this->journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumberRequest($journal_transaction_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumberAsync
     *
     * Creates an attachment and associates it with an journalTransaction. If the file already exists, a new revision is created.
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumberAsync($journal_transaction_number)
    {
        return $this->journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumberAsyncWithHttpInfo
     *
     * Creates an attachment and associates it with an journalTransaction. If the file already exists, a new revision is created.
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number)
    {
        $returnType = 'object';
        $request = $this->journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumberRequest($journal_transaction_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumber'
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumberRequest($journal_transaction_number)
    {
        // verify the required parameter 'journal_transaction_number' is set
        if ($journal_transaction_number === null || (is_array($journal_transaction_number) && count($journal_transaction_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_transaction_number when calling journalTransactionV2CreateHeaderAttachmentByjournalTransactionNumber'
            );
        }

        $resourcePath = '/controller/api/v2/journaltransaction/{journalTransactionNumber}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($journal_transaction_number !== null) {
            $resourcePath = str_replace(
                '{' . 'journalTransactionNumber' . '}',
                ObjectSerializer::toPathValue($journal_transaction_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumber
     *
     * Creates an attachment and associates it with a certain journalTransaction line. If the file already exists, a new revision is created.
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumber($journal_transaction_number, $line_number)
    {
        list($response) = $this->journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumberWithHttpInfo($journal_transaction_number, $line_number);
        return $response;
    }

    /**
     * Operation journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumberWithHttpInfo
     *
     * Creates an attachment and associates it with a certain journalTransaction line. If the file already exists, a new revision is created.
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumberWithHttpInfo($journal_transaction_number, $line_number)
    {
        $returnType = 'object';
        $request = $this->journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumberRequest($journal_transaction_number, $line_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumberAsync
     *
     * Creates an attachment and associates it with a certain journalTransaction line. If the file already exists, a new revision is created.
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumberAsync($journal_transaction_number, $line_number)
    {
        return $this->journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumberAsyncWithHttpInfo($journal_transaction_number, $line_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumberAsyncWithHttpInfo
     *
     * Creates an attachment and associates it with a certain journalTransaction line. If the file already exists, a new revision is created.
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumberAsyncWithHttpInfo($journal_transaction_number, $line_number)
    {
        $returnType = 'object';
        $request = $this->journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumberRequest($journal_transaction_number, $line_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumber'
     *
     * @param  string $journal_transaction_number Identifies the journalTransaction (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumberRequest($journal_transaction_number, $line_number)
    {
        // verify the required parameter 'journal_transaction_number' is set
        if ($journal_transaction_number === null || (is_array($journal_transaction_number) && count($journal_transaction_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_transaction_number when calling journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumber'
            );
        }
        // verify the required parameter 'line_number' is set
        if ($line_number === null || (is_array($line_number) && count($line_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_number when calling journalTransactionV2CreateLineAttachmentByjournalTransactionNumberlineNumber'
            );
        }

        $resourcePath = '/controller/api/v2/journaltransaction/{journalTransactionNumber}/{lineNumber}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($journal_transaction_number !== null) {
            $resourcePath = str_replace(
                '{' . 'journalTransactionNumber' . '}',
                ObjectSerializer::toPathValue($journal_transaction_number),
                $resourcePath
            );
        }
        // path params
        if ($line_number !== null) {
            $resourcePath = str_replace(
                '{' . 'lineNumber' . '}',
                ObjectSerializer::toPathValue($line_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation journalTransactionV2GetAllJournalTransactions
     *
     * Get a range of Journal Transactions - ScreenId=GL301000.   On this particular endpoint, pagesize and totalcount denotes number of journaltransaction lines.   When using pagination, the transactions for one specific batch can be split into several responses.   Please use a page size lower or equal to the allowed max page size which is returned under metadata.   If pagesize is greater than the max page size, it will be limited to max page size.
     *
     * @param  string $period_id Financial Period to query data for. Mandatory if &#39;LastModifiedDateTime&#39; not provided. Format: YYYYPP (optional)
     * @param  string $last_modified_date_time When setting this parameter there will be exported only the batches changed or created since the provided date and time.   Mandatory if &#39;PeriodId&#39; is not provided.   Format: yyyy-MM-dd HH:mm:ss (optional)
     * @param  string $module Module to query data for. Allowed values: GL, AP, AR, CM, CA, IN, DR, FA, PM (optional)
     * @param  bool $released_batch If true there will be exported the batches having Released flag on true.   If false there will be exported the batches having Released flag on false.   If not set no filtering based on Released flag is applied (optional)
     * @param  bool $expand_attachments If true there will be included all attachments regarding batch. Default on false (optional)
     * @param  string $branch Branch to query data for. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\JournalTransactionDto[]
     */
    public function journalTransactionV2GetAllJournalTransactions($period_id = null, $last_modified_date_time = null, $module = null, $released_batch = null, $expand_attachments = null, $branch = null, $page_number = null, $page_size = null)
    {
        list($response) = $this->journalTransactionV2GetAllJournalTransactionsWithHttpInfo($period_id, $last_modified_date_time, $module, $released_batch, $expand_attachments, $branch, $page_number, $page_size);
        return $response;
    }

    /**
     * Operation journalTransactionV2GetAllJournalTransactionsWithHttpInfo
     *
     * Get a range of Journal Transactions - ScreenId=GL301000.   On this particular endpoint, pagesize and totalcount denotes number of journaltransaction lines.   When using pagination, the transactions for one specific batch can be split into several responses.   Please use a page size lower or equal to the allowed max page size which is returned under metadata.   If pagesize is greater than the max page size, it will be limited to max page size.
     *
     * @param  string $period_id Financial Period to query data for. Mandatory if &#39;LastModifiedDateTime&#39; not provided. Format: YYYYPP (optional)
     * @param  string $last_modified_date_time When setting this parameter there will be exported only the batches changed or created since the provided date and time.   Mandatory if &#39;PeriodId&#39; is not provided.   Format: yyyy-MM-dd HH:mm:ss (optional)
     * @param  string $module Module to query data for. Allowed values: GL, AP, AR, CM, CA, IN, DR, FA, PM (optional)
     * @param  bool $released_batch If true there will be exported the batches having Released flag on true.   If false there will be exported the batches having Released flag on false.   If not set no filtering based on Released flag is applied (optional)
     * @param  bool $expand_attachments If true there will be included all attachments regarding batch. Default on false (optional)
     * @param  string $branch Branch to query data for. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\JournalTransactionDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function journalTransactionV2GetAllJournalTransactionsWithHttpInfo($period_id = null, $last_modified_date_time = null, $module = null, $released_batch = null, $expand_attachments = null, $branch = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\JournalTransactionDto[]';
        $request = $this->journalTransactionV2GetAllJournalTransactionsRequest($period_id, $last_modified_date_time, $module, $released_batch, $expand_attachments, $branch, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\JournalTransactionDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation journalTransactionV2GetAllJournalTransactionsAsync
     *
     * Get a range of Journal Transactions - ScreenId=GL301000.   On this particular endpoint, pagesize and totalcount denotes number of journaltransaction lines.   When using pagination, the transactions for one specific batch can be split into several responses.   Please use a page size lower or equal to the allowed max page size which is returned under metadata.   If pagesize is greater than the max page size, it will be limited to max page size.
     *
     * @param  string $period_id Financial Period to query data for. Mandatory if &#39;LastModifiedDateTime&#39; not provided. Format: YYYYPP (optional)
     * @param  string $last_modified_date_time When setting this parameter there will be exported only the batches changed or created since the provided date and time.   Mandatory if &#39;PeriodId&#39; is not provided.   Format: yyyy-MM-dd HH:mm:ss (optional)
     * @param  string $module Module to query data for. Allowed values: GL, AP, AR, CM, CA, IN, DR, FA, PM (optional)
     * @param  bool $released_batch If true there will be exported the batches having Released flag on true.   If false there will be exported the batches having Released flag on false.   If not set no filtering based on Released flag is applied (optional)
     * @param  bool $expand_attachments If true there will be included all attachments regarding batch. Default on false (optional)
     * @param  string $branch Branch to query data for. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionV2GetAllJournalTransactionsAsync($period_id = null, $last_modified_date_time = null, $module = null, $released_batch = null, $expand_attachments = null, $branch = null, $page_number = null, $page_size = null)
    {
        return $this->journalTransactionV2GetAllJournalTransactionsAsyncWithHttpInfo($period_id, $last_modified_date_time, $module, $released_batch, $expand_attachments, $branch, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation journalTransactionV2GetAllJournalTransactionsAsyncWithHttpInfo
     *
     * Get a range of Journal Transactions - ScreenId=GL301000.   On this particular endpoint, pagesize and totalcount denotes number of journaltransaction lines.   When using pagination, the transactions for one specific batch can be split into several responses.   Please use a page size lower or equal to the allowed max page size which is returned under metadata.   If pagesize is greater than the max page size, it will be limited to max page size.
     *
     * @param  string $period_id Financial Period to query data for. Mandatory if &#39;LastModifiedDateTime&#39; not provided. Format: YYYYPP (optional)
     * @param  string $last_modified_date_time When setting this parameter there will be exported only the batches changed or created since the provided date and time.   Mandatory if &#39;PeriodId&#39; is not provided.   Format: yyyy-MM-dd HH:mm:ss (optional)
     * @param  string $module Module to query data for. Allowed values: GL, AP, AR, CM, CA, IN, DR, FA, PM (optional)
     * @param  bool $released_batch If true there will be exported the batches having Released flag on true.   If false there will be exported the batches having Released flag on false.   If not set no filtering based on Released flag is applied (optional)
     * @param  bool $expand_attachments If true there will be included all attachments regarding batch. Default on false (optional)
     * @param  string $branch Branch to query data for. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionV2GetAllJournalTransactionsAsyncWithHttpInfo($period_id = null, $last_modified_date_time = null, $module = null, $released_batch = null, $expand_attachments = null, $branch = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\JournalTransactionDto[]';
        $request = $this->journalTransactionV2GetAllJournalTransactionsRequest($period_id, $last_modified_date_time, $module, $released_batch, $expand_attachments, $branch, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'journalTransactionV2GetAllJournalTransactions'
     *
     * @param  string $period_id Financial Period to query data for. Mandatory if &#39;LastModifiedDateTime&#39; not provided. Format: YYYYPP (optional)
     * @param  string $last_modified_date_time When setting this parameter there will be exported only the batches changed or created since the provided date and time.   Mandatory if &#39;PeriodId&#39; is not provided.   Format: yyyy-MM-dd HH:mm:ss (optional)
     * @param  string $module Module to query data for. Allowed values: GL, AP, AR, CM, CA, IN, DR, FA, PM (optional)
     * @param  bool $released_batch If true there will be exported the batches having Released flag on true.   If false there will be exported the batches having Released flag on false.   If not set no filtering based on Released flag is applied (optional)
     * @param  bool $expand_attachments If true there will be included all attachments regarding batch. Default on false (optional)
     * @param  string $branch Branch to query data for. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function journalTransactionV2GetAllJournalTransactionsRequest($period_id = null, $last_modified_date_time = null, $module = null, $released_batch = null, $expand_attachments = null, $branch = null, $page_number = null, $page_size = null)
    {

        $resourcePath = '/controller/api/v2/journaltransaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($period_id !== null) {
            $queryParams['periodId'] = ObjectSerializer::toQueryValue($period_id);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($module !== null) {
            $queryParams['module'] = ObjectSerializer::toQueryValue($module);
        }
        // query params
        if ($released_batch !== null) {
            $queryParams['releasedBatch'] = ObjectSerializer::toQueryValue($released_batch);
        }
        // query params
        if ($expand_attachments !== null) {
            $queryParams['expandAttachments'] = ObjectSerializer::toQueryValue($expand_attachments);
        }
        // query params
        if ($branch !== null) {
            $queryParams['branch'] = ObjectSerializer::toQueryValue($branch);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumber
     *
     * Get a specific Journal Transaction
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\JournalTransactionDto
     */
    public function journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumber($journal_transaction_number)
    {
        list($response) = $this->journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberWithHttpInfo($journal_transaction_number);
        return $response;
    }

    /**
     * Operation journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberWithHttpInfo
     *
     * Get a specific Journal Transaction
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\JournalTransactionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberWithHttpInfo($journal_transaction_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\JournalTransactionDto';
        $request = $this->journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberRequest($journal_transaction_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\JournalTransactionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberAsync
     *
     * Get a specific Journal Transaction
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberAsync($journal_transaction_number)
    {
        return $this->journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberAsyncWithHttpInfo
     *
     * Get a specific Journal Transaction
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\JournalTransactionDto';
        $request = $this->journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberRequest($journal_transaction_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumber'
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumberRequest($journal_transaction_number)
    {
        // verify the required parameter 'journal_transaction_number' is set
        if ($journal_transaction_number === null || (is_array($journal_transaction_number) && count($journal_transaction_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_transaction_number when calling journalTransactionV2GetSpecificJournalTransactionsByjournalTransactionNumber'
            );
        }

        $resourcePath = '/controller/api/v2/journaltransaction/{journalTransactionNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($journal_transaction_number !== null) {
            $resourcePath = str_replace(
                '{' . 'journalTransactionNumber' . '}',
                ObjectSerializer::toPathValue($journal_transaction_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation journalTransactionV2Post
     *
     * Create a Journal Transaction
     *
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to create (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function journalTransactionV2Post($journal_transaction)
    {
        list($response) = $this->journalTransactionV2PostWithHttpInfo($journal_transaction);
        return $response;
    }

    /**
     * Operation journalTransactionV2PostWithHttpInfo
     *
     * Create a Journal Transaction
     *
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to create (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function journalTransactionV2PostWithHttpInfo($journal_transaction)
    {
        $returnType = 'object';
        $request = $this->journalTransactionV2PostRequest($journal_transaction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation journalTransactionV2PostAsync
     *
     * Create a Journal Transaction
     *
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionV2PostAsync($journal_transaction)
    {
        return $this->journalTransactionV2PostAsyncWithHttpInfo($journal_transaction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation journalTransactionV2PostAsyncWithHttpInfo
     *
     * Create a Journal Transaction
     *
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionV2PostAsyncWithHttpInfo($journal_transaction)
    {
        $returnType = 'object';
        $request = $this->journalTransactionV2PostRequest($journal_transaction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'journalTransactionV2Post'
     *
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function journalTransactionV2PostRequest($journal_transaction)
    {
        // verify the required parameter 'journal_transaction' is set
        if ($journal_transaction === null || (is_array($journal_transaction) && count($journal_transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_transaction when calling journalTransactionV2Post'
            );
        }

        $resourcePath = '/controller/api/v2/journaltransaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($journal_transaction)) {
            $_tempBody = $journal_transaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation journalTransactionV2PutByjournalTransactionNumber
     *
     * Update a Journal Transaction
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to update (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function journalTransactionV2PutByjournalTransactionNumber($journal_transaction_number, $journal_transaction)
    {
        list($response) = $this->journalTransactionV2PutByjournalTransactionNumberWithHttpInfo($journal_transaction_number, $journal_transaction);
        return $response;
    }

    /**
     * Operation journalTransactionV2PutByjournalTransactionNumberWithHttpInfo
     *
     * Update a Journal Transaction
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to update (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function journalTransactionV2PutByjournalTransactionNumberWithHttpInfo($journal_transaction_number, $journal_transaction)
    {
        $returnType = 'object';
        $request = $this->journalTransactionV2PutByjournalTransactionNumberRequest($journal_transaction_number, $journal_transaction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation journalTransactionV2PutByjournalTransactionNumberAsync
     *
     * Update a Journal Transaction
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionV2PutByjournalTransactionNumberAsync($journal_transaction_number, $journal_transaction)
    {
        return $this->journalTransactionV2PutByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number, $journal_transaction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation journalTransactionV2PutByjournalTransactionNumberAsyncWithHttpInfo
     *
     * Update a Journal Transaction
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionV2PutByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number, $journal_transaction)
    {
        $returnType = 'object';
        $request = $this->journalTransactionV2PutByjournalTransactionNumberRequest($journal_transaction_number, $journal_transaction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'journalTransactionV2PutByjournalTransactionNumber'
     *
     * @param  string $journal_transaction_number Identifies the Journal Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\JournalTransactionUpdateDto $journal_transaction Defines the data for the Journal Transaction to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function journalTransactionV2PutByjournalTransactionNumberRequest($journal_transaction_number, $journal_transaction)
    {
        // verify the required parameter 'journal_transaction_number' is set
        if ($journal_transaction_number === null || (is_array($journal_transaction_number) && count($journal_transaction_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_transaction_number when calling journalTransactionV2PutByjournalTransactionNumber'
            );
        }
        // verify the required parameter 'journal_transaction' is set
        if ($journal_transaction === null || (is_array($journal_transaction) && count($journal_transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_transaction when calling journalTransactionV2PutByjournalTransactionNumber'
            );
        }

        $resourcePath = '/controller/api/v2/journaltransaction/{journalTransactionNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($journal_transaction_number !== null) {
            $resourcePath = str_replace(
                '{' . 'journalTransactionNumber' . '}',
                ObjectSerializer::toPathValue($journal_transaction_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($journal_transaction)) {
            $_tempBody = $journal_transaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumber
     *
     * Release journal transaction operation
     *
     * @param  string $journal_transaction_number Reference number of the journal transaction to be released (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\ReleaseJournalTransactionActionResultDto
     */
    public function journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumber($journal_transaction_number)
    {
        list($response) = $this->journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberWithHttpInfo($journal_transaction_number);
        return $response;
    }

    /**
     * Operation journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberWithHttpInfo
     *
     * Release journal transaction operation
     *
     * @param  string $journal_transaction_number Reference number of the journal transaction to be released (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\ReleaseJournalTransactionActionResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberWithHttpInfo($journal_transaction_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ReleaseJournalTransactionActionResultDto';
        $request = $this->journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberRequest($journal_transaction_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\ReleaseJournalTransactionActionResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberAsync
     *
     * Release journal transaction operation
     *
     * @param  string $journal_transaction_number Reference number of the journal transaction to be released (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberAsync($journal_transaction_number)
    {
        return $this->journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberAsyncWithHttpInfo
     *
     * Release journal transaction operation
     *
     * @param  string $journal_transaction_number Reference number of the journal transaction to be released (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberAsyncWithHttpInfo($journal_transaction_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ReleaseJournalTransactionActionResultDto';
        $request = $this->journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberRequest($journal_transaction_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumber'
     *
     * @param  string $journal_transaction_number Reference number of the journal transaction to be released (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumberRequest($journal_transaction_number)
    {
        // verify the required parameter 'journal_transaction_number' is set
        if ($journal_transaction_number === null || (is_array($journal_transaction_number) && count($journal_transaction_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_transaction_number when calling journalTransactionV2ReleaseJournalTransactionByjournalTransactionNumber'
            );
        }

        $resourcePath = '/controller/api/v2/journaltransaction/{journalTransactionNumber}/action/release';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($journal_transaction_number !== null) {
            $resourcePath = str_replace(
                '{' . 'journalTransactionNumber' . '}',
                ObjectSerializer::toPathValue($journal_transaction_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
