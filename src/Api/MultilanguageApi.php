<?php
/**
 * MultilanguageApi
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ekstralys\VismaNetApi\ApiException;
use Ekstralys\VismaNetApi\Configuration;
use Ekstralys\VismaNetApi\HeaderSelector;
use Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * MultilanguageApi Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MultilanguageApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation multilanguageAddDefaultLanguage
     *
     * Set default language (screenId:SM200550). We recommend to activate multilanguage for the first time using the System Locale screen (Screenid SM200550). Please use API only to switch default
     *
     * @param  \Ekstralys\VismaNetApi\Model\LanguageUpdateDto $language_update_dto  (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function multilanguageAddDefaultLanguage($language_update_dto)
    {
        list($response) = $this->multilanguageAddDefaultLanguageWithHttpInfo($language_update_dto);
        return $response;
    }

    /**
     * Operation multilanguageAddDefaultLanguageWithHttpInfo
     *
     * Set default language (screenId:SM200550). We recommend to activate multilanguage for the first time using the System Locale screen (Screenid SM200550). Please use API only to switch default
     *
     * @param  \Ekstralys\VismaNetApi\Model\LanguageUpdateDto $language_update_dto  (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function multilanguageAddDefaultLanguageWithHttpInfo($language_update_dto)
    {
        $returnType = 'object';
        $request = $this->multilanguageAddDefaultLanguageRequest($language_update_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation multilanguageAddDefaultLanguageAsync
     *
     * Set default language (screenId:SM200550). We recommend to activate multilanguage for the first time using the System Locale screen (Screenid SM200550). Please use API only to switch default
     *
     * @param  \Ekstralys\VismaNetApi\Model\LanguageUpdateDto $language_update_dto  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multilanguageAddDefaultLanguageAsync($language_update_dto)
    {
        return $this->multilanguageAddDefaultLanguageAsyncWithHttpInfo($language_update_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation multilanguageAddDefaultLanguageAsyncWithHttpInfo
     *
     * Set default language (screenId:SM200550). We recommend to activate multilanguage for the first time using the System Locale screen (Screenid SM200550). Please use API only to switch default
     *
     * @param  \Ekstralys\VismaNetApi\Model\LanguageUpdateDto $language_update_dto  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multilanguageAddDefaultLanguageAsyncWithHttpInfo($language_update_dto)
    {
        $returnType = 'object';
        $request = $this->multilanguageAddDefaultLanguageRequest($language_update_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'multilanguageAddDefaultLanguage'
     *
     * @param  \Ekstralys\VismaNetApi\Model\LanguageUpdateDto $language_update_dto  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function multilanguageAddDefaultLanguageRequest($language_update_dto)
    {
        // verify the required parameter 'language_update_dto' is set
        if ($language_update_dto === null || (is_array($language_update_dto) && count($language_update_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_update_dto when calling multilanguageAddDefaultLanguage'
            );
        }

        $resourcePath = '/controller/api/v1/multilanguage/defaultlanguage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($language_update_dto)) {
            $_tempBody = $language_update_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISO
     *
     * Deletes the description of an item with the specific language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number Identifies the inventory to update (required)
     * @param  string $language_iso Identifies the description language to update (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISO($inventory_number, $language_iso)
    {
        list($response) = $this->multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOWithHttpInfo($inventory_number, $language_iso);
        return $response;
    }

    /**
     * Operation multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOWithHttpInfo
     *
     * Deletes the description of an item with the specific language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number Identifies the inventory to update (required)
     * @param  string $language_iso Identifies the description language to update (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOWithHttpInfo($inventory_number, $language_iso)
    {
        $returnType = 'object';
        $request = $this->multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISORequest($inventory_number, $language_iso);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsync
     *
     * Deletes the description of an item with the specific language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number Identifies the inventory to update (required)
     * @param  string $language_iso Identifies the description language to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsync($inventory_number, $language_iso)
    {
        return $this->multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsyncWithHttpInfo($inventory_number, $language_iso)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsyncWithHttpInfo
     *
     * Deletes the description of an item with the specific language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number Identifies the inventory to update (required)
     * @param  string $language_iso Identifies the description language to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsyncWithHttpInfo($inventory_number, $language_iso)
    {
        $returnType = 'object';
        $request = $this->multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISORequest($inventory_number, $language_iso);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISO'
     *
     * @param  string $inventory_number Identifies the inventory to update (required)
     * @param  string $language_iso Identifies the description language to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISORequest($inventory_number, $language_iso)
    {
        // verify the required parameter 'inventory_number' is set
        if ($inventory_number === null || (is_array($inventory_number) && count($inventory_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_number when calling multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISO'
            );
        }
        // verify the required parameter 'language_iso' is set
        if ($language_iso === null || (is_array($language_iso) && count($language_iso) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_iso when calling multilanguageDeleteSpecificInventoryDescrTranslationByinventoryNumberlanguageISO'
            );
        }

        $resourcePath = '/controller/api/v1/multilanguage/inventory/{inventoryNumber}/{languageISO}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inventory_number !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryNumber' . '}',
                ObjectSerializer::toPathValue($inventory_number),
                $resourcePath
            );
        }
        // path params
        if ($language_iso !== null) {
            $resourcePath = str_replace(
                '{' . 'languageISO' . '}',
                ObjectSerializer::toPathValue($language_iso),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation multilanguageGetAllActiveLanguages
     *
     * Get all languages (screenId:SM200550)
     *
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\ActiveMultilanguageDto[]
     */
    public function multilanguageGetAllActiveLanguages()
    {
        list($response) = $this->multilanguageGetAllActiveLanguagesWithHttpInfo();
        return $response;
    }

    /**
     * Operation multilanguageGetAllActiveLanguagesWithHttpInfo
     *
     * Get all languages (screenId:SM200550)
     *
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\ActiveMultilanguageDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function multilanguageGetAllActiveLanguagesWithHttpInfo()
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ActiveMultilanguageDto[]';
        $request = $this->multilanguageGetAllActiveLanguagesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\ActiveMultilanguageDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation multilanguageGetAllActiveLanguagesAsync
     *
     * Get all languages (screenId:SM200550)
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multilanguageGetAllActiveLanguagesAsync()
    {
        return $this->multilanguageGetAllActiveLanguagesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation multilanguageGetAllActiveLanguagesAsyncWithHttpInfo
     *
     * Get all languages (screenId:SM200550)
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multilanguageGetAllActiveLanguagesAsyncWithHttpInfo()
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ActiveMultilanguageDto[]';
        $request = $this->multilanguageGetAllActiveLanguagesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'multilanguageGetAllActiveLanguages'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function multilanguageGetAllActiveLanguagesRequest()
    {

        $resourcePath = '/controller/api/v1/multilanguage/languages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation multilanguageGetInventoryTranslationsByinventoryNumber
     *
     * Get all translations for a given item (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number  (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\MultilanguageDto[]
     */
    public function multilanguageGetInventoryTranslationsByinventoryNumber($inventory_number)
    {
        list($response) = $this->multilanguageGetInventoryTranslationsByinventoryNumberWithHttpInfo($inventory_number);
        return $response;
    }

    /**
     * Operation multilanguageGetInventoryTranslationsByinventoryNumberWithHttpInfo
     *
     * Get all translations for a given item (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number  (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\MultilanguageDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function multilanguageGetInventoryTranslationsByinventoryNumberWithHttpInfo($inventory_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\MultilanguageDto[]';
        $request = $this->multilanguageGetInventoryTranslationsByinventoryNumberRequest($inventory_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\MultilanguageDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation multilanguageGetInventoryTranslationsByinventoryNumberAsync
     *
     * Get all translations for a given item (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multilanguageGetInventoryTranslationsByinventoryNumberAsync($inventory_number)
    {
        return $this->multilanguageGetInventoryTranslationsByinventoryNumberAsyncWithHttpInfo($inventory_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation multilanguageGetInventoryTranslationsByinventoryNumberAsyncWithHttpInfo
     *
     * Get all translations for a given item (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multilanguageGetInventoryTranslationsByinventoryNumberAsyncWithHttpInfo($inventory_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\MultilanguageDto[]';
        $request = $this->multilanguageGetInventoryTranslationsByinventoryNumberRequest($inventory_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'multilanguageGetInventoryTranslationsByinventoryNumber'
     *
     * @param  string $inventory_number  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function multilanguageGetInventoryTranslationsByinventoryNumberRequest($inventory_number)
    {
        // verify the required parameter 'inventory_number' is set
        if ($inventory_number === null || (is_array($inventory_number) && count($inventory_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_number when calling multilanguageGetInventoryTranslationsByinventoryNumber'
            );
        }

        $resourcePath = '/controller/api/v1/multilanguage/inventory/{inventoryNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inventory_number !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryNumber' . '}',
                ObjectSerializer::toPathValue($inventory_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISO
     *
     * Get a specific translation of the description for a given item and language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number  (required)
     * @param  string $language_iso  (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\MultilanguageDto
     */
    public function multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISO($inventory_number, $language_iso)
    {
        list($response) = $this->multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOWithHttpInfo($inventory_number, $language_iso);
        return $response;
    }

    /**
     * Operation multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOWithHttpInfo
     *
     * Get a specific translation of the description for a given item and language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number  (required)
     * @param  string $language_iso  (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\MultilanguageDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOWithHttpInfo($inventory_number, $language_iso)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\MultilanguageDto';
        $request = $this->multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISORequest($inventory_number, $language_iso);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\MultilanguageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsync
     *
     * Get a specific translation of the description for a given item and language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number  (required)
     * @param  string $language_iso  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsync($inventory_number, $language_iso)
    {
        return $this->multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsyncWithHttpInfo($inventory_number, $language_iso)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsyncWithHttpInfo
     *
     * Get a specific translation of the description for a given item and language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number  (required)
     * @param  string $language_iso  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsyncWithHttpInfo($inventory_number, $language_iso)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\MultilanguageDto';
        $request = $this->multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISORequest($inventory_number, $language_iso);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISO'
     *
     * @param  string $inventory_number  (required)
     * @param  string $language_iso  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISORequest($inventory_number, $language_iso)
    {
        // verify the required parameter 'inventory_number' is set
        if ($inventory_number === null || (is_array($inventory_number) && count($inventory_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_number when calling multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISO'
            );
        }
        // verify the required parameter 'language_iso' is set
        if ($language_iso === null || (is_array($language_iso) && count($language_iso) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_iso when calling multilanguageGetSpecificInventoryDescrTranslationByinventoryNumberlanguageISO'
            );
        }

        $resourcePath = '/controller/api/v1/multilanguage/inventory/{inventoryNumber}/{languageISO}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inventory_number !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryNumber' . '}',
                ObjectSerializer::toPathValue($inventory_number),
                $resourcePath
            );
        }
        // path params
        if ($language_iso !== null) {
            $resourcePath = str_replace(
                '{' . 'languageISO' . '}',
                ObjectSerializer::toPathValue($language_iso),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISO
     *
     * Creates item description for given item and language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number Identifies the inventory (required)
     * @param  string $language_iso Identifies the description language (required)
     * @param  \Ekstralys\VismaNetApi\Model\MultilanguageTranslationDto $translation_dto Defines the fields and field values to be set on created description (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISO($inventory_number, $language_iso, $translation_dto)
    {
        list($response) = $this->multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOWithHttpInfo($inventory_number, $language_iso, $translation_dto);
        return $response;
    }

    /**
     * Operation multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOWithHttpInfo
     *
     * Creates item description for given item and language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number Identifies the inventory (required)
     * @param  string $language_iso Identifies the description language (required)
     * @param  \Ekstralys\VismaNetApi\Model\MultilanguageTranslationDto $translation_dto Defines the fields and field values to be set on created description (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOWithHttpInfo($inventory_number, $language_iso, $translation_dto)
    {
        $returnType = 'object';
        $request = $this->multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISORequest($inventory_number, $language_iso, $translation_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsync
     *
     * Creates item description for given item and language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number Identifies the inventory (required)
     * @param  string $language_iso Identifies the description language (required)
     * @param  \Ekstralys\VismaNetApi\Model\MultilanguageTranslationDto $translation_dto Defines the fields and field values to be set on created description (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsync($inventory_number, $language_iso, $translation_dto)
    {
        return $this->multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsyncWithHttpInfo($inventory_number, $language_iso, $translation_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsyncWithHttpInfo
     *
     * Creates item description for given item and language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number Identifies the inventory (required)
     * @param  string $language_iso Identifies the description language (required)
     * @param  \Ekstralys\VismaNetApi\Model\MultilanguageTranslationDto $translation_dto Defines the fields and field values to be set on created description (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsyncWithHttpInfo($inventory_number, $language_iso, $translation_dto)
    {
        $returnType = 'object';
        $request = $this->multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISORequest($inventory_number, $language_iso, $translation_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISO'
     *
     * @param  string $inventory_number Identifies the inventory (required)
     * @param  string $language_iso Identifies the description language (required)
     * @param  \Ekstralys\VismaNetApi\Model\MultilanguageTranslationDto $translation_dto Defines the fields and field values to be set on created description (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISORequest($inventory_number, $language_iso, $translation_dto)
    {
        // verify the required parameter 'inventory_number' is set
        if ($inventory_number === null || (is_array($inventory_number) && count($inventory_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_number when calling multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISO'
            );
        }
        // verify the required parameter 'language_iso' is set
        if ($language_iso === null || (is_array($language_iso) && count($language_iso) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_iso when calling multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISO'
            );
        }
        // verify the required parameter 'translation_dto' is set
        if ($translation_dto === null || (is_array($translation_dto) && count($translation_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $translation_dto when calling multilanguagePostSpecificInventoryDescrTranslationByinventoryNumberlanguageISO'
            );
        }

        $resourcePath = '/controller/api/v1/multilanguage/inventory/{inventoryNumber}/{languageISO}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inventory_number !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryNumber' . '}',
                ObjectSerializer::toPathValue($inventory_number),
                $resourcePath
            );
        }
        // path params
        if ($language_iso !== null) {
            $resourcePath = str_replace(
                '{' . 'languageISO' . '}',
                ObjectSerializer::toPathValue($language_iso),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($translation_dto)) {
            $_tempBody = $translation_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISO
     *
     * Updates item description for given item and language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number Identifies the inventory to update (required)
     * @param  string $language_iso Identifies the description language to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\MultilanguageTranslationDto $translation_dto Defines the fields and field values to be updated (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISO($inventory_number, $language_iso, $translation_dto)
    {
        list($response) = $this->multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOWithHttpInfo($inventory_number, $language_iso, $translation_dto);
        return $response;
    }

    /**
     * Operation multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOWithHttpInfo
     *
     * Updates item description for given item and language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number Identifies the inventory to update (required)
     * @param  string $language_iso Identifies the description language to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\MultilanguageTranslationDto $translation_dto Defines the fields and field values to be updated (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOWithHttpInfo($inventory_number, $language_iso, $translation_dto)
    {
        $returnType = 'object';
        $request = $this->multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISORequest($inventory_number, $language_iso, $translation_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsync
     *
     * Updates item description for given item and language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number Identifies the inventory to update (required)
     * @param  string $language_iso Identifies the description language to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\MultilanguageTranslationDto $translation_dto Defines the fields and field values to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsync($inventory_number, $language_iso, $translation_dto)
    {
        return $this->multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsyncWithHttpInfo($inventory_number, $language_iso, $translation_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsyncWithHttpInfo
     *
     * Updates item description for given item and language ISO code (screenId:IN202500 and IN202000)
     *
     * @param  string $inventory_number Identifies the inventory to update (required)
     * @param  string $language_iso Identifies the description language to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\MultilanguageTranslationDto $translation_dto Defines the fields and field values to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISOAsyncWithHttpInfo($inventory_number, $language_iso, $translation_dto)
    {
        $returnType = 'object';
        $request = $this->multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISORequest($inventory_number, $language_iso, $translation_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISO'
     *
     * @param  string $inventory_number Identifies the inventory to update (required)
     * @param  string $language_iso Identifies the description language to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\MultilanguageTranslationDto $translation_dto Defines the fields and field values to be updated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISORequest($inventory_number, $language_iso, $translation_dto)
    {
        // verify the required parameter 'inventory_number' is set
        if ($inventory_number === null || (is_array($inventory_number) && count($inventory_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_number when calling multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISO'
            );
        }
        // verify the required parameter 'language_iso' is set
        if ($language_iso === null || (is_array($language_iso) && count($language_iso) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_iso when calling multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISO'
            );
        }
        // verify the required parameter 'translation_dto' is set
        if ($translation_dto === null || (is_array($translation_dto) && count($translation_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $translation_dto when calling multilanguagePutSpecificInventoryDescrTranslationByinventoryNumberlanguageISO'
            );
        }

        $resourcePath = '/controller/api/v1/multilanguage/inventory/{inventoryNumber}/{languageISO}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inventory_number !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryNumber' . '}',
                ObjectSerializer::toPathValue($inventory_number),
                $resourcePath
            );
        }
        // path params
        if ($language_iso !== null) {
            $resourcePath = str_replace(
                '{' . 'languageISO' . '}',
                ObjectSerializer::toPathValue($language_iso),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($translation_dto)) {
            $_tempBody = $translation_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
