<?php
/**
 * DiscountApi
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ekstralys\VismaNetApi\ApiException;
use Ekstralys\VismaNetApi\Configuration;
use Ekstralys\VismaNetApi\HeaderSelector;
use Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * DiscountApi Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiscountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation discountDeleteBydiscountCodeseries
     *
     * @param  string $discount_code discount_code (required)
     * @param  string $series series (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function discountDeleteBydiscountCodeseries($discount_code, $series)
    {
        list($response) = $this->discountDeleteBydiscountCodeseriesWithHttpInfo($discount_code, $series);
        return $response;
    }

    /**
     * Operation discountDeleteBydiscountCodeseriesWithHttpInfo
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function discountDeleteBydiscountCodeseriesWithHttpInfo($discount_code, $series)
    {
        $returnType = 'object';
        $request = $this->discountDeleteBydiscountCodeseriesRequest($discount_code, $series);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountDeleteBydiscountCodeseriesAsync
     *
     * 
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountDeleteBydiscountCodeseriesAsync($discount_code, $series)
    {
        return $this->discountDeleteBydiscountCodeseriesAsyncWithHttpInfo($discount_code, $series)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountDeleteBydiscountCodeseriesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountDeleteBydiscountCodeseriesAsyncWithHttpInfo($discount_code, $series)
    {
        $returnType = 'object';
        $request = $this->discountDeleteBydiscountCodeseriesRequest($discount_code, $series);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountDeleteBydiscountCodeseries'
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountDeleteBydiscountCodeseriesRequest($discount_code, $series)
    {
        // verify the required parameter 'discount_code' is set
        if ($discount_code === null || (is_array($discount_code) && count($discount_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $discount_code when calling discountDeleteBydiscountCodeseries'
            );
        }
        // verify the required parameter 'series' is set
        if ($series === null || (is_array($series) && count($series) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $series when calling discountDeleteBydiscountCodeseries'
            );
        }

        $resourcePath = '/controller/api/v1/discount/{discountCode}/{series}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($discount_code !== null) {
            $resourcePath = str_replace(
                '{' . 'discountCode' . '}',
                ObjectSerializer::toPathValue($discount_code),
                $resourcePath
            );
        }
        // path params
        if ($series !== null) {
            $resourcePath = str_replace(
                '{' . 'series' . '}',
                ObjectSerializer::toPathValue($series),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discountGetDiscounts
     *
     * Get a range of discounts - ScreenId=AR209500
     *
     * @param  string $last_modified_date_time last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time System retrieved information for created date and time. (optional)
     * @param  string $created_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $discount_code discount_code (optional)
     * @param  string $series series (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\BasePaginationDtoDiscountDto
     */
    public function discountGetDiscounts($last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $discount_code = null, $series = null, $page_number = null, $page_size = null)
    {
        list($response) = $this->discountGetDiscountsWithHttpInfo($last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $discount_code, $series, $page_number, $page_size);
        return $response;
    }

    /**
     * Operation discountGetDiscountsWithHttpInfo
     *
     * Get a range of discounts - ScreenId=AR209500
     *
     * @param  string $last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time System retrieved information for created date and time. (optional)
     * @param  string $created_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $discount_code (optional)
     * @param  string $series (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\BasePaginationDtoDiscountDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function discountGetDiscountsWithHttpInfo($last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $discount_code = null, $series = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\BasePaginationDtoDiscountDto';
        $request = $this->discountGetDiscountsRequest($last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $discount_code, $series, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\BasePaginationDtoDiscountDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountGetDiscountsAsync
     *
     * Get a range of discounts - ScreenId=AR209500
     *
     * @param  string $last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time System retrieved information for created date and time. (optional)
     * @param  string $created_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $discount_code (optional)
     * @param  string $series (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountGetDiscountsAsync($last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $discount_code = null, $series = null, $page_number = null, $page_size = null)
    {
        return $this->discountGetDiscountsAsyncWithHttpInfo($last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $discount_code, $series, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountGetDiscountsAsyncWithHttpInfo
     *
     * Get a range of discounts - ScreenId=AR209500
     *
     * @param  string $last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time System retrieved information for created date and time. (optional)
     * @param  string $created_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $discount_code (optional)
     * @param  string $series (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountGetDiscountsAsyncWithHttpInfo($last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $discount_code = null, $series = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\BasePaginationDtoDiscountDto';
        $request = $this->discountGetDiscountsRequest($last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $discount_code, $series, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountGetDiscounts'
     *
     * @param  string $last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time System retrieved information for created date and time. (optional)
     * @param  string $created_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $discount_code (optional)
     * @param  string $series (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountGetDiscountsRequest($last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $discount_code = null, $series = null, $page_number = null, $page_size = null)
    {

        $resourcePath = '/controller/api/v1/discount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }
        // query params
        if ($created_date_time !== null) {
            $queryParams['createdDateTime'] = ObjectSerializer::toQueryValue($created_date_time);
        }
        // query params
        if ($created_date_time_condition !== null) {
            $queryParams['createdDateTimeCondition'] = ObjectSerializer::toQueryValue($created_date_time_condition);
        }
        // query params
        if ($discount_code !== null) {
            $queryParams['discountCode'] = ObjectSerializer::toQueryValue($discount_code);
        }
        // query params
        if ($series !== null) {
            $queryParams['series'] = ObjectSerializer::toQueryValue($series);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discountPost
     *
     * @param  \Ekstralys\VismaNetApi\Model\DiscountUpdateDto $discount_update_dto discount_update_dto (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function discountPost($discount_update_dto)
    {
        list($response) = $this->discountPostWithHttpInfo($discount_update_dto);
        return $response;
    }

    /**
     * Operation discountPostWithHttpInfo
     *
     * @param  \Ekstralys\VismaNetApi\Model\DiscountUpdateDto $discount_update_dto (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function discountPostWithHttpInfo($discount_update_dto)
    {
        $returnType = 'object';
        $request = $this->discountPostRequest($discount_update_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountPostAsync
     *
     * 
     *
     * @param  \Ekstralys\VismaNetApi\Model\DiscountUpdateDto $discount_update_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountPostAsync($discount_update_dto)
    {
        return $this->discountPostAsyncWithHttpInfo($discount_update_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Ekstralys\VismaNetApi\Model\DiscountUpdateDto $discount_update_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountPostAsyncWithHttpInfo($discount_update_dto)
    {
        $returnType = 'object';
        $request = $this->discountPostRequest($discount_update_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountPost'
     *
     * @param  \Ekstralys\VismaNetApi\Model\DiscountUpdateDto $discount_update_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountPostRequest($discount_update_dto)
    {
        // verify the required parameter 'discount_update_dto' is set
        if ($discount_update_dto === null || (is_array($discount_update_dto) && count($discount_update_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $discount_update_dto when calling discountPost'
            );
        }

        $resourcePath = '/controller/api/v1/discount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($discount_update_dto)) {
            $_tempBody = $discount_update_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discountPutBydiscountCodeseries
     *
     * @param  string $discount_code discount_code (required)
     * @param  string $series series (required)
     * @param  \Ekstralys\VismaNetApi\Model\DiscountUpdateDto $discount_update_dto discount_update_dto (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function discountPutBydiscountCodeseries($discount_code, $series, $discount_update_dto)
    {
        list($response) = $this->discountPutBydiscountCodeseriesWithHttpInfo($discount_code, $series, $discount_update_dto);
        return $response;
    }

    /**
     * Operation discountPutBydiscountCodeseriesWithHttpInfo
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     * @param  \Ekstralys\VismaNetApi\Model\DiscountUpdateDto $discount_update_dto (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function discountPutBydiscountCodeseriesWithHttpInfo($discount_code, $series, $discount_update_dto)
    {
        $returnType = 'object';
        $request = $this->discountPutBydiscountCodeseriesRequest($discount_code, $series, $discount_update_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountPutBydiscountCodeseriesAsync
     *
     * 
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     * @param  \Ekstralys\VismaNetApi\Model\DiscountUpdateDto $discount_update_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountPutBydiscountCodeseriesAsync($discount_code, $series, $discount_update_dto)
    {
        return $this->discountPutBydiscountCodeseriesAsyncWithHttpInfo($discount_code, $series, $discount_update_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountPutBydiscountCodeseriesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     * @param  \Ekstralys\VismaNetApi\Model\DiscountUpdateDto $discount_update_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountPutBydiscountCodeseriesAsyncWithHttpInfo($discount_code, $series, $discount_update_dto)
    {
        $returnType = 'object';
        $request = $this->discountPutBydiscountCodeseriesRequest($discount_code, $series, $discount_update_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountPutBydiscountCodeseries'
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     * @param  \Ekstralys\VismaNetApi\Model\DiscountUpdateDto $discount_update_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountPutBydiscountCodeseriesRequest($discount_code, $series, $discount_update_dto)
    {
        // verify the required parameter 'discount_code' is set
        if ($discount_code === null || (is_array($discount_code) && count($discount_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $discount_code when calling discountPutBydiscountCodeseries'
            );
        }
        // verify the required parameter 'series' is set
        if ($series === null || (is_array($series) && count($series) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $series when calling discountPutBydiscountCodeseries'
            );
        }
        // verify the required parameter 'discount_update_dto' is set
        if ($discount_update_dto === null || (is_array($discount_update_dto) && count($discount_update_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $discount_update_dto when calling discountPutBydiscountCodeseries'
            );
        }

        $resourcePath = '/controller/api/v1/discount/{discountCode}/{series}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($discount_code !== null) {
            $resourcePath = str_replace(
                '{' . 'discountCode' . '}',
                ObjectSerializer::toPathValue($discount_code),
                $resourcePath
            );
        }
        // path params
        if ($series !== null) {
            $resourcePath = str_replace(
                '{' . 'series' . '}',
                ObjectSerializer::toPathValue($series),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($discount_update_dto)) {
            $_tempBody = $discount_update_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discountUpdateDiscountsBydiscountCodeseries
     *
     * @param  string $discount_code discount_code (required)
     * @param  string $series series (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\UpdateDiscountsActionResultDto
     */
    public function discountUpdateDiscountsBydiscountCodeseries($discount_code, $series)
    {
        list($response) = $this->discountUpdateDiscountsBydiscountCodeseriesWithHttpInfo($discount_code, $series);
        return $response;
    }

    /**
     * Operation discountUpdateDiscountsBydiscountCodeseriesWithHttpInfo
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\UpdateDiscountsActionResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function discountUpdateDiscountsBydiscountCodeseriesWithHttpInfo($discount_code, $series)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\UpdateDiscountsActionResultDto';
        $request = $this->discountUpdateDiscountsBydiscountCodeseriesRequest($discount_code, $series);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\UpdateDiscountsActionResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountUpdateDiscountsBydiscountCodeseriesAsync
     *
     * 
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountUpdateDiscountsBydiscountCodeseriesAsync($discount_code, $series)
    {
        return $this->discountUpdateDiscountsBydiscountCodeseriesAsyncWithHttpInfo($discount_code, $series)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountUpdateDiscountsBydiscountCodeseriesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountUpdateDiscountsBydiscountCodeseriesAsyncWithHttpInfo($discount_code, $series)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\UpdateDiscountsActionResultDto';
        $request = $this->discountUpdateDiscountsBydiscountCodeseriesRequest($discount_code, $series);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountUpdateDiscountsBydiscountCodeseries'
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountUpdateDiscountsBydiscountCodeseriesRequest($discount_code, $series)
    {
        // verify the required parameter 'discount_code' is set
        if ($discount_code === null || (is_array($discount_code) && count($discount_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $discount_code when calling discountUpdateDiscountsBydiscountCodeseries'
            );
        }
        // verify the required parameter 'series' is set
        if ($series === null || (is_array($series) && count($series) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $series when calling discountUpdateDiscountsBydiscountCodeseries'
            );
        }

        $resourcePath = '/controller/api/v1/discount/{discountCode}/{series}/action/updateDiscounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($discount_code !== null) {
            $resourcePath = str_replace(
                '{' . 'discountCode' . '}',
                ObjectSerializer::toPathValue($discount_code),
                $resourcePath
            );
        }
        // path params
        if ($series !== null) {
            $resourcePath = str_replace(
                '{' . 'series' . '}',
                ObjectSerializer::toPathValue($series),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation discountUpdateDiscountsBydiscountCodeseriesfilerDate
     *
     * @param  string $discount_code discount_code (required)
     * @param  string $series series (required)
     * @param  \DateTime $filter_date filter_date (required)
     * @param  string $filer_date filer_date (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\UpdateDiscountsActionResultDto
     */
    public function discountUpdateDiscountsBydiscountCodeseriesfilerDate($discount_code, $series, $filter_date, $filer_date)
    {
        list($response) = $this->discountUpdateDiscountsBydiscountCodeseriesfilerDateWithHttpInfo($discount_code, $series, $filter_date, $filer_date);
        return $response;
    }

    /**
     * Operation discountUpdateDiscountsBydiscountCodeseriesfilerDateWithHttpInfo
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     * @param  \DateTime $filter_date (required)
     * @param  string $filer_date (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\UpdateDiscountsActionResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function discountUpdateDiscountsBydiscountCodeseriesfilerDateWithHttpInfo($discount_code, $series, $filter_date, $filer_date)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\UpdateDiscountsActionResultDto';
        $request = $this->discountUpdateDiscountsBydiscountCodeseriesfilerDateRequest($discount_code, $series, $filter_date, $filer_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\UpdateDiscountsActionResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation discountUpdateDiscountsBydiscountCodeseriesfilerDateAsync
     *
     * 
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     * @param  \DateTime $filter_date (required)
     * @param  string $filer_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountUpdateDiscountsBydiscountCodeseriesfilerDateAsync($discount_code, $series, $filter_date, $filer_date)
    {
        return $this->discountUpdateDiscountsBydiscountCodeseriesfilerDateAsyncWithHttpInfo($discount_code, $series, $filter_date, $filer_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation discountUpdateDiscountsBydiscountCodeseriesfilerDateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     * @param  \DateTime $filter_date (required)
     * @param  string $filer_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function discountUpdateDiscountsBydiscountCodeseriesfilerDateAsyncWithHttpInfo($discount_code, $series, $filter_date, $filer_date)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\UpdateDiscountsActionResultDto';
        $request = $this->discountUpdateDiscountsBydiscountCodeseriesfilerDateRequest($discount_code, $series, $filter_date, $filer_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'discountUpdateDiscountsBydiscountCodeseriesfilerDate'
     *
     * @param  string $discount_code (required)
     * @param  string $series (required)
     * @param  \DateTime $filter_date (required)
     * @param  string $filer_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function discountUpdateDiscountsBydiscountCodeseriesfilerDateRequest($discount_code, $series, $filter_date, $filer_date)
    {
        // verify the required parameter 'discount_code' is set
        if ($discount_code === null || (is_array($discount_code) && count($discount_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $discount_code when calling discountUpdateDiscountsBydiscountCodeseriesfilerDate'
            );
        }
        // verify the required parameter 'series' is set
        if ($series === null || (is_array($series) && count($series) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $series when calling discountUpdateDiscountsBydiscountCodeseriesfilerDate'
            );
        }
        // verify the required parameter 'filter_date' is set
        if ($filter_date === null || (is_array($filter_date) && count($filter_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter_date when calling discountUpdateDiscountsBydiscountCodeseriesfilerDate'
            );
        }
        // verify the required parameter 'filer_date' is set
        if ($filer_date === null || (is_array($filer_date) && count($filer_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filer_date when calling discountUpdateDiscountsBydiscountCodeseriesfilerDate'
            );
        }

        $resourcePath = '/controller/api/v1/discount/{discountCode}/{series}/{filerDate}/action/updateDiscounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_date !== null) {
            $queryParams['filterDate'] = ObjectSerializer::toQueryValue($filter_date);
        }

        // path params
        if ($discount_code !== null) {
            $resourcePath = str_replace(
                '{' . 'discountCode' . '}',
                ObjectSerializer::toPathValue($discount_code),
                $resourcePath
            );
        }
        // path params
        if ($series !== null) {
            $resourcePath = str_replace(
                '{' . 'series' . '}',
                ObjectSerializer::toPathValue($series),
                $resourcePath
            );
        }
        // path params
        if ($filer_date !== null) {
            $resourcePath = str_replace(
                '{' . 'filerDate' . '}',
                ObjectSerializer::toPathValue($filer_date),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
