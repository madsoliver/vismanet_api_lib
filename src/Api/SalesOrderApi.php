<?php
/**
 * SalesOrderApi
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ekstralys\VismaNetApi\ApiException;
use Ekstralys\VismaNetApi\Configuration;
use Ekstralys\VismaNetApi\HeaderSelector;
use Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * SalesOrderApi Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesOrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation salesOrderCancelSalesOrderBysaleOrderNumber
     *
     * Cancel Order action
     *
     * @param  string $sale_order_number Reference number of the sale oreder that will be cancelled (required)
     * @param  \Ekstralys\VismaNetApi\Model\CancelSalesOrderActionDto $cancel_sales_order_action_dto Defines the data for the action (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CancelSalesOrderActionResultDto
     */
    public function salesOrderCancelSalesOrderBysaleOrderNumber($sale_order_number, $cancel_sales_order_action_dto)
    {
        list($response) = $this->salesOrderCancelSalesOrderBysaleOrderNumberWithHttpInfo($sale_order_number, $cancel_sales_order_action_dto);
        return $response;
    }

    /**
     * Operation salesOrderCancelSalesOrderBysaleOrderNumberWithHttpInfo
     *
     * Cancel Order action
     *
     * @param  string $sale_order_number Reference number of the sale oreder that will be cancelled (required)
     * @param  \Ekstralys\VismaNetApi\Model\CancelSalesOrderActionDto $cancel_sales_order_action_dto Defines the data for the action (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CancelSalesOrderActionResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderCancelSalesOrderBysaleOrderNumberWithHttpInfo($sale_order_number, $cancel_sales_order_action_dto)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CancelSalesOrderActionResultDto';
        $request = $this->salesOrderCancelSalesOrderBysaleOrderNumberRequest($sale_order_number, $cancel_sales_order_action_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CancelSalesOrderActionResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderCancelSalesOrderBysaleOrderNumberAsync
     *
     * Cancel Order action
     *
     * @param  string $sale_order_number Reference number of the sale oreder that will be cancelled (required)
     * @param  \Ekstralys\VismaNetApi\Model\CancelSalesOrderActionDto $cancel_sales_order_action_dto Defines the data for the action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCancelSalesOrderBysaleOrderNumberAsync($sale_order_number, $cancel_sales_order_action_dto)
    {
        return $this->salesOrderCancelSalesOrderBysaleOrderNumberAsyncWithHttpInfo($sale_order_number, $cancel_sales_order_action_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderCancelSalesOrderBysaleOrderNumberAsyncWithHttpInfo
     *
     * Cancel Order action
     *
     * @param  string $sale_order_number Reference number of the sale oreder that will be cancelled (required)
     * @param  \Ekstralys\VismaNetApi\Model\CancelSalesOrderActionDto $cancel_sales_order_action_dto Defines the data for the action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCancelSalesOrderBysaleOrderNumberAsyncWithHttpInfo($sale_order_number, $cancel_sales_order_action_dto)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CancelSalesOrderActionResultDto';
        $request = $this->salesOrderCancelSalesOrderBysaleOrderNumberRequest($sale_order_number, $cancel_sales_order_action_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderCancelSalesOrderBysaleOrderNumber'
     *
     * @param  string $sale_order_number Reference number of the sale oreder that will be cancelled (required)
     * @param  \Ekstralys\VismaNetApi\Model\CancelSalesOrderActionDto $cancel_sales_order_action_dto Defines the data for the action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderCancelSalesOrderBysaleOrderNumberRequest($sale_order_number, $cancel_sales_order_action_dto)
    {
        // verify the required parameter 'sale_order_number' is set
        if ($sale_order_number === null || (is_array($sale_order_number) && count($sale_order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sale_order_number when calling salesOrderCancelSalesOrderBysaleOrderNumber'
            );
        }
        // verify the required parameter 'cancel_sales_order_action_dto' is set
        if ($cancel_sales_order_action_dto === null || (is_array($cancel_sales_order_action_dto) && count($cancel_sales_order_action_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancel_sales_order_action_dto when calling salesOrderCancelSalesOrderBysaleOrderNumber'
            );
        }

        $resourcePath = '/controller/api/v1/salesorder/{saleOrderNumber}/action/cancelSalesOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sale_order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'saleOrderNumber' . '}',
                ObjectSerializer::toPathValue($sale_order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($cancel_sales_order_action_dto)) {
            $_tempBody = $cancel_sales_order_action_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderCreateHeaderAttachmentByorderNumber
     *
     * Creates an attachment and associates it with a sales order. If the file already exists, a new revision is created.  - Method is deprecated and will be removed in a future version. Please start using the new method with order type.
     *
     * @param  string $order_number Identifies the sales order (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function salesOrderCreateHeaderAttachmentByorderNumber($order_number)
    {
        list($response) = $this->salesOrderCreateHeaderAttachmentByorderNumberWithHttpInfo($order_number);
        return $response;
    }

    /**
     * Operation salesOrderCreateHeaderAttachmentByorderNumberWithHttpInfo
     *
     * Creates an attachment and associates it with a sales order. If the file already exists, a new revision is created.  - Method is deprecated and will be removed in a future version. Please start using the new method with order type.
     *
     * @param  string $order_number Identifies the sales order (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderCreateHeaderAttachmentByorderNumberWithHttpInfo($order_number)
    {
        $returnType = 'object';
        $request = $this->salesOrderCreateHeaderAttachmentByorderNumberRequest($order_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderCreateHeaderAttachmentByorderNumberAsync
     *
     * Creates an attachment and associates it with a sales order. If the file already exists, a new revision is created.  - Method is deprecated and will be removed in a future version. Please start using the new method with order type.
     *
     * @param  string $order_number Identifies the sales order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCreateHeaderAttachmentByorderNumberAsync($order_number)
    {
        return $this->salesOrderCreateHeaderAttachmentByorderNumberAsyncWithHttpInfo($order_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderCreateHeaderAttachmentByorderNumberAsyncWithHttpInfo
     *
     * Creates an attachment and associates it with a sales order. If the file already exists, a new revision is created.  - Method is deprecated and will be removed in a future version. Please start using the new method with order type.
     *
     * @param  string $order_number Identifies the sales order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCreateHeaderAttachmentByorderNumberAsyncWithHttpInfo($order_number)
    {
        $returnType = 'object';
        $request = $this->salesOrderCreateHeaderAttachmentByorderNumberRequest($order_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderCreateHeaderAttachmentByorderNumber'
     *
     * @param  string $order_number Identifies the sales order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderCreateHeaderAttachmentByorderNumberRequest($order_number)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling salesOrderCreateHeaderAttachmentByorderNumber'
            );
        }

        $resourcePath = '/controller/api/v1/salesorder/{orderNumber}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderCreateHeaderAttachmentByorderNumberorderType
     *
     * Creates an attachment and associates it with a sales order on a specific order type. If the file already exists, a new revision is created.
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  string $order_type  (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function salesOrderCreateHeaderAttachmentByorderNumberorderType($order_number, $order_type)
    {
        list($response) = $this->salesOrderCreateHeaderAttachmentByorderNumberorderTypeWithHttpInfo($order_number, $order_type);
        return $response;
    }

    /**
     * Operation salesOrderCreateHeaderAttachmentByorderNumberorderTypeWithHttpInfo
     *
     * Creates an attachment and associates it with a sales order on a specific order type. If the file already exists, a new revision is created.
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  string $order_type  (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderCreateHeaderAttachmentByorderNumberorderTypeWithHttpInfo($order_number, $order_type)
    {
        $returnType = 'object';
        $request = $this->salesOrderCreateHeaderAttachmentByorderNumberorderTypeRequest($order_number, $order_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderCreateHeaderAttachmentByorderNumberorderTypeAsync
     *
     * Creates an attachment and associates it with a sales order on a specific order type. If the file already exists, a new revision is created.
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  string $order_type  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCreateHeaderAttachmentByorderNumberorderTypeAsync($order_number, $order_type)
    {
        return $this->salesOrderCreateHeaderAttachmentByorderNumberorderTypeAsyncWithHttpInfo($order_number, $order_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderCreateHeaderAttachmentByorderNumberorderTypeAsyncWithHttpInfo
     *
     * Creates an attachment and associates it with a sales order on a specific order type. If the file already exists, a new revision is created.
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  string $order_type  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCreateHeaderAttachmentByorderNumberorderTypeAsyncWithHttpInfo($order_number, $order_type)
    {
        $returnType = 'object';
        $request = $this->salesOrderCreateHeaderAttachmentByorderNumberorderTypeRequest($order_number, $order_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderCreateHeaderAttachmentByorderNumberorderType'
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  string $order_type  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderCreateHeaderAttachmentByorderNumberorderTypeRequest($order_number, $order_type)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling salesOrderCreateHeaderAttachmentByorderNumberorderType'
            );
        }
        // verify the required parameter 'order_type' is set
        if ($order_type === null || (is_array($order_type) && count($order_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_type when calling salesOrderCreateHeaderAttachmentByorderNumberorderType'
            );
        }

        $resourcePath = '/controller/api/v1/salesorder/orderType/{orderType}/{orderNumber}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }
        // path params
        if ($order_type !== null) {
            $resourcePath = str_replace(
                '{' . 'orderType' . '}',
                ObjectSerializer::toPathValue($order_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderCreateLineAttachmentByorderNumberlineNumber
     *
     * Creates an attachment and associates it with a certain sales order line. If the file already exists, a new revision is created.  - Method is deprecated and will be removed in a future version. Please start using the new method with order type.
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function salesOrderCreateLineAttachmentByorderNumberlineNumber($order_number, $line_number)
    {
        list($response) = $this->salesOrderCreateLineAttachmentByorderNumberlineNumberWithHttpInfo($order_number, $line_number);
        return $response;
    }

    /**
     * Operation salesOrderCreateLineAttachmentByorderNumberlineNumberWithHttpInfo
     *
     * Creates an attachment and associates it with a certain sales order line. If the file already exists, a new revision is created.  - Method is deprecated and will be removed in a future version. Please start using the new method with order type.
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderCreateLineAttachmentByorderNumberlineNumberWithHttpInfo($order_number, $line_number)
    {
        $returnType = 'object';
        $request = $this->salesOrderCreateLineAttachmentByorderNumberlineNumberRequest($order_number, $line_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderCreateLineAttachmentByorderNumberlineNumberAsync
     *
     * Creates an attachment and associates it with a certain sales order line. If the file already exists, a new revision is created.  - Method is deprecated and will be removed in a future version. Please start using the new method with order type.
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCreateLineAttachmentByorderNumberlineNumberAsync($order_number, $line_number)
    {
        return $this->salesOrderCreateLineAttachmentByorderNumberlineNumberAsyncWithHttpInfo($order_number, $line_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderCreateLineAttachmentByorderNumberlineNumberAsyncWithHttpInfo
     *
     * Creates an attachment and associates it with a certain sales order line. If the file already exists, a new revision is created.  - Method is deprecated and will be removed in a future version. Please start using the new method with order type.
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCreateLineAttachmentByorderNumberlineNumberAsyncWithHttpInfo($order_number, $line_number)
    {
        $returnType = 'object';
        $request = $this->salesOrderCreateLineAttachmentByorderNumberlineNumberRequest($order_number, $line_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderCreateLineAttachmentByorderNumberlineNumber'
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderCreateLineAttachmentByorderNumberlineNumberRequest($order_number, $line_number)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling salesOrderCreateLineAttachmentByorderNumberlineNumber'
            );
        }
        // verify the required parameter 'line_number' is set
        if ($line_number === null || (is_array($line_number) && count($line_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_number when calling salesOrderCreateLineAttachmentByorderNumberlineNumber'
            );
        }

        $resourcePath = '/controller/api/v1/salesorder/{orderNumber}/{lineNumber}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }
        // path params
        if ($line_number !== null) {
            $resourcePath = str_replace(
                '{' . 'lineNumber' . '}',
                ObjectSerializer::toPathValue($line_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderCreateLineAttachmentByorderNumberorderTypelineNumber
     *
     * Creates an attachment and associates it with a certain sales order line on a specific order type. If the file already exists, a new revision is created.
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  string $order_type  (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function salesOrderCreateLineAttachmentByorderNumberorderTypelineNumber($order_number, $order_type, $line_number)
    {
        list($response) = $this->salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberWithHttpInfo($order_number, $order_type, $line_number);
        return $response;
    }

    /**
     * Operation salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberWithHttpInfo
     *
     * Creates an attachment and associates it with a certain sales order line on a specific order type. If the file already exists, a new revision is created.
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  string $order_type  (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberWithHttpInfo($order_number, $order_type, $line_number)
    {
        $returnType = 'object';
        $request = $this->salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberRequest($order_number, $order_type, $line_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberAsync
     *
     * Creates an attachment and associates it with a certain sales order line on a specific order type. If the file already exists, a new revision is created.
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  string $order_type  (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberAsync($order_number, $order_type, $line_number)
    {
        return $this->salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberAsyncWithHttpInfo($order_number, $order_type, $line_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberAsyncWithHttpInfo
     *
     * Creates an attachment and associates it with a certain sales order line on a specific order type. If the file already exists, a new revision is created.
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  string $order_type  (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberAsyncWithHttpInfo($order_number, $order_type, $line_number)
    {
        $returnType = 'object';
        $request = $this->salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberRequest($order_number, $order_type, $line_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderCreateLineAttachmentByorderNumberorderTypelineNumber'
     *
     * @param  string $order_number Identifies the sales order (required)
     * @param  string $order_type  (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderCreateLineAttachmentByorderNumberorderTypelineNumberRequest($order_number, $order_type, $line_number)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling salesOrderCreateLineAttachmentByorderNumberorderTypelineNumber'
            );
        }
        // verify the required parameter 'order_type' is set
        if ($order_type === null || (is_array($order_type) && count($order_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_type when calling salesOrderCreateLineAttachmentByorderNumberorderTypelineNumber'
            );
        }
        // verify the required parameter 'line_number' is set
        if ($line_number === null || (is_array($line_number) && count($line_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_number when calling salesOrderCreateLineAttachmentByorderNumberorderTypelineNumber'
            );
        }

        $resourcePath = '/controller/api/v1/salesorder/orderType/{orderType}/{orderNumber}/{lineNumber}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }
        // path params
        if ($order_type !== null) {
            $resourcePath = str_replace(
                '{' . 'orderType' . '}',
                ObjectSerializer::toPathValue($order_type),
                $resourcePath
            );
        }
        // path params
        if ($line_number !== null) {
            $resourcePath = str_replace(
                '{' . 'lineNumber' . '}',
                ObjectSerializer::toPathValue($line_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderCreateShipmentActionBysaleOrderNumber
     *
     * Create shipment operation
     *
     * @param  string $sale_order_number Reference number of the sale oreder from which the shipment will be created (required)
     * @param  \Ekstralys\VismaNetApi\Model\CreateShipmentActionDto $create_shipment_action_dto Defines the data for the action (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CreateShipmentActionResultDto
     */
    public function salesOrderCreateShipmentActionBysaleOrderNumber($sale_order_number, $create_shipment_action_dto)
    {
        list($response) = $this->salesOrderCreateShipmentActionBysaleOrderNumberWithHttpInfo($sale_order_number, $create_shipment_action_dto);
        return $response;
    }

    /**
     * Operation salesOrderCreateShipmentActionBysaleOrderNumberWithHttpInfo
     *
     * Create shipment operation
     *
     * @param  string $sale_order_number Reference number of the sale oreder from which the shipment will be created (required)
     * @param  \Ekstralys\VismaNetApi\Model\CreateShipmentActionDto $create_shipment_action_dto Defines the data for the action (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CreateShipmentActionResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderCreateShipmentActionBysaleOrderNumberWithHttpInfo($sale_order_number, $create_shipment_action_dto)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CreateShipmentActionResultDto';
        $request = $this->salesOrderCreateShipmentActionBysaleOrderNumberRequest($sale_order_number, $create_shipment_action_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CreateShipmentActionResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderCreateShipmentActionBysaleOrderNumberAsync
     *
     * Create shipment operation
     *
     * @param  string $sale_order_number Reference number of the sale oreder from which the shipment will be created (required)
     * @param  \Ekstralys\VismaNetApi\Model\CreateShipmentActionDto $create_shipment_action_dto Defines the data for the action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCreateShipmentActionBysaleOrderNumberAsync($sale_order_number, $create_shipment_action_dto)
    {
        return $this->salesOrderCreateShipmentActionBysaleOrderNumberAsyncWithHttpInfo($sale_order_number, $create_shipment_action_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderCreateShipmentActionBysaleOrderNumberAsyncWithHttpInfo
     *
     * Create shipment operation
     *
     * @param  string $sale_order_number Reference number of the sale oreder from which the shipment will be created (required)
     * @param  \Ekstralys\VismaNetApi\Model\CreateShipmentActionDto $create_shipment_action_dto Defines the data for the action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCreateShipmentActionBysaleOrderNumberAsyncWithHttpInfo($sale_order_number, $create_shipment_action_dto)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CreateShipmentActionResultDto';
        $request = $this->salesOrderCreateShipmentActionBysaleOrderNumberRequest($sale_order_number, $create_shipment_action_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderCreateShipmentActionBysaleOrderNumber'
     *
     * @param  string $sale_order_number Reference number of the sale oreder from which the shipment will be created (required)
     * @param  \Ekstralys\VismaNetApi\Model\CreateShipmentActionDto $create_shipment_action_dto Defines the data for the action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderCreateShipmentActionBysaleOrderNumberRequest($sale_order_number, $create_shipment_action_dto)
    {
        // verify the required parameter 'sale_order_number' is set
        if ($sale_order_number === null || (is_array($sale_order_number) && count($sale_order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sale_order_number when calling salesOrderCreateShipmentActionBysaleOrderNumber'
            );
        }
        // verify the required parameter 'create_shipment_action_dto' is set
        if ($create_shipment_action_dto === null || (is_array($create_shipment_action_dto) && count($create_shipment_action_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_shipment_action_dto when calling salesOrderCreateShipmentActionBysaleOrderNumber'
            );
        }

        $resourcePath = '/controller/api/v1/salesorder/{saleOrderNumber}/action/createShipment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sale_order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'saleOrderNumber' . '}',
                ObjectSerializer::toPathValue($sale_order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($create_shipment_action_dto)) {
            $_tempBody = $create_shipment_action_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderGetAllOrders
     *
     * Get a range of SO Orders - ScreenId=SO301000  Request page size must be lower or equal to the allowed max page size which is returned as part of the metadata information.  If requested page size is greater than allowed max page size, request will be limited to max page size  Change log:  2020-May:Added force pagination
     *
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\SalesOrderDto[]
     */
    public function salesOrderGetAllOrders($order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        list($response) = $this->salesOrderGetAllOrdersWithHttpInfo($order_type, $status, $greater_than_value, $number_to_read, $skip_records, $order_by, $show_notes, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size);
        return $response;
    }

    /**
     * Operation salesOrderGetAllOrdersWithHttpInfo
     *
     * Get a range of SO Orders - ScreenId=SO301000  Request page size must be lower or equal to the allowed max page size which is returned as part of the metadata information.  If requested page size is greater than allowed max page size, request will be limited to max page size  Change log:  2020-May:Added force pagination
     *
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\SalesOrderDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderGetAllOrdersWithHttpInfo($order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\SalesOrderDto[]';
        $request = $this->salesOrderGetAllOrdersRequest($order_type, $status, $greater_than_value, $number_to_read, $skip_records, $order_by, $show_notes, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\SalesOrderDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderGetAllOrdersAsync
     *
     * Get a range of SO Orders - ScreenId=SO301000  Request page size must be lower or equal to the allowed max page size which is returned as part of the metadata information.  If requested page size is greater than allowed max page size, request will be limited to max page size  Change log:  2020-May:Added force pagination
     *
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderGetAllOrdersAsync($order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        return $this->salesOrderGetAllOrdersAsyncWithHttpInfo($order_type, $status, $greater_than_value, $number_to_read, $skip_records, $order_by, $show_notes, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderGetAllOrdersAsyncWithHttpInfo
     *
     * Get a range of SO Orders - ScreenId=SO301000  Request page size must be lower or equal to the allowed max page size which is returned as part of the metadata information.  If requested page size is greater than allowed max page size, request will be limited to max page size  Change log:  2020-May:Added force pagination
     *
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderGetAllOrdersAsyncWithHttpInfo($order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\SalesOrderDto[]';
        $request = $this->salesOrderGetAllOrdersRequest($order_type, $status, $greater_than_value, $number_to_read, $skip_records, $order_by, $show_notes, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderGetAllOrders'
     *
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderGetAllOrdersRequest($order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {

        $resourcePath = '/controller/api/v1/salesorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_type !== null) {
            $queryParams['orderType'] = ObjectSerializer::toQueryValue($order_type);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($greater_than_value !== null) {
            $queryParams['greaterThanValue'] = ObjectSerializer::toQueryValue($greater_than_value);
        }
        // query params
        if ($number_to_read !== null) {
            $queryParams['numberToRead'] = ObjectSerializer::toQueryValue($number_to_read);
        }
        // query params
        if ($skip_records !== null) {
            $queryParams['skipRecords'] = ObjectSerializer::toQueryValue($skip_records);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($show_notes !== null) {
            $queryParams['showNotes'] = ObjectSerializer::toQueryValue($show_notes);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderGetByorderNbr
     *
     * Get a specific SO Order
     *
     * @param  string $order_nbr Identifies the Sales Order Number (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\SalesOrderDto
     */
    public function salesOrderGetByorderNbr($order_nbr)
    {
        list($response) = $this->salesOrderGetByorderNbrWithHttpInfo($order_nbr);
        return $response;
    }

    /**
     * Operation salesOrderGetByorderNbrWithHttpInfo
     *
     * Get a specific SO Order
     *
     * @param  string $order_nbr Identifies the Sales Order Number (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\SalesOrderDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderGetByorderNbrWithHttpInfo($order_nbr)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\SalesOrderDto';
        $request = $this->salesOrderGetByorderNbrRequest($order_nbr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\SalesOrderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderGetByorderNbrAsync
     *
     * Get a specific SO Order
     *
     * @param  string $order_nbr Identifies the Sales Order Number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderGetByorderNbrAsync($order_nbr)
    {
        return $this->salesOrderGetByorderNbrAsyncWithHttpInfo($order_nbr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderGetByorderNbrAsyncWithHttpInfo
     *
     * Get a specific SO Order
     *
     * @param  string $order_nbr Identifies the Sales Order Number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderGetByorderNbrAsyncWithHttpInfo($order_nbr)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\SalesOrderDto';
        $request = $this->salesOrderGetByorderNbrRequest($order_nbr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderGetByorderNbr'
     *
     * @param  string $order_nbr Identifies the Sales Order Number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderGetByorderNbrRequest($order_nbr)
    {
        // verify the required parameter 'order_nbr' is set
        if ($order_nbr === null || (is_array($order_nbr) && count($order_nbr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_nbr when calling salesOrderGetByorderNbr'
            );
        }

        $resourcePath = '/controller/api/v1/salesorder/{orderNbr}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_nbr !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNbr' . '}',
                ObjectSerializer::toPathValue($order_nbr),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderGetCommissionsByorderTypeorderNbr
     *
     * Get Sales Order Commissions - ScreenId=SO301000, tab Commissions
     *
     * @param  string $order_type order_type (required)
     * @param  string $order_nbr order_nbr (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\SOCommissionDto[]
     */
    public function salesOrderGetCommissionsByorderTypeorderNbr($order_type, $order_nbr)
    {
        list($response) = $this->salesOrderGetCommissionsByorderTypeorderNbrWithHttpInfo($order_type, $order_nbr);
        return $response;
    }

    /**
     * Operation salesOrderGetCommissionsByorderTypeorderNbrWithHttpInfo
     *
     * Get Sales Order Commissions - ScreenId=SO301000, tab Commissions
     *
     * @param  string $order_type (required)
     * @param  string $order_nbr (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\SOCommissionDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderGetCommissionsByorderTypeorderNbrWithHttpInfo($order_type, $order_nbr)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\SOCommissionDto[]';
        $request = $this->salesOrderGetCommissionsByorderTypeorderNbrRequest($order_type, $order_nbr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\SOCommissionDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderGetCommissionsByorderTypeorderNbrAsync
     *
     * Get Sales Order Commissions - ScreenId=SO301000, tab Commissions
     *
     * @param  string $order_type (required)
     * @param  string $order_nbr (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderGetCommissionsByorderTypeorderNbrAsync($order_type, $order_nbr)
    {
        return $this->salesOrderGetCommissionsByorderTypeorderNbrAsyncWithHttpInfo($order_type, $order_nbr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderGetCommissionsByorderTypeorderNbrAsyncWithHttpInfo
     *
     * Get Sales Order Commissions - ScreenId=SO301000, tab Commissions
     *
     * @param  string $order_type (required)
     * @param  string $order_nbr (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderGetCommissionsByorderTypeorderNbrAsyncWithHttpInfo($order_type, $order_nbr)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\SOCommissionDto[]';
        $request = $this->salesOrderGetCommissionsByorderTypeorderNbrRequest($order_type, $order_nbr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderGetCommissionsByorderTypeorderNbr'
     *
     * @param  string $order_type (required)
     * @param  string $order_nbr (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderGetCommissionsByorderTypeorderNbrRequest($order_type, $order_nbr)
    {
        // verify the required parameter 'order_type' is set
        if ($order_type === null || (is_array($order_type) && count($order_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_type when calling salesOrderGetCommissionsByorderTypeorderNbr'
            );
        }
        // verify the required parameter 'order_nbr' is set
        if ($order_nbr === null || (is_array($order_nbr) && count($order_nbr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_nbr when calling salesOrderGetCommissionsByorderTypeorderNbr'
            );
        }

        $resourcePath = '/controller/api/v1/salesorder/{orderType}/{orderNbr}/commissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_type !== null) {
            $resourcePath = str_replace(
                '{' . 'orderType' . '}',
                ObjectSerializer::toPathValue($order_type),
                $resourcePath
            );
        }
        // path params
        if ($order_nbr !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNbr' . '}',
                ObjectSerializer::toPathValue($order_nbr),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderGetOrderByTypeByorderTypeorderNbr
     *
     * Get a specific type of Order
     *
     * @param  string $order_type Identifies the Sales Order Type (required)
     * @param  string $order_nbr Identifies the Sales Order Number (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\SalesOrderDto
     */
    public function salesOrderGetOrderByTypeByorderTypeorderNbr($order_type, $order_nbr)
    {
        list($response) = $this->salesOrderGetOrderByTypeByorderTypeorderNbrWithHttpInfo($order_type, $order_nbr);
        return $response;
    }

    /**
     * Operation salesOrderGetOrderByTypeByorderTypeorderNbrWithHttpInfo
     *
     * Get a specific type of Order
     *
     * @param  string $order_type Identifies the Sales Order Type (required)
     * @param  string $order_nbr Identifies the Sales Order Number (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\SalesOrderDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderGetOrderByTypeByorderTypeorderNbrWithHttpInfo($order_type, $order_nbr)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\SalesOrderDto';
        $request = $this->salesOrderGetOrderByTypeByorderTypeorderNbrRequest($order_type, $order_nbr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\SalesOrderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderGetOrderByTypeByorderTypeorderNbrAsync
     *
     * Get a specific type of Order
     *
     * @param  string $order_type Identifies the Sales Order Type (required)
     * @param  string $order_nbr Identifies the Sales Order Number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderGetOrderByTypeByorderTypeorderNbrAsync($order_type, $order_nbr)
    {
        return $this->salesOrderGetOrderByTypeByorderTypeorderNbrAsyncWithHttpInfo($order_type, $order_nbr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderGetOrderByTypeByorderTypeorderNbrAsyncWithHttpInfo
     *
     * Get a specific type of Order
     *
     * @param  string $order_type Identifies the Sales Order Type (required)
     * @param  string $order_nbr Identifies the Sales Order Number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderGetOrderByTypeByorderTypeorderNbrAsyncWithHttpInfo($order_type, $order_nbr)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\SalesOrderDto';
        $request = $this->salesOrderGetOrderByTypeByorderTypeorderNbrRequest($order_type, $order_nbr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderGetOrderByTypeByorderTypeorderNbr'
     *
     * @param  string $order_type Identifies the Sales Order Type (required)
     * @param  string $order_nbr Identifies the Sales Order Number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderGetOrderByTypeByorderTypeorderNbrRequest($order_type, $order_nbr)
    {
        // verify the required parameter 'order_type' is set
        if ($order_type === null || (is_array($order_type) && count($order_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_type when calling salesOrderGetOrderByTypeByorderTypeorderNbr'
            );
        }
        // verify the required parameter 'order_nbr' is set
        if ($order_nbr === null || (is_array($order_nbr) && count($order_nbr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_nbr when calling salesOrderGetOrderByTypeByorderTypeorderNbr'
            );
        }

        $resourcePath = '/controller/api/v1/salesorder/{orderType}/{orderNbr}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_type !== null) {
            $resourcePath = str_replace(
                '{' . 'orderType' . '}',
                ObjectSerializer::toPathValue($order_type),
                $resourcePath
            );
        }
        // path params
        if ($order_nbr !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNbr' . '}',
                ObjectSerializer::toPathValue($order_nbr),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderGetROTRUTByorderTypeorderNbr
     *
     * Get ROT/RUT details for a specific type of order
     *
     * @param  string $order_type  (required)
     * @param  string $order_nbr  (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\RotRutBasicDto
     */
    public function salesOrderGetROTRUTByorderTypeorderNbr($order_type, $order_nbr)
    {
        list($response) = $this->salesOrderGetROTRUTByorderTypeorderNbrWithHttpInfo($order_type, $order_nbr);
        return $response;
    }

    /**
     * Operation salesOrderGetROTRUTByorderTypeorderNbrWithHttpInfo
     *
     * Get ROT/RUT details for a specific type of order
     *
     * @param  string $order_type  (required)
     * @param  string $order_nbr  (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\RotRutBasicDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderGetROTRUTByorderTypeorderNbrWithHttpInfo($order_type, $order_nbr)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\RotRutBasicDto';
        $request = $this->salesOrderGetROTRUTByorderTypeorderNbrRequest($order_type, $order_nbr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\RotRutBasicDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderGetROTRUTByorderTypeorderNbrAsync
     *
     * Get ROT/RUT details for a specific type of order
     *
     * @param  string $order_type  (required)
     * @param  string $order_nbr  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderGetROTRUTByorderTypeorderNbrAsync($order_type, $order_nbr)
    {
        return $this->salesOrderGetROTRUTByorderTypeorderNbrAsyncWithHttpInfo($order_type, $order_nbr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderGetROTRUTByorderTypeorderNbrAsyncWithHttpInfo
     *
     * Get ROT/RUT details for a specific type of order
     *
     * @param  string $order_type  (required)
     * @param  string $order_nbr  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderGetROTRUTByorderTypeorderNbrAsyncWithHttpInfo($order_type, $order_nbr)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\RotRutBasicDto';
        $request = $this->salesOrderGetROTRUTByorderTypeorderNbrRequest($order_type, $order_nbr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderGetROTRUTByorderTypeorderNbr'
     *
     * @param  string $order_type  (required)
     * @param  string $order_nbr  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderGetROTRUTByorderTypeorderNbrRequest($order_type, $order_nbr)
    {
        // verify the required parameter 'order_type' is set
        if ($order_type === null || (is_array($order_type) && count($order_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_type when calling salesOrderGetROTRUTByorderTypeorderNbr'
            );
        }
        // verify the required parameter 'order_nbr' is set
        if ($order_nbr === null || (is_array($order_nbr) && count($order_nbr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_nbr when calling salesOrderGetROTRUTByorderTypeorderNbr'
            );
        }

        $resourcePath = '/controller/api/v1/salesorder/{orderType}/{orderNbr}/rotrut';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_type !== null) {
            $resourcePath = str_replace(
                '{' . 'orderType' . '}',
                ObjectSerializer::toPathValue($order_type),
                $resourcePath
            );
        }
        // path params
        if ($order_nbr !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNbr' . '}',
                ObjectSerializer::toPathValue($order_nbr),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPost
     *
     * Create a Sale Order
     *
     * @param  \Ekstralys\VismaNetApi\Model\SalesOrderUpdateDto $sale_order_update_dto Defines the data for the Sale Order to create (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function salesOrderPost($sale_order_update_dto)
    {
        list($response) = $this->salesOrderPostWithHttpInfo($sale_order_update_dto);
        return $response;
    }

    /**
     * Operation salesOrderPostWithHttpInfo
     *
     * Create a Sale Order
     *
     * @param  \Ekstralys\VismaNetApi\Model\SalesOrderUpdateDto $sale_order_update_dto Defines the data for the Sale Order to create (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPostWithHttpInfo($sale_order_update_dto)
    {
        $returnType = 'object';
        $request = $this->salesOrderPostRequest($sale_order_update_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPostAsync
     *
     * Create a Sale Order
     *
     * @param  \Ekstralys\VismaNetApi\Model\SalesOrderUpdateDto $sale_order_update_dto Defines the data for the Sale Order to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPostAsync($sale_order_update_dto)
    {
        return $this->salesOrderPostAsyncWithHttpInfo($sale_order_update_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPostAsyncWithHttpInfo
     *
     * Create a Sale Order
     *
     * @param  \Ekstralys\VismaNetApi\Model\SalesOrderUpdateDto $sale_order_update_dto Defines the data for the Sale Order to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPostAsyncWithHttpInfo($sale_order_update_dto)
    {
        $returnType = 'object';
        $request = $this->salesOrderPostRequest($sale_order_update_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPost'
     *
     * @param  \Ekstralys\VismaNetApi\Model\SalesOrderUpdateDto $sale_order_update_dto Defines the data for the Sale Order to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPostRequest($sale_order_update_dto)
    {
        // verify the required parameter 'sale_order_update_dto' is set
        if ($sale_order_update_dto === null || (is_array($sale_order_update_dto) && count($sale_order_update_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sale_order_update_dto when calling salesOrderPost'
            );
        }

        $resourcePath = '/controller/api/v1/salesorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sale_order_update_dto)) {
            $_tempBody = $sale_order_update_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPrintOrderByorderNumberorderType
     *
     * Get the print report of the Sales Order Quote
     *
     * @param  string $order_number Identifies the order (required)
     * @param  string $order_type Identifies the Sales Order Type (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function salesOrderPrintOrderByorderNumberorderType($order_number, $order_type)
    {
        list($response) = $this->salesOrderPrintOrderByorderNumberorderTypeWithHttpInfo($order_number, $order_type);
        return $response;
    }

    /**
     * Operation salesOrderPrintOrderByorderNumberorderTypeWithHttpInfo
     *
     * Get the print report of the Sales Order Quote
     *
     * @param  string $order_number Identifies the order (required)
     * @param  string $order_type Identifies the Sales Order Type (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPrintOrderByorderNumberorderTypeWithHttpInfo($order_number, $order_type)
    {
        $returnType = 'object';
        $request = $this->salesOrderPrintOrderByorderNumberorderTypeRequest($order_number, $order_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPrintOrderByorderNumberorderTypeAsync
     *
     * Get the print report of the Sales Order Quote
     *
     * @param  string $order_number Identifies the order (required)
     * @param  string $order_type Identifies the Sales Order Type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPrintOrderByorderNumberorderTypeAsync($order_number, $order_type)
    {
        return $this->salesOrderPrintOrderByorderNumberorderTypeAsyncWithHttpInfo($order_number, $order_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPrintOrderByorderNumberorderTypeAsyncWithHttpInfo
     *
     * Get the print report of the Sales Order Quote
     *
     * @param  string $order_number Identifies the order (required)
     * @param  string $order_type Identifies the Sales Order Type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPrintOrderByorderNumberorderTypeAsyncWithHttpInfo($order_number, $order_type)
    {
        $returnType = 'object';
        $request = $this->salesOrderPrintOrderByorderNumberorderTypeRequest($order_number, $order_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPrintOrderByorderNumberorderType'
     *
     * @param  string $order_number Identifies the order (required)
     * @param  string $order_type Identifies the Sales Order Type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPrintOrderByorderNumberorderTypeRequest($order_number, $order_type)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling salesOrderPrintOrderByorderNumberorderType'
            );
        }
        // verify the required parameter 'order_type' is set
        if ($order_type === null || (is_array($order_type) && count($order_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_type when calling salesOrderPrintOrderByorderNumberorderType'
            );
        }

        $resourcePath = '/controller/api/v1/salesorder/{orderType}/{orderNumber}/printOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }
        // path params
        if ($order_type !== null) {
            $resourcePath = str_replace(
                '{' . 'orderType' . '}',
                ObjectSerializer::toPathValue($order_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPutByorderNbr
     *
     * Update a specific Sale Order
     *
     * @param  string $order_nbr Identifies the Sale Order to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\SalesOrderUpdateDto $sale_order_update_dto Defines the data for the Sale Order to update (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function salesOrderPutByorderNbr($order_nbr, $sale_order_update_dto)
    {
        list($response) = $this->salesOrderPutByorderNbrWithHttpInfo($order_nbr, $sale_order_update_dto);
        return $response;
    }

    /**
     * Operation salesOrderPutByorderNbrWithHttpInfo
     *
     * Update a specific Sale Order
     *
     * @param  string $order_nbr Identifies the Sale Order to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\SalesOrderUpdateDto $sale_order_update_dto Defines the data for the Sale Order to update (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPutByorderNbrWithHttpInfo($order_nbr, $sale_order_update_dto)
    {
        $returnType = 'object';
        $request = $this->salesOrderPutByorderNbrRequest($order_nbr, $sale_order_update_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPutByorderNbrAsync
     *
     * Update a specific Sale Order
     *
     * @param  string $order_nbr Identifies the Sale Order to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\SalesOrderUpdateDto $sale_order_update_dto Defines the data for the Sale Order to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPutByorderNbrAsync($order_nbr, $sale_order_update_dto)
    {
        return $this->salesOrderPutByorderNbrAsyncWithHttpInfo($order_nbr, $sale_order_update_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPutByorderNbrAsyncWithHttpInfo
     *
     * Update a specific Sale Order
     *
     * @param  string $order_nbr Identifies the Sale Order to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\SalesOrderUpdateDto $sale_order_update_dto Defines the data for the Sale Order to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPutByorderNbrAsyncWithHttpInfo($order_nbr, $sale_order_update_dto)
    {
        $returnType = 'object';
        $request = $this->salesOrderPutByorderNbrRequest($order_nbr, $sale_order_update_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPutByorderNbr'
     *
     * @param  string $order_nbr Identifies the Sale Order to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\SalesOrderUpdateDto $sale_order_update_dto Defines the data for the Sale Order to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPutByorderNbrRequest($order_nbr, $sale_order_update_dto)
    {
        // verify the required parameter 'order_nbr' is set
        if ($order_nbr === null || (is_array($order_nbr) && count($order_nbr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_nbr when calling salesOrderPutByorderNbr'
            );
        }
        // verify the required parameter 'sale_order_update_dto' is set
        if ($sale_order_update_dto === null || (is_array($sale_order_update_dto) && count($sale_order_update_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sale_order_update_dto when calling salesOrderPutByorderNbr'
            );
        }

        $resourcePath = '/controller/api/v1/salesorder/{orderNbr}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_nbr !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNbr' . '}',
                ObjectSerializer::toPathValue($order_nbr),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($sale_order_update_dto)) {
            $_tempBody = $sale_order_update_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderReopenSalesOrderBysalesOrderNumber
     *
     * Reopen and update a specific Sales Order. This method requires a sales order update dto where the order type is initialised.
     *
     * @param  string $sales_order_number Identifies the Sale Order to reopen (required)
     * @param  \Ekstralys\VismaNetApi\Model\ReopenSalesOrderActionDto $reopen_sales_order_action_dto  (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\ReopenSalesOrderActionResultDto
     */
    public function salesOrderReopenSalesOrderBysalesOrderNumber($sales_order_number, $reopen_sales_order_action_dto)
    {
        list($response) = $this->salesOrderReopenSalesOrderBysalesOrderNumberWithHttpInfo($sales_order_number, $reopen_sales_order_action_dto);
        return $response;
    }

    /**
     * Operation salesOrderReopenSalesOrderBysalesOrderNumberWithHttpInfo
     *
     * Reopen and update a specific Sales Order. This method requires a sales order update dto where the order type is initialised.
     *
     * @param  string $sales_order_number Identifies the Sale Order to reopen (required)
     * @param  \Ekstralys\VismaNetApi\Model\ReopenSalesOrderActionDto $reopen_sales_order_action_dto  (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\ReopenSalesOrderActionResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderReopenSalesOrderBysalesOrderNumberWithHttpInfo($sales_order_number, $reopen_sales_order_action_dto)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ReopenSalesOrderActionResultDto';
        $request = $this->salesOrderReopenSalesOrderBysalesOrderNumberRequest($sales_order_number, $reopen_sales_order_action_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\ReopenSalesOrderActionResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderReopenSalesOrderBysalesOrderNumberAsync
     *
     * Reopen and update a specific Sales Order. This method requires a sales order update dto where the order type is initialised.
     *
     * @param  string $sales_order_number Identifies the Sale Order to reopen (required)
     * @param  \Ekstralys\VismaNetApi\Model\ReopenSalesOrderActionDto $reopen_sales_order_action_dto  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderReopenSalesOrderBysalesOrderNumberAsync($sales_order_number, $reopen_sales_order_action_dto)
    {
        return $this->salesOrderReopenSalesOrderBysalesOrderNumberAsyncWithHttpInfo($sales_order_number, $reopen_sales_order_action_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderReopenSalesOrderBysalesOrderNumberAsyncWithHttpInfo
     *
     * Reopen and update a specific Sales Order. This method requires a sales order update dto where the order type is initialised.
     *
     * @param  string $sales_order_number Identifies the Sale Order to reopen (required)
     * @param  \Ekstralys\VismaNetApi\Model\ReopenSalesOrderActionDto $reopen_sales_order_action_dto  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderReopenSalesOrderBysalesOrderNumberAsyncWithHttpInfo($sales_order_number, $reopen_sales_order_action_dto)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ReopenSalesOrderActionResultDto';
        $request = $this->salesOrderReopenSalesOrderBysalesOrderNumberRequest($sales_order_number, $reopen_sales_order_action_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderReopenSalesOrderBysalesOrderNumber'
     *
     * @param  string $sales_order_number Identifies the Sale Order to reopen (required)
     * @param  \Ekstralys\VismaNetApi\Model\ReopenSalesOrderActionDto $reopen_sales_order_action_dto  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderReopenSalesOrderBysalesOrderNumberRequest($sales_order_number, $reopen_sales_order_action_dto)
    {
        // verify the required parameter 'sales_order_number' is set
        if ($sales_order_number === null || (is_array($sales_order_number) && count($sales_order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_number when calling salesOrderReopenSalesOrderBysalesOrderNumber'
            );
        }
        // verify the required parameter 'reopen_sales_order_action_dto' is set
        if ($reopen_sales_order_action_dto === null || (is_array($reopen_sales_order_action_dto) && count($reopen_sales_order_action_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reopen_sales_order_action_dto when calling salesOrderReopenSalesOrderBysalesOrderNumber'
            );
        }

        $resourcePath = '/controller/api/v1/salesorder/{salesOrderNumber}/action/reopenSalesOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sales_order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'salesOrderNumber' . '}',
                ObjectSerializer::toPathValue($sales_order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($reopen_sales_order_action_dto)) {
            $_tempBody = $reopen_sales_order_action_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
