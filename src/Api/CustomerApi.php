<?php
/**
 * CustomerApi
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ekstralys\VismaNetApi\ApiException;
use Ekstralys\VismaNetApi\Configuration;
use Ekstralys\VismaNetApi\HeaderSelector;
use Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * CustomerApi Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation customerChangeCustomerNrActionByinternalId
     *
     * Updates the CustomerNr for the specified Customer
     *
     * @param  int $internal_id Internal identifier of the Customer for which the Customer Nr will be changed (required)
     * @param  \Ekstralys\VismaNetApi\Model\ChangeCustomerCdActionDto $change_customer_nr_action_dto change_customer_nr_action_dto (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\ChangeCustomerCdActionResultDto
     */
    public function customerChangeCustomerNrActionByinternalId($internal_id, $change_customer_nr_action_dto)
    {
        list($response) = $this->customerChangeCustomerNrActionByinternalIdWithHttpInfo($internal_id, $change_customer_nr_action_dto);
        return $response;
    }

    /**
     * Operation customerChangeCustomerNrActionByinternalIdWithHttpInfo
     *
     * Updates the CustomerNr for the specified Customer
     *
     * @param  int $internal_id Internal identifier of the Customer for which the Customer Nr will be changed (required)
     * @param  \Ekstralys\VismaNetApi\Model\ChangeCustomerCdActionDto $change_customer_nr_action_dto (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\ChangeCustomerCdActionResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerChangeCustomerNrActionByinternalIdWithHttpInfo($internal_id, $change_customer_nr_action_dto)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ChangeCustomerCdActionResultDto';
        $request = $this->customerChangeCustomerNrActionByinternalIdRequest($internal_id, $change_customer_nr_action_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\ChangeCustomerCdActionResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerChangeCustomerNrActionByinternalIdAsync
     *
     * Updates the CustomerNr for the specified Customer
     *
     * @param  int $internal_id Internal identifier of the Customer for which the Customer Nr will be changed (required)
     * @param  \Ekstralys\VismaNetApi\Model\ChangeCustomerCdActionDto $change_customer_nr_action_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerChangeCustomerNrActionByinternalIdAsync($internal_id, $change_customer_nr_action_dto)
    {
        return $this->customerChangeCustomerNrActionByinternalIdAsyncWithHttpInfo($internal_id, $change_customer_nr_action_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerChangeCustomerNrActionByinternalIdAsyncWithHttpInfo
     *
     * Updates the CustomerNr for the specified Customer
     *
     * @param  int $internal_id Internal identifier of the Customer for which the Customer Nr will be changed (required)
     * @param  \Ekstralys\VismaNetApi\Model\ChangeCustomerCdActionDto $change_customer_nr_action_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerChangeCustomerNrActionByinternalIdAsyncWithHttpInfo($internal_id, $change_customer_nr_action_dto)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ChangeCustomerCdActionResultDto';
        $request = $this->customerChangeCustomerNrActionByinternalIdRequest($internal_id, $change_customer_nr_action_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerChangeCustomerNrActionByinternalId'
     *
     * @param  int $internal_id Internal identifier of the Customer for which the Customer Nr will be changed (required)
     * @param  \Ekstralys\VismaNetApi\Model\ChangeCustomerCdActionDto $change_customer_nr_action_dto (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerChangeCustomerNrActionByinternalIdRequest($internal_id, $change_customer_nr_action_dto)
    {
        // verify the required parameter 'internal_id' is set
        if ($internal_id === null || (is_array($internal_id) && count($internal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $internal_id when calling customerChangeCustomerNrActionByinternalId'
            );
        }
        // verify the required parameter 'change_customer_nr_action_dto' is set
        if ($change_customer_nr_action_dto === null || (is_array($change_customer_nr_action_dto) && count($change_customer_nr_action_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $change_customer_nr_action_dto when calling customerChangeCustomerNrActionByinternalId'
            );
        }

        $resourcePath = '/controller/api/v1/customer/action/changeCustomerCd/{internalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($internal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'internalId' . '}',
                ObjectSerializer::toPathValue($internal_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($change_customer_nr_action_dto)) {
            $_tempBody = $change_customer_nr_action_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerCreateDunningLetterActionBycustomer
     *
     * Creates dunning letters for a specific customer
     *
     * @param  string $customer Reference number of the customer for which the dunning letters will be created (required)
     * @param  \Ekstralys\VismaNetApi\Model\CreateDunningLetterActionDto $create_dunning_letter_action_dto Defines the data for the dunning letters to be created (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CreateDunningLetterActionResultDto
     */
    public function customerCreateDunningLetterActionBycustomer($customer, $create_dunning_letter_action_dto)
    {
        list($response) = $this->customerCreateDunningLetterActionBycustomerWithHttpInfo($customer, $create_dunning_letter_action_dto);
        return $response;
    }

    /**
     * Operation customerCreateDunningLetterActionBycustomerWithHttpInfo
     *
     * Creates dunning letters for a specific customer
     *
     * @param  string $customer Reference number of the customer for which the dunning letters will be created (required)
     * @param  \Ekstralys\VismaNetApi\Model\CreateDunningLetterActionDto $create_dunning_letter_action_dto Defines the data for the dunning letters to be created (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CreateDunningLetterActionResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCreateDunningLetterActionBycustomerWithHttpInfo($customer, $create_dunning_letter_action_dto)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CreateDunningLetterActionResultDto';
        $request = $this->customerCreateDunningLetterActionBycustomerRequest($customer, $create_dunning_letter_action_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CreateDunningLetterActionResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerCreateDunningLetterActionBycustomerAsync
     *
     * Creates dunning letters for a specific customer
     *
     * @param  string $customer Reference number of the customer for which the dunning letters will be created (required)
     * @param  \Ekstralys\VismaNetApi\Model\CreateDunningLetterActionDto $create_dunning_letter_action_dto Defines the data for the dunning letters to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreateDunningLetterActionBycustomerAsync($customer, $create_dunning_letter_action_dto)
    {
        return $this->customerCreateDunningLetterActionBycustomerAsyncWithHttpInfo($customer, $create_dunning_letter_action_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerCreateDunningLetterActionBycustomerAsyncWithHttpInfo
     *
     * Creates dunning letters for a specific customer
     *
     * @param  string $customer Reference number of the customer for which the dunning letters will be created (required)
     * @param  \Ekstralys\VismaNetApi\Model\CreateDunningLetterActionDto $create_dunning_letter_action_dto Defines the data for the dunning letters to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreateDunningLetterActionBycustomerAsyncWithHttpInfo($customer, $create_dunning_letter_action_dto)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CreateDunningLetterActionResultDto';
        $request = $this->customerCreateDunningLetterActionBycustomerRequest($customer, $create_dunning_letter_action_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerCreateDunningLetterActionBycustomer'
     *
     * @param  string $customer Reference number of the customer for which the dunning letters will be created (required)
     * @param  \Ekstralys\VismaNetApi\Model\CreateDunningLetterActionDto $create_dunning_letter_action_dto Defines the data for the dunning letters to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerCreateDunningLetterActionBycustomerRequest($customer, $create_dunning_letter_action_dto)
    {
        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling customerCreateDunningLetterActionBycustomer'
            );
        }
        // verify the required parameter 'create_dunning_letter_action_dto' is set
        if ($create_dunning_letter_action_dto === null || (is_array($create_dunning_letter_action_dto) && count($create_dunning_letter_action_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_dunning_letter_action_dto when calling customerCreateDunningLetterActionBycustomer'
            );
        }

        $resourcePath = '/controller/api/v1/customer/{customer}/action/createDunningLetter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($create_dunning_letter_action_dto)) {
            $_tempBody = $create_dunning_letter_action_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetAll
     *
     * Get a range of customers - ScreenId=AR303000
     *
     * @param  string $greater_than_value This field does not work and has been deprecated. It will be removed in future versions. (optional)
     * @param  int $number_to_read [This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.]  Tells the service to return only {numberToRead} number of records. (optional)
     * @param  int $skip_records [This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.]  Tells the service to return only records after the first {skipRecords} number of records. (optional)
     * @param  string $name Equals Customer name. (optional)
     * @param  string $status Drop down and select Status. (optional)
     * @param  string $corporate_id Equals Corporate ID from Delivery settings tab. (optional)
     * @param  string $vat_registration_id Equals VAT registration ID from Delivery settings tab. (optional)
     * @param  string $email Equals Email for customer. (optional)
     * @param  string $phone Equals Phone 1 for customer. (optional)
     * @param  string $last_modified_date_time System retrieved information for last modified date and time. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for date, time and state/condition. (optional)
     * @param  string $created_date_time created_date_time (optional)
     * @param  string $created_date_time_condition created_date_time_condition (optional)
     * @param  bool $expand_account_information expand_account_information (optional)
     * @param  bool $expand_payment_methods expand_payment_methods (optional)
     * @param  bool $expand_direct_debit Expand direct debit info (optional)
     * @param  string $attributes attributes (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CustomerDto[]
     */
    public function customerGetAll($greater_than_value = null, $number_to_read = null, $skip_records = null, $name = null, $status = null, $corporate_id = null, $vat_registration_id = null, $email = null, $phone = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $expand_account_information = null, $expand_payment_methods = null, $expand_direct_debit = null, $attributes = null, $page_number = null, $page_size = null)
    {
        list($response) = $this->customerGetAllWithHttpInfo($greater_than_value, $number_to_read, $skip_records, $name, $status, $corporate_id, $vat_registration_id, $email, $phone, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $expand_account_information, $expand_payment_methods, $expand_direct_debit, $attributes, $page_number, $page_size);
        return $response;
    }

    /**
     * Operation customerGetAllWithHttpInfo
     *
     * Get a range of customers - ScreenId=AR303000
     *
     * @param  string $greater_than_value This field does not work and has been deprecated. It will be removed in future versions. (optional)
     * @param  int $number_to_read [This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.]  Tells the service to return only {numberToRead} number of records. (optional)
     * @param  int $skip_records [This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.]  Tells the service to return only records after the first {skipRecords} number of records. (optional)
     * @param  string $name Equals Customer name. (optional)
     * @param  string $status Drop down and select Status. (optional)
     * @param  string $corporate_id Equals Corporate ID from Delivery settings tab. (optional)
     * @param  string $vat_registration_id Equals VAT registration ID from Delivery settings tab. (optional)
     * @param  string $email Equals Email for customer. (optional)
     * @param  string $phone Equals Phone 1 for customer. (optional)
     * @param  string $last_modified_date_time System retrieved information for last modified date and time. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for date, time and state/condition. (optional)
     * @param  string $created_date_time (optional)
     * @param  string $created_date_time_condition (optional)
     * @param  bool $expand_account_information (optional)
     * @param  bool $expand_payment_methods (optional)
     * @param  bool $expand_direct_debit Expand direct debit info (optional)
     * @param  string $attributes (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CustomerDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetAllWithHttpInfo($greater_than_value = null, $number_to_read = null, $skip_records = null, $name = null, $status = null, $corporate_id = null, $vat_registration_id = null, $email = null, $phone = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $expand_account_information = null, $expand_payment_methods = null, $expand_direct_debit = null, $attributes = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerDto[]';
        $request = $this->customerGetAllRequest($greater_than_value, $number_to_read, $skip_records, $name, $status, $corporate_id, $vat_registration_id, $email, $phone, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $expand_account_information, $expand_payment_methods, $expand_direct_debit, $attributes, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CustomerDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetAllAsync
     *
     * Get a range of customers - ScreenId=AR303000
     *
     * @param  string $greater_than_value This field does not work and has been deprecated. It will be removed in future versions. (optional)
     * @param  int $number_to_read [This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.]  Tells the service to return only {numberToRead} number of records. (optional)
     * @param  int $skip_records [This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.]  Tells the service to return only records after the first {skipRecords} number of records. (optional)
     * @param  string $name Equals Customer name. (optional)
     * @param  string $status Drop down and select Status. (optional)
     * @param  string $corporate_id Equals Corporate ID from Delivery settings tab. (optional)
     * @param  string $vat_registration_id Equals VAT registration ID from Delivery settings tab. (optional)
     * @param  string $email Equals Email for customer. (optional)
     * @param  string $phone Equals Phone 1 for customer. (optional)
     * @param  string $last_modified_date_time System retrieved information for last modified date and time. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for date, time and state/condition. (optional)
     * @param  string $created_date_time (optional)
     * @param  string $created_date_time_condition (optional)
     * @param  bool $expand_account_information (optional)
     * @param  bool $expand_payment_methods (optional)
     * @param  bool $expand_direct_debit Expand direct debit info (optional)
     * @param  string $attributes (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllAsync($greater_than_value = null, $number_to_read = null, $skip_records = null, $name = null, $status = null, $corporate_id = null, $vat_registration_id = null, $email = null, $phone = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $expand_account_information = null, $expand_payment_methods = null, $expand_direct_debit = null, $attributes = null, $page_number = null, $page_size = null)
    {
        return $this->customerGetAllAsyncWithHttpInfo($greater_than_value, $number_to_read, $skip_records, $name, $status, $corporate_id, $vat_registration_id, $email, $phone, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $expand_account_information, $expand_payment_methods, $expand_direct_debit, $attributes, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetAllAsyncWithHttpInfo
     *
     * Get a range of customers - ScreenId=AR303000
     *
     * @param  string $greater_than_value This field does not work and has been deprecated. It will be removed in future versions. (optional)
     * @param  int $number_to_read [This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.]  Tells the service to return only {numberToRead} number of records. (optional)
     * @param  int $skip_records [This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.]  Tells the service to return only records after the first {skipRecords} number of records. (optional)
     * @param  string $name Equals Customer name. (optional)
     * @param  string $status Drop down and select Status. (optional)
     * @param  string $corporate_id Equals Corporate ID from Delivery settings tab. (optional)
     * @param  string $vat_registration_id Equals VAT registration ID from Delivery settings tab. (optional)
     * @param  string $email Equals Email for customer. (optional)
     * @param  string $phone Equals Phone 1 for customer. (optional)
     * @param  string $last_modified_date_time System retrieved information for last modified date and time. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for date, time and state/condition. (optional)
     * @param  string $created_date_time (optional)
     * @param  string $created_date_time_condition (optional)
     * @param  bool $expand_account_information (optional)
     * @param  bool $expand_payment_methods (optional)
     * @param  bool $expand_direct_debit Expand direct debit info (optional)
     * @param  string $attributes (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllAsyncWithHttpInfo($greater_than_value = null, $number_to_read = null, $skip_records = null, $name = null, $status = null, $corporate_id = null, $vat_registration_id = null, $email = null, $phone = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $expand_account_information = null, $expand_payment_methods = null, $expand_direct_debit = null, $attributes = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerDto[]';
        $request = $this->customerGetAllRequest($greater_than_value, $number_to_read, $skip_records, $name, $status, $corporate_id, $vat_registration_id, $email, $phone, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $expand_account_information, $expand_payment_methods, $expand_direct_debit, $attributes, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetAll'
     *
     * @param  string $greater_than_value This field does not work and has been deprecated. It will be removed in future versions. (optional)
     * @param  int $number_to_read [This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.]  Tells the service to return only {numberToRead} number of records. (optional)
     * @param  int $skip_records [This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.]  Tells the service to return only records after the first {skipRecords} number of records. (optional)
     * @param  string $name Equals Customer name. (optional)
     * @param  string $status Drop down and select Status. (optional)
     * @param  string $corporate_id Equals Corporate ID from Delivery settings tab. (optional)
     * @param  string $vat_registration_id Equals VAT registration ID from Delivery settings tab. (optional)
     * @param  string $email Equals Email for customer. (optional)
     * @param  string $phone Equals Phone 1 for customer. (optional)
     * @param  string $last_modified_date_time System retrieved information for last modified date and time. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for date, time and state/condition. (optional)
     * @param  string $created_date_time (optional)
     * @param  string $created_date_time_condition (optional)
     * @param  bool $expand_account_information (optional)
     * @param  bool $expand_payment_methods (optional)
     * @param  bool $expand_direct_debit Expand direct debit info (optional)
     * @param  string $attributes (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetAllRequest($greater_than_value = null, $number_to_read = null, $skip_records = null, $name = null, $status = null, $corporate_id = null, $vat_registration_id = null, $email = null, $phone = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $expand_account_information = null, $expand_payment_methods = null, $expand_direct_debit = null, $attributes = null, $page_number = null, $page_size = null)
    {

        $resourcePath = '/controller/api/v1/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($greater_than_value !== null) {
            $queryParams['greaterThanValue'] = ObjectSerializer::toQueryValue($greater_than_value);
        }
        // query params
        if ($number_to_read !== null) {
            $queryParams['numberToRead'] = ObjectSerializer::toQueryValue($number_to_read);
        }
        // query params
        if ($skip_records !== null) {
            $queryParams['skipRecords'] = ObjectSerializer::toQueryValue($skip_records);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($corporate_id !== null) {
            $queryParams['corporateId'] = ObjectSerializer::toQueryValue($corporate_id);
        }
        // query params
        if ($vat_registration_id !== null) {
            $queryParams['vatRegistrationId'] = ObjectSerializer::toQueryValue($vat_registration_id);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($phone !== null) {
            $queryParams['phone'] = ObjectSerializer::toQueryValue($phone);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }
        // query params
        if ($created_date_time !== null) {
            $queryParams['createdDateTime'] = ObjectSerializer::toQueryValue($created_date_time);
        }
        // query params
        if ($created_date_time_condition !== null) {
            $queryParams['createdDateTimeCondition'] = ObjectSerializer::toQueryValue($created_date_time_condition);
        }
        // query params
        if ($expand_account_information !== null) {
            $queryParams['expandAccountInformation'] = ObjectSerializer::toQueryValue($expand_account_information);
        }
        // query params
        if ($expand_payment_methods !== null) {
            $queryParams['expandPaymentMethods'] = ObjectSerializer::toQueryValue($expand_payment_methods);
        }
        // query params
        if ($expand_direct_debit !== null) {
            $queryParams['expandDirectDebit'] = ObjectSerializer::toQueryValue($expand_direct_debit);
        }
        // query params
        if ($attributes !== null) {
            $queryParams['attributes'] = ObjectSerializer::toQueryValue($attributes);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetAllCashSalesForCustomerBycustomerNumber
     *
     * Get a range of cash sales for a specific customer
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CashSaleDto[]
     */
    public function customerGetAllCashSalesForCustomerBycustomerNumber($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        list($response) = $this->customerGetAllCashSalesForCustomerBycustomerNumberWithHttpInfo($customer_number, $document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size);
        return $response;
    }

    /**
     * Operation customerGetAllCashSalesForCustomerBycustomerNumberWithHttpInfo
     *
     * Get a range of cash sales for a specific customer
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CashSaleDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetAllCashSalesForCustomerBycustomerNumberWithHttpInfo($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CashSaleDto[]';
        $request = $this->customerGetAllCashSalesForCustomerBycustomerNumberRequest($customer_number, $document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CashSaleDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetAllCashSalesForCustomerBycustomerNumberAsync
     *
     * Get a range of cash sales for a specific customer
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllCashSalesForCustomerBycustomerNumberAsync($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        return $this->customerGetAllCashSalesForCustomerBycustomerNumberAsyncWithHttpInfo($customer_number, $document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetAllCashSalesForCustomerBycustomerNumberAsyncWithHttpInfo
     *
     * Get a range of cash sales for a specific customer
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllCashSalesForCustomerBycustomerNumberAsyncWithHttpInfo($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CashSaleDto[]';
        $request = $this->customerGetAllCashSalesForCustomerBycustomerNumberRequest($customer_number, $document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetAllCashSalesForCustomerBycustomerNumber'
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetAllCashSalesForCustomerBycustomerNumberRequest($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetAllCashSalesForCustomerBycustomerNumber'
            );
        }

        $resourcePath = '/controller/api/v1/customer/{customerNumber}/cashSale';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($released !== null) {
            $queryParams['released'] = ObjectSerializer::toQueryValue($released);
        }
        // query params
        if ($dunning_level !== null) {
            $queryParams['dunningLevel'] = ObjectSerializer::toQueryValue($dunning_level);
        }
        // query params
        if ($closed_financial_period !== null) {
            $queryParams['closedFinancialPeriod'] = ObjectSerializer::toQueryValue($closed_financial_period);
        }
        // query params
        if ($dunning_letter_date_time !== null) {
            $queryParams['dunningLetterDateTime'] = ObjectSerializer::toQueryValue($dunning_letter_date_time);
        }
        // query params
        if ($dunning_letter_date_time_condition !== null) {
            $queryParams['dunningLetterDateTimeCondition'] = ObjectSerializer::toQueryValue($dunning_letter_date_time_condition);
        }
        // query params
        if ($project !== null) {
            $queryParams['project'] = ObjectSerializer::toQueryValue($project);
        }
        // query params
        if ($expand_applications !== null) {
            $queryParams['expandApplications'] = ObjectSerializer::toQueryValue($expand_applications);
        }
        // query params
        if ($expand_dunning_information !== null) {
            $queryParams['expandDunningInformation'] = ObjectSerializer::toQueryValue($expand_dunning_information);
        }
        // query params
        if ($expand_attachments !== null) {
            $queryParams['expandAttachments'] = ObjectSerializer::toQueryValue($expand_attachments);
        }
        // query params
        if ($expand_tax_details !== null) {
            $queryParams['expandTaxDetails'] = ObjectSerializer::toQueryValue($expand_tax_details);
        }
        // query params
        if ($expand_invoice_address !== null) {
            $queryParams['expandInvoiceAddress'] = ObjectSerializer::toQueryValue($expand_invoice_address);
        }
        // query params
        if ($financial_period !== null) {
            $queryParams['financialPeriod'] = ObjectSerializer::toQueryValue($financial_period);
        }
        // query params
        if ($document_due_date !== null) {
            $queryParams['documentDueDate'] = ObjectSerializer::toQueryValue($document_due_date);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($number_to_read !== null) {
            $queryParams['numberToRead'] = ObjectSerializer::toQueryValue($number_to_read);
        }
        // query params
        if ($skip_records !== null) {
            $queryParams['skipRecords'] = ObjectSerializer::toQueryValue($skip_records);
        }
        // query params
        if ($external_reference !== null) {
            $queryParams['externalReference'] = ObjectSerializer::toQueryValue($external_reference);
        }
        // query params
        if ($payment_reference !== null) {
            $queryParams['paymentReference'] = ObjectSerializer::toQueryValue($payment_reference);
        }
        // query params
        if ($customer_ref_number !== null) {
            $queryParams['customerRefNumber'] = ObjectSerializer::toQueryValue($customer_ref_number);
        }
        // query params
        if ($greater_than_value !== null) {
            $queryParams['greaterThanValue'] = ObjectSerializer::toQueryValue($greater_than_value);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }
        // query params
        if ($created_date_time !== null) {
            $queryParams['createdDateTime'] = ObjectSerializer::toQueryValue($created_date_time);
        }
        // query params
        if ($created_date_time_condition !== null) {
            $queryParams['createdDateTimeCondition'] = ObjectSerializer::toQueryValue($created_date_time_condition);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetAllContactsForCustomerBycustomerCd
     *
     * Get a range of Contacts of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  string $display_name display_name (optional)
     * @param  string $active active (optional)
     * @param  string $first_name first_name (optional)
     * @param  string $last_name last_name (optional)
     * @param  string $business_account business_account (optional)
     * @param  string $email email (optional)
     * @param  string $greater_than_value greater_than_value (optional)
     * @param  int $number_to_read number_to_read (optional)
     * @param  int $skip_records skip_records (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $last_modified_date_time last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition last_modified_date_time_condition (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\ContactDto[]
     */
    public function customerGetAllContactsForCustomerBycustomerCd($customer_cd, $display_name = null, $active = null, $first_name = null, $last_name = null, $business_account = null, $email = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        list($response) = $this->customerGetAllContactsForCustomerBycustomerCdWithHttpInfo($customer_cd, $display_name, $active, $first_name, $last_name, $business_account, $email, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition);
        return $response;
    }

    /**
     * Operation customerGetAllContactsForCustomerBycustomerCdWithHttpInfo
     *
     * Get a range of Contacts of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  string $display_name (optional)
     * @param  string $active (optional)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  string $business_account (optional)
     * @param  string $email (optional)
     * @param  string $greater_than_value (optional)
     * @param  int $number_to_read (optional)
     * @param  int $skip_records (optional)
     * @param  string $order_by (optional)
     * @param  string $last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\ContactDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetAllContactsForCustomerBycustomerCdWithHttpInfo($customer_cd, $display_name = null, $active = null, $first_name = null, $last_name = null, $business_account = null, $email = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ContactDto[]';
        $request = $this->customerGetAllContactsForCustomerBycustomerCdRequest($customer_cd, $display_name, $active, $first_name, $last_name, $business_account, $email, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\ContactDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetAllContactsForCustomerBycustomerCdAsync
     *
     * Get a range of Contacts of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  string $display_name (optional)
     * @param  string $active (optional)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  string $business_account (optional)
     * @param  string $email (optional)
     * @param  string $greater_than_value (optional)
     * @param  int $number_to_read (optional)
     * @param  int $skip_records (optional)
     * @param  string $order_by (optional)
     * @param  string $last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllContactsForCustomerBycustomerCdAsync($customer_cd, $display_name = null, $active = null, $first_name = null, $last_name = null, $business_account = null, $email = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        return $this->customerGetAllContactsForCustomerBycustomerCdAsyncWithHttpInfo($customer_cd, $display_name, $active, $first_name, $last_name, $business_account, $email, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetAllContactsForCustomerBycustomerCdAsyncWithHttpInfo
     *
     * Get a range of Contacts of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  string $display_name (optional)
     * @param  string $active (optional)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  string $business_account (optional)
     * @param  string $email (optional)
     * @param  string $greater_than_value (optional)
     * @param  int $number_to_read (optional)
     * @param  int $skip_records (optional)
     * @param  string $order_by (optional)
     * @param  string $last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllContactsForCustomerBycustomerCdAsyncWithHttpInfo($customer_cd, $display_name = null, $active = null, $first_name = null, $last_name = null, $business_account = null, $email = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ContactDto[]';
        $request = $this->customerGetAllContactsForCustomerBycustomerCdRequest($customer_cd, $display_name, $active, $first_name, $last_name, $business_account, $email, $greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetAllContactsForCustomerBycustomerCd'
     *
     * @param  string $customer_cd  (required)
     * @param  string $display_name (optional)
     * @param  string $active (optional)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  string $business_account (optional)
     * @param  string $email (optional)
     * @param  string $greater_than_value (optional)
     * @param  int $number_to_read (optional)
     * @param  int $skip_records (optional)
     * @param  string $order_by (optional)
     * @param  string $last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetAllContactsForCustomerBycustomerCdRequest($customer_cd, $display_name = null, $active = null, $first_name = null, $last_name = null, $business_account = null, $email = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        // verify the required parameter 'customer_cd' is set
        if ($customer_cd === null || (is_array($customer_cd) && count($customer_cd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_cd when calling customerGetAllContactsForCustomerBycustomerCd'
            );
        }

        $resourcePath = '/controller/api/v1/customer/{customerCd}/contact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($display_name !== null) {
            $queryParams['displayName'] = ObjectSerializer::toQueryValue($display_name);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['firstName'] = ObjectSerializer::toQueryValue($first_name);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['lastName'] = ObjectSerializer::toQueryValue($last_name);
        }
        // query params
        if ($business_account !== null) {
            $queryParams['businessAccount'] = ObjectSerializer::toQueryValue($business_account);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($greater_than_value !== null) {
            $queryParams['greaterThanValue'] = ObjectSerializer::toQueryValue($greater_than_value);
        }
        // query params
        if ($number_to_read !== null) {
            $queryParams['numberToRead'] = ObjectSerializer::toQueryValue($number_to_read);
        }
        // query params
        if ($skip_records !== null) {
            $queryParams['skipRecords'] = ObjectSerializer::toQueryValue($skip_records);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }

        // path params
        if ($customer_cd !== null) {
            $resourcePath = str_replace(
                '{' . 'customerCd' . '}',
                ObjectSerializer::toPathValue($customer_cd),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetAllCustomerBalance
     *
     * Get the balance for a range of customers
     *
     * @param  string $greater_than_value greater_than_value (optional)
     * @param  int $number_to_read number_to_read (optional)
     * @param  int $skip_records skip_records (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $last_modified_date_time last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition last_modified_date_time_condition (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CustomerBalanceDto[]
     */
    public function customerGetAllCustomerBalance($greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        list($response) = $this->customerGetAllCustomerBalanceWithHttpInfo($greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition);
        return $response;
    }

    /**
     * Operation customerGetAllCustomerBalanceWithHttpInfo
     *
     * Get the balance for a range of customers
     *
     * @param  string $greater_than_value (optional)
     * @param  int $number_to_read (optional)
     * @param  int $skip_records (optional)
     * @param  string $order_by (optional)
     * @param  string $last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CustomerBalanceDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetAllCustomerBalanceWithHttpInfo($greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerBalanceDto[]';
        $request = $this->customerGetAllCustomerBalanceRequest($greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CustomerBalanceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetAllCustomerBalanceAsync
     *
     * Get the balance for a range of customers
     *
     * @param  string $greater_than_value (optional)
     * @param  int $number_to_read (optional)
     * @param  int $skip_records (optional)
     * @param  string $order_by (optional)
     * @param  string $last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllCustomerBalanceAsync($greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        return $this->customerGetAllCustomerBalanceAsyncWithHttpInfo($greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetAllCustomerBalanceAsyncWithHttpInfo
     *
     * Get the balance for a range of customers
     *
     * @param  string $greater_than_value (optional)
     * @param  int $number_to_read (optional)
     * @param  int $skip_records (optional)
     * @param  string $order_by (optional)
     * @param  string $last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllCustomerBalanceAsyncWithHttpInfo($greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerBalanceDto[]';
        $request = $this->customerGetAllCustomerBalanceRequest($greater_than_value, $number_to_read, $skip_records, $order_by, $last_modified_date_time, $last_modified_date_time_condition);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetAllCustomerBalance'
     *
     * @param  string $greater_than_value (optional)
     * @param  int $number_to_read (optional)
     * @param  int $skip_records (optional)
     * @param  string $order_by (optional)
     * @param  string $last_modified_date_time (optional)
     * @param  string $last_modified_date_time_condition (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetAllCustomerBalanceRequest($greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {

        $resourcePath = '/controller/api/v1/customer/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($greater_than_value !== null) {
            $queryParams['greaterThanValue'] = ObjectSerializer::toQueryValue($greater_than_value);
        }
        // query params
        if ($number_to_read !== null) {
            $queryParams['numberToRead'] = ObjectSerializer::toQueryValue($number_to_read);
        }
        // query params
        if ($skip_records !== null) {
            $queryParams['skipRecords'] = ObjectSerializer::toQueryValue($skip_records);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetAllDocumentsForCustomerBycustomerNumber
     *
     * Gets a range of documents for a specific customer
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CustomerDocumentDto[]
     */
    public function customerGetAllDocumentsForCustomerBycustomerNumber($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        list($response) = $this->customerGetAllDocumentsForCustomerBycustomerNumberWithHttpInfo($customer_number, $document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size);
        return $response;
    }

    /**
     * Operation customerGetAllDocumentsForCustomerBycustomerNumberWithHttpInfo
     *
     * Gets a range of documents for a specific customer
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CustomerDocumentDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetAllDocumentsForCustomerBycustomerNumberWithHttpInfo($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerDocumentDto[]';
        $request = $this->customerGetAllDocumentsForCustomerBycustomerNumberRequest($customer_number, $document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CustomerDocumentDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetAllDocumentsForCustomerBycustomerNumberAsync
     *
     * Gets a range of documents for a specific customer
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllDocumentsForCustomerBycustomerNumberAsync($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        return $this->customerGetAllDocumentsForCustomerBycustomerNumberAsyncWithHttpInfo($customer_number, $document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetAllDocumentsForCustomerBycustomerNumberAsyncWithHttpInfo
     *
     * Gets a range of documents for a specific customer
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllDocumentsForCustomerBycustomerNumberAsyncWithHttpInfo($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerDocumentDto[]';
        $request = $this->customerGetAllDocumentsForCustomerBycustomerNumberRequest($customer_number, $document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetAllDocumentsForCustomerBycustomerNumber'
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetAllDocumentsForCustomerBycustomerNumberRequest($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetAllDocumentsForCustomerBycustomerNumber'
            );
        }

        $resourcePath = '/controller/api/v1/customer/{customerNumber}/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($released !== null) {
            $queryParams['released'] = ObjectSerializer::toQueryValue($released);
        }
        // query params
        if ($dunning_level !== null) {
            $queryParams['dunningLevel'] = ObjectSerializer::toQueryValue($dunning_level);
        }
        // query params
        if ($closed_financial_period !== null) {
            $queryParams['closedFinancialPeriod'] = ObjectSerializer::toQueryValue($closed_financial_period);
        }
        // query params
        if ($dunning_letter_date_time !== null) {
            $queryParams['dunningLetterDateTime'] = ObjectSerializer::toQueryValue($dunning_letter_date_time);
        }
        // query params
        if ($dunning_letter_date_time_condition !== null) {
            $queryParams['dunningLetterDateTimeCondition'] = ObjectSerializer::toQueryValue($dunning_letter_date_time_condition);
        }
        // query params
        if ($project !== null) {
            $queryParams['project'] = ObjectSerializer::toQueryValue($project);
        }
        // query params
        if ($expand_applications !== null) {
            $queryParams['expandApplications'] = ObjectSerializer::toQueryValue($expand_applications);
        }
        // query params
        if ($expand_dunning_information !== null) {
            $queryParams['expandDunningInformation'] = ObjectSerializer::toQueryValue($expand_dunning_information);
        }
        // query params
        if ($expand_attachments !== null) {
            $queryParams['expandAttachments'] = ObjectSerializer::toQueryValue($expand_attachments);
        }
        // query params
        if ($expand_tax_details !== null) {
            $queryParams['expandTaxDetails'] = ObjectSerializer::toQueryValue($expand_tax_details);
        }
        // query params
        if ($expand_invoice_address !== null) {
            $queryParams['expandInvoiceAddress'] = ObjectSerializer::toQueryValue($expand_invoice_address);
        }
        // query params
        if ($financial_period !== null) {
            $queryParams['financialPeriod'] = ObjectSerializer::toQueryValue($financial_period);
        }
        // query params
        if ($document_due_date !== null) {
            $queryParams['documentDueDate'] = ObjectSerializer::toQueryValue($document_due_date);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($number_to_read !== null) {
            $queryParams['numberToRead'] = ObjectSerializer::toQueryValue($number_to_read);
        }
        // query params
        if ($skip_records !== null) {
            $queryParams['skipRecords'] = ObjectSerializer::toQueryValue($skip_records);
        }
        // query params
        if ($external_reference !== null) {
            $queryParams['externalReference'] = ObjectSerializer::toQueryValue($external_reference);
        }
        // query params
        if ($payment_reference !== null) {
            $queryParams['paymentReference'] = ObjectSerializer::toQueryValue($payment_reference);
        }
        // query params
        if ($customer_ref_number !== null) {
            $queryParams['customerRefNumber'] = ObjectSerializer::toQueryValue($customer_ref_number);
        }
        // query params
        if ($greater_than_value !== null) {
            $queryParams['greaterThanValue'] = ObjectSerializer::toQueryValue($greater_than_value);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }
        // query params
        if ($created_date_time !== null) {
            $queryParams['createdDateTime'] = ObjectSerializer::toQueryValue($created_date_time);
        }
        // query params
        if ($created_date_time_condition !== null) {
            $queryParams['createdDateTimeCondition'] = ObjectSerializer::toQueryValue($created_date_time_condition);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetAllInvoicesForCustomerBycustomerNumber
     *
     * Get a range of invoices for a specific customer
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CustomerInvoiceDto[]
     */
    public function customerGetAllInvoicesForCustomerBycustomerNumber($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        list($response) = $this->customerGetAllInvoicesForCustomerBycustomerNumberWithHttpInfo($customer_number, $document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size);
        return $response;
    }

    /**
     * Operation customerGetAllInvoicesForCustomerBycustomerNumberWithHttpInfo
     *
     * Get a range of invoices for a specific customer
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CustomerInvoiceDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetAllInvoicesForCustomerBycustomerNumberWithHttpInfo($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerInvoiceDto[]';
        $request = $this->customerGetAllInvoicesForCustomerBycustomerNumberRequest($customer_number, $document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CustomerInvoiceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetAllInvoicesForCustomerBycustomerNumberAsync
     *
     * Get a range of invoices for a specific customer
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllInvoicesForCustomerBycustomerNumberAsync($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        return $this->customerGetAllInvoicesForCustomerBycustomerNumberAsyncWithHttpInfo($customer_number, $document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetAllInvoicesForCustomerBycustomerNumberAsyncWithHttpInfo
     *
     * Get a range of invoices for a specific customer
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllInvoicesForCustomerBycustomerNumberAsyncWithHttpInfo($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerInvoiceDto[]';
        $request = $this->customerGetAllInvoicesForCustomerBycustomerNumberRequest($customer_number, $document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetAllInvoicesForCustomerBycustomerNumber'
     *
     * @param  string $customer_number Identifies the customer for which to return data (required)
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetAllInvoicesForCustomerBycustomerNumberRequest($customer_number, $document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerGetAllInvoicesForCustomerBycustomerNumber'
            );
        }

        $resourcePath = '/controller/api/v1/customer/{customerNumber}/invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($released !== null) {
            $queryParams['released'] = ObjectSerializer::toQueryValue($released);
        }
        // query params
        if ($dunning_level !== null) {
            $queryParams['dunningLevel'] = ObjectSerializer::toQueryValue($dunning_level);
        }
        // query params
        if ($closed_financial_period !== null) {
            $queryParams['closedFinancialPeriod'] = ObjectSerializer::toQueryValue($closed_financial_period);
        }
        // query params
        if ($dunning_letter_date_time !== null) {
            $queryParams['dunningLetterDateTime'] = ObjectSerializer::toQueryValue($dunning_letter_date_time);
        }
        // query params
        if ($dunning_letter_date_time_condition !== null) {
            $queryParams['dunningLetterDateTimeCondition'] = ObjectSerializer::toQueryValue($dunning_letter_date_time_condition);
        }
        // query params
        if ($project !== null) {
            $queryParams['project'] = ObjectSerializer::toQueryValue($project);
        }
        // query params
        if ($expand_applications !== null) {
            $queryParams['expandApplications'] = ObjectSerializer::toQueryValue($expand_applications);
        }
        // query params
        if ($expand_dunning_information !== null) {
            $queryParams['expandDunningInformation'] = ObjectSerializer::toQueryValue($expand_dunning_information);
        }
        // query params
        if ($expand_attachments !== null) {
            $queryParams['expandAttachments'] = ObjectSerializer::toQueryValue($expand_attachments);
        }
        // query params
        if ($expand_tax_details !== null) {
            $queryParams['expandTaxDetails'] = ObjectSerializer::toQueryValue($expand_tax_details);
        }
        // query params
        if ($expand_invoice_address !== null) {
            $queryParams['expandInvoiceAddress'] = ObjectSerializer::toQueryValue($expand_invoice_address);
        }
        // query params
        if ($financial_period !== null) {
            $queryParams['financialPeriod'] = ObjectSerializer::toQueryValue($financial_period);
        }
        // query params
        if ($document_due_date !== null) {
            $queryParams['documentDueDate'] = ObjectSerializer::toQueryValue($document_due_date);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($number_to_read !== null) {
            $queryParams['numberToRead'] = ObjectSerializer::toQueryValue($number_to_read);
        }
        // query params
        if ($skip_records !== null) {
            $queryParams['skipRecords'] = ObjectSerializer::toQueryValue($skip_records);
        }
        // query params
        if ($external_reference !== null) {
            $queryParams['externalReference'] = ObjectSerializer::toQueryValue($external_reference);
        }
        // query params
        if ($payment_reference !== null) {
            $queryParams['paymentReference'] = ObjectSerializer::toQueryValue($payment_reference);
        }
        // query params
        if ($customer_ref_number !== null) {
            $queryParams['customerRefNumber'] = ObjectSerializer::toQueryValue($customer_ref_number);
        }
        // query params
        if ($greater_than_value !== null) {
            $queryParams['greaterThanValue'] = ObjectSerializer::toQueryValue($greater_than_value);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }
        // query params
        if ($created_date_time !== null) {
            $queryParams['createdDateTime'] = ObjectSerializer::toQueryValue($created_date_time);
        }
        // query params
        if ($created_date_time_condition !== null) {
            $queryParams['createdDateTimeCondition'] = ObjectSerializer::toQueryValue($created_date_time_condition);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }

        // path params
        if ($customer_number !== null) {
            $resourcePath = str_replace(
                '{' . 'customerNumber' . '}',
                ObjectSerializer::toPathValue($customer_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetAllOrderForCustomerBycustomerCd
     *
     * Get a range of SO Orders of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\SalesOrderDto[]
     */
    public function customerGetAllOrderForCustomerBycustomerCd($customer_cd, $order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        list($response) = $this->customerGetAllOrderForCustomerBycustomerCdWithHttpInfo($customer_cd, $order_type, $status, $greater_than_value, $number_to_read, $skip_records, $order_by, $show_notes, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size);
        return $response;
    }

    /**
     * Operation customerGetAllOrderForCustomerBycustomerCdWithHttpInfo
     *
     * Get a range of SO Orders of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\SalesOrderDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetAllOrderForCustomerBycustomerCdWithHttpInfo($customer_cd, $order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\SalesOrderDto[]';
        $request = $this->customerGetAllOrderForCustomerBycustomerCdRequest($customer_cd, $order_type, $status, $greater_than_value, $number_to_read, $skip_records, $order_by, $show_notes, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\SalesOrderDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetAllOrderForCustomerBycustomerCdAsync
     *
     * Get a range of SO Orders of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllOrderForCustomerBycustomerCdAsync($customer_cd, $order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        return $this->customerGetAllOrderForCustomerBycustomerCdAsyncWithHttpInfo($customer_cd, $order_type, $status, $greater_than_value, $number_to_read, $skip_records, $order_by, $show_notes, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetAllOrderForCustomerBycustomerCdAsyncWithHttpInfo
     *
     * Get a range of SO Orders of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllOrderForCustomerBycustomerCdAsyncWithHttpInfo($customer_cd, $order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\SalesOrderDto[]';
        $request = $this->customerGetAllOrderForCustomerBycustomerCdRequest($customer_cd, $order_type, $status, $greater_than_value, $number_to_read, $skip_records, $order_by, $show_notes, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetAllOrderForCustomerBycustomerCd'
     *
     * @param  string $customer_cd  (required)
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetAllOrderForCustomerBycustomerCdRequest($customer_cd, $order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        // verify the required parameter 'customer_cd' is set
        if ($customer_cd === null || (is_array($customer_cd) && count($customer_cd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_cd when calling customerGetAllOrderForCustomerBycustomerCd'
            );
        }

        $resourcePath = '/controller/api/v1/customer/{customerCd}/salesorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_type !== null) {
            $queryParams['orderType'] = ObjectSerializer::toQueryValue($order_type);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($greater_than_value !== null) {
            $queryParams['greaterThanValue'] = ObjectSerializer::toQueryValue($greater_than_value);
        }
        // query params
        if ($number_to_read !== null) {
            $queryParams['numberToRead'] = ObjectSerializer::toQueryValue($number_to_read);
        }
        // query params
        if ($skip_records !== null) {
            $queryParams['skipRecords'] = ObjectSerializer::toQueryValue($skip_records);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($show_notes !== null) {
            $queryParams['showNotes'] = ObjectSerializer::toQueryValue($show_notes);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }

        // path params
        if ($customer_cd !== null) {
            $resourcePath = str_replace(
                '{' . 'customerCd' . '}',
                ObjectSerializer::toPathValue($customer_cd),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetAllSalesOrderBasicForCustomerBycustomerCd
     *
     * Get a range of SO Orders Basic of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\SalesOrderBasicDto[]
     */
    public function customerGetAllSalesOrderBasicForCustomerBycustomerCd($customer_cd, $order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        list($response) = $this->customerGetAllSalesOrderBasicForCustomerBycustomerCdWithHttpInfo($customer_cd, $order_type, $status, $greater_than_value, $number_to_read, $skip_records, $order_by, $show_notes, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size);
        return $response;
    }

    /**
     * Operation customerGetAllSalesOrderBasicForCustomerBycustomerCdWithHttpInfo
     *
     * Get a range of SO Orders Basic of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\SalesOrderBasicDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetAllSalesOrderBasicForCustomerBycustomerCdWithHttpInfo($customer_cd, $order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\SalesOrderBasicDto[]';
        $request = $this->customerGetAllSalesOrderBasicForCustomerBycustomerCdRequest($customer_cd, $order_type, $status, $greater_than_value, $number_to_read, $skip_records, $order_by, $show_notes, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\SalesOrderBasicDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetAllSalesOrderBasicForCustomerBycustomerCdAsync
     *
     * Get a range of SO Orders Basic of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllSalesOrderBasicForCustomerBycustomerCdAsync($customer_cd, $order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        return $this->customerGetAllSalesOrderBasicForCustomerBycustomerCdAsyncWithHttpInfo($customer_cd, $order_type, $status, $greater_than_value, $number_to_read, $skip_records, $order_by, $show_notes, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetAllSalesOrderBasicForCustomerBycustomerCdAsyncWithHttpInfo
     *
     * Get a range of SO Orders Basic of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetAllSalesOrderBasicForCustomerBycustomerCdAsyncWithHttpInfo($customer_cd, $order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\SalesOrderBasicDto[]';
        $request = $this->customerGetAllSalesOrderBasicForCustomerBycustomerCdRequest($customer_cd, $order_type, $status, $greater_than_value, $number_to_read, $skip_records, $order_by, $show_notes, $last_modified_date_time, $last_modified_date_time_condition, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetAllSalesOrderBasicForCustomerBycustomerCd'
     *
     * @param  string $customer_cd  (required)
     * @param  string $order_type Filter by Order type. (optional)
     * @param  string $status Select to filter on status on order. (optional)
     * @param  string $greater_than_value Filter on Order no. greater than value. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $order_by This field has been deprecated and will be removed in future versions. The OrderBy parameter has no effect on the result. (optional)
     * @param  bool $show_notes Set to true to include notes. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetAllSalesOrderBasicForCustomerBycustomerCdRequest($customer_cd, $order_type = null, $status = null, $greater_than_value = null, $number_to_read = null, $skip_records = null, $order_by = null, $show_notes = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $page_number = null, $page_size = null)
    {
        // verify the required parameter 'customer_cd' is set
        if ($customer_cd === null || (is_array($customer_cd) && count($customer_cd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_cd when calling customerGetAllSalesOrderBasicForCustomerBycustomerCd'
            );
        }

        $resourcePath = '/controller/api/v1/customer/{customerCd}/salesorderbasic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_type !== null) {
            $queryParams['orderType'] = ObjectSerializer::toQueryValue($order_type);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($greater_than_value !== null) {
            $queryParams['greaterThanValue'] = ObjectSerializer::toQueryValue($greater_than_value);
        }
        // query params
        if ($number_to_read !== null) {
            $queryParams['numberToRead'] = ObjectSerializer::toQueryValue($number_to_read);
        }
        // query params
        if ($skip_records !== null) {
            $queryParams['skipRecords'] = ObjectSerializer::toQueryValue($skip_records);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($show_notes !== null) {
            $queryParams['showNotes'] = ObjectSerializer::toQueryValue($show_notes);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }

        // path params
        if ($customer_cd !== null) {
            $resourcePath = str_replace(
                '{' . 'customerCd' . '}',
                ObjectSerializer::toPathValue($customer_cd),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetBycustomerCd
     *
     * Get a specific customer
     *
     * @param  string $customer_cd Identifies the customer (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CustomerDto
     */
    public function customerGetBycustomerCd($customer_cd)
    {
        list($response) = $this->customerGetBycustomerCdWithHttpInfo($customer_cd);
        return $response;
    }

    /**
     * Operation customerGetBycustomerCdWithHttpInfo
     *
     * Get a specific customer
     *
     * @param  string $customer_cd Identifies the customer (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CustomerDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetBycustomerCdWithHttpInfo($customer_cd)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerDto';
        $request = $this->customerGetBycustomerCdRequest($customer_cd);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CustomerDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetBycustomerCdAsync
     *
     * Get a specific customer
     *
     * @param  string $customer_cd Identifies the customer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetBycustomerCdAsync($customer_cd)
    {
        return $this->customerGetBycustomerCdAsyncWithHttpInfo($customer_cd)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetBycustomerCdAsyncWithHttpInfo
     *
     * Get a specific customer
     *
     * @param  string $customer_cd Identifies the customer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetBycustomerCdAsyncWithHttpInfo($customer_cd)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerDto';
        $request = $this->customerGetBycustomerCdRequest($customer_cd);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetBycustomerCd'
     *
     * @param  string $customer_cd Identifies the customer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetBycustomerCdRequest($customer_cd)
    {
        // verify the required parameter 'customer_cd' is set
        if ($customer_cd === null || (is_array($customer_cd) && count($customer_cd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_cd when calling customerGetBycustomerCd'
            );
        }

        $resourcePath = '/controller/api/v1/customer/{customerCd}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_cd !== null) {
            $resourcePath = str_replace(
                '{' . 'customerCd' . '}',
                ObjectSerializer::toPathValue($customer_cd),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetCustomerBalanceBycustomerCd
     *
     * Get a specific customer's balance - ScreenId=AR303000
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CustomerBalanceDto
     */
    public function customerGetCustomerBalanceBycustomerCd($customer_cd)
    {
        list($response) = $this->customerGetCustomerBalanceBycustomerCdWithHttpInfo($customer_cd);
        return $response;
    }

    /**
     * Operation customerGetCustomerBalanceBycustomerCdWithHttpInfo
     *
     * Get a specific customer's balance - ScreenId=AR303000
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CustomerBalanceDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetCustomerBalanceBycustomerCdWithHttpInfo($customer_cd)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerBalanceDto';
        $request = $this->customerGetCustomerBalanceBycustomerCdRequest($customer_cd);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CustomerBalanceDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetCustomerBalanceBycustomerCdAsync
     *
     * Get a specific customer's balance - ScreenId=AR303000
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetCustomerBalanceBycustomerCdAsync($customer_cd)
    {
        return $this->customerGetCustomerBalanceBycustomerCdAsyncWithHttpInfo($customer_cd)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetCustomerBalanceBycustomerCdAsyncWithHttpInfo
     *
     * Get a specific customer's balance - ScreenId=AR303000
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetCustomerBalanceBycustomerCdAsyncWithHttpInfo($customer_cd)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerBalanceDto';
        $request = $this->customerGetCustomerBalanceBycustomerCdRequest($customer_cd);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetCustomerBalanceBycustomerCd'
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetCustomerBalanceBycustomerCdRequest($customer_cd)
    {
        // verify the required parameter 'customer_cd' is set
        if ($customer_cd === null || (is_array($customer_cd) && count($customer_cd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_cd when calling customerGetCustomerBalanceBycustomerCd'
            );
        }

        $resourcePath = '/controller/api/v1/customer/{customerCd}/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_cd !== null) {
            $resourcePath = str_replace(
                '{' . 'customerCd' . '}',
                ObjectSerializer::toPathValue($customer_cd),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetCustomerClasses
     *
     * Get Customer Classes - ScreenId=AR201000
     *
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CustomerClassDto[]
     */
    public function customerGetCustomerClasses()
    {
        list($response) = $this->customerGetCustomerClassesWithHttpInfo();
        return $response;
    }

    /**
     * Operation customerGetCustomerClassesWithHttpInfo
     *
     * Get Customer Classes - ScreenId=AR201000
     *
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CustomerClassDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetCustomerClassesWithHttpInfo()
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerClassDto[]';
        $request = $this->customerGetCustomerClassesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CustomerClassDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetCustomerClassesAsync
     *
     * Get Customer Classes - ScreenId=AR201000
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetCustomerClassesAsync()
    {
        return $this->customerGetCustomerClassesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetCustomerClassesAsyncWithHttpInfo
     *
     * Get Customer Classes - ScreenId=AR201000
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetCustomerClassesAsyncWithHttpInfo()
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerClassDto[]';
        $request = $this->customerGetCustomerClassesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetCustomerClasses'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetCustomerClassesRequest()
    {

        $resourcePath = '/controller/api/v1/customer/customerClass';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetCustomerDirectDebitBycustomerCd
     *
     * Get direct debit information for a specific customer(only for Netherlands)
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CustomerDirectDebitDto[]
     */
    public function customerGetCustomerDirectDebitBycustomerCd($customer_cd)
    {
        list($response) = $this->customerGetCustomerDirectDebitBycustomerCdWithHttpInfo($customer_cd);
        return $response;
    }

    /**
     * Operation customerGetCustomerDirectDebitBycustomerCdWithHttpInfo
     *
     * Get direct debit information for a specific customer(only for Netherlands)
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CustomerDirectDebitDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetCustomerDirectDebitBycustomerCdWithHttpInfo($customer_cd)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerDirectDebitDto[]';
        $request = $this->customerGetCustomerDirectDebitBycustomerCdRequest($customer_cd);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CustomerDirectDebitDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetCustomerDirectDebitBycustomerCdAsync
     *
     * Get direct debit information for a specific customer(only for Netherlands)
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetCustomerDirectDebitBycustomerCdAsync($customer_cd)
    {
        return $this->customerGetCustomerDirectDebitBycustomerCdAsyncWithHttpInfo($customer_cd)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetCustomerDirectDebitBycustomerCdAsyncWithHttpInfo
     *
     * Get direct debit information for a specific customer(only for Netherlands)
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetCustomerDirectDebitBycustomerCdAsyncWithHttpInfo($customer_cd)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerDirectDebitDto[]';
        $request = $this->customerGetCustomerDirectDebitBycustomerCdRequest($customer_cd);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetCustomerDirectDebitBycustomerCd'
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetCustomerDirectDebitBycustomerCdRequest($customer_cd)
    {
        // verify the required parameter 'customer_cd' is set
        if ($customer_cd === null || (is_array($customer_cd) && count($customer_cd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_cd when calling customerGetCustomerDirectDebitBycustomerCd'
            );
        }

        $resourcePath = '/controller/api/v1/customer/{customerCd}/directdebit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_cd !== null) {
            $resourcePath = str_replace(
                '{' . 'customerCd' . '}',
                ObjectSerializer::toPathValue($customer_cd),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetCustomerNoteBycustomerCd
     *
     * Get a specific customer's note
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\NoteDto
     */
    public function customerGetCustomerNoteBycustomerCd($customer_cd)
    {
        list($response) = $this->customerGetCustomerNoteBycustomerCdWithHttpInfo($customer_cd);
        return $response;
    }

    /**
     * Operation customerGetCustomerNoteBycustomerCdWithHttpInfo
     *
     * Get a specific customer's note
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\NoteDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetCustomerNoteBycustomerCdWithHttpInfo($customer_cd)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\NoteDto';
        $request = $this->customerGetCustomerNoteBycustomerCdRequest($customer_cd);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\NoteDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetCustomerNoteBycustomerCdAsync
     *
     * Get a specific customer's note
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetCustomerNoteBycustomerCdAsync($customer_cd)
    {
        return $this->customerGetCustomerNoteBycustomerCdAsyncWithHttpInfo($customer_cd)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetCustomerNoteBycustomerCdAsyncWithHttpInfo
     *
     * Get a specific customer's note
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetCustomerNoteBycustomerCdAsyncWithHttpInfo($customer_cd)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\NoteDto';
        $request = $this->customerGetCustomerNoteBycustomerCdRequest($customer_cd);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetCustomerNoteBycustomerCd'
     *
     * @param  string $customer_cd Identifies the customer for which to return data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetCustomerNoteBycustomerCdRequest($customer_cd)
    {
        // verify the required parameter 'customer_cd' is set
        if ($customer_cd === null || (is_array($customer_cd) && count($customer_cd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_cd when calling customerGetCustomerNoteBycustomerCd'
            );
        }

        $resourcePath = '/controller/api/v1/customer/{customerCd}/note';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_cd !== null) {
            $resourcePath = str_replace(
                '{' . 'customerCd' . '}',
                ObjectSerializer::toPathValue($customer_cd),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetSalesPersonsForCustomerBycustomerCd
     *
     * Get a range of Sales Persons of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CustSalesPersonsDto[]
     */
    public function customerGetSalesPersonsForCustomerBycustomerCd($customer_cd, $page_number = null, $page_size = null)
    {
        list($response) = $this->customerGetSalesPersonsForCustomerBycustomerCdWithHttpInfo($customer_cd, $page_number, $page_size);
        return $response;
    }

    /**
     * Operation customerGetSalesPersonsForCustomerBycustomerCdWithHttpInfo
     *
     * Get a range of Sales Persons of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CustSalesPersonsDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetSalesPersonsForCustomerBycustomerCdWithHttpInfo($customer_cd, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustSalesPersonsDto[]';
        $request = $this->customerGetSalesPersonsForCustomerBycustomerCdRequest($customer_cd, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CustSalesPersonsDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetSalesPersonsForCustomerBycustomerCdAsync
     *
     * Get a range of Sales Persons of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetSalesPersonsForCustomerBycustomerCdAsync($customer_cd, $page_number = null, $page_size = null)
    {
        return $this->customerGetSalesPersonsForCustomerBycustomerCdAsyncWithHttpInfo($customer_cd, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetSalesPersonsForCustomerBycustomerCdAsyncWithHttpInfo
     *
     * Get a range of Sales Persons of a specific customer
     *
     * @param  string $customer_cd  (required)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetSalesPersonsForCustomerBycustomerCdAsyncWithHttpInfo($customer_cd, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustSalesPersonsDto[]';
        $request = $this->customerGetSalesPersonsForCustomerBycustomerCdRequest($customer_cd, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetSalesPersonsForCustomerBycustomerCd'
     *
     * @param  string $customer_cd  (required)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetSalesPersonsForCustomerBycustomerCdRequest($customer_cd, $page_number = null, $page_size = null)
    {
        // verify the required parameter 'customer_cd' is set
        if ($customer_cd === null || (is_array($customer_cd) && count($customer_cd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_cd when calling customerGetSalesPersonsForCustomerBycustomerCd'
            );
        }

        $resourcePath = '/controller/api/v1/customer/{customerCd}/salespersons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }

        // path params
        if ($customer_cd !== null) {
            $resourcePath = str_replace(
                '{' . 'customerCd' . '}',
                ObjectSerializer::toPathValue($customer_cd),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerGetSpecificCustomerClassBycustomerClassId
     *
     * Get a specific customer class - ScreenId=AR201000
     *
     * @param  string $customer_class_id Identifies the customer class (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CustomerClassDto
     */
    public function customerGetSpecificCustomerClassBycustomerClassId($customer_class_id)
    {
        list($response) = $this->customerGetSpecificCustomerClassBycustomerClassIdWithHttpInfo($customer_class_id);
        return $response;
    }

    /**
     * Operation customerGetSpecificCustomerClassBycustomerClassIdWithHttpInfo
     *
     * Get a specific customer class - ScreenId=AR201000
     *
     * @param  string $customer_class_id Identifies the customer class (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CustomerClassDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetSpecificCustomerClassBycustomerClassIdWithHttpInfo($customer_class_id)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerClassDto';
        $request = $this->customerGetSpecificCustomerClassBycustomerClassIdRequest($customer_class_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CustomerClassDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerGetSpecificCustomerClassBycustomerClassIdAsync
     *
     * Get a specific customer class - ScreenId=AR201000
     *
     * @param  string $customer_class_id Identifies the customer class (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetSpecificCustomerClassBycustomerClassIdAsync($customer_class_id)
    {
        return $this->customerGetSpecificCustomerClassBycustomerClassIdAsyncWithHttpInfo($customer_class_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerGetSpecificCustomerClassBycustomerClassIdAsyncWithHttpInfo
     *
     * Get a specific customer class - ScreenId=AR201000
     *
     * @param  string $customer_class_id Identifies the customer class (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerGetSpecificCustomerClassBycustomerClassIdAsyncWithHttpInfo($customer_class_id)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerClassDto';
        $request = $this->customerGetSpecificCustomerClassBycustomerClassIdRequest($customer_class_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerGetSpecificCustomerClassBycustomerClassId'
     *
     * @param  string $customer_class_id Identifies the customer class (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerGetSpecificCustomerClassBycustomerClassIdRequest($customer_class_id)
    {
        // verify the required parameter 'customer_class_id' is set
        if ($customer_class_id === null || (is_array($customer_class_id) && count($customer_class_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_class_id when calling customerGetSpecificCustomerClassBycustomerClassId'
            );
        }

        $resourcePath = '/controller/api/v1/customer/customerClass/{customerClassId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_class_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerClassId' . '}',
                ObjectSerializer::toPathValue($customer_class_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerPost
     *
     * Creates a customer
     *
     * @param  \Ekstralys\VismaNetApi\Model\CustomerUpdateDto $customer Defines the data for the customer to create (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerPost($customer)
    {
        list($response) = $this->customerPostWithHttpInfo($customer);
        return $response;
    }

    /**
     * Operation customerPostWithHttpInfo
     *
     * Creates a customer
     *
     * @param  \Ekstralys\VismaNetApi\Model\CustomerUpdateDto $customer Defines the data for the customer to create (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerPostWithHttpInfo($customer)
    {
        $returnType = 'object';
        $request = $this->customerPostRequest($customer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerPostAsync
     *
     * Creates a customer
     *
     * @param  \Ekstralys\VismaNetApi\Model\CustomerUpdateDto $customer Defines the data for the customer to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerPostAsync($customer)
    {
        return $this->customerPostAsyncWithHttpInfo($customer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerPostAsyncWithHttpInfo
     *
     * Creates a customer
     *
     * @param  \Ekstralys\VismaNetApi\Model\CustomerUpdateDto $customer Defines the data for the customer to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerPostAsyncWithHttpInfo($customer)
    {
        $returnType = 'object';
        $request = $this->customerPostRequest($customer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerPost'
     *
     * @param  \Ekstralys\VismaNetApi\Model\CustomerUpdateDto $customer Defines the data for the customer to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerPostRequest($customer)
    {
        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling customerPost'
            );
        }

        $resourcePath = '/controller/api/v1/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($customer)) {
            $_tempBody = $customer;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerPutBycustomerCd
     *
     * Updates a specific customer
     *
     * @param  string $customer_cd Identifies the customer to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CustomerUpdateDto $customer The data to update for the customer (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerPutBycustomerCd($customer_cd, $customer)
    {
        list($response) = $this->customerPutBycustomerCdWithHttpInfo($customer_cd, $customer);
        return $response;
    }

    /**
     * Operation customerPutBycustomerCdWithHttpInfo
     *
     * Updates a specific customer
     *
     * @param  string $customer_cd Identifies the customer to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CustomerUpdateDto $customer The data to update for the customer (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerPutBycustomerCdWithHttpInfo($customer_cd, $customer)
    {
        $returnType = 'object';
        $request = $this->customerPutBycustomerCdRequest($customer_cd, $customer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerPutBycustomerCdAsync
     *
     * Updates a specific customer
     *
     * @param  string $customer_cd Identifies the customer to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CustomerUpdateDto $customer The data to update for the customer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerPutBycustomerCdAsync($customer_cd, $customer)
    {
        return $this->customerPutBycustomerCdAsyncWithHttpInfo($customer_cd, $customer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerPutBycustomerCdAsyncWithHttpInfo
     *
     * Updates a specific customer
     *
     * @param  string $customer_cd Identifies the customer to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CustomerUpdateDto $customer The data to update for the customer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerPutBycustomerCdAsyncWithHttpInfo($customer_cd, $customer)
    {
        $returnType = 'object';
        $request = $this->customerPutBycustomerCdRequest($customer_cd, $customer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerPutBycustomerCd'
     *
     * @param  string $customer_cd Identifies the customer to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CustomerUpdateDto $customer The data to update for the customer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerPutBycustomerCdRequest($customer_cd, $customer)
    {
        // verify the required parameter 'customer_cd' is set
        if ($customer_cd === null || (is_array($customer_cd) && count($customer_cd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_cd when calling customerPutBycustomerCd'
            );
        }
        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling customerPutBycustomerCd'
            );
        }

        $resourcePath = '/controller/api/v1/customer/{customerCd}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_cd !== null) {
            $resourcePath = str_replace(
                '{' . 'customerCd' . '}',
                ObjectSerializer::toPathValue($customer_cd),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($customer)) {
            $_tempBody = $customer;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
