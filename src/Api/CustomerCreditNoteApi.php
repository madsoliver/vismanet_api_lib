<?php
/**
 * CustomerCreditNoteApi
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ekstralys\VismaNetApi\ApiException;
use Ekstralys\VismaNetApi\Configuration;
use Ekstralys\VismaNetApi\HeaderSelector;
use Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * CustomerCreditNoteApi Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerCreditNoteApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation customerCreditNoteCreate
     *
     * Create a Credit Note. Method is deprecated and will be removed starting May 2021 - start using new method CustomerCreditNoteV2 endpoint.
     *
     * @param  \Ekstralys\VismaNetApi\Model\CustomerCreditNoteUpdateDto $credit_note Defines the data for the Credit Note to create (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerCreditNoteCreate($credit_note)
    {
        list($response) = $this->customerCreditNoteCreateWithHttpInfo($credit_note);
        return $response;
    }

    /**
     * Operation customerCreditNoteCreateWithHttpInfo
     *
     * Create a Credit Note. Method is deprecated and will be removed starting May 2021 - start using new method CustomerCreditNoteV2 endpoint.
     *
     * @param  \Ekstralys\VismaNetApi\Model\CustomerCreditNoteUpdateDto $credit_note Defines the data for the Credit Note to create (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCreditNoteCreateWithHttpInfo($credit_note)
    {
        $returnType = 'object';
        $request = $this->customerCreditNoteCreateRequest($credit_note);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerCreditNoteCreateAsync
     *
     * Create a Credit Note. Method is deprecated and will be removed starting May 2021 - start using new method CustomerCreditNoteV2 endpoint.
     *
     * @param  \Ekstralys\VismaNetApi\Model\CustomerCreditNoteUpdateDto $credit_note Defines the data for the Credit Note to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteCreateAsync($credit_note)
    {
        return $this->customerCreditNoteCreateAsyncWithHttpInfo($credit_note)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerCreditNoteCreateAsyncWithHttpInfo
     *
     * Create a Credit Note. Method is deprecated and will be removed starting May 2021 - start using new method CustomerCreditNoteV2 endpoint.
     *
     * @param  \Ekstralys\VismaNetApi\Model\CustomerCreditNoteUpdateDto $credit_note Defines the data for the Credit Note to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteCreateAsyncWithHttpInfo($credit_note)
    {
        $returnType = 'object';
        $request = $this->customerCreditNoteCreateRequest($credit_note);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerCreditNoteCreate'
     *
     * @param  \Ekstralys\VismaNetApi\Model\CustomerCreditNoteUpdateDto $credit_note Defines the data for the Credit Note to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerCreditNoteCreateRequest($credit_note)
    {
        // verify the required parameter 'credit_note' is set
        if ($credit_note === null || (is_array($credit_note) && count($credit_note) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note when calling customerCreditNoteCreate'
            );
        }

        $resourcePath = '/controller/api/v1/customerCreditNote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($credit_note)) {
            $_tempBody = $credit_note;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerCreditNoteCreateHeaderAttachmentBycreditNoteNumber
     *
     * Creates an attachment and associates it with a credit note. If the file already exists, a new revision is created.
     *
     * @param  string $credit_note_number Identifies the credit note (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerCreditNoteCreateHeaderAttachmentBycreditNoteNumber($credit_note_number)
    {
        list($response) = $this->customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberWithHttpInfo($credit_note_number);
        return $response;
    }

    /**
     * Operation customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberWithHttpInfo
     *
     * Creates an attachment and associates it with a credit note. If the file already exists, a new revision is created.
     *
     * @param  string $credit_note_number Identifies the credit note (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberWithHttpInfo($credit_note_number)
    {
        $returnType = 'object';
        $request = $this->customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberRequest($credit_note_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberAsync
     *
     * Creates an attachment and associates it with a credit note. If the file already exists, a new revision is created.
     *
     * @param  string $credit_note_number Identifies the credit note (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberAsync($credit_note_number)
    {
        return $this->customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberAsyncWithHttpInfo($credit_note_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberAsyncWithHttpInfo
     *
     * Creates an attachment and associates it with a credit note. If the file already exists, a new revision is created.
     *
     * @param  string $credit_note_number Identifies the credit note (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberAsyncWithHttpInfo($credit_note_number)
    {
        $returnType = 'object';
        $request = $this->customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberRequest($credit_note_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerCreditNoteCreateHeaderAttachmentBycreditNoteNumber'
     *
     * @param  string $credit_note_number Identifies the credit note (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberRequest($credit_note_number)
    {
        // verify the required parameter 'credit_note_number' is set
        if ($credit_note_number === null || (is_array($credit_note_number) && count($credit_note_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_number when calling customerCreditNoteCreateHeaderAttachmentBycreditNoteNumber'
            );
        }

        $resourcePath = '/controller/api/v1/customerCreditNote/{creditNoteNumber}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($credit_note_number !== null) {
            $resourcePath = str_replace(
                '{' . 'creditNoteNumber' . '}',
                ObjectSerializer::toPathValue($credit_note_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumber
     *
     * Creates an attachment and associates it with a certain credit note line. If the file already exists, a new revision is created.
     *
     * @param  string $credit_note_number Identifies the credit note (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumber($credit_note_number, $line_number)
    {
        list($response) = $this->customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberWithHttpInfo($credit_note_number, $line_number);
        return $response;
    }

    /**
     * Operation customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberWithHttpInfo
     *
     * Creates an attachment and associates it with a certain credit note line. If the file already exists, a new revision is created.
     *
     * @param  string $credit_note_number Identifies the credit note (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberWithHttpInfo($credit_note_number, $line_number)
    {
        $returnType = 'object';
        $request = $this->customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberRequest($credit_note_number, $line_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberAsync
     *
     * Creates an attachment and associates it with a certain credit note line. If the file already exists, a new revision is created.
     *
     * @param  string $credit_note_number Identifies the credit note (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberAsync($credit_note_number, $line_number)
    {
        return $this->customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberAsyncWithHttpInfo($credit_note_number, $line_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberAsyncWithHttpInfo
     *
     * Creates an attachment and associates it with a certain credit note line. If the file already exists, a new revision is created.
     *
     * @param  string $credit_note_number Identifies the credit note (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberAsyncWithHttpInfo($credit_note_number, $line_number)
    {
        $returnType = 'object';
        $request = $this->customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberRequest($credit_note_number, $line_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumber'
     *
     * @param  string $credit_note_number Identifies the credit note (required)
     * @param  int $line_number Specifies line number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberRequest($credit_note_number, $line_number)
    {
        // verify the required parameter 'credit_note_number' is set
        if ($credit_note_number === null || (is_array($credit_note_number) && count($credit_note_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_number when calling customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumber'
            );
        }
        // verify the required parameter 'line_number' is set
        if ($line_number === null || (is_array($line_number) && count($line_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_number when calling customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumber'
            );
        }

        $resourcePath = '/controller/api/v1/customerCreditNote/{creditNoteNumber}/{lineNumber}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($credit_note_number !== null) {
            $resourcePath = str_replace(
                '{' . 'creditNoteNumber' . '}',
                ObjectSerializer::toPathValue($credit_note_number),
                $resourcePath
            );
        }
        // path params
        if ($line_number !== null) {
            $resourcePath = str_replace(
                '{' . 'lineNumber' . '}',
                ObjectSerializer::toPathValue($line_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerCreditNoteDeleteBycreditNoteNumber
     *
     * Deletes a specific Customer Credit Note
     *
     * @param  string $credit_note_number Identifies the Customer Credit Note to delete (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerCreditNoteDeleteBycreditNoteNumber($credit_note_number)
    {
        list($response) = $this->customerCreditNoteDeleteBycreditNoteNumberWithHttpInfo($credit_note_number);
        return $response;
    }

    /**
     * Operation customerCreditNoteDeleteBycreditNoteNumberWithHttpInfo
     *
     * Deletes a specific Customer Credit Note
     *
     * @param  string $credit_note_number Identifies the Customer Credit Note to delete (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCreditNoteDeleteBycreditNoteNumberWithHttpInfo($credit_note_number)
    {
        $returnType = 'object';
        $request = $this->customerCreditNoteDeleteBycreditNoteNumberRequest($credit_note_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerCreditNoteDeleteBycreditNoteNumberAsync
     *
     * Deletes a specific Customer Credit Note
     *
     * @param  string $credit_note_number Identifies the Customer Credit Note to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteDeleteBycreditNoteNumberAsync($credit_note_number)
    {
        return $this->customerCreditNoteDeleteBycreditNoteNumberAsyncWithHttpInfo($credit_note_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerCreditNoteDeleteBycreditNoteNumberAsyncWithHttpInfo
     *
     * Deletes a specific Customer Credit Note
     *
     * @param  string $credit_note_number Identifies the Customer Credit Note to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteDeleteBycreditNoteNumberAsyncWithHttpInfo($credit_note_number)
    {
        $returnType = 'object';
        $request = $this->customerCreditNoteDeleteBycreditNoteNumberRequest($credit_note_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerCreditNoteDeleteBycreditNoteNumber'
     *
     * @param  string $credit_note_number Identifies the Customer Credit Note to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerCreditNoteDeleteBycreditNoteNumberRequest($credit_note_number)
    {
        // verify the required parameter 'credit_note_number' is set
        if ($credit_note_number === null || (is_array($credit_note_number) && count($credit_note_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_number when calling customerCreditNoteDeleteBycreditNoteNumber'
            );
        }

        $resourcePath = '/controller/api/v1/customerCreditNote/{creditNoteNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($credit_note_number !== null) {
            $resourcePath = str_replace(
                '{' . 'creditNoteNumber' . '}',
                ObjectSerializer::toPathValue($credit_note_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerCreditNoteGetAll
     *
     * Get a range of Customer Credit Notes - ScreenId=AR301000  Request page size must be lower or equal to the allowed max page size which is returned as part of the metadata information.  If requested page size is greater than allowed max page size, request will be limited to max page size
     *
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CustomerCreditNoteDto[]
     */
    public function customerCreditNoteGetAll($document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        list($response) = $this->customerCreditNoteGetAllWithHttpInfo($document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size);
        return $response;
    }

    /**
     * Operation customerCreditNoteGetAllWithHttpInfo
     *
     * Get a range of Customer Credit Notes - ScreenId=AR301000  Request page size must be lower or equal to the allowed max page size which is returned as part of the metadata information.  If requested page size is greater than allowed max page size, request will be limited to max page size
     *
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CustomerCreditNoteDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCreditNoteGetAllWithHttpInfo($document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerCreditNoteDto[]';
        $request = $this->customerCreditNoteGetAllRequest($document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CustomerCreditNoteDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerCreditNoteGetAllAsync
     *
     * Get a range of Customer Credit Notes - ScreenId=AR301000  Request page size must be lower or equal to the allowed max page size which is returned as part of the metadata information.  If requested page size is greater than allowed max page size, request will be limited to max page size
     *
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteGetAllAsync($document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        return $this->customerCreditNoteGetAllAsyncWithHttpInfo($document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerCreditNoteGetAllAsyncWithHttpInfo
     *
     * Get a range of Customer Credit Notes - ScreenId=AR301000  Request page size must be lower or equal to the allowed max page size which is returned as part of the metadata information.  If requested page size is greater than allowed max page size, request will be limited to max page size
     *
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteGetAllAsyncWithHttpInfo($document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerCreditNoteDto[]';
        $request = $this->customerCreditNoteGetAllRequest($document_type, $released, $dunning_level, $closed_financial_period, $dunning_letter_date_time, $dunning_letter_date_time_condition, $project, $expand_applications, $expand_dunning_information, $expand_attachments, $expand_tax_details, $expand_invoice_address, $financial_period, $document_due_date, $status, $number_to_read, $skip_records, $external_reference, $payment_reference, $customer_ref_number, $greater_than_value, $last_modified_date_time, $last_modified_date_time_condition, $created_date_time, $created_date_time_condition, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerCreditNoteGetAll'
     *
     * @param  string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint. (optional)
     * @param  int $released Parameter for showing if invoice has been released or not. (optional)
     * @param  int $dunning_level The dunning level of the document. (optional)
     * @param  string $closed_financial_period The date of the closing of the financial period. (optional)
     * @param  string $dunning_letter_date_time The date and time for when the document last released a dunning letter. (optional)
     * @param  string $dunning_letter_date_time_condition Set time/date as before (&amp;lt;), after (&amp;gt;), before and including (&#x3D;&amp;lt;) OR after and including (&#x3D;&amp;gt;) to filter on time frame. (optional)
     * @param  string $project The project with which the document is associated. (optional)
     * @param  bool $expand_applications True if you want to see all dunning information regarding this document. (optional)
     * @param  bool $expand_dunning_information (optional)
     * @param  bool $expand_attachments True if you want to see all attachments regarding this document. (optional)
     * @param  bool $expand_tax_details True if you want to see all VAT details regarding this document. (optional)
     * @param  bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document. (optional)
     * @param  string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM. (optional)
     * @param  \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms. (optional)
     * @param  string $status The status of the document. Use the dropdown to select status. (optional)
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords. (optional)
     * @param  string $external_reference The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $payment_reference The top part &amp;gt; Payment ref. &amp;gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window.. (optional)
     * @param  string $customer_ref_number The top part &amp;gt; External reference &amp;gt; The external reference used in AutoInvoice. (optional)
     * @param  string $greater_than_value Greater than value. The item which is the object for this, varies from API to API. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $created_date_time Creation date and time. (optional)
     * @param  string $created_date_time_condition System-retrieved information for state/condition (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerCreditNoteGetAllRequest($document_type = null, $released = null, $dunning_level = null, $closed_financial_period = null, $dunning_letter_date_time = null, $dunning_letter_date_time_condition = null, $project = null, $expand_applications = null, $expand_dunning_information = null, $expand_attachments = null, $expand_tax_details = null, $expand_invoice_address = null, $financial_period = null, $document_due_date = null, $status = null, $number_to_read = null, $skip_records = null, $external_reference = null, $payment_reference = null, $customer_ref_number = null, $greater_than_value = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $created_date_time = null, $created_date_time_condition = null, $page_number = null, $page_size = null)
    {

        $resourcePath = '/controller/api/v1/customerCreditNote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($released !== null) {
            $queryParams['released'] = ObjectSerializer::toQueryValue($released);
        }
        // query params
        if ($dunning_level !== null) {
            $queryParams['dunningLevel'] = ObjectSerializer::toQueryValue($dunning_level);
        }
        // query params
        if ($closed_financial_period !== null) {
            $queryParams['closedFinancialPeriod'] = ObjectSerializer::toQueryValue($closed_financial_period);
        }
        // query params
        if ($dunning_letter_date_time !== null) {
            $queryParams['dunningLetterDateTime'] = ObjectSerializer::toQueryValue($dunning_letter_date_time);
        }
        // query params
        if ($dunning_letter_date_time_condition !== null) {
            $queryParams['dunningLetterDateTimeCondition'] = ObjectSerializer::toQueryValue($dunning_letter_date_time_condition);
        }
        // query params
        if ($project !== null) {
            $queryParams['project'] = ObjectSerializer::toQueryValue($project);
        }
        // query params
        if ($expand_applications !== null) {
            $queryParams['expandApplications'] = ObjectSerializer::toQueryValue($expand_applications);
        }
        // query params
        if ($expand_dunning_information !== null) {
            $queryParams['expandDunningInformation'] = ObjectSerializer::toQueryValue($expand_dunning_information);
        }
        // query params
        if ($expand_attachments !== null) {
            $queryParams['expandAttachments'] = ObjectSerializer::toQueryValue($expand_attachments);
        }
        // query params
        if ($expand_tax_details !== null) {
            $queryParams['expandTaxDetails'] = ObjectSerializer::toQueryValue($expand_tax_details);
        }
        // query params
        if ($expand_invoice_address !== null) {
            $queryParams['expandInvoiceAddress'] = ObjectSerializer::toQueryValue($expand_invoice_address);
        }
        // query params
        if ($financial_period !== null) {
            $queryParams['financialPeriod'] = ObjectSerializer::toQueryValue($financial_period);
        }
        // query params
        if ($document_due_date !== null) {
            $queryParams['documentDueDate'] = ObjectSerializer::toQueryValue($document_due_date);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($number_to_read !== null) {
            $queryParams['numberToRead'] = ObjectSerializer::toQueryValue($number_to_read);
        }
        // query params
        if ($skip_records !== null) {
            $queryParams['skipRecords'] = ObjectSerializer::toQueryValue($skip_records);
        }
        // query params
        if ($external_reference !== null) {
            $queryParams['externalReference'] = ObjectSerializer::toQueryValue($external_reference);
        }
        // query params
        if ($payment_reference !== null) {
            $queryParams['paymentReference'] = ObjectSerializer::toQueryValue($payment_reference);
        }
        // query params
        if ($customer_ref_number !== null) {
            $queryParams['customerRefNumber'] = ObjectSerializer::toQueryValue($customer_ref_number);
        }
        // query params
        if ($greater_than_value !== null) {
            $queryParams['greaterThanValue'] = ObjectSerializer::toQueryValue($greater_than_value);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }
        // query params
        if ($created_date_time !== null) {
            $queryParams['createdDateTime'] = ObjectSerializer::toQueryValue($created_date_time);
        }
        // query params
        if ($created_date_time_condition !== null) {
            $queryParams['createdDateTimeCondition'] = ObjectSerializer::toQueryValue($created_date_time_condition);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerCreditNoteGetBycreditNoteNumber
     *
     * Get a specific Customer Credit Note
     *
     * @param  string $credit_note_number Identifies the Customer Credit Note (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CustomerCreditNoteDto
     */
    public function customerCreditNoteGetBycreditNoteNumber($credit_note_number)
    {
        list($response) = $this->customerCreditNoteGetBycreditNoteNumberWithHttpInfo($credit_note_number);
        return $response;
    }

    /**
     * Operation customerCreditNoteGetBycreditNoteNumberWithHttpInfo
     *
     * Get a specific Customer Credit Note
     *
     * @param  string $credit_note_number Identifies the Customer Credit Note (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CustomerCreditNoteDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCreditNoteGetBycreditNoteNumberWithHttpInfo($credit_note_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerCreditNoteDto';
        $request = $this->customerCreditNoteGetBycreditNoteNumberRequest($credit_note_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CustomerCreditNoteDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerCreditNoteGetBycreditNoteNumberAsync
     *
     * Get a specific Customer Credit Note
     *
     * @param  string $credit_note_number Identifies the Customer Credit Note (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteGetBycreditNoteNumberAsync($credit_note_number)
    {
        return $this->customerCreditNoteGetBycreditNoteNumberAsyncWithHttpInfo($credit_note_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerCreditNoteGetBycreditNoteNumberAsyncWithHttpInfo
     *
     * Get a specific Customer Credit Note
     *
     * @param  string $credit_note_number Identifies the Customer Credit Note (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteGetBycreditNoteNumberAsyncWithHttpInfo($credit_note_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CustomerCreditNoteDto';
        $request = $this->customerCreditNoteGetBycreditNoteNumberRequest($credit_note_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerCreditNoteGetBycreditNoteNumber'
     *
     * @param  string $credit_note_number Identifies the Customer Credit Note (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerCreditNoteGetBycreditNoteNumberRequest($credit_note_number)
    {
        // verify the required parameter 'credit_note_number' is set
        if ($credit_note_number === null || (is_array($credit_note_number) && count($credit_note_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_number when calling customerCreditNoteGetBycreditNoteNumber'
            );
        }

        $resourcePath = '/controller/api/v1/customerCreditNote/{creditNoteNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($credit_note_number !== null) {
            $resourcePath = str_replace(
                '{' . 'creditNoteNumber' . '}',
                ObjectSerializer::toPathValue($credit_note_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerCreditNotePrintBycreditNoteNumber
     *
     * Get the print report of a Customer Credit Note
     *
     * @param  string $credit_note_number Identifies the customer credit note (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerCreditNotePrintBycreditNoteNumber($credit_note_number)
    {
        list($response) = $this->customerCreditNotePrintBycreditNoteNumberWithHttpInfo($credit_note_number);
        return $response;
    }

    /**
     * Operation customerCreditNotePrintBycreditNoteNumberWithHttpInfo
     *
     * Get the print report of a Customer Credit Note
     *
     * @param  string $credit_note_number Identifies the customer credit note (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCreditNotePrintBycreditNoteNumberWithHttpInfo($credit_note_number)
    {
        $returnType = 'object';
        $request = $this->customerCreditNotePrintBycreditNoteNumberRequest($credit_note_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerCreditNotePrintBycreditNoteNumberAsync
     *
     * Get the print report of a Customer Credit Note
     *
     * @param  string $credit_note_number Identifies the customer credit note (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNotePrintBycreditNoteNumberAsync($credit_note_number)
    {
        return $this->customerCreditNotePrintBycreditNoteNumberAsyncWithHttpInfo($credit_note_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerCreditNotePrintBycreditNoteNumberAsyncWithHttpInfo
     *
     * Get the print report of a Customer Credit Note
     *
     * @param  string $credit_note_number Identifies the customer credit note (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNotePrintBycreditNoteNumberAsyncWithHttpInfo($credit_note_number)
    {
        $returnType = 'object';
        $request = $this->customerCreditNotePrintBycreditNoteNumberRequest($credit_note_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerCreditNotePrintBycreditNoteNumber'
     *
     * @param  string $credit_note_number Identifies the customer credit note (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerCreditNotePrintBycreditNoteNumberRequest($credit_note_number)
    {
        // verify the required parameter 'credit_note_number' is set
        if ($credit_note_number === null || (is_array($credit_note_number) && count($credit_note_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_number when calling customerCreditNotePrintBycreditNoteNumber'
            );
        }

        $resourcePath = '/controller/api/v1/customerCreditNote/{creditNoteNumber}/print';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($credit_note_number !== null) {
            $resourcePath = str_replace(
                '{' . 'creditNoteNumber' . '}',
                ObjectSerializer::toPathValue($credit_note_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerCreditNoteReleaseDocumentBycreditNoteNumber
     *
     * Release credit note operation
     *
     * @param  string $credit_note_number Reference number of the credit note to be released (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\ReleaseCustomerCreditNoteActionResultDto
     */
    public function customerCreditNoteReleaseDocumentBycreditNoteNumber($credit_note_number)
    {
        list($response) = $this->customerCreditNoteReleaseDocumentBycreditNoteNumberWithHttpInfo($credit_note_number);
        return $response;
    }

    /**
     * Operation customerCreditNoteReleaseDocumentBycreditNoteNumberWithHttpInfo
     *
     * Release credit note operation
     *
     * @param  string $credit_note_number Reference number of the credit note to be released (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\ReleaseCustomerCreditNoteActionResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCreditNoteReleaseDocumentBycreditNoteNumberWithHttpInfo($credit_note_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ReleaseCustomerCreditNoteActionResultDto';
        $request = $this->customerCreditNoteReleaseDocumentBycreditNoteNumberRequest($credit_note_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\ReleaseCustomerCreditNoteActionResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerCreditNoteReleaseDocumentBycreditNoteNumberAsync
     *
     * Release credit note operation
     *
     * @param  string $credit_note_number Reference number of the credit note to be released (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteReleaseDocumentBycreditNoteNumberAsync($credit_note_number)
    {
        return $this->customerCreditNoteReleaseDocumentBycreditNoteNumberAsyncWithHttpInfo($credit_note_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerCreditNoteReleaseDocumentBycreditNoteNumberAsyncWithHttpInfo
     *
     * Release credit note operation
     *
     * @param  string $credit_note_number Reference number of the credit note to be released (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteReleaseDocumentBycreditNoteNumberAsyncWithHttpInfo($credit_note_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ReleaseCustomerCreditNoteActionResultDto';
        $request = $this->customerCreditNoteReleaseDocumentBycreditNoteNumberRequest($credit_note_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerCreditNoteReleaseDocumentBycreditNoteNumber'
     *
     * @param  string $credit_note_number Reference number of the credit note to be released (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerCreditNoteReleaseDocumentBycreditNoteNumberRequest($credit_note_number)
    {
        // verify the required parameter 'credit_note_number' is set
        if ($credit_note_number === null || (is_array($credit_note_number) && count($credit_note_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_number when calling customerCreditNoteReleaseDocumentBycreditNoteNumber'
            );
        }

        $resourcePath = '/controller/api/v1/customerCreditNote/{creditNoteNumber}/action/release';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($credit_note_number !== null) {
            $resourcePath = str_replace(
                '{' . 'creditNoteNumber' . '}',
                ObjectSerializer::toPathValue($credit_note_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerCreditNoteUpdateBycreditNoteNumber
     *
     * Update a specific Credit Note
     *
     * @param  string $credit_note_number Identifies the Credit Note to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CustomerCreditNoteUpdateDto $credit_note Defines the data for the Credit Note to update (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerCreditNoteUpdateBycreditNoteNumber($credit_note_number, $credit_note)
    {
        list($response) = $this->customerCreditNoteUpdateBycreditNoteNumberWithHttpInfo($credit_note_number, $credit_note);
        return $response;
    }

    /**
     * Operation customerCreditNoteUpdateBycreditNoteNumberWithHttpInfo
     *
     * Update a specific Credit Note
     *
     * @param  string $credit_note_number Identifies the Credit Note to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CustomerCreditNoteUpdateDto $credit_note Defines the data for the Credit Note to update (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCreditNoteUpdateBycreditNoteNumberWithHttpInfo($credit_note_number, $credit_note)
    {
        $returnType = 'object';
        $request = $this->customerCreditNoteUpdateBycreditNoteNumberRequest($credit_note_number, $credit_note);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerCreditNoteUpdateBycreditNoteNumberAsync
     *
     * Update a specific Credit Note
     *
     * @param  string $credit_note_number Identifies the Credit Note to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CustomerCreditNoteUpdateDto $credit_note Defines the data for the Credit Note to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteUpdateBycreditNoteNumberAsync($credit_note_number, $credit_note)
    {
        return $this->customerCreditNoteUpdateBycreditNoteNumberAsyncWithHttpInfo($credit_note_number, $credit_note)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerCreditNoteUpdateBycreditNoteNumberAsyncWithHttpInfo
     *
     * Update a specific Credit Note
     *
     * @param  string $credit_note_number Identifies the Credit Note to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CustomerCreditNoteUpdateDto $credit_note Defines the data for the Credit Note to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreditNoteUpdateBycreditNoteNumberAsyncWithHttpInfo($credit_note_number, $credit_note)
    {
        $returnType = 'object';
        $request = $this->customerCreditNoteUpdateBycreditNoteNumberRequest($credit_note_number, $credit_note);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerCreditNoteUpdateBycreditNoteNumber'
     *
     * @param  string $credit_note_number Identifies the Credit Note to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CustomerCreditNoteUpdateDto $credit_note Defines the data for the Credit Note to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerCreditNoteUpdateBycreditNoteNumberRequest($credit_note_number, $credit_note)
    {
        // verify the required parameter 'credit_note_number' is set
        if ($credit_note_number === null || (is_array($credit_note_number) && count($credit_note_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note_number when calling customerCreditNoteUpdateBycreditNoteNumber'
            );
        }
        // verify the required parameter 'credit_note' is set
        if ($credit_note === null || (is_array($credit_note) && count($credit_note) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $credit_note when calling customerCreditNoteUpdateBycreditNoteNumber'
            );
        }

        $resourcePath = '/controller/api/v1/customerCreditNote/{creditNoteNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($credit_note_number !== null) {
            $resourcePath = str_replace(
                '{' . 'creditNoteNumber' . '}',
                ObjectSerializer::toPathValue($credit_note_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($credit_note)) {
            $_tempBody = $credit_note;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
