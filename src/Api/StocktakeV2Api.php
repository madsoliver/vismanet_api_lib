<?php
/**
 * StocktakeV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ekstralys\VismaNetApi\ApiException;
use Ekstralys\VismaNetApi\Configuration;
use Ekstralys\VismaNetApi\HeaderSelector;
use Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * StocktakeV2Api Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StocktakeV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation stocktakeV2GetAllStocktakes
     *
     * Get a range of stocktakes - ScreenId=IN305000  Request page size must be lower or equal to the allowed max page size which is returned as part of the metadata information. If requested page size is greater than allowed max page size, request will be limited to max page size.
     *
     * @param  string $warehouse Filter by Warehouse. (optional)
     * @param  string $location Filter by Location. (optional)
     * @param  string $inventory Filter by Inventory. (optional)
     * @param  string $lot_serial_number Filter by LotSerialNumber. (optional)
     * @param  string $summary_status Filter by SummaryStatus. (optional)
     * @param  int $start_with_line Filter by LineNumber GreaterEqual StartWithLine. (optional)
     * @param  int $end_with_line Filter by by LineNumber LessEqual EndWithLine. (optional)
     * @param  string $freeze_date_time Filter by FreezeDateTime. (optional)
     * @param  string $freeze_date_time_condition Filter by FreezeDateTimeCondition. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present.. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $expiration_date_time Filter by ExpirationDateTime. (optional)
     * @param  string $expiration_date_time_condition Filter by ExpirationDateTimeCondition. (optional)
     * @param  string $status Filter by StocktakeLineStatus. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\StocktakeV2Dto[]
     */
    public function stocktakeV2GetAllStocktakes($warehouse = null, $location = null, $inventory = null, $lot_serial_number = null, $summary_status = null, $start_with_line = null, $end_with_line = null, $freeze_date_time = null, $freeze_date_time_condition = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $expiration_date_time = null, $expiration_date_time_condition = null, $status = null, $page_number = null, $page_size = null)
    {
        list($response) = $this->stocktakeV2GetAllStocktakesWithHttpInfo($warehouse, $location, $inventory, $lot_serial_number, $summary_status, $start_with_line, $end_with_line, $freeze_date_time, $freeze_date_time_condition, $last_modified_date_time, $last_modified_date_time_condition, $expiration_date_time, $expiration_date_time_condition, $status, $page_number, $page_size);
        return $response;
    }

    /**
     * Operation stocktakeV2GetAllStocktakesWithHttpInfo
     *
     * Get a range of stocktakes - ScreenId=IN305000  Request page size must be lower or equal to the allowed max page size which is returned as part of the metadata information. If requested page size is greater than allowed max page size, request will be limited to max page size.
     *
     * @param  string $warehouse Filter by Warehouse. (optional)
     * @param  string $location Filter by Location. (optional)
     * @param  string $inventory Filter by Inventory. (optional)
     * @param  string $lot_serial_number Filter by LotSerialNumber. (optional)
     * @param  string $summary_status Filter by SummaryStatus. (optional)
     * @param  int $start_with_line Filter by LineNumber GreaterEqual StartWithLine. (optional)
     * @param  int $end_with_line Filter by by LineNumber LessEqual EndWithLine. (optional)
     * @param  string $freeze_date_time Filter by FreezeDateTime. (optional)
     * @param  string $freeze_date_time_condition Filter by FreezeDateTimeCondition. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present.. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $expiration_date_time Filter by ExpirationDateTime. (optional)
     * @param  string $expiration_date_time_condition Filter by ExpirationDateTimeCondition. (optional)
     * @param  string $status Filter by StocktakeLineStatus. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\StocktakeV2Dto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stocktakeV2GetAllStocktakesWithHttpInfo($warehouse = null, $location = null, $inventory = null, $lot_serial_number = null, $summary_status = null, $start_with_line = null, $end_with_line = null, $freeze_date_time = null, $freeze_date_time_condition = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $expiration_date_time = null, $expiration_date_time_condition = null, $status = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\StocktakeV2Dto[]';
        $request = $this->stocktakeV2GetAllStocktakesRequest($warehouse, $location, $inventory, $lot_serial_number, $summary_status, $start_with_line, $end_with_line, $freeze_date_time, $freeze_date_time_condition, $last_modified_date_time, $last_modified_date_time_condition, $expiration_date_time, $expiration_date_time_condition, $status, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\StocktakeV2Dto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stocktakeV2GetAllStocktakesAsync
     *
     * Get a range of stocktakes - ScreenId=IN305000  Request page size must be lower or equal to the allowed max page size which is returned as part of the metadata information. If requested page size is greater than allowed max page size, request will be limited to max page size.
     *
     * @param  string $warehouse Filter by Warehouse. (optional)
     * @param  string $location Filter by Location. (optional)
     * @param  string $inventory Filter by Inventory. (optional)
     * @param  string $lot_serial_number Filter by LotSerialNumber. (optional)
     * @param  string $summary_status Filter by SummaryStatus. (optional)
     * @param  int $start_with_line Filter by LineNumber GreaterEqual StartWithLine. (optional)
     * @param  int $end_with_line Filter by by LineNumber LessEqual EndWithLine. (optional)
     * @param  string $freeze_date_time Filter by FreezeDateTime. (optional)
     * @param  string $freeze_date_time_condition Filter by FreezeDateTimeCondition. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present.. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $expiration_date_time Filter by ExpirationDateTime. (optional)
     * @param  string $expiration_date_time_condition Filter by ExpirationDateTimeCondition. (optional)
     * @param  string $status Filter by StocktakeLineStatus. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stocktakeV2GetAllStocktakesAsync($warehouse = null, $location = null, $inventory = null, $lot_serial_number = null, $summary_status = null, $start_with_line = null, $end_with_line = null, $freeze_date_time = null, $freeze_date_time_condition = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $expiration_date_time = null, $expiration_date_time_condition = null, $status = null, $page_number = null, $page_size = null)
    {
        return $this->stocktakeV2GetAllStocktakesAsyncWithHttpInfo($warehouse, $location, $inventory, $lot_serial_number, $summary_status, $start_with_line, $end_with_line, $freeze_date_time, $freeze_date_time_condition, $last_modified_date_time, $last_modified_date_time_condition, $expiration_date_time, $expiration_date_time_condition, $status, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stocktakeV2GetAllStocktakesAsyncWithHttpInfo
     *
     * Get a range of stocktakes - ScreenId=IN305000  Request page size must be lower or equal to the allowed max page size which is returned as part of the metadata information. If requested page size is greater than allowed max page size, request will be limited to max page size.
     *
     * @param  string $warehouse Filter by Warehouse. (optional)
     * @param  string $location Filter by Location. (optional)
     * @param  string $inventory Filter by Inventory. (optional)
     * @param  string $lot_serial_number Filter by LotSerialNumber. (optional)
     * @param  string $summary_status Filter by SummaryStatus. (optional)
     * @param  int $start_with_line Filter by LineNumber GreaterEqual StartWithLine. (optional)
     * @param  int $end_with_line Filter by by LineNumber LessEqual EndWithLine. (optional)
     * @param  string $freeze_date_time Filter by FreezeDateTime. (optional)
     * @param  string $freeze_date_time_condition Filter by FreezeDateTimeCondition. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present.. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $expiration_date_time Filter by ExpirationDateTime. (optional)
     * @param  string $expiration_date_time_condition Filter by ExpirationDateTimeCondition. (optional)
     * @param  string $status Filter by StocktakeLineStatus. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stocktakeV2GetAllStocktakesAsyncWithHttpInfo($warehouse = null, $location = null, $inventory = null, $lot_serial_number = null, $summary_status = null, $start_with_line = null, $end_with_line = null, $freeze_date_time = null, $freeze_date_time_condition = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $expiration_date_time = null, $expiration_date_time_condition = null, $status = null, $page_number = null, $page_size = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\StocktakeV2Dto[]';
        $request = $this->stocktakeV2GetAllStocktakesRequest($warehouse, $location, $inventory, $lot_serial_number, $summary_status, $start_with_line, $end_with_line, $freeze_date_time, $freeze_date_time_condition, $last_modified_date_time, $last_modified_date_time_condition, $expiration_date_time, $expiration_date_time_condition, $status, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stocktakeV2GetAllStocktakes'
     *
     * @param  string $warehouse Filter by Warehouse. (optional)
     * @param  string $location Filter by Location. (optional)
     * @param  string $inventory Filter by Inventory. (optional)
     * @param  string $lot_serial_number Filter by LotSerialNumber. (optional)
     * @param  string $summary_status Filter by SummaryStatus. (optional)
     * @param  int $start_with_line Filter by LineNumber GreaterEqual StartWithLine. (optional)
     * @param  int $end_with_line Filter by by LineNumber LessEqual EndWithLine. (optional)
     * @param  string $freeze_date_time Filter by FreezeDateTime. (optional)
     * @param  string $freeze_date_time_condition Filter by FreezeDateTimeCondition. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present.. (optional)
     * @param  string $last_modified_date_time_condition System retrieved information for state/condition. (optional)
     * @param  string $expiration_date_time Filter by ExpirationDateTime. (optional)
     * @param  string $expiration_date_time_condition Filter by ExpirationDateTimeCondition. (optional)
     * @param  string $status Filter by StocktakeLineStatus. (optional)
     * @param  int $page_number Pagination parameter. Page number. (optional)
     * @param  int $page_size Pagination parameter. Number of items to be collected. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stocktakeV2GetAllStocktakesRequest($warehouse = null, $location = null, $inventory = null, $lot_serial_number = null, $summary_status = null, $start_with_line = null, $end_with_line = null, $freeze_date_time = null, $freeze_date_time_condition = null, $last_modified_date_time = null, $last_modified_date_time_condition = null, $expiration_date_time = null, $expiration_date_time_condition = null, $status = null, $page_number = null, $page_size = null)
    {

        $resourcePath = '/controller/api/v2/stocktake';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($warehouse !== null) {
            $queryParams['warehouse'] = ObjectSerializer::toQueryValue($warehouse);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = ObjectSerializer::toQueryValue($location);
        }
        // query params
        if ($inventory !== null) {
            $queryParams['inventory'] = ObjectSerializer::toQueryValue($inventory);
        }
        // query params
        if ($lot_serial_number !== null) {
            $queryParams['lotSerialNumber'] = ObjectSerializer::toQueryValue($lot_serial_number);
        }
        // query params
        if ($summary_status !== null) {
            $queryParams['summaryStatus'] = ObjectSerializer::toQueryValue($summary_status);
        }
        // query params
        if ($start_with_line !== null) {
            $queryParams['startWithLine'] = ObjectSerializer::toQueryValue($start_with_line);
        }
        // query params
        if ($end_with_line !== null) {
            $queryParams['endWithLine'] = ObjectSerializer::toQueryValue($end_with_line);
        }
        // query params
        if ($freeze_date_time !== null) {
            $queryParams['freezeDateTime'] = ObjectSerializer::toQueryValue($freeze_date_time);
        }
        // query params
        if ($freeze_date_time_condition !== null) {
            $queryParams['freezeDateTimeCondition'] = ObjectSerializer::toQueryValue($freeze_date_time_condition);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }
        // query params
        if ($expiration_date_time !== null) {
            $queryParams['expirationDateTime'] = ObjectSerializer::toQueryValue($expiration_date_time);
        }
        // query params
        if ($expiration_date_time_condition !== null) {
            $queryParams['expirationDateTimeCondition'] = ObjectSerializer::toQueryValue($expiration_date_time_condition);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stocktakeV2GetByreferenceNumber
     *
     * Get a specific
     *
     * @param  string $reference_number Identifies the Stocktake (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\StocktakeV2Dto
     */
    public function stocktakeV2GetByreferenceNumber($reference_number)
    {
        list($response) = $this->stocktakeV2GetByreferenceNumberWithHttpInfo($reference_number);
        return $response;
    }

    /**
     * Operation stocktakeV2GetByreferenceNumberWithHttpInfo
     *
     * Get a specific
     *
     * @param  string $reference_number Identifies the Stocktake (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\StocktakeV2Dto, HTTP status code, HTTP response headers (array of strings)
     */
    public function stocktakeV2GetByreferenceNumberWithHttpInfo($reference_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\StocktakeV2Dto';
        $request = $this->stocktakeV2GetByreferenceNumberRequest($reference_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\StocktakeV2Dto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stocktakeV2GetByreferenceNumberAsync
     *
     * Get a specific
     *
     * @param  string $reference_number Identifies the Stocktake (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stocktakeV2GetByreferenceNumberAsync($reference_number)
    {
        return $this->stocktakeV2GetByreferenceNumberAsyncWithHttpInfo($reference_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stocktakeV2GetByreferenceNumberAsyncWithHttpInfo
     *
     * Get a specific
     *
     * @param  string $reference_number Identifies the Stocktake (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stocktakeV2GetByreferenceNumberAsyncWithHttpInfo($reference_number)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\StocktakeV2Dto';
        $request = $this->stocktakeV2GetByreferenceNumberRequest($reference_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stocktakeV2GetByreferenceNumber'
     *
     * @param  string $reference_number Identifies the Stocktake (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stocktakeV2GetByreferenceNumberRequest($reference_number)
    {
        // verify the required parameter 'reference_number' is set
        if ($reference_number === null || (is_array($reference_number) && count($reference_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_number when calling stocktakeV2GetByreferenceNumber'
            );
        }

        $resourcePath = '/controller/api/v2/stocktake/{referenceNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($reference_number !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceNumber' . '}',
                ObjectSerializer::toPathValue($reference_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stocktakeV2PutByreferenceNumber
     *
     * Update a specific stocktake
     *
     * @param  string $reference_number Identifies the stocktake to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\StocktakeUpdateDto $stocktake The data to update for stocktake (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function stocktakeV2PutByreferenceNumber($reference_number, $stocktake)
    {
        list($response) = $this->stocktakeV2PutByreferenceNumberWithHttpInfo($reference_number, $stocktake);
        return $response;
    }

    /**
     * Operation stocktakeV2PutByreferenceNumberWithHttpInfo
     *
     * Update a specific stocktake
     *
     * @param  string $reference_number Identifies the stocktake to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\StocktakeUpdateDto $stocktake The data to update for stocktake (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function stocktakeV2PutByreferenceNumberWithHttpInfo($reference_number, $stocktake)
    {
        $returnType = 'object';
        $request = $this->stocktakeV2PutByreferenceNumberRequest($reference_number, $stocktake);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stocktakeV2PutByreferenceNumberAsync
     *
     * Update a specific stocktake
     *
     * @param  string $reference_number Identifies the stocktake to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\StocktakeUpdateDto $stocktake The data to update for stocktake (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stocktakeV2PutByreferenceNumberAsync($reference_number, $stocktake)
    {
        return $this->stocktakeV2PutByreferenceNumberAsyncWithHttpInfo($reference_number, $stocktake)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stocktakeV2PutByreferenceNumberAsyncWithHttpInfo
     *
     * Update a specific stocktake
     *
     * @param  string $reference_number Identifies the stocktake to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\StocktakeUpdateDto $stocktake The data to update for stocktake (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stocktakeV2PutByreferenceNumberAsyncWithHttpInfo($reference_number, $stocktake)
    {
        $returnType = 'object';
        $request = $this->stocktakeV2PutByreferenceNumberRequest($reference_number, $stocktake);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stocktakeV2PutByreferenceNumber'
     *
     * @param  string $reference_number Identifies the stocktake to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\StocktakeUpdateDto $stocktake The data to update for stocktake (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stocktakeV2PutByreferenceNumberRequest($reference_number, $stocktake)
    {
        // verify the required parameter 'reference_number' is set
        if ($reference_number === null || (is_array($reference_number) && count($reference_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_number when calling stocktakeV2PutByreferenceNumber'
            );
        }
        // verify the required parameter 'stocktake' is set
        if ($stocktake === null || (is_array($stocktake) && count($stocktake) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stocktake when calling stocktakeV2PutByreferenceNumber'
            );
        }

        $resourcePath = '/controller/api/v2/stocktake/{referenceNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($reference_number !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceNumber' . '}',
                ObjectSerializer::toPathValue($reference_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($stocktake)) {
            $_tempBody = $stocktake;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
