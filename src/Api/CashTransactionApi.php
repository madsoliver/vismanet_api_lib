<?php
/**
 * CashTransactionApi
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ekstralys\VismaNetApi\ApiException;
use Ekstralys\VismaNetApi\Configuration;
use Ekstralys\VismaNetApi\HeaderSelector;
use Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * CashTransactionApi Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CashTransactionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cashTransactionCreateCashTransaction
     *
     * Create a Cash Transaction- ScreenID=CA304000
     *
     * @param  \Ekstralys\VismaNetApi\Model\CashTransactionUpdateDto $cash_transaction Defines the data for the Cash Transaction to create (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function cashTransactionCreateCashTransaction($cash_transaction)
    {
        list($response) = $this->cashTransactionCreateCashTransactionWithHttpInfo($cash_transaction);
        return $response;
    }

    /**
     * Operation cashTransactionCreateCashTransactionWithHttpInfo
     *
     * Create a Cash Transaction- ScreenID=CA304000
     *
     * @param  \Ekstralys\VismaNetApi\Model\CashTransactionUpdateDto $cash_transaction Defines the data for the Cash Transaction to create (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function cashTransactionCreateCashTransactionWithHttpInfo($cash_transaction)
    {
        $returnType = 'object';
        $request = $this->cashTransactionCreateCashTransactionRequest($cash_transaction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashTransactionCreateCashTransactionAsync
     *
     * Create a Cash Transaction- ScreenID=CA304000
     *
     * @param  \Ekstralys\VismaNetApi\Model\CashTransactionUpdateDto $cash_transaction Defines the data for the Cash Transaction to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashTransactionCreateCashTransactionAsync($cash_transaction)
    {
        return $this->cashTransactionCreateCashTransactionAsyncWithHttpInfo($cash_transaction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashTransactionCreateCashTransactionAsyncWithHttpInfo
     *
     * Create a Cash Transaction- ScreenID=CA304000
     *
     * @param  \Ekstralys\VismaNetApi\Model\CashTransactionUpdateDto $cash_transaction Defines the data for the Cash Transaction to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashTransactionCreateCashTransactionAsyncWithHttpInfo($cash_transaction)
    {
        $returnType = 'object';
        $request = $this->cashTransactionCreateCashTransactionRequest($cash_transaction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashTransactionCreateCashTransaction'
     *
     * @param  \Ekstralys\VismaNetApi\Model\CashTransactionUpdateDto $cash_transaction Defines the data for the Cash Transaction to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cashTransactionCreateCashTransactionRequest($cash_transaction)
    {
        // verify the required parameter 'cash_transaction' is set
        if ($cash_transaction === null || (is_array($cash_transaction) && count($cash_transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cash_transaction when calling cashTransactionCreateCashTransaction'
            );
        }

        $resourcePath = '/controller/api/v1/cashTransaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($cash_transaction)) {
            $_tempBody = $cash_transaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cashTransactionGetAll
     *
     * Get all Transaction - ScreenID=CA304000
     *
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of record. Use format: YYYY-MM-DD HH:MM (date and time) to filter by date (optional)
     * @param  string $last_modified_date_time_condition Value to be used for filtering lastModifiedDateTime value. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CashTransactionDto[]
     */
    public function cashTransactionGetAll($number_to_read = null, $skip_records = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        list($response) = $this->cashTransactionGetAllWithHttpInfo($number_to_read, $skip_records, $last_modified_date_time, $last_modified_date_time_condition);
        return $response;
    }

    /**
     * Operation cashTransactionGetAllWithHttpInfo
     *
     * Get all Transaction - ScreenID=CA304000
     *
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of record. Use format: YYYY-MM-DD HH:MM (date and time) to filter by date (optional)
     * @param  string $last_modified_date_time_condition Value to be used for filtering lastModifiedDateTime value. (optional)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CashTransactionDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function cashTransactionGetAllWithHttpInfo($number_to_read = null, $skip_records = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CashTransactionDto[]';
        $request = $this->cashTransactionGetAllRequest($number_to_read, $skip_records, $last_modified_date_time, $last_modified_date_time_condition);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CashTransactionDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashTransactionGetAllAsync
     *
     * Get all Transaction - ScreenID=CA304000
     *
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of record. Use format: YYYY-MM-DD HH:MM (date and time) to filter by date (optional)
     * @param  string $last_modified_date_time_condition Value to be used for filtering lastModifiedDateTime value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashTransactionGetAllAsync($number_to_read = null, $skip_records = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        return $this->cashTransactionGetAllAsyncWithHttpInfo($number_to_read, $skip_records, $last_modified_date_time, $last_modified_date_time_condition)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashTransactionGetAllAsyncWithHttpInfo
     *
     * Get all Transaction - ScreenID=CA304000
     *
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of record. Use format: YYYY-MM-DD HH:MM (date and time) to filter by date (optional)
     * @param  string $last_modified_date_time_condition Value to be used for filtering lastModifiedDateTime value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashTransactionGetAllAsyncWithHttpInfo($number_to_read = null, $skip_records = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CashTransactionDto[]';
        $request = $this->cashTransactionGetAllRequest($number_to_read, $skip_records, $last_modified_date_time, $last_modified_date_time_condition);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashTransactionGetAll'
     *
     * @param  int $number_to_read This field has been deprecated and will be removed in future versions. (optional)
     * @param  int $skip_records This field has been deprecated and will be removed in future versions. (optional)
     * @param  string $last_modified_date_time System generated value for last modification of record. Use format: YYYY-MM-DD HH:MM (date and time) to filter by date (optional)
     * @param  string $last_modified_date_time_condition Value to be used for filtering lastModifiedDateTime value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cashTransactionGetAllRequest($number_to_read = null, $skip_records = null, $last_modified_date_time = null, $last_modified_date_time_condition = null)
    {

        $resourcePath = '/controller/api/v1/cashTransaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($number_to_read !== null) {
            $queryParams['numberToRead'] = ObjectSerializer::toQueryValue($number_to_read);
        }
        // query params
        if ($skip_records !== null) {
            $queryParams['skipRecords'] = ObjectSerializer::toQueryValue($skip_records);
        }
        // query params
        if ($last_modified_date_time !== null) {
            $queryParams['lastModifiedDateTime'] = ObjectSerializer::toQueryValue($last_modified_date_time);
        }
        // query params
        if ($last_modified_date_time_condition !== null) {
            $queryParams['lastModifiedDateTimeCondition'] = ObjectSerializer::toQueryValue($last_modified_date_time_condition);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cashTransactionGetByreferenceNbr
     *
     * Get a specific Transaction - ScreenID=CA304000
     *
     * @param  string $reference_nbr Returns data for the selected Cash transaction (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\CashTransactionDto
     */
    public function cashTransactionGetByreferenceNbr($reference_nbr)
    {
        list($response) = $this->cashTransactionGetByreferenceNbrWithHttpInfo($reference_nbr);
        return $response;
    }

    /**
     * Operation cashTransactionGetByreferenceNbrWithHttpInfo
     *
     * Get a specific Transaction - ScreenID=CA304000
     *
     * @param  string $reference_nbr Returns data for the selected Cash transaction (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\CashTransactionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function cashTransactionGetByreferenceNbrWithHttpInfo($reference_nbr)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CashTransactionDto';
        $request = $this->cashTransactionGetByreferenceNbrRequest($reference_nbr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\CashTransactionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashTransactionGetByreferenceNbrAsync
     *
     * Get a specific Transaction - ScreenID=CA304000
     *
     * @param  string $reference_nbr Returns data for the selected Cash transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashTransactionGetByreferenceNbrAsync($reference_nbr)
    {
        return $this->cashTransactionGetByreferenceNbrAsyncWithHttpInfo($reference_nbr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashTransactionGetByreferenceNbrAsyncWithHttpInfo
     *
     * Get a specific Transaction - ScreenID=CA304000
     *
     * @param  string $reference_nbr Returns data for the selected Cash transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashTransactionGetByreferenceNbrAsyncWithHttpInfo($reference_nbr)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\CashTransactionDto';
        $request = $this->cashTransactionGetByreferenceNbrRequest($reference_nbr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashTransactionGetByreferenceNbr'
     *
     * @param  string $reference_nbr Returns data for the selected Cash transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cashTransactionGetByreferenceNbrRequest($reference_nbr)
    {
        // verify the required parameter 'reference_nbr' is set
        if ($reference_nbr === null || (is_array($reference_nbr) && count($reference_nbr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_nbr when calling cashTransactionGetByreferenceNbr'
            );
        }

        $resourcePath = '/controller/api/v1/cashTransaction/{referenceNbr}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($reference_nbr !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceNbr' . '}',
                ObjectSerializer::toPathValue($reference_nbr),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cashTransactionPutByreferenceNbr
     *
     * Update a specific CashTransaction - ScreenID=CA304000
     *
     * @param  string $reference_nbr Identifies the Cash Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CashTransactionUpdateDto $cash_transaction Defines the data for the Cash Transaction to update (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function cashTransactionPutByreferenceNbr($reference_nbr, $cash_transaction)
    {
        list($response) = $this->cashTransactionPutByreferenceNbrWithHttpInfo($reference_nbr, $cash_transaction);
        return $response;
    }

    /**
     * Operation cashTransactionPutByreferenceNbrWithHttpInfo
     *
     * Update a specific CashTransaction - ScreenID=CA304000
     *
     * @param  string $reference_nbr Identifies the Cash Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CashTransactionUpdateDto $cash_transaction Defines the data for the Cash Transaction to update (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function cashTransactionPutByreferenceNbrWithHttpInfo($reference_nbr, $cash_transaction)
    {
        $returnType = 'object';
        $request = $this->cashTransactionPutByreferenceNbrRequest($reference_nbr, $cash_transaction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashTransactionPutByreferenceNbrAsync
     *
     * Update a specific CashTransaction - ScreenID=CA304000
     *
     * @param  string $reference_nbr Identifies the Cash Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CashTransactionUpdateDto $cash_transaction Defines the data for the Cash Transaction to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashTransactionPutByreferenceNbrAsync($reference_nbr, $cash_transaction)
    {
        return $this->cashTransactionPutByreferenceNbrAsyncWithHttpInfo($reference_nbr, $cash_transaction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashTransactionPutByreferenceNbrAsyncWithHttpInfo
     *
     * Update a specific CashTransaction - ScreenID=CA304000
     *
     * @param  string $reference_nbr Identifies the Cash Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CashTransactionUpdateDto $cash_transaction Defines the data for the Cash Transaction to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashTransactionPutByreferenceNbrAsyncWithHttpInfo($reference_nbr, $cash_transaction)
    {
        $returnType = 'object';
        $request = $this->cashTransactionPutByreferenceNbrRequest($reference_nbr, $cash_transaction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashTransactionPutByreferenceNbr'
     *
     * @param  string $reference_nbr Identifies the Cash Transaction to update (required)
     * @param  \Ekstralys\VismaNetApi\Model\CashTransactionUpdateDto $cash_transaction Defines the data for the Cash Transaction to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cashTransactionPutByreferenceNbrRequest($reference_nbr, $cash_transaction)
    {
        // verify the required parameter 'reference_nbr' is set
        if ($reference_nbr === null || (is_array($reference_nbr) && count($reference_nbr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_nbr when calling cashTransactionPutByreferenceNbr'
            );
        }
        // verify the required parameter 'cash_transaction' is set
        if ($cash_transaction === null || (is_array($cash_transaction) && count($cash_transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cash_transaction when calling cashTransactionPutByreferenceNbr'
            );
        }

        $resourcePath = '/controller/api/v1/cashTransaction/{referenceNbr}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($reference_nbr !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceNbr' . '}',
                ObjectSerializer::toPathValue($reference_nbr),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($cash_transaction)) {
            $_tempBody = $cash_transaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cashTransactionReleaseByreferenceNbr
     *
     * Release cash transaction - ScreenID=CA304000
     *
     * @param  string $reference_nbr Reference number of the cash transaction to be released. (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\ReleaseCashTransactionActionResultDto
     */
    public function cashTransactionReleaseByreferenceNbr($reference_nbr)
    {
        list($response) = $this->cashTransactionReleaseByreferenceNbrWithHttpInfo($reference_nbr);
        return $response;
    }

    /**
     * Operation cashTransactionReleaseByreferenceNbrWithHttpInfo
     *
     * Release cash transaction - ScreenID=CA304000
     *
     * @param  string $reference_nbr Reference number of the cash transaction to be released. (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\ReleaseCashTransactionActionResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function cashTransactionReleaseByreferenceNbrWithHttpInfo($reference_nbr)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ReleaseCashTransactionActionResultDto';
        $request = $this->cashTransactionReleaseByreferenceNbrRequest($reference_nbr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\ReleaseCashTransactionActionResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashTransactionReleaseByreferenceNbrAsync
     *
     * Release cash transaction - ScreenID=CA304000
     *
     * @param  string $reference_nbr Reference number of the cash transaction to be released. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashTransactionReleaseByreferenceNbrAsync($reference_nbr)
    {
        return $this->cashTransactionReleaseByreferenceNbrAsyncWithHttpInfo($reference_nbr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashTransactionReleaseByreferenceNbrAsyncWithHttpInfo
     *
     * Release cash transaction - ScreenID=CA304000
     *
     * @param  string $reference_nbr Reference number of the cash transaction to be released. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashTransactionReleaseByreferenceNbrAsyncWithHttpInfo($reference_nbr)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ReleaseCashTransactionActionResultDto';
        $request = $this->cashTransactionReleaseByreferenceNbrRequest($reference_nbr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashTransactionReleaseByreferenceNbr'
     *
     * @param  string $reference_nbr Reference number of the cash transaction to be released. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cashTransactionReleaseByreferenceNbrRequest($reference_nbr)
    {
        // verify the required parameter 'reference_nbr' is set
        if ($reference_nbr === null || (is_array($reference_nbr) && count($reference_nbr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_nbr when calling cashTransactionReleaseByreferenceNbr'
            );
        }

        $resourcePath = '/controller/api/v1/cashTransaction/{referenceNbr}/action/release';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($reference_nbr !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceNbr' . '}',
                ObjectSerializer::toPathValue($reference_nbr),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cashTransactionReverseByreferenceNbr
     *
     * Reverse a Cash Transaction- ScreenID=CA304000
     *
     * @param  string $reference_nbr Reference number of the cash transaction to be reversed. (required)
     * @param  \Ekstralys\VismaNetApi\Model\ReverseCashTransactionActionDto $reverse_action_dto The action dto use to condition the action (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ekstralys\VismaNetApi\Model\ReverseCashTransactionActionResultDto
     */
    public function cashTransactionReverseByreferenceNbr($reference_nbr, $reverse_action_dto)
    {
        list($response) = $this->cashTransactionReverseByreferenceNbrWithHttpInfo($reference_nbr, $reverse_action_dto);
        return $response;
    }

    /**
     * Operation cashTransactionReverseByreferenceNbrWithHttpInfo
     *
     * Reverse a Cash Transaction- ScreenID=CA304000
     *
     * @param  string $reference_nbr Reference number of the cash transaction to be reversed. (required)
     * @param  \Ekstralys\VismaNetApi\Model\ReverseCashTransactionActionDto $reverse_action_dto The action dto use to condition the action (required)
     *
     * @throws \Ekstralys\VismaNetApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ekstralys\VismaNetApi\Model\ReverseCashTransactionActionResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function cashTransactionReverseByreferenceNbrWithHttpInfo($reference_nbr, $reverse_action_dto)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ReverseCashTransactionActionResultDto';
        $request = $this->cashTransactionReverseByreferenceNbrRequest($reference_nbr, $reverse_action_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ekstralys\VismaNetApi\Model\ReverseCashTransactionActionResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashTransactionReverseByreferenceNbrAsync
     *
     * Reverse a Cash Transaction- ScreenID=CA304000
     *
     * @param  string $reference_nbr Reference number of the cash transaction to be reversed. (required)
     * @param  \Ekstralys\VismaNetApi\Model\ReverseCashTransactionActionDto $reverse_action_dto The action dto use to condition the action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashTransactionReverseByreferenceNbrAsync($reference_nbr, $reverse_action_dto)
    {
        return $this->cashTransactionReverseByreferenceNbrAsyncWithHttpInfo($reference_nbr, $reverse_action_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashTransactionReverseByreferenceNbrAsyncWithHttpInfo
     *
     * Reverse a Cash Transaction- ScreenID=CA304000
     *
     * @param  string $reference_nbr Reference number of the cash transaction to be reversed. (required)
     * @param  \Ekstralys\VismaNetApi\Model\ReverseCashTransactionActionDto $reverse_action_dto The action dto use to condition the action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashTransactionReverseByreferenceNbrAsyncWithHttpInfo($reference_nbr, $reverse_action_dto)
    {
        $returnType = '\Ekstralys\VismaNetApi\Model\ReverseCashTransactionActionResultDto';
        $request = $this->cashTransactionReverseByreferenceNbrRequest($reference_nbr, $reverse_action_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashTransactionReverseByreferenceNbr'
     *
     * @param  string $reference_nbr Reference number of the cash transaction to be reversed. (required)
     * @param  \Ekstralys\VismaNetApi\Model\ReverseCashTransactionActionDto $reverse_action_dto The action dto use to condition the action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cashTransactionReverseByreferenceNbrRequest($reference_nbr, $reverse_action_dto)
    {
        // verify the required parameter 'reference_nbr' is set
        if ($reference_nbr === null || (is_array($reference_nbr) && count($reference_nbr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_nbr when calling cashTransactionReverseByreferenceNbr'
            );
        }
        // verify the required parameter 'reverse_action_dto' is set
        if ($reverse_action_dto === null || (is_array($reverse_action_dto) && count($reverse_action_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reverse_action_dto when calling cashTransactionReverseByreferenceNbr'
            );
        }

        $resourcePath = '/controller/api/v1/cashTransaction/{referenceNbr}/action/reverse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($reference_nbr !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceNbr' . '}',
                ObjectSerializer::toPathValue($reference_nbr),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($reverse_action_dto)) {
            $_tempBody = $reverse_action_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-application-type');
        if ($apiKey !== null) {
            $headers['ipp-application-type'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ipp-company-id');
        if ($apiKey !== null) {
            $headers['ipp-company-id'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
