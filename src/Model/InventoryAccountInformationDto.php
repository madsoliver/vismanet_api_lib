<?php
/**
 * InventoryAccountInformationDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * InventoryAccountInformationDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryAccountInformationDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryAccountInformationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'expense_accrual_account' => 'object',
        'inventory_account' => 'object',
        'expense_account' => 'object',
        'cogs_account' => 'object',
        'expense_non_taxable_account' => 'object',
        'expense_eu_account' => 'object',
        'expense_import_account' => 'object',
        'expense_subaccount' => 'object',
        'cogs_subaccount' => 'object',
        'sales_account' => 'object',
        'sales_non_taxable_account' => 'object',
        'sales_eu_account' => 'object',
        'sales_export_account' => 'object',
        'sales_subaccount' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'expense_accrual_account' => null,
        'inventory_account' => null,
        'expense_account' => null,
        'cogs_account' => null,
        'expense_non_taxable_account' => null,
        'expense_eu_account' => null,
        'expense_import_account' => null,
        'expense_subaccount' => null,
        'cogs_subaccount' => null,
        'sales_account' => null,
        'sales_non_taxable_account' => null,
        'sales_eu_account' => null,
        'sales_export_account' => null,
        'sales_subaccount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expense_accrual_account' => 'expenseAccrualAccount',
        'inventory_account' => 'inventoryAccount',
        'expense_account' => 'expenseAccount',
        'cogs_account' => 'cogsAccount',
        'expense_non_taxable_account' => 'expenseNonTaxableAccount',
        'expense_eu_account' => 'expenseEuAccount',
        'expense_import_account' => 'expenseImportAccount',
        'expense_subaccount' => 'expenseSubaccount',
        'cogs_subaccount' => 'cogsSubaccount',
        'sales_account' => 'salesAccount',
        'sales_non_taxable_account' => 'salesNonTaxableAccount',
        'sales_eu_account' => 'salesEuAccount',
        'sales_export_account' => 'salesExportAccount',
        'sales_subaccount' => 'salesSubaccount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'expense_accrual_account' => 'setExpenseAccrualAccount',
        'inventory_account' => 'setInventoryAccount',
        'expense_account' => 'setExpenseAccount',
        'cogs_account' => 'setCogsAccount',
        'expense_non_taxable_account' => 'setExpenseNonTaxableAccount',
        'expense_eu_account' => 'setExpenseEuAccount',
        'expense_import_account' => 'setExpenseImportAccount',
        'expense_subaccount' => 'setExpenseSubaccount',
        'cogs_subaccount' => 'setCogsSubaccount',
        'sales_account' => 'setSalesAccount',
        'sales_non_taxable_account' => 'setSalesNonTaxableAccount',
        'sales_eu_account' => 'setSalesEuAccount',
        'sales_export_account' => 'setSalesExportAccount',
        'sales_subaccount' => 'setSalesSubaccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'expense_accrual_account' => 'getExpenseAccrualAccount',
        'inventory_account' => 'getInventoryAccount',
        'expense_account' => 'getExpenseAccount',
        'cogs_account' => 'getCogsAccount',
        'expense_non_taxable_account' => 'getExpenseNonTaxableAccount',
        'expense_eu_account' => 'getExpenseEuAccount',
        'expense_import_account' => 'getExpenseImportAccount',
        'expense_subaccount' => 'getExpenseSubaccount',
        'cogs_subaccount' => 'getCogsSubaccount',
        'sales_account' => 'getSalesAccount',
        'sales_non_taxable_account' => 'getSalesNonTaxableAccount',
        'sales_eu_account' => 'getSalesEuAccount',
        'sales_export_account' => 'getSalesExportAccount',
        'sales_subaccount' => 'getSalesSubaccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['expense_accrual_account'] = isset($data['expense_accrual_account']) ? $data['expense_accrual_account'] : null;
        $this->container['inventory_account'] = isset($data['inventory_account']) ? $data['inventory_account'] : null;
        $this->container['expense_account'] = isset($data['expense_account']) ? $data['expense_account'] : null;
        $this->container['cogs_account'] = isset($data['cogs_account']) ? $data['cogs_account'] : null;
        $this->container['expense_non_taxable_account'] = isset($data['expense_non_taxable_account']) ? $data['expense_non_taxable_account'] : null;
        $this->container['expense_eu_account'] = isset($data['expense_eu_account']) ? $data['expense_eu_account'] : null;
        $this->container['expense_import_account'] = isset($data['expense_import_account']) ? $data['expense_import_account'] : null;
        $this->container['expense_subaccount'] = isset($data['expense_subaccount']) ? $data['expense_subaccount'] : null;
        $this->container['cogs_subaccount'] = isset($data['cogs_subaccount']) ? $data['cogs_subaccount'] : null;
        $this->container['sales_account'] = isset($data['sales_account']) ? $data['sales_account'] : null;
        $this->container['sales_non_taxable_account'] = isset($data['sales_non_taxable_account']) ? $data['sales_non_taxable_account'] : null;
        $this->container['sales_eu_account'] = isset($data['sales_eu_account']) ? $data['sales_eu_account'] : null;
        $this->container['sales_export_account'] = isset($data['sales_export_account']) ? $data['sales_export_account'] : null;
        $this->container['sales_subaccount'] = isset($data['sales_subaccount']) ? $data['sales_subaccount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets expense_accrual_account
     *
     * @return object
     */
    public function getExpenseAccrualAccount()
    {
        return $this->container['expense_accrual_account'];
    }

    /**
     * Sets expense_accrual_account
     *
     * @param object $expense_accrual_account Only used for Non-stock items.  Purchase accrual account &gt; Purchase order accrual account &gt; The liability account to be used for this stock item to accrue amounts on purchase orders related to this item.
     *
     * @return $this
     */
    public function setExpenseAccrualAccount($expense_accrual_account)
    {
        $this->container['expense_accrual_account'] = $expense_accrual_account;

        return $this;
    }

    /**
     * Gets inventory_account
     *
     * @return object
     */
    public function getInventoryAccount()
    {
        return $this->container['inventory_account'];
    }

    /**
     * Sets inventory_account
     *
     * @param object $inventory_account Only used for Stock items.  Inventory account &gt; The asset account to be used to keep the inventory balance resulting from transactions with this stock item.
     *
     * @return $this
     */
    public function setInventoryAccount($inventory_account)
    {
        $this->container['inventory_account'] = $inventory_account;

        return $this;
    }

    /**
     * Gets expense_account
     *
     * @return object
     */
    public function getExpenseAccount()
    {
        return $this->container['expense_account'];
    }

    /**
     * Sets expense_account
     *
     * @param object $expense_account Only used for Non-stock items.  Mandatory field: Expense account* &gt; The default expense account to be used for this non-stock item.
     *
     * @return $this
     */
    public function setExpenseAccount($expense_account)
    {
        $this->container['expense_account'] = $expense_account;

        return $this;
    }

    /**
     * Gets cogs_account
     *
     * @return object
     */
    public function getCogsAccount()
    {
        return $this->container['cogs_account'];
    }

    /**
     * Sets cogs_account
     *
     * @param object $cogs_account Only used for Stock items.  COGS account &gt; The expense account to be used for this stock item to record the cost of goods sold (COGS) once the sales order is released.
     *
     * @return $this
     */
    public function setCogsAccount($cogs_account)
    {
        $this->container['cogs_account'] = $cogs_account;

        return $this;
    }

    /**
     * Gets expense_non_taxable_account
     *
     * @return object
     */
    public function getExpenseNonTaxableAccount()
    {
        return $this->container['expense_non_taxable_account'];
    }

    /**
     * Sets expense_non_taxable_account
     *
     * @param object $expense_non_taxable_account Expense account, non-taxable &gt; The income account to be used for this stock item to record non-taxable expenses.
     *
     * @return $this
     */
    public function setExpenseNonTaxableAccount($expense_non_taxable_account)
    {
        $this->container['expense_non_taxable_account'] = $expense_non_taxable_account;

        return $this;
    }

    /**
     * Gets expense_eu_account
     *
     * @return object
     */
    public function getExpenseEuAccount()
    {
        return $this->container['expense_eu_account'];
    }

    /**
     * Sets expense_eu_account
     *
     * @param object $expense_eu_account Expense EU account &gt; The income account to be used for this stock item to record EU expenses.
     *
     * @return $this
     */
    public function setExpenseEuAccount($expense_eu_account)
    {
        $this->container['expense_eu_account'] = $expense_eu_account;

        return $this;
    }

    /**
     * Gets expense_import_account
     *
     * @return object
     */
    public function getExpenseImportAccount()
    {
        return $this->container['expense_import_account'];
    }

    /**
     * Sets expense_import_account
     *
     * @param object $expense_import_account Expense account, import &gt; The income account to be used for this stock item to record import expenses.
     *
     * @return $this
     */
    public function setExpenseImportAccount($expense_import_account)
    {
        $this->container['expense_import_account'] = $expense_import_account;

        return $this;
    }

    /**
     * Gets expense_subaccount
     *
     * @return object
     */
    public function getExpenseSubaccount()
    {
        return $this->container['expense_subaccount'];
    }

    /**
     * Sets expense_subaccount
     *
     * @param object $expense_subaccount Only used for Non-stock items.  Mandatory field: Expense sub* &gt; The subaccount to be used by default with the expense account for transactions related to this non-stock item.
     *
     * @return $this
     */
    public function setExpenseSubaccount($expense_subaccount)
    {
        $this->container['expense_subaccount'] = $expense_subaccount;

        return $this;
    }

    /**
     * Gets cogs_subaccount
     *
     * @return object
     */
    public function getCogsSubaccount()
    {
        return $this->container['cogs_subaccount'];
    }

    /**
     * Sets cogs_subaccount
     *
     * @param object $cogs_subaccount Only used for Stock items.  COGS sub. &gt; The subaccount to be used for this item with the COGS account.
     *
     * @return $this
     */
    public function setCogsSubaccount($cogs_subaccount)
    {
        $this->container['cogs_subaccount'] = $cogs_subaccount;

        return $this;
    }

    /**
     * Gets sales_account
     *
     * @return object
     */
    public function getSalesAccount()
    {
        return $this->container['sales_account'];
    }

    /**
     * Sets sales_account
     *
     * @param object $sales_account Mandatory field: Sales account *&gt; The income account to be used for this stock item to record sales.
     *
     * @return $this
     */
    public function setSalesAccount($sales_account)
    {
        $this->container['sales_account'] = $sales_account;

        return $this;
    }

    /**
     * Gets sales_non_taxable_account
     *
     * @return object
     */
    public function getSalesNonTaxableAccount()
    {
        return $this->container['sales_non_taxable_account'];
    }

    /**
     * Sets sales_non_taxable_account
     *
     * @param object $sales_non_taxable_account Sales - non-taxable account &gt; The income account to be used for this stock item to record non-taxable sales.
     *
     * @return $this
     */
    public function setSalesNonTaxableAccount($sales_non_taxable_account)
    {
        $this->container['sales_non_taxable_account'] = $sales_non_taxable_account;

        return $this;
    }

    /**
     * Gets sales_eu_account
     *
     * @return object
     */
    public function getSalesEuAccount()
    {
        return $this->container['sales_eu_account'];
    }

    /**
     * Sets sales_eu_account
     *
     * @param object $sales_eu_account Sales - EU account &gt; The income account to be used for this stock item to record EU sales.
     *
     * @return $this
     */
    public function setSalesEuAccount($sales_eu_account)
    {
        $this->container['sales_eu_account'] = $sales_eu_account;

        return $this;
    }

    /**
     * Gets sales_export_account
     *
     * @return object
     */
    public function getSalesExportAccount()
    {
        return $this->container['sales_export_account'];
    }

    /**
     * Sets sales_export_account
     *
     * @param object $sales_export_account Sales - export account &gt; The income account to be used for this stock item to record export sales.
     *
     * @return $this
     */
    public function setSalesExportAccount($sales_export_account)
    {
        $this->container['sales_export_account'] = $sales_export_account;

        return $this;
    }

    /**
     * Gets sales_subaccount
     *
     * @return object
     */
    public function getSalesSubaccount()
    {
        return $this->container['sales_subaccount'];
    }

    /**
     * Sets sales_subaccount
     *
     * @param object $sales_subaccount Mandatory field: Sales sub. *&gt; The subaccount to be used for this item to record sales.
     *
     * @return $this
     */
    public function setSalesSubaccount($sales_subaccount)
    {
        $this->container['sales_subaccount'] = $sales_subaccount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


