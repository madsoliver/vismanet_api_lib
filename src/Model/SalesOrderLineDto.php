<?php
/**
 * SalesOrderLineDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * SalesOrderLineDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesOrderLineDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesOrderLineDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invoice_nbr' => 'string',
        'operation' => 'string',
        'free_item' => 'bool',
        'requested_on' => '\DateTime',
        'ship_on' => '\DateTime',
        'ship_complete' => 'string',
        'undership_threshold' => 'double',
        'overship_threshold' => 'double',
        'completed' => 'bool',
        'mark_for_po' => 'bool',
        'po_source' => 'string',
        'lot_serial_nbr' => 'string',
        'expiration_date' => '\DateTime',
        'reason_code' => 'string',
        'sales_person' => 'object',
        'tax_category' => 'string',
        'commissionable' => 'bool',
        'alternate_id' => 'string',
        'project_task' => 'int',
        'project_task_cd' => 'string',
        'subaccount' => 'object',
        'external_link' => 'string',
        'is_rot_rut_deductible' => 'bool',
        'line_nbr' => 'int',
        'sort_order' => 'int',
        'inventory' => 'object',
        'warehouse' => '\Ekstralys\VismaNetApi\Model\WarehouseIdDescriptionDto',
        'uom' => 'string',
        'quantity' => 'double',
        'qty_on_shipments' => 'double',
        'open_qty' => 'double',
        'unit_cost' => 'double',
        'unit_price' => 'double',
        'unit_price_in_base_currency' => 'double',
        'discount_code' => 'string',
        'discount_percent' => 'double',
        'discount_amount' => 'double',
        'manual_discount' => 'bool',
        'disc_unit_price' => 'double',
        'ext_price' => 'double',
        'unbilled_amount' => 'double',
        'line_description' => 'string',
        'branch_number' => 'object',
        'note' => 'string',
        'attachments' => '\Ekstralys\VismaNetApi\Model\AttachmentDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'invoice_nbr' => null,
        'operation' => null,
        'free_item' => null,
        'requested_on' => 'date-time',
        'ship_on' => 'date-time',
        'ship_complete' => null,
        'undership_threshold' => 'double',
        'overship_threshold' => 'double',
        'completed' => null,
        'mark_for_po' => null,
        'po_source' => null,
        'lot_serial_nbr' => null,
        'expiration_date' => 'date-time',
        'reason_code' => null,
        'sales_person' => null,
        'tax_category' => null,
        'commissionable' => null,
        'alternate_id' => null,
        'project_task' => 'int32',
        'project_task_cd' => null,
        'subaccount' => null,
        'external_link' => null,
        'is_rot_rut_deductible' => null,
        'line_nbr' => 'int32',
        'sort_order' => 'int32',
        'inventory' => null,
        'warehouse' => null,
        'uom' => null,
        'quantity' => 'double',
        'qty_on_shipments' => 'double',
        'open_qty' => 'double',
        'unit_cost' => 'double',
        'unit_price' => 'double',
        'unit_price_in_base_currency' => 'double',
        'discount_code' => null,
        'discount_percent' => 'double',
        'discount_amount' => 'double',
        'manual_discount' => null,
        'disc_unit_price' => 'double',
        'ext_price' => 'double',
        'unbilled_amount' => 'double',
        'line_description' => null,
        'branch_number' => null,
        'note' => null,
        'attachments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_nbr' => 'invoiceNbr',
        'operation' => 'operation',
        'free_item' => 'freeItem',
        'requested_on' => 'requestedOn',
        'ship_on' => 'shipOn',
        'ship_complete' => 'shipComplete',
        'undership_threshold' => 'undershipThreshold',
        'overship_threshold' => 'overshipThreshold',
        'completed' => 'completed',
        'mark_for_po' => 'markForPO',
        'po_source' => 'poSource',
        'lot_serial_nbr' => 'lotSerialNbr',
        'expiration_date' => 'expirationDate',
        'reason_code' => 'reasonCode',
        'sales_person' => 'salesPerson',
        'tax_category' => 'taxCategory',
        'commissionable' => 'commissionable',
        'alternate_id' => 'alternateID',
        'project_task' => 'projectTask',
        'project_task_cd' => 'projectTaskCd',
        'subaccount' => 'subaccount',
        'external_link' => 'externalLink',
        'is_rot_rut_deductible' => 'isRotRutDeductible',
        'line_nbr' => 'lineNbr',
        'sort_order' => 'sortOrder',
        'inventory' => 'inventory',
        'warehouse' => 'warehouse',
        'uom' => 'uom',
        'quantity' => 'quantity',
        'qty_on_shipments' => 'qtyOnShipments',
        'open_qty' => 'openQty',
        'unit_cost' => 'unitCost',
        'unit_price' => 'unitPrice',
        'unit_price_in_base_currency' => 'unitPriceInBaseCurrency',
        'discount_code' => 'discountCode',
        'discount_percent' => 'discountPercent',
        'discount_amount' => 'discountAmount',
        'manual_discount' => 'manualDiscount',
        'disc_unit_price' => 'discUnitPrice',
        'ext_price' => 'extPrice',
        'unbilled_amount' => 'unbilledAmount',
        'line_description' => 'lineDescription',
        'branch_number' => 'branchNumber',
        'note' => 'note',
        'attachments' => 'attachments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_nbr' => 'setInvoiceNbr',
        'operation' => 'setOperation',
        'free_item' => 'setFreeItem',
        'requested_on' => 'setRequestedOn',
        'ship_on' => 'setShipOn',
        'ship_complete' => 'setShipComplete',
        'undership_threshold' => 'setUndershipThreshold',
        'overship_threshold' => 'setOvershipThreshold',
        'completed' => 'setCompleted',
        'mark_for_po' => 'setMarkForPo',
        'po_source' => 'setPoSource',
        'lot_serial_nbr' => 'setLotSerialNbr',
        'expiration_date' => 'setExpirationDate',
        'reason_code' => 'setReasonCode',
        'sales_person' => 'setSalesPerson',
        'tax_category' => 'setTaxCategory',
        'commissionable' => 'setCommissionable',
        'alternate_id' => 'setAlternateId',
        'project_task' => 'setProjectTask',
        'project_task_cd' => 'setProjectTaskCd',
        'subaccount' => 'setSubaccount',
        'external_link' => 'setExternalLink',
        'is_rot_rut_deductible' => 'setIsRotRutDeductible',
        'line_nbr' => 'setLineNbr',
        'sort_order' => 'setSortOrder',
        'inventory' => 'setInventory',
        'warehouse' => 'setWarehouse',
        'uom' => 'setUom',
        'quantity' => 'setQuantity',
        'qty_on_shipments' => 'setQtyOnShipments',
        'open_qty' => 'setOpenQty',
        'unit_cost' => 'setUnitCost',
        'unit_price' => 'setUnitPrice',
        'unit_price_in_base_currency' => 'setUnitPriceInBaseCurrency',
        'discount_code' => 'setDiscountCode',
        'discount_percent' => 'setDiscountPercent',
        'discount_amount' => 'setDiscountAmount',
        'manual_discount' => 'setManualDiscount',
        'disc_unit_price' => 'setDiscUnitPrice',
        'ext_price' => 'setExtPrice',
        'unbilled_amount' => 'setUnbilledAmount',
        'line_description' => 'setLineDescription',
        'branch_number' => 'setBranchNumber',
        'note' => 'setNote',
        'attachments' => 'setAttachments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_nbr' => 'getInvoiceNbr',
        'operation' => 'getOperation',
        'free_item' => 'getFreeItem',
        'requested_on' => 'getRequestedOn',
        'ship_on' => 'getShipOn',
        'ship_complete' => 'getShipComplete',
        'undership_threshold' => 'getUndershipThreshold',
        'overship_threshold' => 'getOvershipThreshold',
        'completed' => 'getCompleted',
        'mark_for_po' => 'getMarkForPo',
        'po_source' => 'getPoSource',
        'lot_serial_nbr' => 'getLotSerialNbr',
        'expiration_date' => 'getExpirationDate',
        'reason_code' => 'getReasonCode',
        'sales_person' => 'getSalesPerson',
        'tax_category' => 'getTaxCategory',
        'commissionable' => 'getCommissionable',
        'alternate_id' => 'getAlternateId',
        'project_task' => 'getProjectTask',
        'project_task_cd' => 'getProjectTaskCd',
        'subaccount' => 'getSubaccount',
        'external_link' => 'getExternalLink',
        'is_rot_rut_deductible' => 'getIsRotRutDeductible',
        'line_nbr' => 'getLineNbr',
        'sort_order' => 'getSortOrder',
        'inventory' => 'getInventory',
        'warehouse' => 'getWarehouse',
        'uom' => 'getUom',
        'quantity' => 'getQuantity',
        'qty_on_shipments' => 'getQtyOnShipments',
        'open_qty' => 'getOpenQty',
        'unit_cost' => 'getUnitCost',
        'unit_price' => 'getUnitPrice',
        'unit_price_in_base_currency' => 'getUnitPriceInBaseCurrency',
        'discount_code' => 'getDiscountCode',
        'discount_percent' => 'getDiscountPercent',
        'discount_amount' => 'getDiscountAmount',
        'manual_discount' => 'getManualDiscount',
        'disc_unit_price' => 'getDiscUnitPrice',
        'ext_price' => 'getExtPrice',
        'unbilled_amount' => 'getUnbilledAmount',
        'line_description' => 'getLineDescription',
        'branch_number' => 'getBranchNumber',
        'note' => 'getNote',
        'attachments' => 'getAttachments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OPERATION_ISSUE = 'Issue';
    const OPERATION_RECEIPT = 'Receipt';
    const SHIP_COMPLETE_BACK_ORDER_ALLOWED = 'BackOrderAllowed';
    const SHIP_COMPLETE_CANCEL_REMAINDER = 'CancelRemainder';
    const SHIP_COMPLETE_SHIP_COMPLETE = 'ShipComplete';
    const PO_SOURCE_DROP_SHIP_TO_ORDER = 'DropShipToOrder';
    const PO_SOURCE_MANUFACTURED = 'Manufactured';
    const PO_SOURCE_NONE = 'None';
    const PO_SOURCE_PURCHASED = 'Purchased';
    const PO_SOURCE_PURCHASE_TO_ORDER = 'PurchaseToOrder';
    const PO_SOURCE_TRANSFER = 'Transfer';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_ISSUE,
            self::OPERATION_RECEIPT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipCompleteAllowableValues()
    {
        return [
            self::SHIP_COMPLETE_BACK_ORDER_ALLOWED,
            self::SHIP_COMPLETE_CANCEL_REMAINDER,
            self::SHIP_COMPLETE_SHIP_COMPLETE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPoSourceAllowableValues()
    {
        return [
            self::PO_SOURCE_DROP_SHIP_TO_ORDER,
            self::PO_SOURCE_MANUFACTURED,
            self::PO_SOURCE_NONE,
            self::PO_SOURCE_PURCHASED,
            self::PO_SOURCE_PURCHASE_TO_ORDER,
            self::PO_SOURCE_TRANSFER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice_nbr'] = isset($data['invoice_nbr']) ? $data['invoice_nbr'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['free_item'] = isset($data['free_item']) ? $data['free_item'] : null;
        $this->container['requested_on'] = isset($data['requested_on']) ? $data['requested_on'] : null;
        $this->container['ship_on'] = isset($data['ship_on']) ? $data['ship_on'] : null;
        $this->container['ship_complete'] = isset($data['ship_complete']) ? $data['ship_complete'] : null;
        $this->container['undership_threshold'] = isset($data['undership_threshold']) ? $data['undership_threshold'] : null;
        $this->container['overship_threshold'] = isset($data['overship_threshold']) ? $data['overship_threshold'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['mark_for_po'] = isset($data['mark_for_po']) ? $data['mark_for_po'] : null;
        $this->container['po_source'] = isset($data['po_source']) ? $data['po_source'] : null;
        $this->container['lot_serial_nbr'] = isset($data['lot_serial_nbr']) ? $data['lot_serial_nbr'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['sales_person'] = isset($data['sales_person']) ? $data['sales_person'] : null;
        $this->container['tax_category'] = isset($data['tax_category']) ? $data['tax_category'] : null;
        $this->container['commissionable'] = isset($data['commissionable']) ? $data['commissionable'] : null;
        $this->container['alternate_id'] = isset($data['alternate_id']) ? $data['alternate_id'] : null;
        $this->container['project_task'] = isset($data['project_task']) ? $data['project_task'] : null;
        $this->container['project_task_cd'] = isset($data['project_task_cd']) ? $data['project_task_cd'] : null;
        $this->container['subaccount'] = isset($data['subaccount']) ? $data['subaccount'] : null;
        $this->container['external_link'] = isset($data['external_link']) ? $data['external_link'] : null;
        $this->container['is_rot_rut_deductible'] = isset($data['is_rot_rut_deductible']) ? $data['is_rot_rut_deductible'] : null;
        $this->container['line_nbr'] = isset($data['line_nbr']) ? $data['line_nbr'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['inventory'] = isset($data['inventory']) ? $data['inventory'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['qty_on_shipments'] = isset($data['qty_on_shipments']) ? $data['qty_on_shipments'] : null;
        $this->container['open_qty'] = isset($data['open_qty']) ? $data['open_qty'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['unit_price_in_base_currency'] = isset($data['unit_price_in_base_currency']) ? $data['unit_price_in_base_currency'] : null;
        $this->container['discount_code'] = isset($data['discount_code']) ? $data['discount_code'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['manual_discount'] = isset($data['manual_discount']) ? $data['manual_discount'] : null;
        $this->container['disc_unit_price'] = isset($data['disc_unit_price']) ? $data['disc_unit_price'] : null;
        $this->container['ext_price'] = isset($data['ext_price']) ? $data['ext_price'] : null;
        $this->container['unbilled_amount'] = isset($data['unbilled_amount']) ? $data['unbilled_amount'] : null;
        $this->container['line_description'] = isset($data['line_description']) ? $data['line_description'] : null;
        $this->container['branch_number'] = isset($data['branch_number']) ? $data['branch_number'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShipCompleteAllowableValues();
        if (!is_null($this->container['ship_complete']) && !in_array($this->container['ship_complete'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ship_complete', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPoSourceAllowableValues();
        if (!is_null($this->container['po_source']) && !in_array($this->container['po_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'po_source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_nbr
     *
     * @return string
     */
    public function getInvoiceNbr()
    {
        return $this->container['invoice_nbr'];
    }

    /**
     * Sets invoice_nbr
     *
     * @param string $invoice_nbr The reference number of the invoice generated for this order. This number is collected from the system and not visible on the sales order line.
     *
     * @return $this
     */
    public function setInvoiceNbr($invoice_nbr)
    {
        $this->container['invoice_nbr'] = $invoice_nbr;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation The operation to be performed in the workspace to fulfil the order. This information is collected from the system and not visible on the sales order line.
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($operation) && !in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets free_item
     *
     * @return bool
     */
    public function getFreeItem()
    {
        return $this->container['free_item'];
    }

    /**
     * Sets free_item
     *
     * @param bool $free_item A check box that indicates (if selected) that the stock item specified in the row is a free item. This information is collected from the system and not visible on the sales order line.
     *
     * @return $this
     */
    public function setFreeItem($free_item)
    {
        $this->container['free_item'] = $free_item;

        return $this;
    }

    /**
     * Gets requested_on
     *
     * @return \DateTime
     */
    public function getRequestedOn()
    {
        return $this->container['requested_on'];
    }

    /**
     * Sets requested_on
     *
     * @param \DateTime $requested_on Mandatory field: The top part  &gt; Requested on* &gt; The date when the customer wants to receive the goods. The default value is the current business date.
     *
     * @return $this
     */
    public function setRequestedOn($requested_on)
    {
        $this->container['requested_on'] = $requested_on;

        return $this;
    }

    /**
     * Gets ship_on
     *
     * @return \DateTime
     */
    public function getShipOn()
    {
        return $this->container['ship_on'];
    }

    /**
     * Sets ship_on
     *
     * @param \DateTime $ship_on Ship on &gt; The date when the item is to be shipped.
     *
     * @return $this
     */
    public function setShipOn($ship_on)
    {
        $this->container['ship_on'] = $ship_on;

        return $this;
    }

    /**
     * Gets ship_complete
     *
     * @return string
     */
    public function getShipComplete()
    {
        return $this->container['ship_complete'];
    }

    /**
     * Sets ship_complete
     *
     * @param string $ship_complete Shipping rule &gt; An option that controls whether incomplete and partial shipments for the order are allowed. (Values: Ship complete, Back order allowed, Cancel remainder)
     *
     * @return $this
     */
    public function setShipComplete($ship_complete)
    {
        $allowedValues = $this->getShipCompleteAllowableValues();
        if (!is_null($ship_complete) && !in_array($ship_complete, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ship_complete', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ship_complete'] = $ship_complete;

        return $this;
    }

    /**
     * Gets undership_threshold
     *
     * @return double
     */
    public function getUndershipThreshold()
    {
        return $this->container['undership_threshold'];
    }

    /**
     * Sets undership_threshold
     *
     * @param double $undership_threshold Undership threshold (%) &gt; The minimal percentage of goods shipped (with respect to the ordered quantity) to consider the order shipped completely.
     *
     * @return $this
     */
    public function setUndershipThreshold($undership_threshold)
    {
        $this->container['undership_threshold'] = $undership_threshold;

        return $this;
    }

    /**
     * Gets overship_threshold
     *
     * @return double
     */
    public function getOvershipThreshold()
    {
        return $this->container['overship_threshold'];
    }

    /**
     * Sets overship_threshold
     *
     * @param double $overship_threshold Overship threshold (%) &gt; The maximum percentage of goods shipped (with respect to the ordered quantity) allowed by the customer.
     *
     * @return $this
     */
    public function setOvershipThreshold($overship_threshold)
    {
        $this->container['overship_threshold'] = $overship_threshold;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed Completed &gt; A check box that can be selected to indicate to the system that this line is completed.
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets mark_for_po
     *
     * @return bool
     */
    public function getMarkForPo()
    {
        return $this->container['mark_for_po'];
    }

    /**
     * Sets mark_for_po
     *
     * @param bool $mark_for_po Mark for purchase order &gt; A check box that indicates (if selected) that the order line was marked for purchasing (if it has not been shipped completely).
     *
     * @return $this
     */
    public function setMarkForPo($mark_for_po)
    {
        $this->container['mark_for_po'] = $mark_for_po;

        return $this;
    }

    /**
     * Gets po_source
     *
     * @return string
     */
    public function getPoSource()
    {
        return $this->container['po_source'];
    }

    /**
     * Sets po_source
     *
     * @param string $po_source Purchase order source &gt; The purchase order source to be used to fulfill this line, which can be one of the following options: Purchase to order, Drop-shipment.
     *
     * @return $this
     */
    public function setPoSource($po_source)
    {
        $allowedValues = $this->getPoSourceAllowableValues();
        if (!is_null($po_source) && !in_array($po_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'po_source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['po_source'] = $po_source;

        return $this;
    }

    /**
     * Gets lot_serial_nbr
     *
     * @return string
     */
    public function getLotSerialNbr()
    {
        return $this->container['lot_serial_nbr'];
    }

    /**
     * Sets lot_serial_nbr
     *
     * @param string $lot_serial_nbr Lot/serial no. &gt; The lot or serial number of the item for returns
     *
     * @return $this
     */
    public function setLotSerialNbr($lot_serial_nbr)
    {
        $this->container['lot_serial_nbr'] = $lot_serial_nbr;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date Expiration date &gt; The expiration date for the item with the specified lot number.
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code Reason code &gt; The reason code to be used for creation or cancellation of the order, if applicable.
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets sales_person
     *
     * @return object
     */
    public function getSalesPerson()
    {
        return $this->container['sales_person'];
    }

    /**
     * Sets sales_person
     *
     * @param object $sales_person Salesperson ID &gt; The salesperson associated with the sale of the line item.
     *
     * @return $this
     */
    public function setSalesPerson($sales_person)
    {
        $this->container['sales_person'] = $sales_person;

        return $this;
    }

    /**
     * Gets tax_category
     *
     * @return string
     */
    public function getTaxCategory()
    {
        return $this->container['tax_category'];
    }

    /**
     * Sets tax_category
     *
     * @param string $tax_category VAT code &gt; The VAT category of the goods mentioned in this line.
     *
     * @return $this
     */
    public function setTaxCategory($tax_category)
    {
        $this->container['tax_category'] = $tax_category;

        return $this;
    }

    /**
     * Gets commissionable
     *
     * @return bool
     */
    public function getCommissionable()
    {
        return $this->container['commissionable'];
    }

    /**
     * Sets commissionable
     *
     * @param bool $commissionable VAT code &gt; The VAT category of the goods mentioned in this line.
     *
     * @return $this
     */
    public function setCommissionable($commissionable)
    {
        $this->container['commissionable'] = $commissionable;

        return $this;
    }

    /**
     * Gets alternate_id
     *
     * @return string
     */
    public function getAlternateId()
    {
        return $this->container['alternate_id'];
    }

    /**
     * Sets alternate_id
     *
     * @param string $alternate_id Alternate ID &gt; The alternate ID for the item, such as the item ID used by the customer.
     *
     * @return $this
     */
    public function setAlternateId($alternate_id)
    {
        $this->container['alternate_id'] = $alternate_id;

        return $this;
    }

    /**
     * Gets project_task
     *
     * @return int
     */
    public function getProjectTask()
    {
        return $this->container['project_task'];
    }

    /**
     * Sets project_task
     *
     * @param int $project_task Project task &gt; The particular task of the project with which this document is associated.
     *
     * @return $this
     */
    public function setProjectTask($project_task)
    {
        $this->container['project_task'] = $project_task;

        return $this;
    }

    /**
     * Gets project_task_cd
     *
     * @return string
     */
    public function getProjectTaskCd()
    {
        return $this->container['project_task_cd'];
    }

    /**
     * Sets project_task_cd
     *
     * @param string $project_task_cd Project task code &gt; The particular task code of the project with which this document is associated.
     *
     * @return $this
     */
    public function setProjectTaskCd($project_task_cd)
    {
        $this->container['project_task_cd'] = $project_task_cd;

        return $this;
    }

    /**
     * Gets subaccount
     *
     * @return object
     */
    public function getSubaccount()
    {
        return $this->container['subaccount'];
    }

    /**
     * Sets subaccount
     *
     * @param object $subaccount Subaccount &gt; A subcategory of the account that carries identifying information.
     *
     * @return $this
     */
    public function setSubaccount($subaccount)
    {
        $this->container['subaccount'] = $subaccount;

        return $this;
    }

    /**
     * Gets external_link
     *
     * @return string
     */
    public function getExternalLink()
    {
        return $this->container['external_link'];
    }

    /**
     * Sets external_link
     *
     * @param string $external_link external_link
     *
     * @return $this
     */
    public function setExternalLink($external_link)
    {
        $this->container['external_link'] = $external_link;

        return $this;
    }

    /**
     * Gets is_rot_rut_deductible
     *
     * @return bool
     */
    public function getIsRotRutDeductible()
    {
        return $this->container['is_rot_rut_deductible'];
    }

    /**
     * Sets is_rot_rut_deductible
     *
     * @param bool $is_rot_rut_deductible is_rot_rut_deductible
     *
     * @return $this
     */
    public function setIsRotRutDeductible($is_rot_rut_deductible)
    {
        $this->container['is_rot_rut_deductible'] = $is_rot_rut_deductible;

        return $this;
    }

    /**
     * Gets line_nbr
     *
     * @return int
     */
    public function getLineNbr()
    {
        return $this->container['line_nbr'];
    }

    /**
     * Sets line_nbr
     *
     * @param int $line_nbr Document details tab &gt; Line no. &gt; The line number of the document.
     *
     * @return $this
     */
    public function setLineNbr($line_nbr)
    {
        $this->container['line_nbr'] = $line_nbr;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int $sort_order Document details tab &gt; Line order &gt; The order number of the document line. The system regenerates this number automatically when you reorder the lines in the table.
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return object
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param object $inventory inventory
     *
     * @return $this
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return \Ekstralys\VismaNetApi\Model\WarehouseIdDescriptionDto
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param \Ekstralys\VismaNetApi\Model\WarehouseIdDescriptionDto $warehouse warehouse
     *
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return string
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param string $uom Mandatory field: Document details tab &gt; UoM* &gt; The unit of measure (UoM) used for the item with this item ID.
     *
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity Document details tab &gt; Quantity &gt; The quantity of the item sold, measured in the UoM.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets qty_on_shipments
     *
     * @return double
     */
    public function getQtyOnShipments()
    {
        return $this->container['qty_on_shipments'];
    }

    /**
     * Sets qty_on_shipments
     *
     * @param double $qty_on_shipments Document details tab &gt; Qty. on shipments &gt; A read-only column that displays the quantity of the stock item being prepared for shipment and already shipped for this order.
     *
     * @return $this
     */
    public function setQtyOnShipments($qty_on_shipments)
    {
        $this->container['qty_on_shipments'] = $qty_on_shipments;

        return $this;
    }

    /**
     * Gets open_qty
     *
     * @return double
     */
    public function getOpenQty()
    {
        return $this->container['open_qty'];
    }

    /**
     * Sets open_qty
     *
     * @param double $open_qty Document details tab &gt; Open qty. &gt; The quantity of the item to be shipped; that is, the total quantity minus the quantity shipped according to closed shipment documents.
     *
     * @return $this
     */
    public function setOpenQty($open_qty)
    {
        $this->container['open_qty'] = $open_qty;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return double
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param double $unit_cost Document details tab &gt; Unit Cost &gt; The cost of the unit on the sales order.
     *
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return double
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param double $unit_price Document details tab &gt; Unit price &gt; The price of the unit on the sales order.
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_price_in_base_currency
     *
     * @return double
     */
    public function getUnitPriceInBaseCurrency()
    {
        return $this->container['unit_price_in_base_currency'];
    }

    /**
     * Sets unit_price_in_base_currency
     *
     * @param double $unit_price_in_base_currency unit_price_in_base_currency
     *
     * @return $this
     */
    public function setUnitPriceInBaseCurrency($unit_price_in_base_currency)
    {
        $this->container['unit_price_in_base_currency'] = $unit_price_in_base_currency;

        return $this;
    }

    /**
     * Gets discount_code
     *
     * @return string
     */
    public function getDiscountCode()
    {
        return $this->container['discount_code'];
    }

    /**
     * Sets discount_code
     *
     * @param string $discount_code Mandatory field: Document details tab &gt; Discount details tab &gt; Discount code* &gt; The code of the discount that has been applied to this line.
     *
     * @return $this
     */
    public function setDiscountCode($discount_code)
    {
        $this->container['discount_code'] = $discount_code;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return double
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param double $discount_percent Document details tab &gt; Discount percent &gt; The percent of the line-level discount that has been applied manually or automatically to this line item (if the item is not a free item).
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return double
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param double $discount_amount Document details tab &gt; Discount amount &gt; The amount of the line-level discount that has been applied manually or automatically to this line item (if the item is not a free item).
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets manual_discount
     *
     * @return bool
     */
    public function getManualDiscount()
    {
        return $this->container['manual_discount'];
    }

    /**
     * Sets manual_discount
     *
     * @param bool $manual_discount Document details tab &gt; Manual discount &gt; A check box that indicates (if selected) that the discount has been applied manually.
     *
     * @return $this
     */
    public function setManualDiscount($manual_discount)
    {
        $this->container['manual_discount'] = $manual_discount;

        return $this;
    }

    /**
     * Gets disc_unit_price
     *
     * @return double
     */
    public function getDiscUnitPrice()
    {
        return $this->container['disc_unit_price'];
    }

    /**
     * Sets disc_unit_price
     *
     * @param double $disc_unit_price Document details tab &gt; Disc. unit price &gt; The unit price, which has been recalculated after the application of discounts.
     *
     * @return $this
     */
    public function setDiscUnitPrice($disc_unit_price)
    {
        $this->container['disc_unit_price'] = $disc_unit_price;

        return $this;
    }

    /**
     * Gets ext_price
     *
     * @return double
     */
    public function getExtPrice()
    {
        return $this->container['ext_price'];
    }

    /**
     * Sets ext_price
     *
     * @param double $ext_price Document details tab &gt; Extended cost &gt; The extended price, which is the unit price multiplied by the quantity.
     *
     * @return $this
     */
    public function setExtPrice($ext_price)
    {
        $this->container['ext_price'] = $ext_price;

        return $this;
    }

    /**
     * Gets unbilled_amount
     *
     * @return double
     */
    public function getUnbilledAmount()
    {
        return $this->container['unbilled_amount'];
    }

    /**
     * Sets unbilled_amount
     *
     * @param double $unbilled_amount Document details tab &gt; Amount not yet invoiced &gt; The amount of cancelled shipments and cancelled remainders.
     *
     * @return $this
     */
    public function setUnbilledAmount($unbilled_amount)
    {
        $this->container['unbilled_amount'] = $unbilled_amount;

        return $this;
    }

    /**
     * Gets line_description
     *
     * @return string
     */
    public function getLineDescription()
    {
        return $this->container['line_description'];
    }

    /**
     * Sets line_description
     *
     * @param string $line_description Document details tab &gt; Line description &gt; The description of the unit.
     *
     * @return $this
     */
    public function setLineDescription($line_description)
    {
        $this->container['line_description'] = $line_description;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return object
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param object $branch_number branch_number
     *
     * @return $this
     */
    public function setBranchNumber($branch_number)
    {
        $this->container['branch_number'] = $branch_number;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Tables in tab &gt; Icon Notes &gt; Pop-up window for providing any user-defined text connected to the order.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Ekstralys\VismaNetApi\Model\AttachmentDto[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Ekstralys\VismaNetApi\Model\AttachmentDto[] $attachments The data containing information about the document attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


