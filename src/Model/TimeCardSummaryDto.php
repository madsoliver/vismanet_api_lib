<?php
/**
 * TimeCardSummaryDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * TimeCardSummaryDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimeCardSummaryDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TimeCardSummaryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_number' => 'int',
        'line_id' => 'string',
        'earning_type' => 'object',
        'project' => 'object',
        'mon' => 'int',
        'tue' => 'int',
        'wed' => 'int',
        'thu' => 'int',
        'fri' => 'int',
        'sat' => 'int',
        'sun' => 'int',
        'invoiceable' => 'bool',
        'project_task' => 'object',
        'time_spent' => 'int',
        'description' => 'string',
        'approval_status' => 'string',
        'approver' => 'string',
        'approval_status_text' => 'string',
        'last_modified_date_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_number' => 'int32',
        'line_id' => 'uuid',
        'earning_type' => null,
        'project' => null,
        'mon' => 'int32',
        'tue' => 'int32',
        'wed' => 'int32',
        'thu' => 'int32',
        'fri' => 'int32',
        'sat' => 'int32',
        'sun' => 'int32',
        'invoiceable' => null,
        'project_task' => null,
        'time_spent' => 'int32',
        'description' => null,
        'approval_status' => null,
        'approver' => null,
        'approval_status_text' => null,
        'last_modified_date_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_number' => 'lineNumber',
        'line_id' => 'lineId',
        'earning_type' => 'earningType',
        'project' => 'project',
        'mon' => 'mon',
        'tue' => 'tue',
        'wed' => 'wed',
        'thu' => 'thu',
        'fri' => 'fri',
        'sat' => 'sat',
        'sun' => 'sun',
        'invoiceable' => 'invoiceable',
        'project_task' => 'projectTask',
        'time_spent' => 'timeSpent',
        'description' => 'description',
        'approval_status' => 'approvalStatus',
        'approver' => 'approver',
        'approval_status_text' => 'approvalStatusText',
        'last_modified_date_time' => 'lastModifiedDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_number' => 'setLineNumber',
        'line_id' => 'setLineId',
        'earning_type' => 'setEarningType',
        'project' => 'setProject',
        'mon' => 'setMon',
        'tue' => 'setTue',
        'wed' => 'setWed',
        'thu' => 'setThu',
        'fri' => 'setFri',
        'sat' => 'setSat',
        'sun' => 'setSun',
        'invoiceable' => 'setInvoiceable',
        'project_task' => 'setProjectTask',
        'time_spent' => 'setTimeSpent',
        'description' => 'setDescription',
        'approval_status' => 'setApprovalStatus',
        'approver' => 'setApprover',
        'approval_status_text' => 'setApprovalStatusText',
        'last_modified_date_time' => 'setLastModifiedDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_number' => 'getLineNumber',
        'line_id' => 'getLineId',
        'earning_type' => 'getEarningType',
        'project' => 'getProject',
        'mon' => 'getMon',
        'tue' => 'getTue',
        'wed' => 'getWed',
        'thu' => 'getThu',
        'fri' => 'getFri',
        'sat' => 'getSat',
        'sun' => 'getSun',
        'invoiceable' => 'getInvoiceable',
        'project_task' => 'getProjectTask',
        'time_spent' => 'getTimeSpent',
        'description' => 'getDescription',
        'approval_status' => 'getApprovalStatus',
        'approver' => 'getApprover',
        'approval_status_text' => 'getApprovalStatusText',
        'last_modified_date_time' => 'getLastModifiedDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const APPROVAL_STATUS__NEW = 'New';
    const APPROVAL_STATUS_CANCELED = 'Canceled';
    const APPROVAL_STATUS_SENT_TO_APPROVAL = 'SentToApproval';
    const APPROVAL_STATUS_RECEIVED_BY_APPROVAL = 'ReceivedByApproval';
    const APPROVAL_STATUS_IN_PROGRESS_APPROVAL = 'InProgressApproval';
    const APPROVAL_STATUS_REJECTED_IN_APPROVAL = 'RejectedInApproval';
    const APPROVAL_STATUS_APPROVED_IN_APPROVAL = 'ApprovedInApproval';
    const APPROVAL_STATUS_ACTIVE_WORKFLOW_APPROVAL = 'ActiveWorkflowApproval';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApprovalStatusAllowableValues()
    {
        return [
            self::APPROVAL_STATUS__NEW,
            self::APPROVAL_STATUS_CANCELED,
            self::APPROVAL_STATUS_SENT_TO_APPROVAL,
            self::APPROVAL_STATUS_RECEIVED_BY_APPROVAL,
            self::APPROVAL_STATUS_IN_PROGRESS_APPROVAL,
            self::APPROVAL_STATUS_REJECTED_IN_APPROVAL,
            self::APPROVAL_STATUS_APPROVED_IN_APPROVAL,
            self::APPROVAL_STATUS_ACTIVE_WORKFLOW_APPROVAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['line_id'] = isset($data['line_id']) ? $data['line_id'] : null;
        $this->container['earning_type'] = isset($data['earning_type']) ? $data['earning_type'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['mon'] = isset($data['mon']) ? $data['mon'] : null;
        $this->container['tue'] = isset($data['tue']) ? $data['tue'] : null;
        $this->container['wed'] = isset($data['wed']) ? $data['wed'] : null;
        $this->container['thu'] = isset($data['thu']) ? $data['thu'] : null;
        $this->container['fri'] = isset($data['fri']) ? $data['fri'] : null;
        $this->container['sat'] = isset($data['sat']) ? $data['sat'] : null;
        $this->container['sun'] = isset($data['sun']) ? $data['sun'] : null;
        $this->container['invoiceable'] = isset($data['invoiceable']) ? $data['invoiceable'] : null;
        $this->container['project_task'] = isset($data['project_task']) ? $data['project_task'] : null;
        $this->container['time_spent'] = isset($data['time_spent']) ? $data['time_spent'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['approval_status'] = isset($data['approval_status']) ? $data['approval_status'] : null;
        $this->container['approver'] = isset($data['approver']) ? $data['approver'] : null;
        $this->container['approval_status_text'] = isset($data['approval_status_text']) ? $data['approval_status_text'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getApprovalStatusAllowableValues();
        if (!is_null($this->container['approval_status']) && !in_array($this->container['approval_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'approval_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_number
     *
     * @return int
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int $line_number The time card line number
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets line_id
     *
     * @return string
     */
    public function getLineId()
    {
        return $this->container['line_id'];
    }

    /**
     * Sets line_id
     *
     * @param string $line_id The time card line id
     *
     * @return $this
     */
    public function setLineId($line_id)
    {
        $this->container['line_id'] = $line_id;

        return $this;
    }

    /**
     * Gets earning_type
     *
     * @return object
     */
    public function getEarningType()
    {
        return $this->container['earning_type'];
    }

    /**
     * Sets earning_type
     *
     * @param object $earning_type Earning type &gt; The type of the work time spent by the employee
     *
     * @return $this
     */
    public function setEarningType($earning_type)
    {
        $this->container['earning_type'] = $earning_type;

        return $this;
    }

    /**
     * Gets project
     *
     * @return object
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param object $project Mandatory field: Project* &gt; The project that the employee worked on.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets mon
     *
     * @return int
     */
    public function getMon()
    {
        return $this->container['mon'];
    }

    /**
     * Sets mon
     *
     * @param int $mon Mon &gt; The work time reported for Monday, including overtime.
     *
     * @return $this
     */
    public function setMon($mon)
    {
        $this->container['mon'] = $mon;

        return $this;
    }

    /**
     * Gets tue
     *
     * @return int
     */
    public function getTue()
    {
        return $this->container['tue'];
    }

    /**
     * Sets tue
     *
     * @param int $tue Tue &gt; The work time reported for Tuesday, including overtime.
     *
     * @return $this
     */
    public function setTue($tue)
    {
        $this->container['tue'] = $tue;

        return $this;
    }

    /**
     * Gets wed
     *
     * @return int
     */
    public function getWed()
    {
        return $this->container['wed'];
    }

    /**
     * Sets wed
     *
     * @param int $wed Wed &gt; The work time reported for Wednesday, including overtime.
     *
     * @return $this
     */
    public function setWed($wed)
    {
        $this->container['wed'] = $wed;

        return $this;
    }

    /**
     * Gets thu
     *
     * @return int
     */
    public function getThu()
    {
        return $this->container['thu'];
    }

    /**
     * Sets thu
     *
     * @param int $thu Thu &gt; The work time reported for Thursday, including overtime.
     *
     * @return $this
     */
    public function setThu($thu)
    {
        $this->container['thu'] = $thu;

        return $this;
    }

    /**
     * Gets fri
     *
     * @return int
     */
    public function getFri()
    {
        return $this->container['fri'];
    }

    /**
     * Sets fri
     *
     * @param int $fri Fri &gt; The work time reported for Friday, including overtime.
     *
     * @return $this
     */
    public function setFri($fri)
    {
        $this->container['fri'] = $fri;

        return $this;
    }

    /**
     * Gets sat
     *
     * @return int
     */
    public function getSat()
    {
        return $this->container['sat'];
    }

    /**
     * Sets sat
     *
     * @param int $sat Sat &gt; The work time reported for Saturday, including overtime.
     *
     * @return $this
     */
    public function setSat($sat)
    {
        $this->container['sat'] = $sat;

        return $this;
    }

    /**
     * Gets sun
     *
     * @return int
     */
    public function getSun()
    {
        return $this->container['sun'];
    }

    /**
     * Sets sun
     *
     * @param int $sun Sun &gt; The work time reported for Sunday, including overtime.
     *
     * @return $this
     */
    public function setSun($sun)
    {
        $this->container['sun'] = $sun;

        return $this;
    }

    /**
     * Gets invoiceable
     *
     * @return bool
     */
    public function getInvoiceable()
    {
        return $this->container['invoiceable'];
    }

    /**
     * Sets invoiceable
     *
     * @param bool $invoiceable Invoicable &gt; A check box that you select to indicate that these work hours are invoiceable.
     *
     * @return $this
     */
    public function setInvoiceable($invoiceable)
    {
        $this->container['invoiceable'] = $invoiceable;

        return $this;
    }

    /**
     * Gets project_task
     *
     * @return object
     */
    public function getProjectTask()
    {
        return $this->container['project_task'];
    }

    /**
     * Sets project_task
     *
     * @param object $project_task Project task &gt; The project task that the employee worked on.
     *
     * @return $this
     */
    public function setProjectTask($project_task)
    {
        $this->container['project_task'] = $project_task;

        return $this;
    }

    /**
     * Gets time_spent
     *
     * @return int
     */
    public function getTimeSpent()
    {
        return $this->container['time_spent'];
    }

    /**
     * Sets time_spent
     *
     * @param int $time_spent Time spent &gt; The work time (regular and overtime) that the employee spent on the project and task during the week.
     *
     * @return $this
     */
    public function setTimeSpent($time_spent)
    {
        $this->container['time_spent'] = $time_spent;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description &gt; The description of the reported work hours.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets approval_status
     *
     * @return string
     */
    public function getApprovalStatus()
    {
        return $this->container['approval_status'];
    }

    /**
     * Sets approval_status
     *
     * @param string $approval_status Approval status &gt; The approval status, which indicates whether the summary row requires approval and, if it does, what the current state of approval is.
     *
     * @return $this
     */
    public function setApprovalStatus($approval_status)
    {
        $allowedValues = $this->getApprovalStatusAllowableValues();
        if (!is_null($approval_status) && !in_array($approval_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'approval_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['approval_status'] = $approval_status;

        return $this;
    }

    /**
     * Gets approver
     *
     * @return string
     */
    public function getApprover()
    {
        return $this->container['approver'];
    }

    /**
     * Sets approver
     *
     * @param string $approver The identifier of the person authorized to approve the activity, if approval is required. This is either the approver of the project task or, if no approver is assigned to the project task, the project manager.
     *
     * @return $this
     */
    public function setApprover($approver)
    {
        $this->container['approver'] = $approver;

        return $this;
    }

    /**
     * Gets approval_status_text
     *
     * @return string
     */
    public function getApprovalStatusText()
    {
        return $this->container['approval_status_text'];
    }

    /**
     * Sets approval_status_text
     *
     * @param string $approval_status_text last approval comment &gt; The approval status text suitable for display
     *
     * @return $this
     */
    public function setApprovalStatusText($approval_status_text)
    {
        $this->container['approval_status_text'] = $approval_status_text;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time The last time the time card line was modified
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


