<?php
/**
 * KitSpecificationDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * KitSpecificationDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class KitSpecificationDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'KitSpecificationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'kit_inventory_id' => 'string',
        'revision' => 'string',
        'description' => 'string',
        'is_active' => 'bool',
        'allow_component_addition' => 'bool',
        'is_non_stock' => 'bool',
        'stock_component_lines' => '\Ekstralys\VismaNetApi\Model\KitSpecificationStockComponentsDto[]',
        'non_stock_component_lines' => '\Ekstralys\VismaNetApi\Model\KitSpecificationNonStockComponentDto[]',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'kit_inventory_id' => null,
        'revision' => null,
        'description' => null,
        'is_active' => null,
        'allow_component_addition' => null,
        'is_non_stock' => null,
        'stock_component_lines' => null,
        'non_stock_component_lines' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kit_inventory_id' => 'kitInventoryID',
        'revision' => 'revision',
        'description' => 'description',
        'is_active' => 'isActive',
        'allow_component_addition' => 'allowComponentAddition',
        'is_non_stock' => 'isNonStock',
        'stock_component_lines' => 'stockComponentLines',
        'non_stock_component_lines' => 'nonStockComponentLines',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kit_inventory_id' => 'setKitInventoryId',
        'revision' => 'setRevision',
        'description' => 'setDescription',
        'is_active' => 'setIsActive',
        'allow_component_addition' => 'setAllowComponentAddition',
        'is_non_stock' => 'setIsNonStock',
        'stock_component_lines' => 'setStockComponentLines',
        'non_stock_component_lines' => 'setNonStockComponentLines',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kit_inventory_id' => 'getKitInventoryId',
        'revision' => 'getRevision',
        'description' => 'getDescription',
        'is_active' => 'getIsActive',
        'allow_component_addition' => 'getAllowComponentAddition',
        'is_non_stock' => 'getIsNonStock',
        'stock_component_lines' => 'getStockComponentLines',
        'non_stock_component_lines' => 'getNonStockComponentLines',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['kit_inventory_id'] = isset($data['kit_inventory_id']) ? $data['kit_inventory_id'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['allow_component_addition'] = isset($data['allow_component_addition']) ? $data['allow_component_addition'] : null;
        $this->container['is_non_stock'] = isset($data['is_non_stock']) ? $data['is_non_stock'] : null;
        $this->container['stock_component_lines'] = isset($data['stock_component_lines']) ? $data['stock_component_lines'] : null;
        $this->container['non_stock_component_lines'] = isset($data['non_stock_component_lines']) ? $data['non_stock_component_lines'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kit_inventory_id
     *
     * @return string
     */
    public function getKitInventoryId()
    {
        return $this->container['kit_inventory_id'];
    }

    /**
     * Sets kit_inventory_id
     *
     * @param string $kit_inventory_id kit_inventory_id
     *
     * @return $this
     */
    public function setKitInventoryId($kit_inventory_id)
    {
        $this->container['kit_inventory_id'] = $kit_inventory_id;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return string
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param string $revision revision
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets allow_component_addition
     *
     * @return bool
     */
    public function getAllowComponentAddition()
    {
        return $this->container['allow_component_addition'];
    }

    /**
     * Sets allow_component_addition
     *
     * @param bool $allow_component_addition allow_component_addition
     *
     * @return $this
     */
    public function setAllowComponentAddition($allow_component_addition)
    {
        $this->container['allow_component_addition'] = $allow_component_addition;

        return $this;
    }

    /**
     * Gets is_non_stock
     *
     * @return bool
     */
    public function getIsNonStock()
    {
        return $this->container['is_non_stock'];
    }

    /**
     * Sets is_non_stock
     *
     * @param bool $is_non_stock is_non_stock
     *
     * @return $this
     */
    public function setIsNonStock($is_non_stock)
    {
        $this->container['is_non_stock'] = $is_non_stock;

        return $this;
    }

    /**
     * Gets stock_component_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\KitSpecificationStockComponentsDto[]
     */
    public function getStockComponentLines()
    {
        return $this->container['stock_component_lines'];
    }

    /**
     * Sets stock_component_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\KitSpecificationStockComponentsDto[] $stock_component_lines stock_component_lines
     *
     * @return $this
     */
    public function setStockComponentLines($stock_component_lines)
    {
        $this->container['stock_component_lines'] = $stock_component_lines;

        return $this;
    }

    /**
     * Gets non_stock_component_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\KitSpecificationNonStockComponentDto[]
     */
    public function getNonStockComponentLines()
    {
        return $this->container['non_stock_component_lines'];
    }

    /**
     * Sets non_stock_component_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\KitSpecificationNonStockComponentDto[] $non_stock_component_lines non_stock_component_lines
     *
     * @return $this
     */
    public function setNonStockComponentLines($non_stock_component_lines)
    {
        $this->container['non_stock_component_lines'] = $non_stock_component_lines;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


