<?php
/**
 * VatCategoryLineDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * VatCategoryLineDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VatCategoryLineDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VatCategoryLineDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vat_id' => 'string',
        'description' => 'string',
        'type' => 'string',
        'calculate_on' => 'string',
        'cash_discount' => 'string',
        'vat_rates' => '\Ekstralys\VismaNetApi\Model\VatRateLineDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vat_id' => null,
        'description' => null,
        'type' => null,
        'calculate_on' => null,
        'cash_discount' => null,
        'vat_rates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vat_id' => 'vatId',
        'description' => 'description',
        'type' => 'type',
        'calculate_on' => 'calculateOn',
        'cash_discount' => 'cashDiscount',
        'vat_rates' => 'vatRates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vat_id' => 'setVatId',
        'description' => 'setDescription',
        'type' => 'setType',
        'calculate_on' => 'setCalculateOn',
        'cash_discount' => 'setCashDiscount',
        'vat_rates' => 'setVatRates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vat_id' => 'getVatId',
        'description' => 'getDescription',
        'type' => 'getType',
        'calculate_on' => 'getCalculateOn',
        'cash_discount' => 'getCashDiscount',
        'vat_rates' => 'getVatRates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_SALES = 'Sales';
    const TYPE__USE = 'Use';
    const TYPE_VAT = 'Vat';
    const TYPE_WITHHOLDING = 'Withholding';
    const TYPE_EXEMPT_VAT = 'ExemptVat';
    const TYPE_STATISTICAL_VAT = 'StatisticalVat';
    const TYPE_DIRECT_VAT = 'DirectVat';
    const TYPE_PENDING_VAT = 'PendingVat';
    const TYPE_REVERSE_VAT = 'ReverseVat';
    const CALCULATE_ON_EXTRACT_FROM_ITEM_AMOUNT = 'ExtractFromItemAmount';
    const CALCULATE_ON_ITEM_AMOUNT = 'ItemAmount';
    const CALCULATE_ON_ITEM_TAX_AMOUNT = 'ItemTaxAmount';
    const CALCULATE_ON_DOCUMENT_AMOUNT = 'DocumentAmount';
    const CALCULATE_ON_DOCUMEN_TAX_AMOUNT = 'DocumenTaxAmount';
    const CASH_DISCOUNT_TO_TAXABLE_AMOUNT = 'ToTaxableAmount';
    const CASH_DISCOUNT_TO_PROMT_PAYMENT = 'ToPromtPayment';
    const CASH_DISCOUNT_TO_TAX_AMOUNT = 'ToTaxAmount';
    const CASH_DISCOUNT_ADJUST_TAX = 'AdjustTax';
    const CASH_DISCOUNT_NO_ADJUST = 'NoAdjust';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SALES,
            self::TYPE__USE,
            self::TYPE_VAT,
            self::TYPE_WITHHOLDING,
            self::TYPE_EXEMPT_VAT,
            self::TYPE_STATISTICAL_VAT,
            self::TYPE_DIRECT_VAT,
            self::TYPE_PENDING_VAT,
            self::TYPE_REVERSE_VAT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCalculateOnAllowableValues()
    {
        return [
            self::CALCULATE_ON_EXTRACT_FROM_ITEM_AMOUNT,
            self::CALCULATE_ON_ITEM_AMOUNT,
            self::CALCULATE_ON_ITEM_TAX_AMOUNT,
            self::CALCULATE_ON_DOCUMENT_AMOUNT,
            self::CALCULATE_ON_DOCUMEN_TAX_AMOUNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCashDiscountAllowableValues()
    {
        return [
            self::CASH_DISCOUNT_TO_TAXABLE_AMOUNT,
            self::CASH_DISCOUNT_TO_PROMT_PAYMENT,
            self::CASH_DISCOUNT_TO_TAX_AMOUNT,
            self::CASH_DISCOUNT_ADJUST_TAX,
            self::CASH_DISCOUNT_NO_ADJUST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vat_id'] = isset($data['vat_id']) ? $data['vat_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['calculate_on'] = isset($data['calculate_on']) ? $data['calculate_on'] : null;
        $this->container['cash_discount'] = isset($data['cash_discount']) ? $data['cash_discount'] : null;
        $this->container['vat_rates'] = isset($data['vat_rates']) ? $data['vat_rates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCalculateOnAllowableValues();
        if (!is_null($this->container['calculate_on']) && !in_array($this->container['calculate_on'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'calculate_on', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCashDiscountAllowableValues();
        if (!is_null($this->container['cash_discount']) && !in_array($this->container['cash_discount'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'cash_discount', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vat_id
     *
     * @return string
     */
    public function getVatId()
    {
        return $this->container['vat_id'];
    }

    /**
     * Sets vat_id
     *
     * @param string $vat_id Mandatory field: VAT ID* &gt; The ID of the VAT included in the category.
     *
     * @return $this
     */
    public function setVatId($vat_id)
    {
        $this->container['vat_id'] = $vat_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description &gt; The detailed description of the VAT item.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type VAT type &gt; The type of VAT, which defines how it is processed.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets calculate_on
     *
     * @return string
     */
    public function getCalculateOn()
    {
        return $this->container['calculate_on'];
    }

    /**
     * Sets calculate_on
     *
     * @param string $calculate_on Calculate on &gt; The way the VAT amount is calculated, which can be one of the following options: Extract from item amount, Document amount, Document and VAT amount.
     *
     * @return $this
     */
    public function setCalculateOn($calculate_on)
    {
        $allowedValues = $this->getCalculateOnAllowableValues();
        if (!is_null($calculate_on) && !in_array($calculate_on, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'calculate_on', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['calculate_on'] = $calculate_on;

        return $this;
    }

    /**
     * Gets cash_discount
     *
     * @return string
     */
    public function getCashDiscount()
    {
        return $this->container['cash_discount'];
    }

    /**
     * Sets cash_discount
     *
     * @param string $cash_discount Cash discount &gt; The method of calculating the taxable amount if a discount is applied (based on the credit terms). It can be one of the following options: Reduce VAT amount, Does not affect VAT amount.
     *
     * @return $this
     */
    public function setCashDiscount($cash_discount)
    {
        $allowedValues = $this->getCashDiscountAllowableValues();
        if (!is_null($cash_discount) && !in_array($cash_discount, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cash_discount', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cash_discount'] = $cash_discount;

        return $this;
    }

    /**
     * Gets vat_rates
     *
     * @return \Ekstralys\VismaNetApi\Model\VatRateLineDto[]
     */
    public function getVatRates()
    {
        return $this->container['vat_rates'];
    }

    /**
     * Sets vat_rates
     *
     * @param \Ekstralys\VismaNetApi\Model\VatRateLineDto[] $vat_rates vat_rates
     *
     * @return $this
     */
    public function setVatRates($vat_rates)
    {
        $this->container['vat_rates'] = $vat_rates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


