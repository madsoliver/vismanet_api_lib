<?php
/**
 * SupplierPOBalanceDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * SupplierPOBalanceDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupplierPOBalanceDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SupplierPOBalanceDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'supplier' => 'object',
        'total_po_on_hold_order_total' => 'double',
        'total_po_on_hold_line_total' => 'double',
        'total_open_po_order_total' => 'double',
        'total_open_po_line_total' => 'double',
        'total_closed_po_order_total' => 'double',
        'total_closed_po_line_total' => 'double',
        'last_modified_date_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'supplier' => null,
        'total_po_on_hold_order_total' => 'double',
        'total_po_on_hold_line_total' => 'double',
        'total_open_po_order_total' => 'double',
        'total_open_po_line_total' => 'double',
        'total_closed_po_order_total' => 'double',
        'total_closed_po_line_total' => 'double',
        'last_modified_date_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'supplier' => 'supplier',
        'total_po_on_hold_order_total' => 'totalPOOnHoldOrderTotal',
        'total_po_on_hold_line_total' => 'totalPOOnHoldLineTotal',
        'total_open_po_order_total' => 'totalOpenPOOrderTotal',
        'total_open_po_line_total' => 'totalOpenPOLineTotal',
        'total_closed_po_order_total' => 'totalClosedPOOrderTotal',
        'total_closed_po_line_total' => 'totalClosedPOLineTotal',
        'last_modified_date_time' => 'lastModifiedDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'supplier' => 'setSupplier',
        'total_po_on_hold_order_total' => 'setTotalPoOnHoldOrderTotal',
        'total_po_on_hold_line_total' => 'setTotalPoOnHoldLineTotal',
        'total_open_po_order_total' => 'setTotalOpenPoOrderTotal',
        'total_open_po_line_total' => 'setTotalOpenPoLineTotal',
        'total_closed_po_order_total' => 'setTotalClosedPoOrderTotal',
        'total_closed_po_line_total' => 'setTotalClosedPoLineTotal',
        'last_modified_date_time' => 'setLastModifiedDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'supplier' => 'getSupplier',
        'total_po_on_hold_order_total' => 'getTotalPoOnHoldOrderTotal',
        'total_po_on_hold_line_total' => 'getTotalPoOnHoldLineTotal',
        'total_open_po_order_total' => 'getTotalOpenPoOrderTotal',
        'total_open_po_line_total' => 'getTotalOpenPoLineTotal',
        'total_closed_po_order_total' => 'getTotalClosedPoOrderTotal',
        'total_closed_po_line_total' => 'getTotalClosedPoLineTotal',
        'last_modified_date_time' => 'getLastModifiedDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['total_po_on_hold_order_total'] = isset($data['total_po_on_hold_order_total']) ? $data['total_po_on_hold_order_total'] : null;
        $this->container['total_po_on_hold_line_total'] = isset($data['total_po_on_hold_line_total']) ? $data['total_po_on_hold_line_total'] : null;
        $this->container['total_open_po_order_total'] = isset($data['total_open_po_order_total']) ? $data['total_open_po_order_total'] : null;
        $this->container['total_open_po_line_total'] = isset($data['total_open_po_line_total']) ? $data['total_open_po_line_total'] : null;
        $this->container['total_closed_po_order_total'] = isset($data['total_closed_po_order_total']) ? $data['total_closed_po_order_total'] : null;
        $this->container['total_closed_po_line_total'] = isset($data['total_closed_po_line_total']) ? $data['total_closed_po_line_total'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets supplier
     *
     * @return object
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param object $supplier The name of the supplier
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets total_po_on_hold_order_total
     *
     * @return double
     */
    public function getTotalPoOnHoldOrderTotal()
    {
        return $this->container['total_po_on_hold_order_total'];
    }

    /**
     * Sets total_po_on_hold_order_total
     *
     * @param double $total_po_on_hold_order_total The total amount of order on hold
     *
     * @return $this
     */
    public function setTotalPoOnHoldOrderTotal($total_po_on_hold_order_total)
    {
        $this->container['total_po_on_hold_order_total'] = $total_po_on_hold_order_total;

        return $this;
    }

    /**
     * Gets total_po_on_hold_line_total
     *
     * @return double
     */
    public function getTotalPoOnHoldLineTotal()
    {
        return $this->container['total_po_on_hold_line_total'];
    }

    /**
     * Sets total_po_on_hold_line_total
     *
     * @param double $total_po_on_hold_line_total The total amount of the order line on hold
     *
     * @return $this
     */
    public function setTotalPoOnHoldLineTotal($total_po_on_hold_line_total)
    {
        $this->container['total_po_on_hold_line_total'] = $total_po_on_hold_line_total;

        return $this;
    }

    /**
     * Gets total_open_po_order_total
     *
     * @return double
     */
    public function getTotalOpenPoOrderTotal()
    {
        return $this->container['total_open_po_order_total'];
    }

    /**
     * Sets total_open_po_order_total
     *
     * @param double $total_open_po_order_total The total open amount of the order
     *
     * @return $this
     */
    public function setTotalOpenPoOrderTotal($total_open_po_order_total)
    {
        $this->container['total_open_po_order_total'] = $total_open_po_order_total;

        return $this;
    }

    /**
     * Gets total_open_po_line_total
     *
     * @return double
     */
    public function getTotalOpenPoLineTotal()
    {
        return $this->container['total_open_po_line_total'];
    }

    /**
     * Sets total_open_po_line_total
     *
     * @param double $total_open_po_line_total The total open amount of the order line
     *
     * @return $this
     */
    public function setTotalOpenPoLineTotal($total_open_po_line_total)
    {
        $this->container['total_open_po_line_total'] = $total_open_po_line_total;

        return $this;
    }

    /**
     * Gets total_closed_po_order_total
     *
     * @return double
     */
    public function getTotalClosedPoOrderTotal()
    {
        return $this->container['total_closed_po_order_total'];
    }

    /**
     * Sets total_closed_po_order_total
     *
     * @param double $total_closed_po_order_total The total closed amount of the order
     *
     * @return $this
     */
    public function setTotalClosedPoOrderTotal($total_closed_po_order_total)
    {
        $this->container['total_closed_po_order_total'] = $total_closed_po_order_total;

        return $this;
    }

    /**
     * Gets total_closed_po_line_total
     *
     * @return double
     */
    public function getTotalClosedPoLineTotal()
    {
        return $this->container['total_closed_po_line_total'];
    }

    /**
     * Sets total_closed_po_line_total
     *
     * @param double $total_closed_po_line_total The total closed amount of the order line
     *
     * @return $this
     */
    public function setTotalClosedPoLineTotal($total_closed_po_line_total)
    {
        $this->container['total_closed_po_line_total'] = $total_closed_po_line_total;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time The date and time when the purchase order was last modified.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


