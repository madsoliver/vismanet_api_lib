<?php
/**
 * PackagingTypeDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * PackagingTypeDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a PackagingType in PackagingTypeController. Used by getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PackagingTypeDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PackagingTypeDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'box_id' => 'string',
        'description' => 'string',
        'box_weight' => 'double',
        'max_weight' => 'double',
        'weight_uo_m' => 'string',
        'max_volume' => 'double',
        'volume_uo_m' => 'string',
        'length' => 'int',
        'width' => 'int',
        'height' => 'int',
        'active_by_default' => 'bool',
        'last_modified_date_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'box_id' => null,
        'description' => null,
        'box_weight' => 'double',
        'max_weight' => 'double',
        'weight_uo_m' => null,
        'max_volume' => 'double',
        'volume_uo_m' => null,
        'length' => 'int32',
        'width' => 'int32',
        'height' => 'int32',
        'active_by_default' => null,
        'last_modified_date_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'box_id' => 'boxId',
        'description' => 'description',
        'box_weight' => 'boxWeight',
        'max_weight' => 'maxWeight',
        'weight_uo_m' => 'weightUoM',
        'max_volume' => 'maxVolume',
        'volume_uo_m' => 'volumeUoM',
        'length' => 'length',
        'width' => 'width',
        'height' => 'height',
        'active_by_default' => 'activeByDefault',
        'last_modified_date_time' => 'lastModifiedDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'box_id' => 'setBoxId',
        'description' => 'setDescription',
        'box_weight' => 'setBoxWeight',
        'max_weight' => 'setMaxWeight',
        'weight_uo_m' => 'setWeightUoM',
        'max_volume' => 'setMaxVolume',
        'volume_uo_m' => 'setVolumeUoM',
        'length' => 'setLength',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'active_by_default' => 'setActiveByDefault',
        'last_modified_date_time' => 'setLastModifiedDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'box_id' => 'getBoxId',
        'description' => 'getDescription',
        'box_weight' => 'getBoxWeight',
        'max_weight' => 'getMaxWeight',
        'weight_uo_m' => 'getWeightUoM',
        'max_volume' => 'getMaxVolume',
        'volume_uo_m' => 'getVolumeUoM',
        'length' => 'getLength',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'active_by_default' => 'getActiveByDefault',
        'last_modified_date_time' => 'getLastModifiedDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['box_id'] = isset($data['box_id']) ? $data['box_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['box_weight'] = isset($data['box_weight']) ? $data['box_weight'] : null;
        $this->container['max_weight'] = isset($data['max_weight']) ? $data['max_weight'] : null;
        $this->container['weight_uo_m'] = isset($data['weight_uo_m']) ? $data['weight_uo_m'] : null;
        $this->container['max_volume'] = isset($data['max_volume']) ? $data['max_volume'] : null;
        $this->container['volume_uo_m'] = isset($data['volume_uo_m']) ? $data['volume_uo_m'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['active_by_default'] = isset($data['active_by_default']) ? $data['active_by_default'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets box_id
     *
     * @return string
     */
    public function getBoxId()
    {
        return $this->container['box_id'];
    }

    /**
     * Sets box_id
     *
     * @param string $box_id Mandatory field: The table &gt; Box ID* &gt; The ID of the type of box.
     *
     * @return $this
     */
    public function setBoxId($box_id)
    {
        $this->container['box_id'] = $box_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The table &gt; Description &gt; A description of the box.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets box_weight
     *
     * @return double
     */
    public function getBoxWeight()
    {
        return $this->container['box_weight'];
    }

    /**
     * Sets box_weight
     *
     * @param double $box_weight The table &gt; Tare weight &gt; The weight of an empty box of this type, which may include the weight of any packaging material used to pack items inside the box.
     *
     * @return $this
     */
    public function setBoxWeight($box_weight)
    {
        $this->container['box_weight'] = $box_weight;

        return $this;
    }

    /**
     * Gets max_weight
     *
     * @return double
     */
    public function getMaxWeight()
    {
        return $this->container['max_weight'];
    }

    /**
     * Sets max_weight
     *
     * @param double $max_weight The table &gt; Max weight &gt; The maximum weight a box of the type can hold.
     *
     * @return $this
     */
    public function setMaxWeight($max_weight)
    {
        $this->container['max_weight'] = $max_weight;

        return $this;
    }

    /**
     * Gets weight_uo_m
     *
     * @return string
     */
    public function getWeightUoM()
    {
        return $this->container['weight_uo_m'];
    }

    /**
     * Sets weight_uo_m
     *
     * @param string $weight_uo_m The table &gt; Weight UoM &gt; The unit of measure used for the weight.
     *
     * @return $this
     */
    public function setWeightUoM($weight_uo_m)
    {
        $this->container['weight_uo_m'] = $weight_uo_m;

        return $this;
    }

    /**
     * Gets max_volume
     *
     * @return double
     */
    public function getMaxVolume()
    {
        return $this->container['max_volume'];
    }

    /**
     * Sets max_volume
     *
     * @param double $max_volume The table &gt; Max. volume &gt; The maximum volume of items that can fit into a package of the type.
     *
     * @return $this
     */
    public function setMaxVolume($max_volume)
    {
        $this->container['max_volume'] = $max_volume;

        return $this;
    }

    /**
     * Gets volume_uo_m
     *
     * @return string
     */
    public function getVolumeUoM()
    {
        return $this->container['volume_uo_m'];
    }

    /**
     * Sets volume_uo_m
     *
     * @param string $volume_uo_m The table &gt; Volume UoM &gt; The unit of measure used for the volume as specified in the Inventory preferences (IN101000) window.
     *
     * @return $this
     */
    public function setVolumeUoM($volume_uo_m)
    {
        $this->container['volume_uo_m'] = $volume_uo_m;

        return $this;
    }

    /**
     * Gets length
     *
     * @return int
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int $length The table &gt; Length &gt; The length of the package.
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int $width The table &gt; Width &gt; The width of the package.
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height The table &gt; Height &gt; The height of the package.
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets active_by_default
     *
     * @return bool
     */
    public function getActiveByDefault()
    {
        return $this->container['active_by_default'];
    }

    /**
     * Sets active_by_default
     *
     * @param bool $active_by_default The table &gt; Active by default &gt; If you select this check box, the package will be added by default to the list of packages for each new ship via code.
     *
     * @return $this
     */
    public function setActiveByDefault($active_by_default)
    {
        $this->container['active_by_default'] = $active_by_default;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time The table &gt; The date and time when the type was last modified.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


