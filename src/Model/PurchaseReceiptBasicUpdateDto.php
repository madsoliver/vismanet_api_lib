<?php
/**
 * PurchaseReceiptBasicUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * PurchaseReceiptBasicUpdateDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a Purchase Receipt in PurchaseReceiptBasicController. Used for adding data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseReceiptBasicUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseReceiptBasicUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lines' => '\Ekstralys\VismaNetApi\Model\PurchaseReceiptLineBasicUpdateDto[]',
        'receipt_type' => 'object',
        'receipt_nbr' => 'object',
        'hold' => 'object',
        'date' => 'object',
        'post_period' => 'object',
        'warehouse_id' => 'object',
        'supplier_id' => 'object',
        'location_id' => 'object',
        'currency' => 'object',
        'exchange_rate' => 'object',
        'create_bill' => 'object',
        'supplier_ref' => 'object',
        'control_qty' => 'object',
        'control_amount' => 'object',
        'branch_number' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lines' => null,
        'receipt_type' => null,
        'receipt_nbr' => null,
        'hold' => null,
        'date' => null,
        'post_period' => null,
        'warehouse_id' => null,
        'supplier_id' => null,
        'location_id' => null,
        'currency' => null,
        'exchange_rate' => null,
        'create_bill' => null,
        'supplier_ref' => null,
        'control_qty' => null,
        'control_amount' => null,
        'branch_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lines' => 'lines',
        'receipt_type' => 'receiptType',
        'receipt_nbr' => 'receiptNbr',
        'hold' => 'hold',
        'date' => 'date',
        'post_period' => 'postPeriod',
        'warehouse_id' => 'warehouseId',
        'supplier_id' => 'supplierId',
        'location_id' => 'locationId',
        'currency' => 'currency',
        'exchange_rate' => 'exchangeRate',
        'create_bill' => 'createBill',
        'supplier_ref' => 'supplierRef',
        'control_qty' => 'controlQty',
        'control_amount' => 'controlAmount',
        'branch_number' => 'branchNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lines' => 'setLines',
        'receipt_type' => 'setReceiptType',
        'receipt_nbr' => 'setReceiptNbr',
        'hold' => 'setHold',
        'date' => 'setDate',
        'post_period' => 'setPostPeriod',
        'warehouse_id' => 'setWarehouseId',
        'supplier_id' => 'setSupplierId',
        'location_id' => 'setLocationId',
        'currency' => 'setCurrency',
        'exchange_rate' => 'setExchangeRate',
        'create_bill' => 'setCreateBill',
        'supplier_ref' => 'setSupplierRef',
        'control_qty' => 'setControlQty',
        'control_amount' => 'setControlAmount',
        'branch_number' => 'setBranchNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lines' => 'getLines',
        'receipt_type' => 'getReceiptType',
        'receipt_nbr' => 'getReceiptNbr',
        'hold' => 'getHold',
        'date' => 'getDate',
        'post_period' => 'getPostPeriod',
        'warehouse_id' => 'getWarehouseId',
        'supplier_id' => 'getSupplierId',
        'location_id' => 'getLocationId',
        'currency' => 'getCurrency',
        'exchange_rate' => 'getExchangeRate',
        'create_bill' => 'getCreateBill',
        'supplier_ref' => 'getSupplierRef',
        'control_qty' => 'getControlQty',
        'control_amount' => 'getControlAmount',
        'branch_number' => 'getBranchNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['receipt_type'] = isset($data['receipt_type']) ? $data['receipt_type'] : null;
        $this->container['receipt_nbr'] = isset($data['receipt_nbr']) ? $data['receipt_nbr'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['post_period'] = isset($data['post_period']) ? $data['post_period'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['supplier_id'] = isset($data['supplier_id']) ? $data['supplier_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['create_bill'] = isset($data['create_bill']) ? $data['create_bill'] : null;
        $this->container['supplier_ref'] = isset($data['supplier_ref']) ? $data['supplier_ref'] : null;
        $this->container['control_qty'] = isset($data['control_qty']) ? $data['control_qty'] : null;
        $this->container['control_amount'] = isset($data['control_amount']) ? $data['control_amount'] : null;
        $this->container['branch_number'] = isset($data['branch_number']) ? $data['branch_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lines
     *
     * @return \Ekstralys\VismaNetApi\Model\PurchaseReceiptLineBasicUpdateDto[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Ekstralys\VismaNetApi\Model\PurchaseReceiptLineBasicUpdateDto[] $lines lines
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets receipt_type
     *
     * @return object
     */
    public function getReceiptType()
    {
        return $this->container['receipt_type'];
    }

    /**
     * Sets receipt_type
     *
     * @param object $receipt_type receipt_type
     *
     * @return $this
     */
    public function setReceiptType($receipt_type)
    {
        $this->container['receipt_type'] = $receipt_type;

        return $this;
    }

    /**
     * Gets receipt_nbr
     *
     * @return object
     */
    public function getReceiptNbr()
    {
        return $this->container['receipt_nbr'];
    }

    /**
     * Sets receipt_nbr
     *
     * @param object $receipt_nbr receipt_nbr
     *
     * @return $this
     */
    public function setReceiptNbr($receipt_nbr)
    {
        $this->container['receipt_nbr'] = $receipt_nbr;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return object
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param object $hold hold
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets date
     *
     * @return object
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param object $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets post_period
     *
     * @return object
     */
    public function getPostPeriod()
    {
        return $this->container['post_period'];
    }

    /**
     * Sets post_period
     *
     * @param object $post_period The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.
     *
     * @return $this
     */
    public function setPostPeriod($post_period)
    {
        $this->container['post_period'] = $post_period;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return object
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param object $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return object
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param object $supplier_id supplier_id
     *
     * @return $this
     */
    public function setSupplierId($supplier_id)
    {
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return object
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param object $location_id location_id
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return object
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param object $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return object
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param object $exchange_rate exchange_rate
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets create_bill
     *
     * @return object
     */
    public function getCreateBill()
    {
        return $this->container['create_bill'];
    }

    /**
     * Sets create_bill
     *
     * @param object $create_bill create_bill
     *
     * @return $this
     */
    public function setCreateBill($create_bill)
    {
        $this->container['create_bill'] = $create_bill;

        return $this;
    }

    /**
     * Gets supplier_ref
     *
     * @return object
     */
    public function getSupplierRef()
    {
        return $this->container['supplier_ref'];
    }

    /**
     * Sets supplier_ref
     *
     * @param object $supplier_ref supplier_ref
     *
     * @return $this
     */
    public function setSupplierRef($supplier_ref)
    {
        $this->container['supplier_ref'] = $supplier_ref;

        return $this;
    }

    /**
     * Gets control_qty
     *
     * @return object
     */
    public function getControlQty()
    {
        return $this->container['control_qty'];
    }

    /**
     * Sets control_qty
     *
     * @param object $control_qty control_qty
     *
     * @return $this
     */
    public function setControlQty($control_qty)
    {
        $this->container['control_qty'] = $control_qty;

        return $this;
    }

    /**
     * Gets control_amount
     *
     * @return object
     */
    public function getControlAmount()
    {
        return $this->container['control_amount'];
    }

    /**
     * Sets control_amount
     *
     * @param object $control_amount control_amount
     *
     * @return $this
     */
    public function setControlAmount($control_amount)
    {
        $this->container['control_amount'] = $control_amount;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return object
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param object $branch_number branch_number
     *
     * @return $this
     */
    public function setBranchNumber($branch_number)
    {
        $this->container['branch_number'] = $branch_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


