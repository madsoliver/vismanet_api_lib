<?php
/**
 * AccountDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * AccountDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'account_cd' => 'string',
        'account_group_cd' => 'string',
        'account_class' => 'string',
        'type' => 'string',
        'active' => 'bool',
        'description' => 'string',
        'use_default_sub' => 'bool',
        'post_option' => 'string',
        'currency' => 'string',
        'tax_category' => 'string',
        'cash_account' => 'bool',
        'public_code1' => 'int',
        'external_code1' => 'string',
        'external_code2' => 'string',
        'analysis_code' => 'string',
        'last_modified_date_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'int32',
        'account_cd' => null,
        'account_group_cd' => null,
        'account_class' => null,
        'type' => null,
        'active' => null,
        'description' => null,
        'use_default_sub' => null,
        'post_option' => null,
        'currency' => null,
        'tax_category' => null,
        'cash_account' => null,
        'public_code1' => 'int32',
        'external_code1' => null,
        'external_code2' => null,
        'analysis_code' => null,
        'last_modified_date_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountID',
        'account_cd' => 'accountCD',
        'account_group_cd' => 'accountGroupCD',
        'account_class' => 'accountClass',
        'type' => 'type',
        'active' => 'active',
        'description' => 'description',
        'use_default_sub' => 'useDefaultSub',
        'post_option' => 'postOption',
        'currency' => 'currency',
        'tax_category' => 'taxCategory',
        'cash_account' => 'cashAccount',
        'public_code1' => 'publicCode1',
        'external_code1' => 'externalCode1',
        'external_code2' => 'externalCode2',
        'analysis_code' => 'analysisCode',
        'last_modified_date_time' => 'lastModifiedDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'account_cd' => 'setAccountCd',
        'account_group_cd' => 'setAccountGroupCd',
        'account_class' => 'setAccountClass',
        'type' => 'setType',
        'active' => 'setActive',
        'description' => 'setDescription',
        'use_default_sub' => 'setUseDefaultSub',
        'post_option' => 'setPostOption',
        'currency' => 'setCurrency',
        'tax_category' => 'setTaxCategory',
        'cash_account' => 'setCashAccount',
        'public_code1' => 'setPublicCode1',
        'external_code1' => 'setExternalCode1',
        'external_code2' => 'setExternalCode2',
        'analysis_code' => 'setAnalysisCode',
        'last_modified_date_time' => 'setLastModifiedDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'account_cd' => 'getAccountCd',
        'account_group_cd' => 'getAccountGroupCd',
        'account_class' => 'getAccountClass',
        'type' => 'getType',
        'active' => 'getActive',
        'description' => 'getDescription',
        'use_default_sub' => 'getUseDefaultSub',
        'post_option' => 'getPostOption',
        'currency' => 'getCurrency',
        'tax_category' => 'getTaxCategory',
        'cash_account' => 'getCashAccount',
        'public_code1' => 'getPublicCode1',
        'external_code1' => 'getExternalCode1',
        'external_code2' => 'getExternalCode2',
        'analysis_code' => 'getAnalysisCode',
        'last_modified_date_time' => 'getLastModifiedDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_ASSET = 'Asset';
    const TYPE_LIABILITY = 'Liability';
    const TYPE_INCOME = 'Income';
    const TYPE_EXPENSE = 'Expense';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ASSET,
            self::TYPE_LIABILITY,
            self::TYPE_INCOME,
            self::TYPE_EXPENSE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['account_cd'] = isset($data['account_cd']) ? $data['account_cd'] : null;
        $this->container['account_group_cd'] = isset($data['account_group_cd']) ? $data['account_group_cd'] : null;
        $this->container['account_class'] = isset($data['account_class']) ? $data['account_class'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['use_default_sub'] = isset($data['use_default_sub']) ? $data['use_default_sub'] : null;
        $this->container['post_option'] = isset($data['post_option']) ? $data['post_option'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['tax_category'] = isset($data['tax_category']) ? $data['tax_category'] : null;
        $this->container['cash_account'] = isset($data['cash_account']) ? $data['cash_account'] : null;
        $this->container['public_code1'] = isset($data['public_code1']) ? $data['public_code1'] : null;
        $this->container['external_code1'] = isset($data['external_code1']) ? $data['external_code1'] : null;
        $this->container['external_code2'] = isset($data['external_code2']) ? $data['external_code2'] : null;
        $this->container['analysis_code'] = isset($data['analysis_code']) ? $data['analysis_code'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id The table &gt; AccountID &gt; The Account ID is the actual ID that the account have in the database and are used in other tables as the relation between the Chart of accounts table and other tables.
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_cd
     *
     * @return string
     */
    public function getAccountCd()
    {
        return $this->container['account_cd'];
    }

    /**
     * Sets account_cd
     *
     * @param string $account_cd Mandatory field: The table &gt; Account* &gt; The unique identifier of the general ledger account in the system.
     *
     * @return $this
     */
    public function setAccountCd($account_cd)
    {
        $this->container['account_cd'] = $account_cd;

        return $this;
    }

    /**
     * Gets account_group_cd
     *
     * @return string
     */
    public function getAccountGroupCd()
    {
        return $this->container['account_group_cd'];
    }

    /**
     * Sets account_group_cd
     *
     * @param string $account_group_cd The table &gt; Account group &gt; The account group (used in project management if the Projects module has been activated) that includes this account.
     *
     * @return $this
     */
    public function setAccountGroupCd($account_group_cd)
    {
        $this->container['account_group_cd'] = $account_group_cd;

        return $this;
    }

    /**
     * Gets account_class
     *
     * @return string
     */
    public function getAccountClass()
    {
        return $this->container['account_class'];
    }

    /**
     * Sets account_class
     *
     * @param string $account_class The table &gt; Account class &gt; Optional. The account class to which the account is assigned.
     *
     * @return $this
     */
    public function setAccountClass($account_class)
    {
        $this->container['account_class'] = $account_class;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The table &gt; Type &gt; The type of account: Asset, Liability, Income, or Expense.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active The table &gt; Active &gt; A check box that indicates that the account is active.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The table &gt; Description &gt; An alphanumeric string of up to 30 characters that describes the account.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets use_default_sub
     *
     * @return bool
     */
    public function getUseDefaultSub()
    {
        return $this->container['use_default_sub'];
    }

    /**
     * Sets use_default_sub
     *
     * @param bool $use_default_sub The table &gt; Use default sub &gt; A check box that causes the system (if selected) to set the default subaccount as the Subaccount if the account is selected.
     *
     * @return $this
     */
    public function setUseDefaultSub($use_default_sub)
    {
        $this->container['use_default_sub'] = $use_default_sub;

        return $this;
    }

    /**
     * Gets post_option
     *
     * @return string
     */
    public function getPostOption()
    {
        return $this->container['post_option'];
    }

    /**
     * Sets post_option
     *
     * @param string $post_option The table &gt; Post option &gt; An option that defines how transactions created in other workspaces are posted to this account. Summary (default) or Detail.
     *
     * @return $this
     */
    public function setPostOption($post_option)
    {
        $this->container['post_option'] = $post_option;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The table &gt; Currency &gt; Optional: This column appears only if support for multiple currencies has been activated for the system.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets tax_category
     *
     * @return string
     */
    public function getTaxCategory()
    {
        return $this->container['tax_category'];
    }

    /**
     * Sets tax_category
     *
     * @param string $tax_category The table &gt; VAT category &gt; A tax category that you define for the selected account. When you create a journal transaction manually in the GL301000 window, based on this VAT category, the taxable amount will be calculated for the journal entry.
     *
     * @return $this
     */
    public function setTaxCategory($tax_category)
    {
        $this->container['tax_category'] = $tax_category;

        return $this;
    }

    /**
     * Gets cash_account
     *
     * @return bool
     */
    public function getCashAccount()
    {
        return $this->container['cash_account'];
    }

    /**
     * Sets cash_account
     *
     * @param bool $cash_account The table &gt; Cash account &gt; A check box that indicates (if selected) that the account has a cash account or multiple cash accounts linked to it.
     *
     * @return $this
     */
    public function setCashAccount($cash_account)
    {
        $this->container['cash_account'] = $cash_account;

        return $this;
    }

    /**
     * Gets public_code1
     *
     * @return int
     */
    public function getPublicCode1()
    {
        return $this->container['public_code1'];
    }

    /**
     * Sets public_code1
     *
     * @param int $public_code1 The table &gt; Public code 1 &gt; The authorities valid code mapped to the account. Used for example in SAF-T and in some nationals reporting to the authorities.
     *
     * @return $this
     */
    public function setPublicCode1($public_code1)
    {
        $this->container['public_code1'] = $public_code1;

        return $this;
    }

    /**
     * Gets external_code1
     *
     * @return string
     */
    public function getExternalCode1()
    {
        return $this->container['external_code1'];
    }

    /**
     * Sets external_code1
     *
     * @param string $external_code1 The table &gt; External code 1 &gt; A field that can be used for sorting and inquiries.  Either enter in field or predfine in GL20251S.
     *
     * @return $this
     */
    public function setExternalCode1($external_code1)
    {
        $this->container['external_code1'] = $external_code1;

        return $this;
    }

    /**
     * Gets external_code2
     *
     * @return string
     */
    public function getExternalCode2()
    {
        return $this->container['external_code2'];
    }

    /**
     * Sets external_code2
     *
     * @param string $external_code2 The table &gt; External code 2 &gt; A field that can be used for sorting and inquiries.  Either enter in field or predfine in GL20252S.
     *
     * @return $this
     */
    public function setExternalCode2($external_code2)
    {
        $this->container['external_code2'] = $external_code2;

        return $this;
    }

    /**
     * Gets analysis_code
     *
     * @return string
     */
    public function getAnalysisCode()
    {
        return $this->container['analysis_code'];
    }

    /**
     * Sets analysis_code
     *
     * @param string $analysis_code The table &gt; Analysis code &gt; A field that can be used for sorting and inquiries.  Either enter in field or predfine in GL20253S.
     *
     * @return $this
     */
    public function setAnalysisCode($analysis_code)
    {
        $this->container['analysis_code'] = $analysis_code;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time This information is not visible in the window.  It is collected from the system.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


