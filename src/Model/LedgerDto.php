<?php
/**
 * LedgerDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * LedgerDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LedgerDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LedgerDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'internal_id' => 'int',
        'number' => 'string',
        'description' => 'string',
        'balance_type' => 'string',
        'currency_id' => 'string',
        'consolidation_source' => 'bool',
        'consol_branch' => 'object',
        'branch_accounting' => 'bool',
        'last_modified_date_time' => '\DateTime',
        'post_inter_company' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'internal_id' => 'int32',
        'number' => null,
        'description' => null,
        'balance_type' => null,
        'currency_id' => null,
        'consolidation_source' => null,
        'consol_branch' => null,
        'branch_accounting' => null,
        'last_modified_date_time' => 'date-time',
        'post_inter_company' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'internal_id' => 'internalId',
        'number' => 'number',
        'description' => 'description',
        'balance_type' => 'balanceType',
        'currency_id' => 'currencyId',
        'consolidation_source' => 'consolidationSource',
        'consol_branch' => 'consolBranch',
        'branch_accounting' => 'branchAccounting',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'post_inter_company' => 'postInterCompany'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'internal_id' => 'setInternalId',
        'number' => 'setNumber',
        'description' => 'setDescription',
        'balance_type' => 'setBalanceType',
        'currency_id' => 'setCurrencyId',
        'consolidation_source' => 'setConsolidationSource',
        'consol_branch' => 'setConsolBranch',
        'branch_accounting' => 'setBranchAccounting',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'post_inter_company' => 'setPostInterCompany'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'internal_id' => 'getInternalId',
        'number' => 'getNumber',
        'description' => 'getDescription',
        'balance_type' => 'getBalanceType',
        'currency_id' => 'getCurrencyId',
        'consolidation_source' => 'getConsolidationSource',
        'consol_branch' => 'getConsolBranch',
        'branch_accounting' => 'getBranchAccounting',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'post_inter_company' => 'getPostInterCompany'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BALANCE_TYPE_ACTUAL = 'Actual';
    const BALANCE_TYPE_REPORT = 'Report';
    const BALANCE_TYPE_STATISTICAL = 'Statistical';
    const BALANCE_TYPE_BUDGET = 'Budget';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBalanceTypeAllowableValues()
    {
        return [
            self::BALANCE_TYPE_ACTUAL,
            self::BALANCE_TYPE_REPORT,
            self::BALANCE_TYPE_STATISTICAL,
            self::BALANCE_TYPE_BUDGET,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['balance_type'] = isset($data['balance_type']) ? $data['balance_type'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['consolidation_source'] = isset($data['consolidation_source']) ? $data['consolidation_source'] : null;
        $this->container['consol_branch'] = isset($data['consol_branch']) ? $data['consol_branch'] : null;
        $this->container['branch_accounting'] = isset($data['branch_accounting']) ? $data['branch_accounting'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['post_inter_company'] = isset($data['post_inter_company']) ? $data['post_inter_company'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBalanceTypeAllowableValues();
        if (!is_null($this->container['balance_type']) && !in_array($this->container['balance_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'balance_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets internal_id
     *
     * @return int
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param int $internal_id internal_id
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Mandatory field: The top part &gt; Ledger ID* &gt; An alphanumeric string of up to 10 characters used to identify the ledger.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The top part &gt; Description &gt; A detailed ledger description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets balance_type
     *
     * @return string
     */
    public function getBalanceType()
    {
        return $this->container['balance_type'];
    }

    /**
     * Sets balance_type
     *
     * @param string $balance_type The top part &gt; Balance type &gt; The type of balance in the ledger. Select one of the following predefined types: Actual, Budget, Reporting, Statistical.
     *
     * @return $this
     */
    public function setBalanceType($balance_type)
    {
        $allowedValues = $this->getBalanceTypeAllowableValues();
        if (!is_null($balance_type) && !in_array($balance_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'balance_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['balance_type'] = $balance_type;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id Mandatory field: The top part &gt; Currency* &gt; The default currency of the ledger.
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets consolidation_source
     *
     * @return bool
     */
    public function getConsolidationSource()
    {
        return $this->container['consolidation_source'];
    }

    /**
     * Sets consolidation_source
     *
     * @param bool $consolidation_source The top part &gt; Consolidation source &gt; A check box that specifies, if selected, that the ledger should be used as a source ledger for consolidation.
     *
     * @return $this
     */
    public function setConsolidationSource($consolidation_source)
    {
        $this->container['consolidation_source'] = $consolidation_source;

        return $this;
    }

    /**
     * Gets consol_branch
     *
     * @return object
     */
    public function getConsolBranch()
    {
        return $this->container['consol_branch'];
    }

    /**
     * Sets consol_branch
     *
     * @param object $consol_branch The top part &gt; Consol. branch &gt;  The consolidation branch, which you create when a company has multiple branches that operate within a single legal entity and post transactions to the same ledger.
     *
     * @return $this
     */
    public function setConsolBranch($consol_branch)
    {
        $this->container['consol_branch'] = $consol_branch;

        return $this;
    }

    /**
     * Gets branch_accounting
     *
     * @return bool
     */
    public function getBranchAccounting()
    {
        return $this->container['branch_accounting'];
    }

    /**
     * Sets branch_accounting
     *
     * @param bool $branch_accounting The top part &gt; Branch accounting &gt; A check box that you select to indicate that the system should automatically generate inter-branch transactions for this ledger to balance transactions for all branches involved.
     *
     * @return $this
     */
    public function setBranchAccounting($branch_accounting)
    {
        $this->container['branch_accounting'] = $branch_accounting;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time System generated information.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets post_inter_company
     *
     * @return bool
     */
    public function getPostInterCompany()
    {
        return $this->container['post_inter_company'];
    }

    /**
     * Sets post_inter_company
     *
     * @param bool $post_inter_company Branch accounting &gt; True/False
     *
     * @return $this
     */
    public function setPostInterCompany($post_inter_company)
    {
        $this->container['post_inter_company'] = $post_inter_company;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


