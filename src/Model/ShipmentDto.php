<?php
/**
 * ShipmentDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * ShipmentDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a Shipment in ShipmentController. Used by getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShipmentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipment_number' => 'string',
        'shipment_type' => 'string',
        'status' => 'string',
        'hold' => 'bool',
        'operation' => 'string',
        'shipment_date' => '\DateTime',
        'customer' => 'object',
        'location' => 'object',
        'from_warehouse' => 'object',
        'to_warehouse' => 'object',
        'currency_id' => 'string',
        'owner' => 'object',
        'shipped_quantity' => 'double',
        'shipped_weight' => 'double',
        'shipped_volume' => 'double',
        'packages' => 'double',
        'packages_weight' => 'double',
        'control_quantity' => 'double',
        'delivery_address' => 'object',
        'delivery_contact' => 'object',
        'ship_via' => 'object',
        'fob_point' => 'object',
        'shipping_terms' => 'object',
        'shipping_zone' => 'object',
        'residential_delivery' => 'bool',
        'saturday_delivery' => 'bool',
        'use_customer_account' => 'bool',
        'insurance' => 'bool',
        'freight_cost' => 'double',
        'freight_amt' => 'double',
        'transaction_type' => 'object',
        'mode_of_trasport' => 'object',
        'container' => 'bool',
        'shipment_detail_lines' => '\Ekstralys\VismaNetApi\Model\ShipmentDetailLineDto[]',
        'shipment_order_lines' => '\Ekstralys\VismaNetApi\Model\ShipmentOrderLineDto[]',
        'shipment_package_lines' => '\Ekstralys\VismaNetApi\Model\PackageDetailLineDto[]',
        'last_modified_date_time' => '\DateTime',
        'note' => 'string',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipment_number' => null,
        'shipment_type' => null,
        'status' => null,
        'hold' => null,
        'operation' => null,
        'shipment_date' => 'date-time',
        'customer' => null,
        'location' => null,
        'from_warehouse' => null,
        'to_warehouse' => null,
        'currency_id' => null,
        'owner' => null,
        'shipped_quantity' => 'double',
        'shipped_weight' => 'double',
        'shipped_volume' => 'double',
        'packages' => 'double',
        'packages_weight' => 'double',
        'control_quantity' => 'double',
        'delivery_address' => null,
        'delivery_contact' => null,
        'ship_via' => null,
        'fob_point' => null,
        'shipping_terms' => null,
        'shipping_zone' => null,
        'residential_delivery' => null,
        'saturday_delivery' => null,
        'use_customer_account' => null,
        'insurance' => null,
        'freight_cost' => 'double',
        'freight_amt' => 'double',
        'transaction_type' => null,
        'mode_of_trasport' => null,
        'container' => null,
        'shipment_detail_lines' => null,
        'shipment_order_lines' => null,
        'shipment_package_lines' => null,
        'last_modified_date_time' => 'date-time',
        'note' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipment_number' => 'shipmentNumber',
        'shipment_type' => 'shipmentType',
        'status' => 'status',
        'hold' => 'hold',
        'operation' => 'operation',
        'shipment_date' => 'shipmentDate',
        'customer' => 'customer',
        'location' => 'location',
        'from_warehouse' => 'fromWarehouse',
        'to_warehouse' => 'toWarehouse',
        'currency_id' => 'currencyId',
        'owner' => 'owner',
        'shipped_quantity' => 'shippedQuantity',
        'shipped_weight' => 'shippedWeight',
        'shipped_volume' => 'shippedVolume',
        'packages' => 'packages',
        'packages_weight' => 'packagesWeight',
        'control_quantity' => 'controlQuantity',
        'delivery_address' => 'deliveryAddress',
        'delivery_contact' => 'deliveryContact',
        'ship_via' => 'shipVia',
        'fob_point' => 'fobPoint',
        'shipping_terms' => 'shippingTerms',
        'shipping_zone' => 'shippingZone',
        'residential_delivery' => 'residentialDelivery',
        'saturday_delivery' => 'saturdayDelivery',
        'use_customer_account' => 'useCustomerAccount',
        'insurance' => 'insurance',
        'freight_cost' => 'freightCost',
        'freight_amt' => 'freightAmt',
        'transaction_type' => 'transactionType',
        'mode_of_trasport' => 'modeOfTrasport',
        'container' => 'container',
        'shipment_detail_lines' => 'shipmentDetailLines',
        'shipment_order_lines' => 'shipmentOrderLines',
        'shipment_package_lines' => 'shipmentPackageLines',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'note' => 'note',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipment_number' => 'setShipmentNumber',
        'shipment_type' => 'setShipmentType',
        'status' => 'setStatus',
        'hold' => 'setHold',
        'operation' => 'setOperation',
        'shipment_date' => 'setShipmentDate',
        'customer' => 'setCustomer',
        'location' => 'setLocation',
        'from_warehouse' => 'setFromWarehouse',
        'to_warehouse' => 'setToWarehouse',
        'currency_id' => 'setCurrencyId',
        'owner' => 'setOwner',
        'shipped_quantity' => 'setShippedQuantity',
        'shipped_weight' => 'setShippedWeight',
        'shipped_volume' => 'setShippedVolume',
        'packages' => 'setPackages',
        'packages_weight' => 'setPackagesWeight',
        'control_quantity' => 'setControlQuantity',
        'delivery_address' => 'setDeliveryAddress',
        'delivery_contact' => 'setDeliveryContact',
        'ship_via' => 'setShipVia',
        'fob_point' => 'setFobPoint',
        'shipping_terms' => 'setShippingTerms',
        'shipping_zone' => 'setShippingZone',
        'residential_delivery' => 'setResidentialDelivery',
        'saturday_delivery' => 'setSaturdayDelivery',
        'use_customer_account' => 'setUseCustomerAccount',
        'insurance' => 'setInsurance',
        'freight_cost' => 'setFreightCost',
        'freight_amt' => 'setFreightAmt',
        'transaction_type' => 'setTransactionType',
        'mode_of_trasport' => 'setModeOfTrasport',
        'container' => 'setContainer',
        'shipment_detail_lines' => 'setShipmentDetailLines',
        'shipment_order_lines' => 'setShipmentOrderLines',
        'shipment_package_lines' => 'setShipmentPackageLines',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'note' => 'setNote',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipment_number' => 'getShipmentNumber',
        'shipment_type' => 'getShipmentType',
        'status' => 'getStatus',
        'hold' => 'getHold',
        'operation' => 'getOperation',
        'shipment_date' => 'getShipmentDate',
        'customer' => 'getCustomer',
        'location' => 'getLocation',
        'from_warehouse' => 'getFromWarehouse',
        'to_warehouse' => 'getToWarehouse',
        'currency_id' => 'getCurrencyId',
        'owner' => 'getOwner',
        'shipped_quantity' => 'getShippedQuantity',
        'shipped_weight' => 'getShippedWeight',
        'shipped_volume' => 'getShippedVolume',
        'packages' => 'getPackages',
        'packages_weight' => 'getPackagesWeight',
        'control_quantity' => 'getControlQuantity',
        'delivery_address' => 'getDeliveryAddress',
        'delivery_contact' => 'getDeliveryContact',
        'ship_via' => 'getShipVia',
        'fob_point' => 'getFobPoint',
        'shipping_terms' => 'getShippingTerms',
        'shipping_zone' => 'getShippingZone',
        'residential_delivery' => 'getResidentialDelivery',
        'saturday_delivery' => 'getSaturdayDelivery',
        'use_customer_account' => 'getUseCustomerAccount',
        'insurance' => 'getInsurance',
        'freight_cost' => 'getFreightCost',
        'freight_amt' => 'getFreightAmt',
        'transaction_type' => 'getTransactionType',
        'mode_of_trasport' => 'getModeOfTrasport',
        'container' => 'getContainer',
        'shipment_detail_lines' => 'getShipmentDetailLines',
        'shipment_order_lines' => 'getShipmentOrderLines',
        'shipment_package_lines' => 'getShipmentPackageLines',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'note' => 'getNote',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SHIPMENT_TYPE_ISSUE = 'Issue';
    const SHIPMENT_TYPE_DROP_SHIP = 'DropShip';
    const SHIPMENT_TYPE_TRANSFER = 'Transfer';
    const STATUS_OPEN = 'Open';
    const STATUS_HOLD = 'Hold';
    const STATUS_COMPLETED = 'Completed';
    const STATUS_CANCELLED = 'Cancelled';
    const STATUS_CONFIRMED = 'Confirmed';
    const STATUS_INVOICED = 'Invoiced';
    const STATUS_RECEIPTED = 'Receipted';
    const STATUS_AUTO_GENERATED = 'AutoGenerated';
    const STATUS_PARTIALLY_INVOICED = 'PartiallyInvoiced';
    const OPERATION_ISSUE = 'Issue';
    const OPERATION_RECEIPT = 'Receipt';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentTypeAllowableValues()
    {
        return [
            self::SHIPMENT_TYPE_ISSUE,
            self::SHIPMENT_TYPE_DROP_SHIP,
            self::SHIPMENT_TYPE_TRANSFER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OPEN,
            self::STATUS_HOLD,
            self::STATUS_COMPLETED,
            self::STATUS_CANCELLED,
            self::STATUS_CONFIRMED,
            self::STATUS_INVOICED,
            self::STATUS_RECEIPTED,
            self::STATUS_AUTO_GENERATED,
            self::STATUS_PARTIALLY_INVOICED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_ISSUE,
            self::OPERATION_RECEIPT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipment_number'] = isset($data['shipment_number']) ? $data['shipment_number'] : null;
        $this->container['shipment_type'] = isset($data['shipment_type']) ? $data['shipment_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['shipment_date'] = isset($data['shipment_date']) ? $data['shipment_date'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['from_warehouse'] = isset($data['from_warehouse']) ? $data['from_warehouse'] : null;
        $this->container['to_warehouse'] = isset($data['to_warehouse']) ? $data['to_warehouse'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['shipped_quantity'] = isset($data['shipped_quantity']) ? $data['shipped_quantity'] : null;
        $this->container['shipped_weight'] = isset($data['shipped_weight']) ? $data['shipped_weight'] : null;
        $this->container['shipped_volume'] = isset($data['shipped_volume']) ? $data['shipped_volume'] : null;
        $this->container['packages'] = isset($data['packages']) ? $data['packages'] : null;
        $this->container['packages_weight'] = isset($data['packages_weight']) ? $data['packages_weight'] : null;
        $this->container['control_quantity'] = isset($data['control_quantity']) ? $data['control_quantity'] : null;
        $this->container['delivery_address'] = isset($data['delivery_address']) ? $data['delivery_address'] : null;
        $this->container['delivery_contact'] = isset($data['delivery_contact']) ? $data['delivery_contact'] : null;
        $this->container['ship_via'] = isset($data['ship_via']) ? $data['ship_via'] : null;
        $this->container['fob_point'] = isset($data['fob_point']) ? $data['fob_point'] : null;
        $this->container['shipping_terms'] = isset($data['shipping_terms']) ? $data['shipping_terms'] : null;
        $this->container['shipping_zone'] = isset($data['shipping_zone']) ? $data['shipping_zone'] : null;
        $this->container['residential_delivery'] = isset($data['residential_delivery']) ? $data['residential_delivery'] : null;
        $this->container['saturday_delivery'] = isset($data['saturday_delivery']) ? $data['saturday_delivery'] : null;
        $this->container['use_customer_account'] = isset($data['use_customer_account']) ? $data['use_customer_account'] : null;
        $this->container['insurance'] = isset($data['insurance']) ? $data['insurance'] : null;
        $this->container['freight_cost'] = isset($data['freight_cost']) ? $data['freight_cost'] : null;
        $this->container['freight_amt'] = isset($data['freight_amt']) ? $data['freight_amt'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['mode_of_trasport'] = isset($data['mode_of_trasport']) ? $data['mode_of_trasport'] : null;
        $this->container['container'] = isset($data['container']) ? $data['container'] : null;
        $this->container['shipment_detail_lines'] = isset($data['shipment_detail_lines']) ? $data['shipment_detail_lines'] : null;
        $this->container['shipment_order_lines'] = isset($data['shipment_order_lines']) ? $data['shipment_order_lines'] : null;
        $this->container['shipment_package_lines'] = isset($data['shipment_package_lines']) ? $data['shipment_package_lines'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!is_null($this->container['shipment_type']) && !in_array($this->container['shipment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shipment_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipment_number
     *
     * @return string
     */
    public function getShipmentNumber()
    {
        return $this->container['shipment_number'];
    }

    /**
     * Sets shipment_number
     *
     * @param string $shipment_number The top part &gt; Shipment no &gt; The unique reference number of the document, which is automatically generated by the system.
     *
     * @return $this
     */
    public function setShipmentNumber($shipment_number)
    {
        $this->container['shipment_number'] = $shipment_number;

        return $this;
    }

    /**
     * Gets shipment_type
     *
     * @return string
     */
    public function getShipmentType()
    {
        return $this->container['shipment_type'];
    }

    /**
     * Sets shipment_type
     *
     * @param string $shipment_type The top part &gt; Type &gt; The type of the shipment document, which can be one of the following options: Shipment, Transfer.
     *
     * @return $this
     */
    public function setShipmentType($shipment_type)
    {
        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!is_null($shipment_type) && !in_array($shipment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shipment_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipment_type'] = $shipment_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The top part &gt; Status &gt; The status of the document.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return bool
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param bool $hold The top part &gt; Hold &gt; This check box indicates (if selected) that the documents cannot be processed further until the check box is cleared.
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation The top part &gt; Operation &gt; The operation to be performed in the Inventory workspace for this shipment: Issue or Receipt.
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($operation) && !in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets shipment_date
     *
     * @return \DateTime
     */
    public function getShipmentDate()
    {
        return $this->container['shipment_date'];
    }

    /**
     * Sets shipment_date
     *
     * @param \DateTime $shipment_date Mandatory field: The top part &gt; Shipment date* &gt; The date when the document has been created.
     *
     * @return $this
     */
    public function setShipmentDate($shipment_date)
    {
        $this->container['shipment_date'] = $shipment_date;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return object
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param object $customer The top part &gt; Customer &gt; The customer to whom the goods specified in the document should be shipped. (This field does not appear for transfers.)
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location Mandatory field: The top part &gt; Location* &gt; The customer location to receive the shipment.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets from_warehouse
     *
     * @return object
     */
    public function getFromWarehouse()
    {
        return $this->container['from_warehouse'];
    }

    /**
     * Sets from_warehouse
     *
     * @param object $from_warehouse Mandatory field: The top part &gt; Warehouse ID* &gt; The warehouse from which the goods should be shipped.
     *
     * @return $this
     */
    public function setFromWarehouse($from_warehouse)
    {
        $this->container['from_warehouse'] = $from_warehouse;

        return $this;
    }

    /**
     * Gets to_warehouse
     *
     * @return object
     */
    public function getToWarehouse()
    {
        return $this->container['to_warehouse'];
    }

    /**
     * Sets to_warehouse
     *
     * @param object $to_warehouse The top part &gt; To warehouse &gt; The warehouse to which the goods should be shipped in case of a transfer.
     *
     * @return $this
     */
    public function setToWarehouse($to_warehouse)
    {
        $this->container['to_warehouse'] = $to_warehouse;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id Delivery settings tab &gt; Freight currency &gt; By default, it is the currency of the sales order, but you can change it if needed.
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return object
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param object $owner The top part &gt; Owner &gt; The user assigned to approve the document.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets shipped_quantity
     *
     * @return double
     */
    public function getShippedQuantity()
    {
        return $this->container['shipped_quantity'];
    }

    /**
     * Sets shipped_quantity
     *
     * @param double $shipped_quantity The top part &gt; Shipped quantity &gt; The quantity of goods shipped.
     *
     * @return $this
     */
    public function setShippedQuantity($shipped_quantity)
    {
        $this->container['shipped_quantity'] = $shipped_quantity;

        return $this;
    }

    /**
     * Gets shipped_weight
     *
     * @return double
     */
    public function getShippedWeight()
    {
        return $this->container['shipped_weight'];
    }

    /**
     * Sets shipped_weight
     *
     * @param double $shipped_weight The top part &gt; Shipped weight &gt; The weight of the goods shipped.
     *
     * @return $this
     */
    public function setShippedWeight($shipped_weight)
    {
        $this->container['shipped_weight'] = $shipped_weight;

        return $this;
    }

    /**
     * Gets shipped_volume
     *
     * @return double
     */
    public function getShippedVolume()
    {
        return $this->container['shipped_volume'];
    }

    /**
     * Sets shipped_volume
     *
     * @param double $shipped_volume The top part &gt; Shipped volume &gt; The total volume of the items in the shipment.
     *
     * @return $this
     */
    public function setShippedVolume($shipped_volume)
    {
        $this->container['shipped_volume'] = $shipped_volume;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return double
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param double $packages The top part &gt; Packages &gt; The number of boxes included in this shipment.
     *
     * @return $this
     */
    public function setPackages($packages)
    {
        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets packages_weight
     *
     * @return double
     */
    public function getPackagesWeight()
    {
        return $this->container['packages_weight'];
    }

    /**
     * Sets packages_weight
     *
     * @param double $packages_weight The top part &gt; Package weight &gt; The total weight of the shipment that includes the weight of boxes (for boxes determined automatically).
     *
     * @return $this
     */
    public function setPackagesWeight($packages_weight)
    {
        $this->container['packages_weight'] = $packages_weight;

        return $this;
    }

    /**
     * Gets control_quantity
     *
     * @return double
     */
    public function getControlQuantity()
    {
        return $this->container['control_quantity'];
    }

    /**
     * Sets control_quantity
     *
     * @param double $control_quantity The top part &gt; Control quantity &gt; The control value, which you manually enter as a value equal to the shipped quantity if the Validate shipment total on confirmation check box has been selected in the Sales orders preferences (SO101000) window.
     *
     * @return $this
     */
    public function setControlQuantity($control_quantity)
    {
        $this->container['control_quantity'] = $control_quantity;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return object
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param object $delivery_address Delivery settings tab &gt; Delivery address section &gt;
     *
     * @return $this
     */
    public function setDeliveryAddress($delivery_address)
    {
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets delivery_contact
     *
     * @return object
     */
    public function getDeliveryContact()
    {
        return $this->container['delivery_contact'];
    }

    /**
     * Sets delivery_contact
     *
     * @param object $delivery_contact Delivery settings tab &gt; Delivery address contact section &gt;
     *
     * @return $this
     */
    public function setDeliveryContact($delivery_contact)
    {
        $this->container['delivery_contact'] = $delivery_contact;

        return $this;
    }

    /**
     * Gets ship_via
     *
     * @return object
     */
    public function getShipVia()
    {
        return $this->container['ship_via'];
    }

    /**
     * Sets ship_via
     *
     * @param object $ship_via Delivery settings tab &gt; Shipping information section &gt; Ship via &gt; The carrier used for shipping the goods.
     *
     * @return $this
     */
    public function setShipVia($ship_via)
    {
        $this->container['ship_via'] = $ship_via;

        return $this;
    }

    /**
     * Gets fob_point
     *
     * @return object
     */
    public function getFobPoint()
    {
        return $this->container['fob_point'];
    }

    /**
     * Sets fob_point
     *
     * @param object $fob_point Delivery settings tab &gt; Shipping information section &gt; FOB point &gt; The point where obligation of goods passes to the customer.
     *
     * @return $this
     */
    public function setFobPoint($fob_point)
    {
        $this->container['fob_point'] = $fob_point;

        return $this;
    }

    /**
     * Gets shipping_terms
     *
     * @return object
     */
    public function getShippingTerms()
    {
        return $this->container['shipping_terms'];
    }

    /**
     * Sets shipping_terms
     *
     * @param object $shipping_terms Delivery settings tab &gt; Shipping information section &gt; Shipping terms &gt; The shipping terms used in relations with the customer.
     *
     * @return $this
     */
    public function setShippingTerms($shipping_terms)
    {
        $this->container['shipping_terms'] = $shipping_terms;

        return $this;
    }

    /**
     * Gets shipping_zone
     *
     * @return object
     */
    public function getShippingZone()
    {
        return $this->container['shipping_zone'];
    }

    /**
     * Sets shipping_zone
     *
     * @param object $shipping_zone Delivery settings tab &gt; Shipping information section &gt; Shipping zone ID &gt; The shipping zone of the customer.
     *
     * @return $this
     */
    public function setShippingZone($shipping_zone)
    {
        $this->container['shipping_zone'] = $shipping_zone;

        return $this;
    }

    /**
     * Gets residential_delivery
     *
     * @return bool
     */
    public function getResidentialDelivery()
    {
        return $this->container['residential_delivery'];
    }

    /**
     * Sets residential_delivery
     *
     * @param bool $residential_delivery Delivery settings tab &gt; Shipping information section &gt; Residential delivery &gt; This check box indicates (if selected) that the shipping address is a residential one.
     *
     * @return $this
     */
    public function setResidentialDelivery($residential_delivery)
    {
        $this->container['residential_delivery'] = $residential_delivery;

        return $this;
    }

    /**
     * Gets saturday_delivery
     *
     * @return bool
     */
    public function getSaturdayDelivery()
    {
        return $this->container['saturday_delivery'];
    }

    /**
     * Sets saturday_delivery
     *
     * @param bool $saturday_delivery Delivery settings tab &gt; Shipping information section &gt; Saturday delivery &gt; This check box indicates delivery on saturday.
     *
     * @return $this
     */
    public function setSaturdayDelivery($saturday_delivery)
    {
        $this->container['saturday_delivery'] = $saturday_delivery;

        return $this;
    }

    /**
     * Gets use_customer_account
     *
     * @return bool
     */
    public function getUseCustomerAccount()
    {
        return $this->container['use_customer_account'];
    }

    /**
     * Sets use_customer_account
     *
     * @param bool $use_customer_account use_customer_account
     *
     * @return $this
     */
    public function setUseCustomerAccount($use_customer_account)
    {
        $this->container['use_customer_account'] = $use_customer_account;

        return $this;
    }

    /**
     * Gets insurance
     *
     * @return bool
     */
    public function getInsurance()
    {
        return $this->container['insurance'];
    }

    /**
     * Sets insurance
     *
     * @param bool $insurance Delivery settings tab &gt; Shipping information section &gt; Insurance &gt; This check box indicates (if selected) that insurance is required for the shipment.
     *
     * @return $this
     */
    public function setInsurance($insurance)
    {
        $this->container['insurance'] = $insurance;

        return $this;
    }

    /**
     * Gets freight_cost
     *
     * @return double
     */
    public function getFreightCost()
    {
        return $this->container['freight_cost'];
    }

    /**
     * Sets freight_cost
     *
     * @param double $freight_cost Delivery settings tab &gt; Shipping information section &gt; Freight cost &gt; The freight cost of the shipment.
     *
     * @return $this
     */
    public function setFreightCost($freight_cost)
    {
        $this->container['freight_cost'] = $freight_cost;

        return $this;
    }

    /**
     * Gets freight_amt
     *
     * @return double
     */
    public function getFreightAmt()
    {
        return $this->container['freight_amt'];
    }

    /**
     * Sets freight_amt
     *
     * @param double $freight_amt Delivery settings tab &gt; Shipping information section &gt; Freight amt. &gt; The amount of freight the customer will be charged for the shipment.
     *
     * @return $this
     */
    public function setFreightAmt($freight_amt)
    {
        $this->container['freight_amt'] = $freight_amt;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return object
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param object $transaction_type Delivery settings tab &gt; Intrastat section &gt; Transaction type &gt; The 1-digit code that describes the nature of the transaction (according to EU regulations for Intrastat reporting).
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets mode_of_trasport
     *
     * @return object
     */
    public function getModeOfTrasport()
    {
        return $this->container['mode_of_trasport'];
    }

    /**
     * Sets mode_of_trasport
     *
     * @param object $mode_of_trasport Delivery settings tab &gt; Intrastat section &gt; Mode of transportation &gt; The method of transportation.
     *
     * @return $this
     */
    public function setModeOfTrasport($mode_of_trasport)
    {
        $this->container['mode_of_trasport'] = $mode_of_trasport;

        return $this;
    }

    /**
     * Gets container
     *
     * @return bool
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param bool $container Delivery settings tab &gt; Intrastat section &gt; Container &gt; This check box indicates (if selected) that the shipment gets marked as shipped in container for Intrastat reporting purposes.
     *
     * @return $this
     */
    public function setContainer($container)
    {
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets shipment_detail_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\ShipmentDetailLineDto[]
     */
    public function getShipmentDetailLines()
    {
        return $this->container['shipment_detail_lines'];
    }

    /**
     * Sets shipment_detail_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\ShipmentDetailLineDto[] $shipment_detail_lines Document details tab &gt;
     *
     * @return $this
     */
    public function setShipmentDetailLines($shipment_detail_lines)
    {
        $this->container['shipment_detail_lines'] = $shipment_detail_lines;

        return $this;
    }

    /**
     * Gets shipment_order_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\ShipmentOrderLineDto[]
     */
    public function getShipmentOrderLines()
    {
        return $this->container['shipment_order_lines'];
    }

    /**
     * Sets shipment_order_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\ShipmentOrderLineDto[] $shipment_order_lines Orders tab &gt;
     *
     * @return $this
     */
    public function setShipmentOrderLines($shipment_order_lines)
    {
        $this->container['shipment_order_lines'] = $shipment_order_lines;

        return $this;
    }

    /**
     * Gets shipment_package_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\PackageDetailLineDto[]
     */
    public function getShipmentPackageLines()
    {
        return $this->container['shipment_package_lines'];
    }

    /**
     * Sets shipment_package_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\PackageDetailLineDto[] $shipment_package_lines Packages tab &gt;
     *
     * @return $this
     */
    public function setShipmentPackageLines($shipment_package_lines)
    {
        $this->container['shipment_package_lines'] = $shipment_package_lines;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time System generated information.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


