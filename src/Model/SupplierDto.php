<?php
/**
 * SupplierDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * SupplierDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a supplier in SupplierController. Used by getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupplierDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SupplierDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'internal_id' => 'int',
        'number' => 'string',
        'name' => 'string',
        'status' => 'string',
        'main_address' => 'object',
        'main_contact' => 'object',
        'account_reference' => 'string',
        'parent_record' => 'object',
        'supplier_class' => 'object',
        'credit_terms' => 'object',
        'document_language' => 'string',
        'currency_id' => 'string',
        'remit_address' => 'object',
        'remit_contact' => 'object',
        'payment_method' => 'object',
        'cash_account' => 'string',
        'charge_bearer' => 'string',
        'account_used_for_payment' => 'string',
        'payment_by' => 'string',
        'payment_lead_time' => 'int',
        'payment_ref_display_mask' => 'string',
        'pay_separately' => 'bool',
        'supplier_address' => 'object',
        'supplier_contact' => 'object',
        'location' => 'object',
        'vat_registration_id' => 'string',
        'corporate_id' => 'string',
        'vat_zone' => 'object',
        'gl_accounts' => 'object',
        'attributes' => '\Ekstralys\VismaNetApi\Model\AttributeIdValueDto[]',
        'last_modified_date_time' => '\DateTime',
        'supplier_payment_method_details' => '\Ekstralys\VismaNetApi\Model\SupplierPaymentMethodDetailDto[]',
        'retainage_apply' => 'bool',
        'retainage_cash_account_id' => 'string',
        'retainage_pct' => 'double',
        'note' => 'string',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'internal_id' => 'int32',
        'number' => null,
        'name' => null,
        'status' => null,
        'main_address' => null,
        'main_contact' => null,
        'account_reference' => null,
        'parent_record' => null,
        'supplier_class' => null,
        'credit_terms' => null,
        'document_language' => null,
        'currency_id' => null,
        'remit_address' => null,
        'remit_contact' => null,
        'payment_method' => null,
        'cash_account' => null,
        'charge_bearer' => null,
        'account_used_for_payment' => null,
        'payment_by' => null,
        'payment_lead_time' => 'int32',
        'payment_ref_display_mask' => null,
        'pay_separately' => null,
        'supplier_address' => null,
        'supplier_contact' => null,
        'location' => null,
        'vat_registration_id' => null,
        'corporate_id' => null,
        'vat_zone' => null,
        'gl_accounts' => null,
        'attributes' => null,
        'last_modified_date_time' => 'date-time',
        'supplier_payment_method_details' => null,
        'retainage_apply' => null,
        'retainage_cash_account_id' => null,
        'retainage_pct' => 'double',
        'note' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'internal_id' => 'internalId',
        'number' => 'number',
        'name' => 'name',
        'status' => 'status',
        'main_address' => 'mainAddress',
        'main_contact' => 'mainContact',
        'account_reference' => 'accountReference',
        'parent_record' => 'parentRecord',
        'supplier_class' => 'supplierClass',
        'credit_terms' => 'creditTerms',
        'document_language' => 'documentLanguage',
        'currency_id' => 'currencyId',
        'remit_address' => 'remitAddress',
        'remit_contact' => 'remitContact',
        'payment_method' => 'paymentMethod',
        'cash_account' => 'cashAccount',
        'charge_bearer' => 'chargeBearer',
        'account_used_for_payment' => 'accountUsedForPayment',
        'payment_by' => 'paymentBy',
        'payment_lead_time' => 'paymentLeadTime',
        'payment_ref_display_mask' => 'paymentRefDisplayMask',
        'pay_separately' => 'paySeparately',
        'supplier_address' => 'supplierAddress',
        'supplier_contact' => 'supplierContact',
        'location' => 'location',
        'vat_registration_id' => 'vatRegistrationId',
        'corporate_id' => 'corporateId',
        'vat_zone' => 'vatZone',
        'gl_accounts' => 'glAccounts',
        'attributes' => 'attributes',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'supplier_payment_method_details' => 'supplierPaymentMethodDetails',
        'retainage_apply' => 'retainageApply',
        'retainage_cash_account_id' => 'retainageCashAccountID',
        'retainage_pct' => 'retainagePct',
        'note' => 'note',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'internal_id' => 'setInternalId',
        'number' => 'setNumber',
        'name' => 'setName',
        'status' => 'setStatus',
        'main_address' => 'setMainAddress',
        'main_contact' => 'setMainContact',
        'account_reference' => 'setAccountReference',
        'parent_record' => 'setParentRecord',
        'supplier_class' => 'setSupplierClass',
        'credit_terms' => 'setCreditTerms',
        'document_language' => 'setDocumentLanguage',
        'currency_id' => 'setCurrencyId',
        'remit_address' => 'setRemitAddress',
        'remit_contact' => 'setRemitContact',
        'payment_method' => 'setPaymentMethod',
        'cash_account' => 'setCashAccount',
        'charge_bearer' => 'setChargeBearer',
        'account_used_for_payment' => 'setAccountUsedForPayment',
        'payment_by' => 'setPaymentBy',
        'payment_lead_time' => 'setPaymentLeadTime',
        'payment_ref_display_mask' => 'setPaymentRefDisplayMask',
        'pay_separately' => 'setPaySeparately',
        'supplier_address' => 'setSupplierAddress',
        'supplier_contact' => 'setSupplierContact',
        'location' => 'setLocation',
        'vat_registration_id' => 'setVatRegistrationId',
        'corporate_id' => 'setCorporateId',
        'vat_zone' => 'setVatZone',
        'gl_accounts' => 'setGlAccounts',
        'attributes' => 'setAttributes',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'supplier_payment_method_details' => 'setSupplierPaymentMethodDetails',
        'retainage_apply' => 'setRetainageApply',
        'retainage_cash_account_id' => 'setRetainageCashAccountId',
        'retainage_pct' => 'setRetainagePct',
        'note' => 'setNote',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'internal_id' => 'getInternalId',
        'number' => 'getNumber',
        'name' => 'getName',
        'status' => 'getStatus',
        'main_address' => 'getMainAddress',
        'main_contact' => 'getMainContact',
        'account_reference' => 'getAccountReference',
        'parent_record' => 'getParentRecord',
        'supplier_class' => 'getSupplierClass',
        'credit_terms' => 'getCreditTerms',
        'document_language' => 'getDocumentLanguage',
        'currency_id' => 'getCurrencyId',
        'remit_address' => 'getRemitAddress',
        'remit_contact' => 'getRemitContact',
        'payment_method' => 'getPaymentMethod',
        'cash_account' => 'getCashAccount',
        'charge_bearer' => 'getChargeBearer',
        'account_used_for_payment' => 'getAccountUsedForPayment',
        'payment_by' => 'getPaymentBy',
        'payment_lead_time' => 'getPaymentLeadTime',
        'payment_ref_display_mask' => 'getPaymentRefDisplayMask',
        'pay_separately' => 'getPaySeparately',
        'supplier_address' => 'getSupplierAddress',
        'supplier_contact' => 'getSupplierContact',
        'location' => 'getLocation',
        'vat_registration_id' => 'getVatRegistrationId',
        'corporate_id' => 'getCorporateId',
        'vat_zone' => 'getVatZone',
        'gl_accounts' => 'getGlAccounts',
        'attributes' => 'getAttributes',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'supplier_payment_method_details' => 'getSupplierPaymentMethodDetails',
        'retainage_apply' => 'getRetainageApply',
        'retainage_cash_account_id' => 'getRetainageCashAccountId',
        'retainage_pct' => 'getRetainagePct',
        'note' => 'getNote',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_ACTIVE = 'Active';
    const STATUS_ON_HOLD = 'OnHold';
    const STATUS_HOLD_PAYMENTS = 'HoldPayments';
    const STATUS_INACTIVE = 'Inactive';
    const STATUS_ONE_TIME = 'OneTime';
    const CHARGE_BEARER_PAYER = 'Payer';
    const CHARGE_BEARER_BENEFICIARY = 'Beneficiary';
    const CHARGE_BEARER_SHARED = 'Shared';
    const CHARGE_BEARER_SERVICE_LEVEL = 'ServiceLevel';
    const ACCOUNT_USED_FOR_PAYMENT_IBAN = 'IBAN';
    const ACCOUNT_USED_FOR_PAYMENT_BBAN = 'BBAN';
    const ACCOUNT_USED_FOR_PAYMENT_BANKGIRO = 'BANKGIRO';
    const ACCOUNT_USED_FOR_PAYMENT_PLUSGIRO = 'PLUSGIRO';
    const PAYMENT_BY_DUE_DATE = 'DueDate';
    const PAYMENT_BY_DISCOUNT_DATE = 'DiscountDate';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_ON_HOLD,
            self::STATUS_HOLD_PAYMENTS,
            self::STATUS_INACTIVE,
            self::STATUS_ONE_TIME,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChargeBearerAllowableValues()
    {
        return [
            self::CHARGE_BEARER_PAYER,
            self::CHARGE_BEARER_BENEFICIARY,
            self::CHARGE_BEARER_SHARED,
            self::CHARGE_BEARER_SERVICE_LEVEL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountUsedForPaymentAllowableValues()
    {
        return [
            self::ACCOUNT_USED_FOR_PAYMENT_IBAN,
            self::ACCOUNT_USED_FOR_PAYMENT_BBAN,
            self::ACCOUNT_USED_FOR_PAYMENT_BANKGIRO,
            self::ACCOUNT_USED_FOR_PAYMENT_PLUSGIRO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentByAllowableValues()
    {
        return [
            self::PAYMENT_BY_DUE_DATE,
            self::PAYMENT_BY_DISCOUNT_DATE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['main_address'] = isset($data['main_address']) ? $data['main_address'] : null;
        $this->container['main_contact'] = isset($data['main_contact']) ? $data['main_contact'] : null;
        $this->container['account_reference'] = isset($data['account_reference']) ? $data['account_reference'] : null;
        $this->container['parent_record'] = isset($data['parent_record']) ? $data['parent_record'] : null;
        $this->container['supplier_class'] = isset($data['supplier_class']) ? $data['supplier_class'] : null;
        $this->container['credit_terms'] = isset($data['credit_terms']) ? $data['credit_terms'] : null;
        $this->container['document_language'] = isset($data['document_language']) ? $data['document_language'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['remit_address'] = isset($data['remit_address']) ? $data['remit_address'] : null;
        $this->container['remit_contact'] = isset($data['remit_contact']) ? $data['remit_contact'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['cash_account'] = isset($data['cash_account']) ? $data['cash_account'] : null;
        $this->container['charge_bearer'] = isset($data['charge_bearer']) ? $data['charge_bearer'] : null;
        $this->container['account_used_for_payment'] = isset($data['account_used_for_payment']) ? $data['account_used_for_payment'] : null;
        $this->container['payment_by'] = isset($data['payment_by']) ? $data['payment_by'] : null;
        $this->container['payment_lead_time'] = isset($data['payment_lead_time']) ? $data['payment_lead_time'] : null;
        $this->container['payment_ref_display_mask'] = isset($data['payment_ref_display_mask']) ? $data['payment_ref_display_mask'] : null;
        $this->container['pay_separately'] = isset($data['pay_separately']) ? $data['pay_separately'] : null;
        $this->container['supplier_address'] = isset($data['supplier_address']) ? $data['supplier_address'] : null;
        $this->container['supplier_contact'] = isset($data['supplier_contact']) ? $data['supplier_contact'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['vat_registration_id'] = isset($data['vat_registration_id']) ? $data['vat_registration_id'] : null;
        $this->container['corporate_id'] = isset($data['corporate_id']) ? $data['corporate_id'] : null;
        $this->container['vat_zone'] = isset($data['vat_zone']) ? $data['vat_zone'] : null;
        $this->container['gl_accounts'] = isset($data['gl_accounts']) ? $data['gl_accounts'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['supplier_payment_method_details'] = isset($data['supplier_payment_method_details']) ? $data['supplier_payment_method_details'] : null;
        $this->container['retainage_apply'] = isset($data['retainage_apply']) ? $data['retainage_apply'] : null;
        $this->container['retainage_cash_account_id'] = isset($data['retainage_cash_account_id']) ? $data['retainage_cash_account_id'] : null;
        $this->container['retainage_pct'] = isset($data['retainage_pct']) ? $data['retainage_pct'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChargeBearerAllowableValues();
        if (!is_null($this->container['charge_bearer']) && !in_array($this->container['charge_bearer'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'charge_bearer', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountUsedForPaymentAllowableValues();
        if (!is_null($this->container['account_used_for_payment']) && !in_array($this->container['account_used_for_payment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'account_used_for_payment', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentByAllowableValues();
        if (!is_null($this->container['payment_by']) && !in_array($this->container['payment_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_by', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets internal_id
     *
     * @return int
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param int $internal_id internal_id
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Mandatory field: The top part &gt; Supplier ID* &gt; The ID of the supplier account.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Mandatory field: The top part &gt; Supplier name* &gt; The name of the supplier to appear in the system, which may be a trade name or a doing-business-as (DBA) name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Mandatory field: The top part &gt; Status* &gt; The status of the supplier account.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets main_address
     *
     * @return object
     */
    public function getMainAddress()
    {
        return $this->container['main_address'];
    }

    /**
     * Sets main_address
     *
     * @param object $main_address General information tab &gt; Main address section &gt;
     *
     * @return $this
     */
    public function setMainAddress($main_address)
    {
        $this->container['main_address'] = $main_address;

        return $this;
    }

    /**
     * Gets main_contact
     *
     * @return object
     */
    public function getMainContact()
    {
        return $this->container['main_contact'];
    }

    /**
     * Sets main_contact
     *
     * @param object $main_contact General information tab &gt; Main contact section &gt;
     *
     * @return $this
     */
    public function setMainContact($main_contact)
    {
        $this->container['main_contact'] = $main_contact;

        return $this;
    }

    /**
     * Gets account_reference
     *
     * @return string
     */
    public function getAccountReference()
    {
        return $this->container['account_reference'];
    }

    /**
     * Sets account_reference
     *
     * @param string $account_reference General information tab &gt; Main contact section &gt; Account ref. &gt; An optional text field that can contain a reference to your company's account number in the supplier's system.
     *
     * @return $this
     */
    public function setAccountReference($account_reference)
    {
        $this->container['account_reference'] = $account_reference;

        return $this;
    }

    /**
     * Gets parent_record
     *
     * @return object
     */
    public function getParentRecord()
    {
        return $this->container['parent_record'];
    }

    /**
     * Sets parent_record
     *
     * @param object $parent_record General information tab &gt; Main contact section &gt; Parent account &gt; The parent supplier's account, which you can select from the list of existing supplier accounts.
     *
     * @return $this
     */
    public function setParentRecord($parent_record)
    {
        $this->container['parent_record'] = $parent_record;

        return $this;
    }

    /**
     * Gets supplier_class
     *
     * @return object
     */
    public function getSupplierClass()
    {
        return $this->container['supplier_class'];
    }

    /**
     * Sets supplier_class
     *
     * @param object $supplier_class Mandatory field: General information tab &gt; Financial settings section &gt; Supplier class* &gt; The class of the supplier.
     *
     * @return $this
     */
    public function setSupplierClass($supplier_class)
    {
        $this->container['supplier_class'] = $supplier_class;

        return $this;
    }

    /**
     * Gets credit_terms
     *
     * @return object
     */
    public function getCreditTerms()
    {
        return $this->container['credit_terms'];
    }

    /**
     * Sets credit_terms
     *
     * @param object $credit_terms General information tab &gt; Financial settings section &gt; Terms &gt; The type of credit terms used in operations with the supplier.
     *
     * @return $this
     */
    public function setCreditTerms($credit_terms)
    {
        $this->container['credit_terms'] = $credit_terms;

        return $this;
    }

    /**
     * Gets document_language
     *
     * @return string
     */
    public function getDocumentLanguage()
    {
        return $this->container['document_language'];
    }

    /**
     * Sets document_language
     *
     * @param string $document_language General information tab &gt; Financial settings section &gt; Document language &gt; The language of the documents to be printed to the suppliers of the class.
     *
     * @return $this
     */
    public function setDocumentLanguage($document_language)
    {
        $this->container['document_language'] = $document_language;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id General information tab &gt; Financial settings section &gt; Currency ID &gt; The currency that is used in operations with the supplier.
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets remit_address
     *
     * @return object
     */
    public function getRemitAddress()
    {
        return $this->container['remit_address'];
    }

    /**
     * Sets remit_address
     *
     * @param object $remit_address Payment settings tab &gt; Remittance address section &gt;
     *
     * @return $this
     */
    public function setRemitAddress($remit_address)
    {
        $this->container['remit_address'] = $remit_address;

        return $this;
    }

    /**
     * Gets remit_contact
     *
     * @return object
     */
    public function getRemitContact()
    {
        return $this->container['remit_contact'];
    }

    /**
     * Sets remit_contact
     *
     * @param object $remit_contact Payment settings tab &gt; Remittance contact section &gt;
     *
     * @return $this
     */
    public function setRemitContact($remit_contact)
    {
        $this->container['remit_contact'] = $remit_contact;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return object
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param object $payment_method Payment settings tab &gt; Payment settings section &gt; Payment method &gt; The default payment method to be used for the supplier.
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets cash_account
     *
     * @return string
     */
    public function getCashAccount()
    {
        return $this->container['cash_account'];
    }

    /**
     * Sets cash_account
     *
     * @param string $cash_account Payment settings tab &gt; Payment settings section &gt; Cash account &gt; The cash account to be used for operations with the supplier. You must select a cash account.
     *
     * @return $this
     */
    public function setCashAccount($cash_account)
    {
        $this->container['cash_account'] = $cash_account;

        return $this;
    }

    /**
     * Gets charge_bearer
     *
     * @return string
     */
    public function getChargeBearer()
    {
        return $this->container['charge_bearer'];
    }

    /**
     * Sets charge_bearer
     *
     * @param string $charge_bearer Payment settings tab &gt; Payment settings section &gt; Charge bearer &gt; The party that will pay possible expenses connected with the payment.
     *
     * @return $this
     */
    public function setChargeBearer($charge_bearer)
    {
        $allowedValues = $this->getChargeBearerAllowableValues();
        if (!is_null($charge_bearer) && !in_array($charge_bearer, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'charge_bearer', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['charge_bearer'] = $charge_bearer;

        return $this;
    }

    /**
     * Gets account_used_for_payment
     *
     * @return string
     */
    public function getAccountUsedForPayment()
    {
        return $this->container['account_used_for_payment'];
    }

    /**
     * Sets account_used_for_payment
     *
     * @param string $account_used_for_payment Payment settings tab &gt; Payment settings section &gt; Account used for payment &gt; The bank account to be used for payments to the supplier.
     *
     * @return $this
     */
    public function setAccountUsedForPayment($account_used_for_payment)
    {
        $allowedValues = $this->getAccountUsedForPaymentAllowableValues();
        if (!is_null($account_used_for_payment) && !in_array($account_used_for_payment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'account_used_for_payment', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_used_for_payment'] = $account_used_for_payment;

        return $this;
    }

    /**
     * Gets payment_by
     *
     * @return string
     */
    public function getPaymentBy()
    {
        return $this->container['payment_by'];
    }

    /**
     * Sets payment_by
     *
     * @param string $payment_by Payment settings tab &gt; Payment settings section &gt; Payment by &gt; An option that defines how to calculate the date when this supplier should be paid.
     *
     * @return $this
     */
    public function setPaymentBy($payment_by)
    {
        $allowedValues = $this->getPaymentByAllowableValues();
        if (!is_null($payment_by) && !in_array($payment_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_by', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_by'] = $payment_by;

        return $this;
    }

    /**
     * Gets payment_lead_time
     *
     * @return int
     */
    public function getPaymentLeadTime()
    {
        return $this->container['payment_lead_time'];
    }

    /**
     * Sets payment_lead_time
     *
     * @param int $payment_lead_time Payment settings tab &gt; Payment settings section &gt; Payment lead time (days) &gt; The number of days required for the payment to be delivered to the supplier's location.
     *
     * @return $this
     */
    public function setPaymentLeadTime($payment_lead_time)
    {
        $this->container['payment_lead_time'] = $payment_lead_time;

        return $this;
    }

    /**
     * Gets payment_ref_display_mask
     *
     * @return string
     */
    public function getPaymentRefDisplayMask()
    {
        return $this->container['payment_ref_display_mask'];
    }

    /**
     * Sets payment_ref_display_mask
     *
     * @param string $payment_ref_display_mask Payment settings tab &gt; Payment settings section &gt; Payment ref. display mask &gt; This is a rule (mask) for how the payment reference number will be displayed.
     *
     * @return $this
     */
    public function setPaymentRefDisplayMask($payment_ref_display_mask)
    {
        $this->container['payment_ref_display_mask'] = $payment_ref_display_mask;

        return $this;
    }

    /**
     * Gets pay_separately
     *
     * @return bool
     */
    public function getPaySeparately()
    {
        return $this->container['pay_separately'];
    }

    /**
     * Sets pay_separately
     *
     * @param bool $pay_separately Payment settings tab &gt; Payment settings section &gt; Pay separately &gt; A check box that indicates (if selected) that each supplier document should be paid by a separate payment.
     *
     * @return $this
     */
    public function setPaySeparately($pay_separately)
    {
        $this->container['pay_separately'] = $pay_separately;

        return $this;
    }

    /**
     * Gets supplier_address
     *
     * @return object
     */
    public function getSupplierAddress()
    {
        return $this->container['supplier_address'];
    }

    /**
     * Sets supplier_address
     *
     * @param object $supplier_address Purchase settings tab &gt; Shipping address section &gt;
     *
     * @return $this
     */
    public function setSupplierAddress($supplier_address)
    {
        $this->container['supplier_address'] = $supplier_address;

        return $this;
    }

    /**
     * Gets supplier_contact
     *
     * @return object
     */
    public function getSupplierContact()
    {
        return $this->container['supplier_contact'];
    }

    /**
     * Sets supplier_contact
     *
     * @param object $supplier_contact Purchase settings tab &gt; Shipping contact information section &gt;
     *
     * @return $this
     */
    public function setSupplierContact($supplier_contact)
    {
        $this->container['supplier_contact'] = $supplier_contact;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location Purchase settings tab &gt; Default location settings section &gt;
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets vat_registration_id
     *
     * @return string
     */
    public function getVatRegistrationId()
    {
        return $this->container['vat_registration_id'];
    }

    /**
     * Sets vat_registration_id
     *
     * @param string $vat_registration_id Purchase settings tab &gt; Default location settings section &gt; VAT registration ID &gt; The supplier's VAT registration ID associated with the location.
     *
     * @return $this
     */
    public function setVatRegistrationId($vat_registration_id)
    {
        $this->container['vat_registration_id'] = $vat_registration_id;

        return $this;
    }

    /**
     * Gets corporate_id
     *
     * @return string
     */
    public function getCorporateId()
    {
        return $this->container['corporate_id'];
    }

    /**
     * Sets corporate_id
     *
     * @param string $corporate_id Purchase settings tab &gt; Default location settings section &gt; National insurance no. &gt; The supplier’s national insurance number associated with the location.
     *
     * @return $this
     */
    public function setCorporateId($corporate_id)
    {
        $this->container['corporate_id'] = $corporate_id;

        return $this;
    }

    /**
     * Gets vat_zone
     *
     * @return object
     */
    public function getVatZone()
    {
        return $this->container['vat_zone'];
    }

    /**
     * Sets vat_zone
     *
     * @param object $vat_zone Purchase settings tab &gt; Default location settings section &gt; VAT zone &gt; The VAT zone of the supplier's default location.
     *
     * @return $this
     */
    public function setVatZone($vat_zone)
    {
        $this->container['vat_zone'] = $vat_zone;

        return $this;
    }

    /**
     * Gets gl_accounts
     *
     * @return object
     */
    public function getGlAccounts()
    {
        return $this->container['gl_accounts'];
    }

    /**
     * Sets gl_accounts
     *
     * @param object $gl_accounts General ledger accounts tab &gt;
     *
     * @return $this
     */
    public function setGlAccounts($gl_accounts)
    {
        $this->container['gl_accounts'] = $gl_accounts;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \Ekstralys\VismaNetApi\Model\AttributeIdValueDto[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \Ekstralys\VismaNetApi\Model\AttributeIdValueDto[] $attributes Attributes tab &gt;
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time System generated information.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets supplier_payment_method_details
     *
     * @return \Ekstralys\VismaNetApi\Model\SupplierPaymentMethodDetailDto[]
     */
    public function getSupplierPaymentMethodDetails()
    {
        return $this->container['supplier_payment_method_details'];
    }

    /**
     * Sets supplier_payment_method_details
     *
     * @param \Ekstralys\VismaNetApi\Model\SupplierPaymentMethodDetailDto[] $supplier_payment_method_details This class represents a Payment Method Detail in SupplierController. Used to get data for SupplierPaymentMethodDetails of a Supplier.
     *
     * @return $this
     */
    public function setSupplierPaymentMethodDetails($supplier_payment_method_details)
    {
        $this->container['supplier_payment_method_details'] = $supplier_payment_method_details;

        return $this;
    }

    /**
     * Gets retainage_apply
     *
     * @return bool
     */
    public function getRetainageApply()
    {
        return $this->container['retainage_apply'];
    }

    /**
     * Sets retainage_apply
     *
     * @param bool $retainage_apply Payment settings tab &gt; Retainage settings section &gt; Apply retainage &gt; A check box that indicates (if selected) that by default, invoices with retainage are created for the supplier in the Purchase invoices window.
     *
     * @return $this
     */
    public function setRetainageApply($retainage_apply)
    {
        $this->container['retainage_apply'] = $retainage_apply;

        return $this;
    }

    /**
     * Gets retainage_cash_account_id
     *
     * @return string
     */
    public function getRetainageCashAccountId()
    {
        return $this->container['retainage_cash_account_id'];
    }

    /**
     * Sets retainage_cash_account_id
     *
     * @param string $retainage_cash_account_id Payment settings tab &gt; Retainage settings section &gt; Retainage cash account &gt; The cash account to be used to record retainages for this supplier.
     *
     * @return $this
     */
    public function setRetainageCashAccountId($retainage_cash_account_id)
    {
        $this->container['retainage_cash_account_id'] = $retainage_cash_account_id;

        return $this;
    }

    /**
     * Gets retainage_pct
     *
     * @return double
     */
    public function getRetainagePct()
    {
        return $this->container['retainage_pct'];
    }

    /**
     * Sets retainage_pct
     *
     * @param double $retainage_pct Payment settings tab &gt; Retainage settings section &gt; Retainage (%) &gt; The default percent to be retained in invoices for the supplier.
     *
     * @return $this
     */
    public function setRetainagePct($retainage_pct)
    {
        $this->container['retainage_pct'] = $retainage_pct;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


