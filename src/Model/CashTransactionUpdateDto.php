<?php
/**
 * CashTransactionUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * CashTransactionUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CashTransactionUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CashTransactionUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reference_number' => 'object',
        'hold' => 'object',
        'tran_date' => 'object',
        'finanacial_period' => 'object',
        'financial_period' => 'object',
        'description' => 'object',
        'cash_account' => 'object',
        'entry_type' => 'object',
        'document_ref' => 'object',
        'control_total' => 'object',
        'vat_amount' => 'object',
        'vat_zone' => 'object',
        'tax_calculation_mode' => 'object',
        'cash_transaction_details' => '\Ekstralys\VismaNetApi\Model\CashTransactionDetailUpdateDto[]',
        'cash_transaction_tax_details' => '\Ekstralys\VismaNetApi\Model\CashTransactionTaxDetailUpdateDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reference_number' => null,
        'hold' => null,
        'tran_date' => null,
        'finanacial_period' => null,
        'financial_period' => null,
        'description' => null,
        'cash_account' => null,
        'entry_type' => null,
        'document_ref' => null,
        'control_total' => null,
        'vat_amount' => null,
        'vat_zone' => null,
        'tax_calculation_mode' => null,
        'cash_transaction_details' => null,
        'cash_transaction_tax_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reference_number' => 'referenceNumber',
        'hold' => 'hold',
        'tran_date' => 'tranDate',
        'finanacial_period' => 'finanacialPeriod',
        'financial_period' => 'financialPeriod',
        'description' => 'description',
        'cash_account' => 'cashAccount',
        'entry_type' => 'entryType',
        'document_ref' => 'documentRef',
        'control_total' => 'controlTotal',
        'vat_amount' => 'vatAmount',
        'vat_zone' => 'vatZone',
        'tax_calculation_mode' => 'taxCalculationMode',
        'cash_transaction_details' => 'cashTransactionDetails',
        'cash_transaction_tax_details' => 'cashTransactionTaxDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reference_number' => 'setReferenceNumber',
        'hold' => 'setHold',
        'tran_date' => 'setTranDate',
        'finanacial_period' => 'setFinanacialPeriod',
        'financial_period' => 'setFinancialPeriod',
        'description' => 'setDescription',
        'cash_account' => 'setCashAccount',
        'entry_type' => 'setEntryType',
        'document_ref' => 'setDocumentRef',
        'control_total' => 'setControlTotal',
        'vat_amount' => 'setVatAmount',
        'vat_zone' => 'setVatZone',
        'tax_calculation_mode' => 'setTaxCalculationMode',
        'cash_transaction_details' => 'setCashTransactionDetails',
        'cash_transaction_tax_details' => 'setCashTransactionTaxDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reference_number' => 'getReferenceNumber',
        'hold' => 'getHold',
        'tran_date' => 'getTranDate',
        'finanacial_period' => 'getFinanacialPeriod',
        'financial_period' => 'getFinancialPeriod',
        'description' => 'getDescription',
        'cash_account' => 'getCashAccount',
        'entry_type' => 'getEntryType',
        'document_ref' => 'getDocumentRef',
        'control_total' => 'getControlTotal',
        'vat_amount' => 'getVatAmount',
        'vat_zone' => 'getVatZone',
        'tax_calculation_mode' => 'getTaxCalculationMode',
        'cash_transaction_details' => 'getCashTransactionDetails',
        'cash_transaction_tax_details' => 'getCashTransactionTaxDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reference_number'] = isset($data['reference_number']) ? $data['reference_number'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['tran_date'] = isset($data['tran_date']) ? $data['tran_date'] : null;
        $this->container['finanacial_period'] = isset($data['finanacial_period']) ? $data['finanacial_period'] : null;
        $this->container['financial_period'] = isset($data['financial_period']) ? $data['financial_period'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['cash_account'] = isset($data['cash_account']) ? $data['cash_account'] : null;
        $this->container['entry_type'] = isset($data['entry_type']) ? $data['entry_type'] : null;
        $this->container['document_ref'] = isset($data['document_ref']) ? $data['document_ref'] : null;
        $this->container['control_total'] = isset($data['control_total']) ? $data['control_total'] : null;
        $this->container['vat_amount'] = isset($data['vat_amount']) ? $data['vat_amount'] : null;
        $this->container['vat_zone'] = isset($data['vat_zone']) ? $data['vat_zone'] : null;
        $this->container['tax_calculation_mode'] = isset($data['tax_calculation_mode']) ? $data['tax_calculation_mode'] : null;
        $this->container['cash_transaction_details'] = isset($data['cash_transaction_details']) ? $data['cash_transaction_details'] : null;
        $this->container['cash_transaction_tax_details'] = isset($data['cash_transaction_tax_details']) ? $data['cash_transaction_tax_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reference_number
     *
     * @return object
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param object $reference_number reference_number
     *
     * @return $this
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return object
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param object $hold hold
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets tran_date
     *
     * @return object
     */
    public function getTranDate()
    {
        return $this->container['tran_date'];
    }

    /**
     * Sets tran_date
     *
     * @param object $tran_date tran_date
     *
     * @return $this
     */
    public function setTranDate($tran_date)
    {
        $this->container['tran_date'] = $tran_date;

        return $this;
    }

    /**
     * Gets finanacial_period
     *
     * @return object
     */
    public function getFinanacialPeriod()
    {
        return $this->container['finanacial_period'];
    }

    /**
     * Sets finanacial_period
     *
     * @param object $finanacial_period The property is now considered obsolete. Use Financial Period instead
     *
     * @return $this
     */
    public function setFinanacialPeriod($finanacial_period)
    {
        $this->container['finanacial_period'] = $finanacial_period;

        return $this;
    }

    /**
     * Gets financial_period
     *
     * @return object
     */
    public function getFinancialPeriod()
    {
        return $this->container['financial_period'];
    }

    /**
     * Sets financial_period
     *
     * @param object $financial_period The financial period to which the transactions recorded in the document should be posted. Use the format YYYYMM.
     *
     * @return $this
     */
    public function setFinancialPeriod($financial_period)
    {
        $this->container['financial_period'] = $financial_period;

        return $this;
    }

    /**
     * Gets description
     *
     * @return object
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param object $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets cash_account
     *
     * @return object
     */
    public function getCashAccount()
    {
        return $this->container['cash_account'];
    }

    /**
     * Sets cash_account
     *
     * @param object $cash_account cash_account
     *
     * @return $this
     */
    public function setCashAccount($cash_account)
    {
        $this->container['cash_account'] = $cash_account;

        return $this;
    }

    /**
     * Gets entry_type
     *
     * @return object
     */
    public function getEntryType()
    {
        return $this->container['entry_type'];
    }

    /**
     * Sets entry_type
     *
     * @param object $entry_type entry_type
     *
     * @return $this
     */
    public function setEntryType($entry_type)
    {
        $this->container['entry_type'] = $entry_type;

        return $this;
    }

    /**
     * Gets document_ref
     *
     * @return object
     */
    public function getDocumentRef()
    {
        return $this->container['document_ref'];
    }

    /**
     * Sets document_ref
     *
     * @param object $document_ref document_ref
     *
     * @return $this
     */
    public function setDocumentRef($document_ref)
    {
        $this->container['document_ref'] = $document_ref;

        return $this;
    }

    /**
     * Gets control_total
     *
     * @return object
     */
    public function getControlTotal()
    {
        return $this->container['control_total'];
    }

    /**
     * Sets control_total
     *
     * @param object $control_total control_total
     *
     * @return $this
     */
    public function setControlTotal($control_total)
    {
        $this->container['control_total'] = $control_total;

        return $this;
    }

    /**
     * Gets vat_amount
     *
     * @return object
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     *
     * @param object $vat_amount vat_amount
     *
     * @return $this
     */
    public function setVatAmount($vat_amount)
    {
        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }

    /**
     * Gets vat_zone
     *
     * @return object
     */
    public function getVatZone()
    {
        return $this->container['vat_zone'];
    }

    /**
     * Sets vat_zone
     *
     * @param object $vat_zone vat_zone
     *
     * @return $this
     */
    public function setVatZone($vat_zone)
    {
        $this->container['vat_zone'] = $vat_zone;

        return $this;
    }

    /**
     * Gets tax_calculation_mode
     *
     * @return object
     */
    public function getTaxCalculationMode()
    {
        return $this->container['tax_calculation_mode'];
    }

    /**
     * Sets tax_calculation_mode
     *
     * @param object $tax_calculation_mode tax_calculation_mode
     *
     * @return $this
     */
    public function setTaxCalculationMode($tax_calculation_mode)
    {
        $this->container['tax_calculation_mode'] = $tax_calculation_mode;

        return $this;
    }

    /**
     * Gets cash_transaction_details
     *
     * @return \Ekstralys\VismaNetApi\Model\CashTransactionDetailUpdateDto[]
     */
    public function getCashTransactionDetails()
    {
        return $this->container['cash_transaction_details'];
    }

    /**
     * Sets cash_transaction_details
     *
     * @param \Ekstralys\VismaNetApi\Model\CashTransactionDetailUpdateDto[] $cash_transaction_details cash_transaction_details
     *
     * @return $this
     */
    public function setCashTransactionDetails($cash_transaction_details)
    {
        $this->container['cash_transaction_details'] = $cash_transaction_details;

        return $this;
    }

    /**
     * Gets cash_transaction_tax_details
     *
     * @return \Ekstralys\VismaNetApi\Model\CashTransactionTaxDetailUpdateDto[]
     */
    public function getCashTransactionTaxDetails()
    {
        return $this->container['cash_transaction_tax_details'];
    }

    /**
     * Sets cash_transaction_tax_details
     *
     * @param \Ekstralys\VismaNetApi\Model\CashTransactionTaxDetailUpdateDto[] $cash_transaction_tax_details cash_transaction_tax_details
     *
     * @return $this
     */
    public function setCashTransactionTaxDetails($cash_transaction_tax_details)
    {
        $this->container['cash_transaction_tax_details'] = $cash_transaction_tax_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


