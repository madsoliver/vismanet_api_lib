<?php
/**
 * FinancialPeriodDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * FinancialPeriodDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a Financial Period in FinancialPeriodController. Used by getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FinancialPeriodDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FinancialPeriodDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'year' => 'int',
        'period' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'description' => 'string',
        'active' => 'bool',
        'closed_in_supplier_ledger' => 'bool',
        'closed_in_customer_ledger' => 'bool',
        'closed_in_inventory_management' => 'bool',
        'closed_in_general_ledger' => 'bool',
        'closed_in_cash_management' => 'bool',
        'closed_in_fixed_assets' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'year' => 'int32',
        'period' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'description' => null,
        'active' => null,
        'closed_in_supplier_ledger' => null,
        'closed_in_customer_ledger' => null,
        'closed_in_inventory_management' => null,
        'closed_in_general_ledger' => null,
        'closed_in_cash_management' => null,
        'closed_in_fixed_assets' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'year' => 'year',
        'period' => 'period',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'description' => 'description',
        'active' => 'active',
        'closed_in_supplier_ledger' => 'closedInSupplierLedger',
        'closed_in_customer_ledger' => 'closedInCustomerLedger',
        'closed_in_inventory_management' => 'closedInInventoryManagement',
        'closed_in_general_ledger' => 'closedInGeneralLedger',
        'closed_in_cash_management' => 'closedInCashManagement',
        'closed_in_fixed_assets' => 'closedInFixedAssets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'year' => 'setYear',
        'period' => 'setPeriod',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'description' => 'setDescription',
        'active' => 'setActive',
        'closed_in_supplier_ledger' => 'setClosedInSupplierLedger',
        'closed_in_customer_ledger' => 'setClosedInCustomerLedger',
        'closed_in_inventory_management' => 'setClosedInInventoryManagement',
        'closed_in_general_ledger' => 'setClosedInGeneralLedger',
        'closed_in_cash_management' => 'setClosedInCashManagement',
        'closed_in_fixed_assets' => 'setClosedInFixedAssets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'year' => 'getYear',
        'period' => 'getPeriod',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'description' => 'getDescription',
        'active' => 'getActive',
        'closed_in_supplier_ledger' => 'getClosedInSupplierLedger',
        'closed_in_customer_ledger' => 'getClosedInCustomerLedger',
        'closed_in_inventory_management' => 'getClosedInInventoryManagement',
        'closed_in_general_ledger' => 'getClosedInGeneralLedger',
        'closed_in_cash_management' => 'getClosedInCashManagement',
        'closed_in_fixed_assets' => 'getClosedInFixedAssets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['closed_in_supplier_ledger'] = isset($data['closed_in_supplier_ledger']) ? $data['closed_in_supplier_ledger'] : null;
        $this->container['closed_in_customer_ledger'] = isset($data['closed_in_customer_ledger']) ? $data['closed_in_customer_ledger'] : null;
        $this->container['closed_in_inventory_management'] = isset($data['closed_in_inventory_management']) ? $data['closed_in_inventory_management'] : null;
        $this->container['closed_in_general_ledger'] = isset($data['closed_in_general_ledger']) ? $data['closed_in_general_ledger'] : null;
        $this->container['closed_in_cash_management'] = isset($data['closed_in_cash_management']) ? $data['closed_in_cash_management'] : null;
        $this->container['closed_in_fixed_assets'] = isset($data['closed_in_fixed_assets']) ? $data['closed_in_fixed_assets'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets year
     *
     * @return int
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int $year Mandatory field: The top part &gt; Financial year* &gt; The financial year.
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string $period The table &gt; Period &gt; The period no and the year.
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date The table &gt; Start date &gt; The date when the financial period starts.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date The table &gt; End date &gt; The date when the financial period ends.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The table &gt; Description &gt; The description of the financial period (such as the name of the month or the number of the quarter).
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active The table &gt; Active &gt; A check box that indicates (if selected) that the period can be used for posting transactions.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets closed_in_supplier_ledger
     *
     * @return bool
     */
    public function getClosedInSupplierLedger()
    {
        return $this->container['closed_in_supplier_ledger'];
    }

    /**
     * Sets closed_in_supplier_ledger
     *
     * @param bool $closed_in_supplier_ledger The table &gt; Closed in Supplier ledger &gt; A read-only check box that indicates (if selected) that the financial period is closed in the Supplier ledger workspace; if this check box is cleared, the period is active in the this workspace.
     *
     * @return $this
     */
    public function setClosedInSupplierLedger($closed_in_supplier_ledger)
    {
        $this->container['closed_in_supplier_ledger'] = $closed_in_supplier_ledger;

        return $this;
    }

    /**
     * Gets closed_in_customer_ledger
     *
     * @return bool
     */
    public function getClosedInCustomerLedger()
    {
        return $this->container['closed_in_customer_ledger'];
    }

    /**
     * Sets closed_in_customer_ledger
     *
     * @param bool $closed_in_customer_ledger The table &gt; Closed in Customer ledger &gt; A read-only check box that indicates (if selected) that the financial period is closed in the Customer ledger workspace; if this check box is cleared, the period is active in this workspace.
     *
     * @return $this
     */
    public function setClosedInCustomerLedger($closed_in_customer_ledger)
    {
        $this->container['closed_in_customer_ledger'] = $closed_in_customer_ledger;

        return $this;
    }

    /**
     * Gets closed_in_inventory_management
     *
     * @return bool
     */
    public function getClosedInInventoryManagement()
    {
        return $this->container['closed_in_inventory_management'];
    }

    /**
     * Sets closed_in_inventory_management
     *
     * @param bool $closed_in_inventory_management The table &gt; Closed in Inventory management &gt; Inventory management A read-only check box that indicates (if selected) that the financial period is closed in the Inventory workspace; if this check box is cleared, the period is active in the workspace.
     *
     * @return $this
     */
    public function setClosedInInventoryManagement($closed_in_inventory_management)
    {
        $this->container['closed_in_inventory_management'] = $closed_in_inventory_management;

        return $this;
    }

    /**
     * Gets closed_in_general_ledger
     *
     * @return bool
     */
    public function getClosedInGeneralLedger()
    {
        return $this->container['closed_in_general_ledger'];
    }

    /**
     * Sets closed_in_general_ledger
     *
     * @param bool $closed_in_general_ledger The table &gt; Closed in General ledger &gt; A read-only check box that indicates (if selected) that the financial period is closed in the General ledger workspace; if this check box is cleared, the period is active in the this workspace.
     *
     * @return $this
     */
    public function setClosedInGeneralLedger($closed_in_general_ledger)
    {
        $this->container['closed_in_general_ledger'] = $closed_in_general_ledger;

        return $this;
    }

    /**
     * Gets closed_in_cash_management
     *
     * @return bool
     */
    public function getClosedInCashManagement()
    {
        return $this->container['closed_in_cash_management'];
    }

    /**
     * Sets closed_in_cash_management
     *
     * @param bool $closed_in_cash_management The table &gt; Closed in Cash management &gt; A read-only check box that indicates (if selected) that the financial period is closed in the Cash management; if this check box is cleared, the period is active in this workspace.
     *
     * @return $this
     */
    public function setClosedInCashManagement($closed_in_cash_management)
    {
        $this->container['closed_in_cash_management'] = $closed_in_cash_management;

        return $this;
    }

    /**
     * Gets closed_in_fixed_assets
     *
     * @return bool
     */
    public function getClosedInFixedAssets()
    {
        return $this->container['closed_in_fixed_assets'];
    }

    /**
     * Sets closed_in_fixed_assets
     *
     * @param bool $closed_in_fixed_assets The table &gt; Closed in Fixed assets &gt; A read-only check box that indicates (if selected) that the financial period is closed in the Fixed assets workspace; if this check box is cleared, the period is active in the this workspace.
     *
     * @return $this
     */
    public function setClosedInFixedAssets($closed_in_fixed_assets)
    {
        $this->container['closed_in_fixed_assets'] = $closed_in_fixed_assets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


