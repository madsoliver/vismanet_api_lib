<?php
/**
 * DtoSegment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * DtoSegment Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DtoSegment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DtoSegment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'segment_id' => 'int',
        'description' => 'string',
        'length' => 'int',
        'public_id' => 'string',
        'time_stamp' => 'string',
        'last_modified' => '\DateTime',
        'validate' => 'bool',
        'segment_values' => '\Ekstralys\VismaNetApi\Model\DtoSegmentValue[]',
        'is_auto_number' => 'bool',
        'consol_num_char' => 'int',
        'consol_order' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'segment_id' => 'int32',
        'description' => null,
        'length' => 'int32',
        'public_id' => 'uuid',
        'time_stamp' => null,
        'last_modified' => 'date-time',
        'validate' => null,
        'segment_values' => null,
        'is_auto_number' => null,
        'consol_num_char' => 'int32',
        'consol_order' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'segment_id' => 'segmentId',
        'description' => 'description',
        'length' => 'length',
        'public_id' => 'publicId',
        'time_stamp' => 'timeStamp',
        'last_modified' => 'lastModified',
        'validate' => 'validate',
        'segment_values' => 'segmentValues',
        'is_auto_number' => 'isAutoNumber',
        'consol_num_char' => 'consolNumChar',
        'consol_order' => 'consolOrder'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'segment_id' => 'setSegmentId',
        'description' => 'setDescription',
        'length' => 'setLength',
        'public_id' => 'setPublicId',
        'time_stamp' => 'setTimeStamp',
        'last_modified' => 'setLastModified',
        'validate' => 'setValidate',
        'segment_values' => 'setSegmentValues',
        'is_auto_number' => 'setIsAutoNumber',
        'consol_num_char' => 'setConsolNumChar',
        'consol_order' => 'setConsolOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'segment_id' => 'getSegmentId',
        'description' => 'getDescription',
        'length' => 'getLength',
        'public_id' => 'getPublicId',
        'time_stamp' => 'getTimeStamp',
        'last_modified' => 'getLastModified',
        'validate' => 'getValidate',
        'segment_values' => 'getSegmentValues',
        'is_auto_number' => 'getIsAutoNumber',
        'consol_num_char' => 'getConsolNumChar',
        'consol_order' => 'getConsolOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['segment_id'] = isset($data['segment_id']) ? $data['segment_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['public_id'] = isset($data['public_id']) ? $data['public_id'] : null;
        $this->container['time_stamp'] = isset($data['time_stamp']) ? $data['time_stamp'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
        $this->container['validate'] = isset($data['validate']) ? $data['validate'] : null;
        $this->container['segment_values'] = isset($data['segment_values']) ? $data['segment_values'] : null;
        $this->container['is_auto_number'] = isset($data['is_auto_number']) ? $data['is_auto_number'] : null;
        $this->container['consol_num_char'] = isset($data['consol_num_char']) ? $data['consol_num_char'] : null;
        $this->container['consol_order'] = isset($data['consol_order']) ? $data['consol_order'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets segment_id
     *
     * @return int
     */
    public function getSegmentId()
    {
        return $this->container['segment_id'];
    }

    /**
     * Sets segment_id
     *
     * @param int $segment_id Segment ID &gt; The system-generated number representing the order of the segment in the segmented key.
     *
     * @return $this
     */
    public function setSegmentId($segment_id)
    {
        $this->container['segment_id'] = $segment_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Mandatory field: Description &gt; The user-defined segment description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets length
     *
     * @return int
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int $length Length &gt; The maximum length of the segment.
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets public_id
     *
     * @return string
     */
    public function getPublicId()
    {
        return $this->container['public_id'];
    }

    /**
     * Sets public_id
     *
     * @param string $public_id public_id
     *
     * @return $this
     */
    public function setPublicId($public_id)
    {
        $this->container['public_id'] = $public_id;

        return $this;
    }

    /**
     * Gets time_stamp
     *
     * @return string
     */
    public function getTimeStamp()
    {
        return $this->container['time_stamp'];
    }

    /**
     * Sets time_stamp
     *
     * @param string $time_stamp time_stamp
     *
     * @return $this
     */
    public function setTimeStamp($time_stamp)
    {
        $this->container['time_stamp'] = $time_stamp;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime $last_modified System generated information.
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets validate
     *
     * @return bool
     */
    public function getValidate()
    {
        return $this->container['validate'];
    }

    /**
     * Sets validate
     *
     * @param bool $validate Validate &gt; A check box that indicates (if selected) that validation of segment values is turned on.
     *
     * @return $this
     */
    public function setValidate($validate)
    {
        $this->container['validate'] = $validate;

        return $this;
    }

    /**
     * Gets segment_values
     *
     * @return \Ekstralys\VismaNetApi\Model\DtoSegmentValue[]
     */
    public function getSegmentValues()
    {
        return $this->container['segment_values'];
    }

    /**
     * Sets segment_values
     *
     * @param \Ekstralys\VismaNetApi\Model\DtoSegmentValue[] $segment_values The table &gt;
     *
     * @return $this
     */
    public function setSegmentValues($segment_values)
    {
        $this->container['segment_values'] = $segment_values;

        return $this;
    }

    /**
     * Gets is_auto_number
     *
     * @return bool
     */
    public function getIsAutoNumber()
    {
        return $this->container['is_auto_number'];
    }

    /**
     * Sets is_auto_number
     *
     * @param bool $is_auto_number Select segment and click View segment &gt; Auto number &gt; A check box that indicates (if selected) that the number series selected in the Number series ID field will be used to generate values for this segment in IDs.
     *
     * @return $this
     */
    public function setIsAutoNumber($is_auto_number)
    {
        $this->container['is_auto_number'] = $is_auto_number;

        return $this;
    }

    /**
     * Gets consol_num_char
     *
     * @return int
     */
    public function getConsolNumChar()
    {
        return $this->container['consol_num_char'];
    }

    /**
     * Sets consol_num_char
     *
     * @param int $consol_num_char Select segment and click View segment &gt; Number of characters &gt; The length (in characters) of the string in the parent's subaccount to which the segment value is mapped; this column is displayed for only the SUBACCOUNT key.
     *
     * @return $this
     */
    public function setConsolNumChar($consol_num_char)
    {
        $this->container['consol_num_char'] = $consol_num_char;

        return $this;
    }

    /**
     * Gets consol_order
     *
     * @return int
     */
    public function getConsolOrder()
    {
        return $this->container['consol_order'];
    }

    /**
     * Sets consol_order
     *
     * @param int $consol_order Select segment and click View segment &gt; Consol. order &gt; The number that represents the order of this string among other strings in the parent company's subaccount; this column is displayed for only the SUBACCOUNT key.
     *
     * @return $this
     */
    public function setConsolOrder($consol_order)
    {
        $this->container['consol_order'] = $consol_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


