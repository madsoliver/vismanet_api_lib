<?php
/**
 * SupplierInvoiceUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * SupplierInvoiceUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupplierInvoiceUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SupplierInvoiceUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'document_type' => 'object',
        'reference_number' => 'object',
        'hold' => 'object',
        'date' => 'object',
        'orig_invoice_date' => 'object',
        'post_period' => 'object',
        'financial_period' => 'object',
        'supplier_reference' => 'object',
        'description' => 'object',
        'supplier_number' => 'object',
        'location_id' => 'object',
        'currency_id' => 'object',
        'payment_ref_no' => 'object',
        'credit_terms_id' => 'object',
        'due_date' => 'object',
        'cash_discount_date' => 'object',
        'note' => 'object',
        'exchange_rate' => 'object',
        'branch_number' => 'object',
        'rounding_diff_in_currency' => 'object',
        'tax_calculation_mode' => 'object',
        'supplier_tax_zone' => 'object',
        'cash_account' => 'object',
        'payment_method' => 'object',
        'pay_date' => 'object',
        'amount' => 'object',
        'vat_amount' => 'object',
        'payment_message' => 'object',
        'apply_retainage' => 'object',
        'tax_detail_lines' => '\Ekstralys\VismaNetApi\Model\TaxDetailUpdateDto[]',
        'invoice_lines' => '\Ekstralys\VismaNetApi\Model\SupplierInvoiceLineUpdateDto[]',
        'approval_details' => 'object',
        'add_po_receipt_lines' => '\Ekstralys\VismaNetApi\Model\AddPOReceiptLineDto[]',
        'add_purchase_orders' => '\Ekstralys\VismaNetApi\Model\AddPurchaseOrderDto[]',
        'pay_selected' => 'object',
        'override_number_series' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'document_type' => null,
        'reference_number' => null,
        'hold' => null,
        'date' => null,
        'orig_invoice_date' => null,
        'post_period' => null,
        'financial_period' => null,
        'supplier_reference' => null,
        'description' => null,
        'supplier_number' => null,
        'location_id' => null,
        'currency_id' => null,
        'payment_ref_no' => null,
        'credit_terms_id' => null,
        'due_date' => null,
        'cash_discount_date' => null,
        'note' => null,
        'exchange_rate' => null,
        'branch_number' => null,
        'rounding_diff_in_currency' => null,
        'tax_calculation_mode' => null,
        'supplier_tax_zone' => null,
        'cash_account' => null,
        'payment_method' => null,
        'pay_date' => null,
        'amount' => null,
        'vat_amount' => null,
        'payment_message' => null,
        'apply_retainage' => null,
        'tax_detail_lines' => null,
        'invoice_lines' => null,
        'approval_details' => null,
        'add_po_receipt_lines' => null,
        'add_purchase_orders' => null,
        'pay_selected' => null,
        'override_number_series' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_type' => 'documentType',
        'reference_number' => 'referenceNumber',
        'hold' => 'hold',
        'date' => 'date',
        'orig_invoice_date' => 'origInvoiceDate',
        'post_period' => 'postPeriod',
        'financial_period' => 'financialPeriod',
        'supplier_reference' => 'supplierReference',
        'description' => 'description',
        'supplier_number' => 'supplierNumber',
        'location_id' => 'locationId',
        'currency_id' => 'currencyId',
        'payment_ref_no' => 'paymentRefNo',
        'credit_terms_id' => 'creditTermsId',
        'due_date' => 'dueDate',
        'cash_discount_date' => 'cashDiscountDate',
        'note' => 'note',
        'exchange_rate' => 'exchangeRate',
        'branch_number' => 'branchNumber',
        'rounding_diff_in_currency' => 'roundingDiffInCurrency',
        'tax_calculation_mode' => 'taxCalculationMode',
        'supplier_tax_zone' => 'supplierTaxZone',
        'cash_account' => 'cashAccount',
        'payment_method' => 'paymentMethod',
        'pay_date' => 'payDate',
        'amount' => 'amount',
        'vat_amount' => 'vatAmount',
        'payment_message' => 'paymentMessage',
        'apply_retainage' => 'applyRetainage',
        'tax_detail_lines' => 'taxDetailLines',
        'invoice_lines' => 'invoiceLines',
        'approval_details' => 'approvalDetails',
        'add_po_receipt_lines' => 'addPOReceiptLines',
        'add_purchase_orders' => 'addPurchaseOrders',
        'pay_selected' => 'paySelected',
        'override_number_series' => 'overrideNumberSeries'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_type' => 'setDocumentType',
        'reference_number' => 'setReferenceNumber',
        'hold' => 'setHold',
        'date' => 'setDate',
        'orig_invoice_date' => 'setOrigInvoiceDate',
        'post_period' => 'setPostPeriod',
        'financial_period' => 'setFinancialPeriod',
        'supplier_reference' => 'setSupplierReference',
        'description' => 'setDescription',
        'supplier_number' => 'setSupplierNumber',
        'location_id' => 'setLocationId',
        'currency_id' => 'setCurrencyId',
        'payment_ref_no' => 'setPaymentRefNo',
        'credit_terms_id' => 'setCreditTermsId',
        'due_date' => 'setDueDate',
        'cash_discount_date' => 'setCashDiscountDate',
        'note' => 'setNote',
        'exchange_rate' => 'setExchangeRate',
        'branch_number' => 'setBranchNumber',
        'rounding_diff_in_currency' => 'setRoundingDiffInCurrency',
        'tax_calculation_mode' => 'setTaxCalculationMode',
        'supplier_tax_zone' => 'setSupplierTaxZone',
        'cash_account' => 'setCashAccount',
        'payment_method' => 'setPaymentMethod',
        'pay_date' => 'setPayDate',
        'amount' => 'setAmount',
        'vat_amount' => 'setVatAmount',
        'payment_message' => 'setPaymentMessage',
        'apply_retainage' => 'setApplyRetainage',
        'tax_detail_lines' => 'setTaxDetailLines',
        'invoice_lines' => 'setInvoiceLines',
        'approval_details' => 'setApprovalDetails',
        'add_po_receipt_lines' => 'setAddPoReceiptLines',
        'add_purchase_orders' => 'setAddPurchaseOrders',
        'pay_selected' => 'setPaySelected',
        'override_number_series' => 'setOverrideNumberSeries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_type' => 'getDocumentType',
        'reference_number' => 'getReferenceNumber',
        'hold' => 'getHold',
        'date' => 'getDate',
        'orig_invoice_date' => 'getOrigInvoiceDate',
        'post_period' => 'getPostPeriod',
        'financial_period' => 'getFinancialPeriod',
        'supplier_reference' => 'getSupplierReference',
        'description' => 'getDescription',
        'supplier_number' => 'getSupplierNumber',
        'location_id' => 'getLocationId',
        'currency_id' => 'getCurrencyId',
        'payment_ref_no' => 'getPaymentRefNo',
        'credit_terms_id' => 'getCreditTermsId',
        'due_date' => 'getDueDate',
        'cash_discount_date' => 'getCashDiscountDate',
        'note' => 'getNote',
        'exchange_rate' => 'getExchangeRate',
        'branch_number' => 'getBranchNumber',
        'rounding_diff_in_currency' => 'getRoundingDiffInCurrency',
        'tax_calculation_mode' => 'getTaxCalculationMode',
        'supplier_tax_zone' => 'getSupplierTaxZone',
        'cash_account' => 'getCashAccount',
        'payment_method' => 'getPaymentMethod',
        'pay_date' => 'getPayDate',
        'amount' => 'getAmount',
        'vat_amount' => 'getVatAmount',
        'payment_message' => 'getPaymentMessage',
        'apply_retainage' => 'getApplyRetainage',
        'tax_detail_lines' => 'getTaxDetailLines',
        'invoice_lines' => 'getInvoiceLines',
        'approval_details' => 'getApprovalDetails',
        'add_po_receipt_lines' => 'getAddPoReceiptLines',
        'add_purchase_orders' => 'getAddPurchaseOrders',
        'pay_selected' => 'getPaySelected',
        'override_number_series' => 'getOverrideNumberSeries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['reference_number'] = isset($data['reference_number']) ? $data['reference_number'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['orig_invoice_date'] = isset($data['orig_invoice_date']) ? $data['orig_invoice_date'] : null;
        $this->container['post_period'] = isset($data['post_period']) ? $data['post_period'] : null;
        $this->container['financial_period'] = isset($data['financial_period']) ? $data['financial_period'] : null;
        $this->container['supplier_reference'] = isset($data['supplier_reference']) ? $data['supplier_reference'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['supplier_number'] = isset($data['supplier_number']) ? $data['supplier_number'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['payment_ref_no'] = isset($data['payment_ref_no']) ? $data['payment_ref_no'] : null;
        $this->container['credit_terms_id'] = isset($data['credit_terms_id']) ? $data['credit_terms_id'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['cash_discount_date'] = isset($data['cash_discount_date']) ? $data['cash_discount_date'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['branch_number'] = isset($data['branch_number']) ? $data['branch_number'] : null;
        $this->container['rounding_diff_in_currency'] = isset($data['rounding_diff_in_currency']) ? $data['rounding_diff_in_currency'] : null;
        $this->container['tax_calculation_mode'] = isset($data['tax_calculation_mode']) ? $data['tax_calculation_mode'] : null;
        $this->container['supplier_tax_zone'] = isset($data['supplier_tax_zone']) ? $data['supplier_tax_zone'] : null;
        $this->container['cash_account'] = isset($data['cash_account']) ? $data['cash_account'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['pay_date'] = isset($data['pay_date']) ? $data['pay_date'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['vat_amount'] = isset($data['vat_amount']) ? $data['vat_amount'] : null;
        $this->container['payment_message'] = isset($data['payment_message']) ? $data['payment_message'] : null;
        $this->container['apply_retainage'] = isset($data['apply_retainage']) ? $data['apply_retainage'] : null;
        $this->container['tax_detail_lines'] = isset($data['tax_detail_lines']) ? $data['tax_detail_lines'] : null;
        $this->container['invoice_lines'] = isset($data['invoice_lines']) ? $data['invoice_lines'] : null;
        $this->container['approval_details'] = isset($data['approval_details']) ? $data['approval_details'] : null;
        $this->container['add_po_receipt_lines'] = isset($data['add_po_receipt_lines']) ? $data['add_po_receipt_lines'] : null;
        $this->container['add_purchase_orders'] = isset($data['add_purchase_orders']) ? $data['add_purchase_orders'] : null;
        $this->container['pay_selected'] = isset($data['pay_selected']) ? $data['pay_selected'] : null;
        $this->container['override_number_series'] = isset($data['override_number_series']) ? $data['override_number_series'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_type
     *
     * @return object
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param object $document_type document_type
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return object
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param object $reference_number reference_number
     *
     * @return $this
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return object
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param object $hold hold
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets date
     *
     * @return object
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param object $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets orig_invoice_date
     *
     * @return object
     */
    public function getOrigInvoiceDate()
    {
        return $this->container['orig_invoice_date'];
    }

    /**
     * Sets orig_invoice_date
     *
     * @param object $orig_invoice_date orig_invoice_date
     *
     * @return $this
     */
    public function setOrigInvoiceDate($orig_invoice_date)
    {
        $this->container['orig_invoice_date'] = $orig_invoice_date;

        return $this;
    }

    /**
     * Gets post_period
     *
     * @return object
     */
    public function getPostPeriod()
    {
        return $this->container['post_period'];
    }

    /**
     * Sets post_period
     *
     * @param object $post_period The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.
     *
     * @return $this
     */
    public function setPostPeriod($post_period)
    {
        $this->container['post_period'] = $post_period;

        return $this;
    }

    /**
     * Gets financial_period
     *
     * @return object
     */
    public function getFinancialPeriod()
    {
        return $this->container['financial_period'];
    }

    /**
     * Sets financial_period
     *
     * @param object $financial_period The financial period to which the transactions recorded in the document should be posted. Use the format YYYYMM.
     *
     * @return $this
     */
    public function setFinancialPeriod($financial_period)
    {
        $this->container['financial_period'] = $financial_period;

        return $this;
    }

    /**
     * Gets supplier_reference
     *
     * @return object
     */
    public function getSupplierReference()
    {
        return $this->container['supplier_reference'];
    }

    /**
     * Sets supplier_reference
     *
     * @param object $supplier_reference supplier_reference
     *
     * @return $this
     */
    public function setSupplierReference($supplier_reference)
    {
        $this->container['supplier_reference'] = $supplier_reference;

        return $this;
    }

    /**
     * Gets description
     *
     * @return object
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param object $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets supplier_number
     *
     * @return object
     */
    public function getSupplierNumber()
    {
        return $this->container['supplier_number'];
    }

    /**
     * Sets supplier_number
     *
     * @param object $supplier_number supplier_number
     *
     * @return $this
     */
    public function setSupplierNumber($supplier_number)
    {
        $this->container['supplier_number'] = $supplier_number;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return object
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param object $location_id location_id
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return object
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param object $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets payment_ref_no
     *
     * @return object
     */
    public function getPaymentRefNo()
    {
        return $this->container['payment_ref_no'];
    }

    /**
     * Sets payment_ref_no
     *
     * @param object $payment_ref_no payment_ref_no
     *
     * @return $this
     */
    public function setPaymentRefNo($payment_ref_no)
    {
        $this->container['payment_ref_no'] = $payment_ref_no;

        return $this;
    }

    /**
     * Gets credit_terms_id
     *
     * @return object
     */
    public function getCreditTermsId()
    {
        return $this->container['credit_terms_id'];
    }

    /**
     * Sets credit_terms_id
     *
     * @param object $credit_terms_id credit_terms_id
     *
     * @return $this
     */
    public function setCreditTermsId($credit_terms_id)
    {
        $this->container['credit_terms_id'] = $credit_terms_id;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return object
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param object $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets cash_discount_date
     *
     * @return object
     */
    public function getCashDiscountDate()
    {
        return $this->container['cash_discount_date'];
    }

    /**
     * Sets cash_discount_date
     *
     * @param object $cash_discount_date cash_discount_date
     *
     * @return $this
     */
    public function setCashDiscountDate($cash_discount_date)
    {
        $this->container['cash_discount_date'] = $cash_discount_date;

        return $this;
    }

    /**
     * Gets note
     *
     * @return object
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param object $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return object
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param object $exchange_rate exchange_rate
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return object
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param object $branch_number branch_number
     *
     * @return $this
     */
    public function setBranchNumber($branch_number)
    {
        $this->container['branch_number'] = $branch_number;

        return $this;
    }

    /**
     * Gets rounding_diff_in_currency
     *
     * @return object
     */
    public function getRoundingDiffInCurrency()
    {
        return $this->container['rounding_diff_in_currency'];
    }

    /**
     * Sets rounding_diff_in_currency
     *
     * @param object $rounding_diff_in_currency rounding_diff_in_currency
     *
     * @return $this
     */
    public function setRoundingDiffInCurrency($rounding_diff_in_currency)
    {
        $this->container['rounding_diff_in_currency'] = $rounding_diff_in_currency;

        return $this;
    }

    /**
     * Gets tax_calculation_mode
     *
     * @return object
     */
    public function getTaxCalculationMode()
    {
        return $this->container['tax_calculation_mode'];
    }

    /**
     * Sets tax_calculation_mode
     *
     * @param object $tax_calculation_mode tax_calculation_mode
     *
     * @return $this
     */
    public function setTaxCalculationMode($tax_calculation_mode)
    {
        $this->container['tax_calculation_mode'] = $tax_calculation_mode;

        return $this;
    }

    /**
     * Gets supplier_tax_zone
     *
     * @return object
     */
    public function getSupplierTaxZone()
    {
        return $this->container['supplier_tax_zone'];
    }

    /**
     * Sets supplier_tax_zone
     *
     * @param object $supplier_tax_zone supplier_tax_zone
     *
     * @return $this
     */
    public function setSupplierTaxZone($supplier_tax_zone)
    {
        $this->container['supplier_tax_zone'] = $supplier_tax_zone;

        return $this;
    }

    /**
     * Gets cash_account
     *
     * @return object
     */
    public function getCashAccount()
    {
        return $this->container['cash_account'];
    }

    /**
     * Sets cash_account
     *
     * @param object $cash_account cash_account
     *
     * @return $this
     */
    public function setCashAccount($cash_account)
    {
        $this->container['cash_account'] = $cash_account;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return object
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param object $payment_method payment_method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets pay_date
     *
     * @return object
     */
    public function getPayDate()
    {
        return $this->container['pay_date'];
    }

    /**
     * Sets pay_date
     *
     * @param object $pay_date pay_date
     *
     * @return $this
     */
    public function setPayDate($pay_date)
    {
        $this->container['pay_date'] = $pay_date;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return object
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param object $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets vat_amount
     *
     * @return object
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     *
     * @param object $vat_amount vat_amount
     *
     * @return $this
     */
    public function setVatAmount($vat_amount)
    {
        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }

    /**
     * Gets payment_message
     *
     * @return object
     */
    public function getPaymentMessage()
    {
        return $this->container['payment_message'];
    }

    /**
     * Sets payment_message
     *
     * @param object $payment_message payment_message
     *
     * @return $this
     */
    public function setPaymentMessage($payment_message)
    {
        $this->container['payment_message'] = $payment_message;

        return $this;
    }

    /**
     * Gets apply_retainage
     *
     * @return object
     */
    public function getApplyRetainage()
    {
        return $this->container['apply_retainage'];
    }

    /**
     * Sets apply_retainage
     *
     * @param object $apply_retainage apply_retainage
     *
     * @return $this
     */
    public function setApplyRetainage($apply_retainage)
    {
        $this->container['apply_retainage'] = $apply_retainage;

        return $this;
    }

    /**
     * Gets tax_detail_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\TaxDetailUpdateDto[]
     */
    public function getTaxDetailLines()
    {
        return $this->container['tax_detail_lines'];
    }

    /**
     * Sets tax_detail_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\TaxDetailUpdateDto[] $tax_detail_lines tax_detail_lines
     *
     * @return $this
     */
    public function setTaxDetailLines($tax_detail_lines)
    {
        $this->container['tax_detail_lines'] = $tax_detail_lines;

        return $this;
    }

    /**
     * Gets invoice_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\SupplierInvoiceLineUpdateDto[]
     */
    public function getInvoiceLines()
    {
        return $this->container['invoice_lines'];
    }

    /**
     * Sets invoice_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\SupplierInvoiceLineUpdateDto[] $invoice_lines invoice_lines
     *
     * @return $this
     */
    public function setInvoiceLines($invoice_lines)
    {
        $this->container['invoice_lines'] = $invoice_lines;

        return $this;
    }

    /**
     * Gets approval_details
     *
     * @return object
     */
    public function getApprovalDetails()
    {
        return $this->container['approval_details'];
    }

    /**
     * Sets approval_details
     *
     * @param object $approval_details approval_details
     *
     * @return $this
     */
    public function setApprovalDetails($approval_details)
    {
        $this->container['approval_details'] = $approval_details;

        return $this;
    }

    /**
     * Gets add_po_receipt_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\AddPOReceiptLineDto[]
     */
    public function getAddPoReceiptLines()
    {
        return $this->container['add_po_receipt_lines'];
    }

    /**
     * Sets add_po_receipt_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\AddPOReceiptLineDto[] $add_po_receipt_lines add_po_receipt_lines
     *
     * @return $this
     */
    public function setAddPoReceiptLines($add_po_receipt_lines)
    {
        $this->container['add_po_receipt_lines'] = $add_po_receipt_lines;

        return $this;
    }

    /**
     * Gets add_purchase_orders
     *
     * @return \Ekstralys\VismaNetApi\Model\AddPurchaseOrderDto[]
     */
    public function getAddPurchaseOrders()
    {
        return $this->container['add_purchase_orders'];
    }

    /**
     * Sets add_purchase_orders
     *
     * @param \Ekstralys\VismaNetApi\Model\AddPurchaseOrderDto[] $add_purchase_orders add_purchase_orders
     *
     * @return $this
     */
    public function setAddPurchaseOrders($add_purchase_orders)
    {
        $this->container['add_purchase_orders'] = $add_purchase_orders;

        return $this;
    }

    /**
     * Gets pay_selected
     *
     * @return object
     */
    public function getPaySelected()
    {
        return $this->container['pay_selected'];
    }

    /**
     * Sets pay_selected
     *
     * @param object $pay_selected The Financial details tab &gt; The Default Payment Info section &gt; When set to true indicates that the document is approved for payment.
     *
     * @return $this
     */
    public function setPaySelected($pay_selected)
    {
        $this->container['pay_selected'] = $pay_selected;

        return $this;
    }

    /**
     * Gets override_number_series
     *
     * @return object
     */
    public function getOverrideNumberSeries()
    {
        return $this->container['override_number_series'];
    }

    /**
     * Sets override_number_series
     *
     * @param object $override_number_series override_number_series
     *
     * @return $this
     */
    public function setOverrideNumberSeries($override_number_series)
    {
        $this->container['override_number_series'] = $override_number_series;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


