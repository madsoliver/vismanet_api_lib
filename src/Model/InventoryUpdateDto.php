<?php
/**
 * InventoryUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * InventoryUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inventory_number' => 'object',
        'status' => 'object',
        'type' => 'object',
        'description' => 'object',
        'body' => 'object',
        'item_class' => 'object',
        'posting_class' => 'object',
        'vat_code' => 'object',
        'default_price' => 'object',
        'base_unit' => 'object',
        'sales_unit' => 'object',
        'purchase_unit' => 'object',
        'expense_accrual_account' => 'object',
        'inventory_account' => 'object',
        'expense_account' => 'object',
        'cogs_account' => 'object',
        'expense_non_taxable_account' => 'object',
        'expense_eu_account' => 'object',
        'expense_import_account' => 'object',
        'expense_subaccount' => '\Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]',
        'cogs_subaccount' => '\Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]',
        'sales_account' => 'object',
        'sales_non_taxable_account' => 'object',
        'sales_eu_account' => 'object',
        'sales_export_account' => 'object',
        'sales_subaccount' => '\Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]',
        'attribute_lines' => '\Ekstralys\VismaNetApi\Model\AttributeLineUpdateDto[]',
        'packaging' => 'object',
        'supplier_details' => '\Ekstralys\VismaNetApi\Model\SupplierDetailsDto[]',
        'intrastat' => 'object',
        'default_warehouse' => 'object',
        'default_issue_from' => 'object',
        'default_receipt_to' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inventory_number' => null,
        'status' => null,
        'type' => null,
        'description' => null,
        'body' => null,
        'item_class' => null,
        'posting_class' => null,
        'vat_code' => null,
        'default_price' => null,
        'base_unit' => null,
        'sales_unit' => null,
        'purchase_unit' => null,
        'expense_accrual_account' => null,
        'inventory_account' => null,
        'expense_account' => null,
        'cogs_account' => null,
        'expense_non_taxable_account' => null,
        'expense_eu_account' => null,
        'expense_import_account' => null,
        'expense_subaccount' => null,
        'cogs_subaccount' => null,
        'sales_account' => null,
        'sales_non_taxable_account' => null,
        'sales_eu_account' => null,
        'sales_export_account' => null,
        'sales_subaccount' => null,
        'attribute_lines' => null,
        'packaging' => null,
        'supplier_details' => null,
        'intrastat' => null,
        'default_warehouse' => null,
        'default_issue_from' => null,
        'default_receipt_to' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inventory_number' => 'inventoryNumber',
        'status' => 'status',
        'type' => 'type',
        'description' => 'description',
        'body' => 'body',
        'item_class' => 'itemClass',
        'posting_class' => 'postingClass',
        'vat_code' => 'vatCode',
        'default_price' => 'defaultPrice',
        'base_unit' => 'baseUnit',
        'sales_unit' => 'salesUnit',
        'purchase_unit' => 'purchaseUnit',
        'expense_accrual_account' => 'expenseAccrualAccount',
        'inventory_account' => 'inventoryAccount',
        'expense_account' => 'expenseAccount',
        'cogs_account' => 'cogsAccount',
        'expense_non_taxable_account' => 'expenseNonTaxableAccount',
        'expense_eu_account' => 'expenseEuAccount',
        'expense_import_account' => 'expenseImportAccount',
        'expense_subaccount' => 'expenseSubaccount',
        'cogs_subaccount' => 'cogsSubaccount',
        'sales_account' => 'salesAccount',
        'sales_non_taxable_account' => 'salesNonTaxableAccount',
        'sales_eu_account' => 'salesEuAccount',
        'sales_export_account' => 'salesExportAccount',
        'sales_subaccount' => 'salesSubaccount',
        'attribute_lines' => 'attributeLines',
        'packaging' => 'packaging',
        'supplier_details' => 'supplierDetails',
        'intrastat' => 'intrastat',
        'default_warehouse' => 'defaultWarehouse',
        'default_issue_from' => 'defaultIssueFrom',
        'default_receipt_to' => 'defaultReceiptTo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inventory_number' => 'setInventoryNumber',
        'status' => 'setStatus',
        'type' => 'setType',
        'description' => 'setDescription',
        'body' => 'setBody',
        'item_class' => 'setItemClass',
        'posting_class' => 'setPostingClass',
        'vat_code' => 'setVatCode',
        'default_price' => 'setDefaultPrice',
        'base_unit' => 'setBaseUnit',
        'sales_unit' => 'setSalesUnit',
        'purchase_unit' => 'setPurchaseUnit',
        'expense_accrual_account' => 'setExpenseAccrualAccount',
        'inventory_account' => 'setInventoryAccount',
        'expense_account' => 'setExpenseAccount',
        'cogs_account' => 'setCogsAccount',
        'expense_non_taxable_account' => 'setExpenseNonTaxableAccount',
        'expense_eu_account' => 'setExpenseEuAccount',
        'expense_import_account' => 'setExpenseImportAccount',
        'expense_subaccount' => 'setExpenseSubaccount',
        'cogs_subaccount' => 'setCogsSubaccount',
        'sales_account' => 'setSalesAccount',
        'sales_non_taxable_account' => 'setSalesNonTaxableAccount',
        'sales_eu_account' => 'setSalesEuAccount',
        'sales_export_account' => 'setSalesExportAccount',
        'sales_subaccount' => 'setSalesSubaccount',
        'attribute_lines' => 'setAttributeLines',
        'packaging' => 'setPackaging',
        'supplier_details' => 'setSupplierDetails',
        'intrastat' => 'setIntrastat',
        'default_warehouse' => 'setDefaultWarehouse',
        'default_issue_from' => 'setDefaultIssueFrom',
        'default_receipt_to' => 'setDefaultReceiptTo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inventory_number' => 'getInventoryNumber',
        'status' => 'getStatus',
        'type' => 'getType',
        'description' => 'getDescription',
        'body' => 'getBody',
        'item_class' => 'getItemClass',
        'posting_class' => 'getPostingClass',
        'vat_code' => 'getVatCode',
        'default_price' => 'getDefaultPrice',
        'base_unit' => 'getBaseUnit',
        'sales_unit' => 'getSalesUnit',
        'purchase_unit' => 'getPurchaseUnit',
        'expense_accrual_account' => 'getExpenseAccrualAccount',
        'inventory_account' => 'getInventoryAccount',
        'expense_account' => 'getExpenseAccount',
        'cogs_account' => 'getCogsAccount',
        'expense_non_taxable_account' => 'getExpenseNonTaxableAccount',
        'expense_eu_account' => 'getExpenseEuAccount',
        'expense_import_account' => 'getExpenseImportAccount',
        'expense_subaccount' => 'getExpenseSubaccount',
        'cogs_subaccount' => 'getCogsSubaccount',
        'sales_account' => 'getSalesAccount',
        'sales_non_taxable_account' => 'getSalesNonTaxableAccount',
        'sales_eu_account' => 'getSalesEuAccount',
        'sales_export_account' => 'getSalesExportAccount',
        'sales_subaccount' => 'getSalesSubaccount',
        'attribute_lines' => 'getAttributeLines',
        'packaging' => 'getPackaging',
        'supplier_details' => 'getSupplierDetails',
        'intrastat' => 'getIntrastat',
        'default_warehouse' => 'getDefaultWarehouse',
        'default_issue_from' => 'getDefaultIssueFrom',
        'default_receipt_to' => 'getDefaultReceiptTo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inventory_number'] = isset($data['inventory_number']) ? $data['inventory_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['item_class'] = isset($data['item_class']) ? $data['item_class'] : null;
        $this->container['posting_class'] = isset($data['posting_class']) ? $data['posting_class'] : null;
        $this->container['vat_code'] = isset($data['vat_code']) ? $data['vat_code'] : null;
        $this->container['default_price'] = isset($data['default_price']) ? $data['default_price'] : null;
        $this->container['base_unit'] = isset($data['base_unit']) ? $data['base_unit'] : null;
        $this->container['sales_unit'] = isset($data['sales_unit']) ? $data['sales_unit'] : null;
        $this->container['purchase_unit'] = isset($data['purchase_unit']) ? $data['purchase_unit'] : null;
        $this->container['expense_accrual_account'] = isset($data['expense_accrual_account']) ? $data['expense_accrual_account'] : null;
        $this->container['inventory_account'] = isset($data['inventory_account']) ? $data['inventory_account'] : null;
        $this->container['expense_account'] = isset($data['expense_account']) ? $data['expense_account'] : null;
        $this->container['cogs_account'] = isset($data['cogs_account']) ? $data['cogs_account'] : null;
        $this->container['expense_non_taxable_account'] = isset($data['expense_non_taxable_account']) ? $data['expense_non_taxable_account'] : null;
        $this->container['expense_eu_account'] = isset($data['expense_eu_account']) ? $data['expense_eu_account'] : null;
        $this->container['expense_import_account'] = isset($data['expense_import_account']) ? $data['expense_import_account'] : null;
        $this->container['expense_subaccount'] = isset($data['expense_subaccount']) ? $data['expense_subaccount'] : null;
        $this->container['cogs_subaccount'] = isset($data['cogs_subaccount']) ? $data['cogs_subaccount'] : null;
        $this->container['sales_account'] = isset($data['sales_account']) ? $data['sales_account'] : null;
        $this->container['sales_non_taxable_account'] = isset($data['sales_non_taxable_account']) ? $data['sales_non_taxable_account'] : null;
        $this->container['sales_eu_account'] = isset($data['sales_eu_account']) ? $data['sales_eu_account'] : null;
        $this->container['sales_export_account'] = isset($data['sales_export_account']) ? $data['sales_export_account'] : null;
        $this->container['sales_subaccount'] = isset($data['sales_subaccount']) ? $data['sales_subaccount'] : null;
        $this->container['attribute_lines'] = isset($data['attribute_lines']) ? $data['attribute_lines'] : null;
        $this->container['packaging'] = isset($data['packaging']) ? $data['packaging'] : null;
        $this->container['supplier_details'] = isset($data['supplier_details']) ? $data['supplier_details'] : null;
        $this->container['intrastat'] = isset($data['intrastat']) ? $data['intrastat'] : null;
        $this->container['default_warehouse'] = isset($data['default_warehouse']) ? $data['default_warehouse'] : null;
        $this->container['default_issue_from'] = isset($data['default_issue_from']) ? $data['default_issue_from'] : null;
        $this->container['default_receipt_to'] = isset($data['default_receipt_to']) ? $data['default_receipt_to'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inventory_number
     *
     * @return object
     */
    public function getInventoryNumber()
    {
        return $this->container['inventory_number'];
    }

    /**
     * Sets inventory_number
     *
     * @param object $inventory_number Mandatory for POST, not applicable for PUT. The unique alphanumeric identifier of the  item that is used in UI.
     *
     * @return $this
     */
    public function setInventoryNumber($inventory_number)
    {
        $this->container['inventory_number'] = $inventory_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return object
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param object $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return object
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param object $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return object
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param object $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets body
     *
     * @return object
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param object $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets item_class
     *
     * @return object
     */
    public function getItemClass()
    {
        return $this->container['item_class'];
    }

    /**
     * Sets item_class
     *
     * @param object $item_class Mandatory, the item class to which the item is assigned. Selecting a class provides default settings for the item.
     *
     * @return $this
     */
    public function setItemClass($item_class)
    {
        $this->container['item_class'] = $item_class;

        return $this;
    }

    /**
     * Gets posting_class
     *
     * @return object
     */
    public function getPostingClass()
    {
        return $this->container['posting_class'];
    }

    /**
     * Sets posting_class
     *
     * @param object $posting_class The posting class of the item, which by default is the posting class assigned to the item class.
     *
     * @return $this
     */
    public function setPostingClass($posting_class)
    {
        $this->container['posting_class'] = $posting_class;

        return $this;
    }

    /**
     * Gets vat_code
     *
     * @return object
     */
    public function getVatCode()
    {
        return $this->container['vat_code'];
    }

    /**
     * Sets vat_code
     *
     * @param object $vat_code The vat category of the item, which by default is the vat category associated with the item class.
     *
     * @return $this
     */
    public function setVatCode($vat_code)
    {
        $this->container['vat_code'] = $vat_code;

        return $this;
    }

    /**
     * Gets default_price
     *
     * @return object
     */
    public function getDefaultPrice()
    {
        return $this->container['default_price'];
    }

    /**
     * Sets default_price
     *
     * @param object $default_price The price of the item. This price is used as the default price, if there are no other prices set.
     *
     * @return $this
     */
    public function setDefaultPrice($default_price)
    {
        $this->container['default_price'] = $default_price;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return object
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param object $base_unit base_unit
     *
     * @return $this
     */
    public function setBaseUnit($base_unit)
    {
        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets sales_unit
     *
     * @return object
     */
    public function getSalesUnit()
    {
        return $this->container['sales_unit'];
    }

    /**
     * Sets sales_unit
     *
     * @param object $sales_unit sales_unit
     *
     * @return $this
     */
    public function setSalesUnit($sales_unit)
    {
        $this->container['sales_unit'] = $sales_unit;

        return $this;
    }

    /**
     * Gets purchase_unit
     *
     * @return object
     */
    public function getPurchaseUnit()
    {
        return $this->container['purchase_unit'];
    }

    /**
     * Sets purchase_unit
     *
     * @param object $purchase_unit purchase_unit
     *
     * @return $this
     */
    public function setPurchaseUnit($purchase_unit)
    {
        $this->container['purchase_unit'] = $purchase_unit;

        return $this;
    }

    /**
     * Gets expense_accrual_account
     *
     * @return object
     */
    public function getExpenseAccrualAccount()
    {
        return $this->container['expense_accrual_account'];
    }

    /**
     * Sets expense_accrual_account
     *
     * @param object $expense_accrual_account Only used for Non-stock items
     *
     * @return $this
     */
    public function setExpenseAccrualAccount($expense_accrual_account)
    {
        $this->container['expense_accrual_account'] = $expense_accrual_account;

        return $this;
    }

    /**
     * Gets inventory_account
     *
     * @return object
     */
    public function getInventoryAccount()
    {
        return $this->container['inventory_account'];
    }

    /**
     * Sets inventory_account
     *
     * @param object $inventory_account Only used for Stock items
     *
     * @return $this
     */
    public function setInventoryAccount($inventory_account)
    {
        $this->container['inventory_account'] = $inventory_account;

        return $this;
    }

    /**
     * Gets expense_account
     *
     * @return object
     */
    public function getExpenseAccount()
    {
        return $this->container['expense_account'];
    }

    /**
     * Sets expense_account
     *
     * @param object $expense_account Only used for Non-stock items
     *
     * @return $this
     */
    public function setExpenseAccount($expense_account)
    {
        $this->container['expense_account'] = $expense_account;

        return $this;
    }

    /**
     * Gets cogs_account
     *
     * @return object
     */
    public function getCogsAccount()
    {
        return $this->container['cogs_account'];
    }

    /**
     * Sets cogs_account
     *
     * @param object $cogs_account Only used for Stock items
     *
     * @return $this
     */
    public function setCogsAccount($cogs_account)
    {
        $this->container['cogs_account'] = $cogs_account;

        return $this;
    }

    /**
     * Gets expense_non_taxable_account
     *
     * @return object
     */
    public function getExpenseNonTaxableAccount()
    {
        return $this->container['expense_non_taxable_account'];
    }

    /**
     * Sets expense_non_taxable_account
     *
     * @param object $expense_non_taxable_account expense_non_taxable_account
     *
     * @return $this
     */
    public function setExpenseNonTaxableAccount($expense_non_taxable_account)
    {
        $this->container['expense_non_taxable_account'] = $expense_non_taxable_account;

        return $this;
    }

    /**
     * Gets expense_eu_account
     *
     * @return object
     */
    public function getExpenseEuAccount()
    {
        return $this->container['expense_eu_account'];
    }

    /**
     * Sets expense_eu_account
     *
     * @param object $expense_eu_account expense_eu_account
     *
     * @return $this
     */
    public function setExpenseEuAccount($expense_eu_account)
    {
        $this->container['expense_eu_account'] = $expense_eu_account;

        return $this;
    }

    /**
     * Gets expense_import_account
     *
     * @return object
     */
    public function getExpenseImportAccount()
    {
        return $this->container['expense_import_account'];
    }

    /**
     * Sets expense_import_account
     *
     * @param object $expense_import_account expense_import_account
     *
     * @return $this
     */
    public function setExpenseImportAccount($expense_import_account)
    {
        $this->container['expense_import_account'] = $expense_import_account;

        return $this;
    }

    /**
     * Gets expense_subaccount
     *
     * @return \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]
     */
    public function getExpenseSubaccount()
    {
        return $this->container['expense_subaccount'];
    }

    /**
     * Sets expense_subaccount
     *
     * @param \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[] $expense_subaccount Only used for Non-stock items
     *
     * @return $this
     */
    public function setExpenseSubaccount($expense_subaccount)
    {
        $this->container['expense_subaccount'] = $expense_subaccount;

        return $this;
    }

    /**
     * Gets cogs_subaccount
     *
     * @return \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]
     */
    public function getCogsSubaccount()
    {
        return $this->container['cogs_subaccount'];
    }

    /**
     * Sets cogs_subaccount
     *
     * @param \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[] $cogs_subaccount Only used for Stock items
     *
     * @return $this
     */
    public function setCogsSubaccount($cogs_subaccount)
    {
        $this->container['cogs_subaccount'] = $cogs_subaccount;

        return $this;
    }

    /**
     * Gets sales_account
     *
     * @return object
     */
    public function getSalesAccount()
    {
        return $this->container['sales_account'];
    }

    /**
     * Sets sales_account
     *
     * @param object $sales_account sales_account
     *
     * @return $this
     */
    public function setSalesAccount($sales_account)
    {
        $this->container['sales_account'] = $sales_account;

        return $this;
    }

    /**
     * Gets sales_non_taxable_account
     *
     * @return object
     */
    public function getSalesNonTaxableAccount()
    {
        return $this->container['sales_non_taxable_account'];
    }

    /**
     * Sets sales_non_taxable_account
     *
     * @param object $sales_non_taxable_account sales_non_taxable_account
     *
     * @return $this
     */
    public function setSalesNonTaxableAccount($sales_non_taxable_account)
    {
        $this->container['sales_non_taxable_account'] = $sales_non_taxable_account;

        return $this;
    }

    /**
     * Gets sales_eu_account
     *
     * @return object
     */
    public function getSalesEuAccount()
    {
        return $this->container['sales_eu_account'];
    }

    /**
     * Sets sales_eu_account
     *
     * @param object $sales_eu_account sales_eu_account
     *
     * @return $this
     */
    public function setSalesEuAccount($sales_eu_account)
    {
        $this->container['sales_eu_account'] = $sales_eu_account;

        return $this;
    }

    /**
     * Gets sales_export_account
     *
     * @return object
     */
    public function getSalesExportAccount()
    {
        return $this->container['sales_export_account'];
    }

    /**
     * Sets sales_export_account
     *
     * @param object $sales_export_account sales_export_account
     *
     * @return $this
     */
    public function setSalesExportAccount($sales_export_account)
    {
        $this->container['sales_export_account'] = $sales_export_account;

        return $this;
    }

    /**
     * Gets sales_subaccount
     *
     * @return \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]
     */
    public function getSalesSubaccount()
    {
        return $this->container['sales_subaccount'];
    }

    /**
     * Sets sales_subaccount
     *
     * @param \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[] $sales_subaccount sales_subaccount
     *
     * @return $this
     */
    public function setSalesSubaccount($sales_subaccount)
    {
        $this->container['sales_subaccount'] = $sales_subaccount;

        return $this;
    }

    /**
     * Gets attribute_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\AttributeLineUpdateDto[]
     */
    public function getAttributeLines()
    {
        return $this->container['attribute_lines'];
    }

    /**
     * Sets attribute_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\AttributeLineUpdateDto[] $attribute_lines attribute_lines
     *
     * @return $this
     */
    public function setAttributeLines($attribute_lines)
    {
        $this->container['attribute_lines'] = $attribute_lines;

        return $this;
    }

    /**
     * Gets packaging
     *
     * @return object
     */
    public function getPackaging()
    {
        return $this->container['packaging'];
    }

    /**
     * Sets packaging
     *
     * @param object $packaging packaging
     *
     * @return $this
     */
    public function setPackaging($packaging)
    {
        $this->container['packaging'] = $packaging;

        return $this;
    }

    /**
     * Gets supplier_details
     *
     * @return \Ekstralys\VismaNetApi\Model\SupplierDetailsDto[]
     */
    public function getSupplierDetails()
    {
        return $this->container['supplier_details'];
    }

    /**
     * Sets supplier_details
     *
     * @param \Ekstralys\VismaNetApi\Model\SupplierDetailsDto[] $supplier_details supplier_details
     *
     * @return $this
     */
    public function setSupplierDetails($supplier_details)
    {
        $this->container['supplier_details'] = $supplier_details;

        return $this;
    }

    /**
     * Gets intrastat
     *
     * @return object
     */
    public function getIntrastat()
    {
        return $this->container['intrastat'];
    }

    /**
     * Sets intrastat
     *
     * @param object $intrastat intrastat
     *
     * @return $this
     */
    public function setIntrastat($intrastat)
    {
        $this->container['intrastat'] = $intrastat;

        return $this;
    }

    /**
     * Gets default_warehouse
     *
     * @return object
     */
    public function getDefaultWarehouse()
    {
        return $this->container['default_warehouse'];
    }

    /**
     * Sets default_warehouse
     *
     * @param object $default_warehouse General information tab &gt; Warehouse defaults section &gt; Default warehouse &gt; The default warehouse used to store the stock item with the specified item ID.
     *
     * @return $this
     */
    public function setDefaultWarehouse($default_warehouse)
    {
        $this->container['default_warehouse'] = $default_warehouse;

        return $this;
    }

    /**
     * Gets default_issue_from
     *
     * @return object
     */
    public function getDefaultIssueFrom()
    {
        return $this->container['default_issue_from'];
    }

    /**
     * Sets default_issue_from
     *
     * @param object $default_issue_from General information tab &gt; Warehouse defaults section &gt; Default issue from &gt; The location of the warehouse to be used by default to issue quantities of the selected stock item.
     *
     * @return $this
     */
    public function setDefaultIssueFrom($default_issue_from)
    {
        $this->container['default_issue_from'] = $default_issue_from;

        return $this;
    }

    /**
     * Gets default_receipt_to
     *
     * @return object
     */
    public function getDefaultReceiptTo()
    {
        return $this->container['default_receipt_to'];
    }

    /**
     * Sets default_receipt_to
     *
     * @param object $default_receipt_to General information tab &gt; Warehouse defaults section &gt; Default receipt to &gt; The location of warehouse to be used by default to receive certain quantities of the specified stock item.
     *
     * @return $this
     */
    public function setDefaultReceiptTo($default_receipt_to)
    {
        $this->container['default_receipt_to'] = $default_receipt_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


