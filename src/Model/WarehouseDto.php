<?php
/**
 * WarehouseDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * WarehouseDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a Warehouse in WarehouseController. Used for getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WarehouseDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WarehouseDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'warehouse_id' => 'string',
        'branch' => 'object',
        'replenishment_class' => 'object',
        'active' => 'bool',
        'lock_site_pi_count_entry' => 'bool',
        'description' => 'string',
        'location_entry' => 'string',
        'avg_default_cost' => 'string',
        'fifo_default_cost' => 'string',
        'receipt_location' => 'object',
        'ship_location' => 'object',
        'return_location' => 'object',
        'drop_ship_location' => 'object',
        'contact' => 'object',
        'address' => 'object',
        'locations' => '\Ekstralys\VismaNetApi\Model\WarehouseLocationDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'warehouse_id' => null,
        'branch' => null,
        'replenishment_class' => null,
        'active' => null,
        'lock_site_pi_count_entry' => null,
        'description' => null,
        'location_entry' => null,
        'avg_default_cost' => null,
        'fifo_default_cost' => null,
        'receipt_location' => null,
        'ship_location' => null,
        'return_location' => null,
        'drop_ship_location' => null,
        'contact' => null,
        'address' => null,
        'locations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'warehouse_id' => 'warehouseID',
        'branch' => 'branch',
        'replenishment_class' => 'replenishmentClass',
        'active' => 'active',
        'lock_site_pi_count_entry' => 'lockSitePICountEntry',
        'description' => 'description',
        'location_entry' => 'locationEntry',
        'avg_default_cost' => 'avgDefaultCost',
        'fifo_default_cost' => 'fifoDefaultCost',
        'receipt_location' => 'receiptLocation',
        'ship_location' => 'shipLocation',
        'return_location' => 'returnLocation',
        'drop_ship_location' => 'dropShipLocation',
        'contact' => 'contact',
        'address' => 'address',
        'locations' => 'locations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'warehouse_id' => 'setWarehouseId',
        'branch' => 'setBranch',
        'replenishment_class' => 'setReplenishmentClass',
        'active' => 'setActive',
        'lock_site_pi_count_entry' => 'setLockSitePiCountEntry',
        'description' => 'setDescription',
        'location_entry' => 'setLocationEntry',
        'avg_default_cost' => 'setAvgDefaultCost',
        'fifo_default_cost' => 'setFifoDefaultCost',
        'receipt_location' => 'setReceiptLocation',
        'ship_location' => 'setShipLocation',
        'return_location' => 'setReturnLocation',
        'drop_ship_location' => 'setDropShipLocation',
        'contact' => 'setContact',
        'address' => 'setAddress',
        'locations' => 'setLocations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'warehouse_id' => 'getWarehouseId',
        'branch' => 'getBranch',
        'replenishment_class' => 'getReplenishmentClass',
        'active' => 'getActive',
        'lock_site_pi_count_entry' => 'getLockSitePiCountEntry',
        'description' => 'getDescription',
        'location_entry' => 'getLocationEntry',
        'avg_default_cost' => 'getAvgDefaultCost',
        'fifo_default_cost' => 'getFifoDefaultCost',
        'receipt_location' => 'getReceiptLocation',
        'ship_location' => 'getShipLocation',
        'return_location' => 'getReturnLocation',
        'drop_ship_location' => 'getDropShipLocation',
        'contact' => 'getContact',
        'address' => 'getAddress',
        'locations' => 'getLocations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LOCATION_ENTRY_VALIDATE = 'Validate';
    const LOCATION_ENTRY_WARN = 'Warn';
    const LOCATION_ENTRY_NO_VALIDATE = 'NoValidate';
    const AVG_DEFAULT_COST_AVERAGE_COST = 'AverageCost';
    const AVG_DEFAULT_COST_LAST_COST = 'LastCost';
    const FIFO_DEFAULT_COST_AVERAGE_COST = 'AverageCost';
    const FIFO_DEFAULT_COST_LAST_COST = 'LastCost';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocationEntryAllowableValues()
    {
        return [
            self::LOCATION_ENTRY_VALIDATE,
            self::LOCATION_ENTRY_WARN,
            self::LOCATION_ENTRY_NO_VALIDATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAvgDefaultCostAllowableValues()
    {
        return [
            self::AVG_DEFAULT_COST_AVERAGE_COST,
            self::AVG_DEFAULT_COST_LAST_COST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFifoDefaultCostAllowableValues()
    {
        return [
            self::FIFO_DEFAULT_COST_AVERAGE_COST,
            self::FIFO_DEFAULT_COST_LAST_COST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['replenishment_class'] = isset($data['replenishment_class']) ? $data['replenishment_class'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['lock_site_pi_count_entry'] = isset($data['lock_site_pi_count_entry']) ? $data['lock_site_pi_count_entry'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['location_entry'] = isset($data['location_entry']) ? $data['location_entry'] : null;
        $this->container['avg_default_cost'] = isset($data['avg_default_cost']) ? $data['avg_default_cost'] : null;
        $this->container['fifo_default_cost'] = isset($data['fifo_default_cost']) ? $data['fifo_default_cost'] : null;
        $this->container['receipt_location'] = isset($data['receipt_location']) ? $data['receipt_location'] : null;
        $this->container['ship_location'] = isset($data['ship_location']) ? $data['ship_location'] : null;
        $this->container['return_location'] = isset($data['return_location']) ? $data['return_location'] : null;
        $this->container['drop_ship_location'] = isset($data['drop_ship_location']) ? $data['drop_ship_location'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLocationEntryAllowableValues();
        if (!is_null($this->container['location_entry']) && !in_array($this->container['location_entry'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'location_entry', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAvgDefaultCostAllowableValues();
        if (!is_null($this->container['avg_default_cost']) && !in_array($this->container['avg_default_cost'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'avg_default_cost', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFifoDefaultCostAllowableValues();
        if (!is_null($this->container['fifo_default_cost']) && !in_array($this->container['fifo_default_cost'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fifo_default_cost', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets warehouse_id
     *
     * @return string
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string $warehouse_id Mandatory field: The top part &gt; Warehouse ID* &gt; The unique ID of the warehouse.
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return object
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param object $branch Mandatory field: The top part &gt; Branch* &gt; The branch associated with the company.
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets replenishment_class
     *
     * @return object
     */
    public function getReplenishmentClass()
    {
        return $this->container['replenishment_class'];
    }

    /**
     * Sets replenishment_class
     *
     * @param object $replenishment_class The top part &gt; Replenishment class &gt; The replenishment class associated with this warehouse.
     *
     * @return $this
     */
    public function setReplenishmentClass($replenishment_class)
    {
        $this->container['replenishment_class'] = $replenishment_class;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active The top part &gt; Active &gt; This check box indicates (if selected) that the warehouse is active.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets lock_site_pi_count_entry
     *
     * @return bool
     */
    public function getLockSitePiCountEntry()
    {
        return $this->container['lock_site_pi_count_entry'];
    }

    /**
     * Sets lock_site_pi_count_entry
     *
     * @param bool $lock_site_pi_count_entry The top part &gt; Freeze the inventory when the stocktaking is in data entry state &gt; This check box indicates (if selected) that the inventory in the warehouse will be frozen during the stocktaking and data entry stages of stocktaking.
     *
     * @return $this
     */
    public function setLockSitePiCountEntry($lock_site_pi_count_entry)
    {
        $this->container['lock_site_pi_count_entry'] = $lock_site_pi_count_entry;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The top part &gt; Description &gt; A brief description of the warehouse.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets location_entry
     *
     * @return string
     */
    public function getLocationEntry()
    {
        return $this->container['location_entry'];
    }

    /**
     * Sets location_entry
     *
     * @param string $location_entry The top part &gt; Location entry &gt; An option indicating whether warehouse locations can be added directly on any inventory document or only by using this window.
     *
     * @return $this
     */
    public function setLocationEntry($location_entry)
    {
        $allowedValues = $this->getLocationEntryAllowableValues();
        if (!is_null($location_entry) && !in_array($location_entry, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'location_entry', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['location_entry'] = $location_entry;

        return $this;
    }

    /**
     * Gets avg_default_cost
     *
     * @return string
     */
    public function getAvgDefaultCost()
    {
        return $this->container['avg_default_cost'];
    }

    /**
     * Sets avg_default_cost
     *
     * @param string $avg_default_cost The top part &gt; Avg. default return cost &gt; For items with the Average valuation method, the option that defines which of costs should be used for returns and receipts.
     *
     * @return $this
     */
    public function setAvgDefaultCost($avg_default_cost)
    {
        $allowedValues = $this->getAvgDefaultCostAllowableValues();
        if (!is_null($avg_default_cost) && !in_array($avg_default_cost, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'avg_default_cost', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['avg_default_cost'] = $avg_default_cost;

        return $this;
    }

    /**
     * Gets fifo_default_cost
     *
     * @return string
     */
    public function getFifoDefaultCost()
    {
        return $this->container['fifo_default_cost'];
    }

    /**
     * Sets fifo_default_cost
     *
     * @param string $fifo_default_cost The top part &gt; FIFO default returns cost &gt; For items with the FIFO valuation method, the option that defines which of costs should be used for returns and receipts.
     *
     * @return $this
     */
    public function setFifoDefaultCost($fifo_default_cost)
    {
        $allowedValues = $this->getFifoDefaultCostAllowableValues();
        if (!is_null($fifo_default_cost) && !in_array($fifo_default_cost, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fifo_default_cost', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fifo_default_cost'] = $fifo_default_cost;

        return $this;
    }

    /**
     * Gets receipt_location
     *
     * @return object
     */
    public function getReceiptLocation()
    {
        return $this->container['receipt_location'];
    }

    /**
     * Sets receipt_location
     *
     * @param object $receipt_location Location table tab &gt; Receiving location &gt; The warehouse location to be used to receive goods.
     *
     * @return $this
     */
    public function setReceiptLocation($receipt_location)
    {
        $this->container['receipt_location'] = $receipt_location;

        return $this;
    }

    /**
     * Gets ship_location
     *
     * @return object
     */
    public function getShipLocation()
    {
        return $this->container['ship_location'];
    }

    /**
     * Sets ship_location
     *
     * @param object $ship_location Location table tab &gt; Shipping location &gt; The warehouse location to be used to ship goods.
     *
     * @return $this
     */
    public function setShipLocation($ship_location)
    {
        $this->container['ship_location'] = $ship_location;

        return $this;
    }

    /**
     * Gets return_location
     *
     * @return object
     */
    public function getReturnLocation()
    {
        return $this->container['return_location'];
    }

    /**
     * Sets return_location
     *
     * @param object $return_location Location table tab &gt; RMA location &gt; The RMA warehouse location.
     *
     * @return $this
     */
    public function setReturnLocation($return_location)
    {
        $this->container['return_location'] = $return_location;

        return $this;
    }

    /**
     * Gets drop_ship_location
     *
     * @return object
     */
    public function getDropShipLocation()
    {
        return $this->container['drop_ship_location'];
    }

    /**
     * Sets drop_ship_location
     *
     * @param object $drop_ship_location Location table tab &gt; Drop-ship location &gt; The warehouse location used to account for drop shipments.
     *
     * @return $this
     */
    public function setDropShipLocation($drop_ship_location)
    {
        $this->container['drop_ship_location'] = $drop_ship_location;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return object
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param object $contact Address information tab &gt; Contact section &gt;
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets address
     *
     * @return object
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param object $address Address information tab &gt; Address section &gt;
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \Ekstralys\VismaNetApi\Model\WarehouseLocationDto[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \Ekstralys\VismaNetApi\Model\WarehouseLocationDto[] $locations Location table tab &gt; The location table &gt;
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


