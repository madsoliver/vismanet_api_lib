<?php
/**
 * LocationUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * LocationUpdateDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a Location in LocationController. Used to create and update Location.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LocationUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LocationUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'baccount_id' => 'object',
        'location_id' => 'object',
        'location_name' => 'object',
        'active' => 'object',
        'address_is_same_as_main' => 'object',
        'address' => 'object',
        'contact_is_same_as_main' => 'object',
        'contact' => 'object',
        'vat_registration_id' => 'object',
        'vat_zone' => 'object',
        'edi_code' => 'object',
        'gln' => 'object',
        'corporate_id' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'baccount_id' => null,
        'location_id' => null,
        'location_name' => null,
        'active' => null,
        'address_is_same_as_main' => null,
        'address' => null,
        'contact_is_same_as_main' => null,
        'contact' => null,
        'vat_registration_id' => null,
        'vat_zone' => null,
        'edi_code' => null,
        'gln' => null,
        'corporate_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'baccount_id' => 'baccountId',
        'location_id' => 'locationId',
        'location_name' => 'locationName',
        'active' => 'active',
        'address_is_same_as_main' => 'addressIsSameAsMain',
        'address' => 'address',
        'contact_is_same_as_main' => 'contactIsSameAsMain',
        'contact' => 'contact',
        'vat_registration_id' => 'vatRegistrationId',
        'vat_zone' => 'vatZone',
        'edi_code' => 'ediCode',
        'gln' => 'gln',
        'corporate_id' => 'corporateId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'baccount_id' => 'setBaccountId',
        'location_id' => 'setLocationId',
        'location_name' => 'setLocationName',
        'active' => 'setActive',
        'address_is_same_as_main' => 'setAddressIsSameAsMain',
        'address' => 'setAddress',
        'contact_is_same_as_main' => 'setContactIsSameAsMain',
        'contact' => 'setContact',
        'vat_registration_id' => 'setVatRegistrationId',
        'vat_zone' => 'setVatZone',
        'edi_code' => 'setEdiCode',
        'gln' => 'setGln',
        'corporate_id' => 'setCorporateId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'baccount_id' => 'getBaccountId',
        'location_id' => 'getLocationId',
        'location_name' => 'getLocationName',
        'active' => 'getActive',
        'address_is_same_as_main' => 'getAddressIsSameAsMain',
        'address' => 'getAddress',
        'contact_is_same_as_main' => 'getContactIsSameAsMain',
        'contact' => 'getContact',
        'vat_registration_id' => 'getVatRegistrationId',
        'vat_zone' => 'getVatZone',
        'edi_code' => 'getEdiCode',
        'gln' => 'getGln',
        'corporate_id' => 'getCorporateId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['baccount_id'] = isset($data['baccount_id']) ? $data['baccount_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['address_is_same_as_main'] = isset($data['address_is_same_as_main']) ? $data['address_is_same_as_main'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['contact_is_same_as_main'] = isset($data['contact_is_same_as_main']) ? $data['contact_is_same_as_main'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['vat_registration_id'] = isset($data['vat_registration_id']) ? $data['vat_registration_id'] : null;
        $this->container['vat_zone'] = isset($data['vat_zone']) ? $data['vat_zone'] : null;
        $this->container['edi_code'] = isset($data['edi_code']) ? $data['edi_code'] : null;
        $this->container['gln'] = isset($data['gln']) ? $data['gln'] : null;
        $this->container['corporate_id'] = isset($data['corporate_id']) ? $data['corporate_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets baccount_id
     *
     * @return object
     */
    public function getBaccountId()
    {
        return $this->container['baccount_id'];
    }

    /**
     * Sets baccount_id
     *
     * @param object $baccount_id Mandatory field for creating a new location. Can not be updated after it has been created.
     *
     * @return $this
     */
    public function setBaccountId($baccount_id)
    {
        $this->container['baccount_id'] = $baccount_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return object
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param object $location_id Mandatory field for creating a new location. Can not be updated after it has been created.
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return object
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param object $location_name location_name
     *
     * @return $this
     */
    public function setLocationName($location_name)
    {
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets active
     *
     * @return object
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param object $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets address_is_same_as_main
     *
     * @return object
     */
    public function getAddressIsSameAsMain()
    {
        return $this->container['address_is_same_as_main'];
    }

    /**
     * Sets address_is_same_as_main
     *
     * @param object $address_is_same_as_main address_is_same_as_main
     *
     * @return $this
     */
    public function setAddressIsSameAsMain($address_is_same_as_main)
    {
        $this->container['address_is_same_as_main'] = $address_is_same_as_main;

        return $this;
    }

    /**
     * Gets address
     *
     * @return object
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param object $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets contact_is_same_as_main
     *
     * @return object
     */
    public function getContactIsSameAsMain()
    {
        return $this->container['contact_is_same_as_main'];
    }

    /**
     * Sets contact_is_same_as_main
     *
     * @param object $contact_is_same_as_main contact_is_same_as_main
     *
     * @return $this
     */
    public function setContactIsSameAsMain($contact_is_same_as_main)
    {
        $this->container['contact_is_same_as_main'] = $contact_is_same_as_main;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return object
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param object $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets vat_registration_id
     *
     * @return object
     */
    public function getVatRegistrationId()
    {
        return $this->container['vat_registration_id'];
    }

    /**
     * Sets vat_registration_id
     *
     * @param object $vat_registration_id vat_registration_id
     *
     * @return $this
     */
    public function setVatRegistrationId($vat_registration_id)
    {
        $this->container['vat_registration_id'] = $vat_registration_id;

        return $this;
    }

    /**
     * Gets vat_zone
     *
     * @return object
     */
    public function getVatZone()
    {
        return $this->container['vat_zone'];
    }

    /**
     * Sets vat_zone
     *
     * @param object $vat_zone vat_zone
     *
     * @return $this
     */
    public function setVatZone($vat_zone)
    {
        $this->container['vat_zone'] = $vat_zone;

        return $this;
    }

    /**
     * Gets edi_code
     *
     * @return object
     */
    public function getEdiCode()
    {
        return $this->container['edi_code'];
    }

    /**
     * Sets edi_code
     *
     * @param object $edi_code edi_code
     *
     * @return $this
     */
    public function setEdiCode($edi_code)
    {
        $this->container['edi_code'] = $edi_code;

        return $this;
    }

    /**
     * Gets gln
     *
     * @return object
     */
    public function getGln()
    {
        return $this->container['gln'];
    }

    /**
     * Sets gln
     *
     * @param object $gln gln
     *
     * @return $this
     */
    public function setGln($gln)
    {
        $this->container['gln'] = $gln;

        return $this;
    }

    /**
     * Gets corporate_id
     *
     * @return object
     */
    public function getCorporateId()
    {
        return $this->container['corporate_id'];
    }

    /**
     * Sets corporate_id
     *
     * @param object $corporate_id corporate_id
     *
     * @return $this
     */
    public function setCorporateId($corporate_id)
    {
        $this->container['corporate_id'] = $corporate_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


