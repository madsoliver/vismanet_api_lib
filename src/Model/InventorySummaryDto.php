<?php
/**
 * InventorySummaryDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * InventorySummaryDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a InventorySummary in InventorySummaryController. Used by getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventorySummaryDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventorySummaryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inventory' => 'object',
        'warehouse' => 'object',
        'location' => 'object',
        'available' => 'double',
        'available_for_shipment' => 'double',
        'not_available' => 'double',
        'so_booked' => 'double',
        'so_allocated' => 'double',
        'so_shipped' => 'double',
        'so_back_ordered' => 'double',
        'in_issues' => 'double',
        'in_receipts' => 'double',
        'in_transit' => 'double',
        'in_assembly_demand' => 'double',
        'in_assembly_supply' => 'double',
        'purchase_prepared' => 'double',
        'purchase_orders' => 'double',
        'po_receipts' => 'double',
        'expired' => 'double',
        'on_hand' => 'double',
        'so_to_purchase' => 'double',
        'purchase_for_so' => 'double',
        'purchase_for_so_prepared' => 'double',
        'purchase_for_so_receipts' => 'double',
        'so_to_drop_ship' => 'double',
        'drop_ship_for_so' => 'double',
        'drop_ship_for_so_prepared' => 'double',
        'drop_ship_for_so_receipts' => 'double',
        'base_unit' => 'string',
        'estimated_unit_cost' => 'double',
        'estimated_total_cost' => 'double',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inventory' => null,
        'warehouse' => null,
        'location' => null,
        'available' => 'double',
        'available_for_shipment' => 'double',
        'not_available' => 'double',
        'so_booked' => 'double',
        'so_allocated' => 'double',
        'so_shipped' => 'double',
        'so_back_ordered' => 'double',
        'in_issues' => 'double',
        'in_receipts' => 'double',
        'in_transit' => 'double',
        'in_assembly_demand' => 'double',
        'in_assembly_supply' => 'double',
        'purchase_prepared' => 'double',
        'purchase_orders' => 'double',
        'po_receipts' => 'double',
        'expired' => 'double',
        'on_hand' => 'double',
        'so_to_purchase' => 'double',
        'purchase_for_so' => 'double',
        'purchase_for_so_prepared' => 'double',
        'purchase_for_so_receipts' => 'double',
        'so_to_drop_ship' => 'double',
        'drop_ship_for_so' => 'double',
        'drop_ship_for_so_prepared' => 'double',
        'drop_ship_for_so_receipts' => 'double',
        'base_unit' => null,
        'estimated_unit_cost' => 'double',
        'estimated_total_cost' => 'double',
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inventory' => 'inventory',
        'warehouse' => 'warehouse',
        'location' => 'location',
        'available' => 'available',
        'available_for_shipment' => 'availableForShipment',
        'not_available' => 'notAvailable',
        'so_booked' => 'soBooked',
        'so_allocated' => 'soAllocated',
        'so_shipped' => 'soShipped',
        'so_back_ordered' => 'soBackOrdered',
        'in_issues' => 'inIssues',
        'in_receipts' => 'inReceipts',
        'in_transit' => 'inTransit',
        'in_assembly_demand' => 'inAssemblyDemand',
        'in_assembly_supply' => 'inAssemblySupply',
        'purchase_prepared' => 'purchasePrepared',
        'purchase_orders' => 'purchaseOrders',
        'po_receipts' => 'poReceipts',
        'expired' => 'expired',
        'on_hand' => 'onHand',
        'so_to_purchase' => 'soToPurchase',
        'purchase_for_so' => 'purchaseForSO',
        'purchase_for_so_prepared' => 'purchaseForSOPrepared',
        'purchase_for_so_receipts' => 'purchaseForSOReceipts',
        'so_to_drop_ship' => 'soToDropShip',
        'drop_ship_for_so' => 'dropShipForSO',
        'drop_ship_for_so_prepared' => 'dropShipForSOPrepared',
        'drop_ship_for_so_receipts' => 'dropShipForSOReceipts',
        'base_unit' => 'baseUnit',
        'estimated_unit_cost' => 'estimatedUnitCost',
        'estimated_total_cost' => 'estimatedTotalCost',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inventory' => 'setInventory',
        'warehouse' => 'setWarehouse',
        'location' => 'setLocation',
        'available' => 'setAvailable',
        'available_for_shipment' => 'setAvailableForShipment',
        'not_available' => 'setNotAvailable',
        'so_booked' => 'setSoBooked',
        'so_allocated' => 'setSoAllocated',
        'so_shipped' => 'setSoShipped',
        'so_back_ordered' => 'setSoBackOrdered',
        'in_issues' => 'setInIssues',
        'in_receipts' => 'setInReceipts',
        'in_transit' => 'setInTransit',
        'in_assembly_demand' => 'setInAssemblyDemand',
        'in_assembly_supply' => 'setInAssemblySupply',
        'purchase_prepared' => 'setPurchasePrepared',
        'purchase_orders' => 'setPurchaseOrders',
        'po_receipts' => 'setPoReceipts',
        'expired' => 'setExpired',
        'on_hand' => 'setOnHand',
        'so_to_purchase' => 'setSoToPurchase',
        'purchase_for_so' => 'setPurchaseForSo',
        'purchase_for_so_prepared' => 'setPurchaseForSoPrepared',
        'purchase_for_so_receipts' => 'setPurchaseForSoReceipts',
        'so_to_drop_ship' => 'setSoToDropShip',
        'drop_ship_for_so' => 'setDropShipForSo',
        'drop_ship_for_so_prepared' => 'setDropShipForSoPrepared',
        'drop_ship_for_so_receipts' => 'setDropShipForSoReceipts',
        'base_unit' => 'setBaseUnit',
        'estimated_unit_cost' => 'setEstimatedUnitCost',
        'estimated_total_cost' => 'setEstimatedTotalCost',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inventory' => 'getInventory',
        'warehouse' => 'getWarehouse',
        'location' => 'getLocation',
        'available' => 'getAvailable',
        'available_for_shipment' => 'getAvailableForShipment',
        'not_available' => 'getNotAvailable',
        'so_booked' => 'getSoBooked',
        'so_allocated' => 'getSoAllocated',
        'so_shipped' => 'getSoShipped',
        'so_back_ordered' => 'getSoBackOrdered',
        'in_issues' => 'getInIssues',
        'in_receipts' => 'getInReceipts',
        'in_transit' => 'getInTransit',
        'in_assembly_demand' => 'getInAssemblyDemand',
        'in_assembly_supply' => 'getInAssemblySupply',
        'purchase_prepared' => 'getPurchasePrepared',
        'purchase_orders' => 'getPurchaseOrders',
        'po_receipts' => 'getPoReceipts',
        'expired' => 'getExpired',
        'on_hand' => 'getOnHand',
        'so_to_purchase' => 'getSoToPurchase',
        'purchase_for_so' => 'getPurchaseForSo',
        'purchase_for_so_prepared' => 'getPurchaseForSoPrepared',
        'purchase_for_so_receipts' => 'getPurchaseForSoReceipts',
        'so_to_drop_ship' => 'getSoToDropShip',
        'drop_ship_for_so' => 'getDropShipForSo',
        'drop_ship_for_so_prepared' => 'getDropShipForSoPrepared',
        'drop_ship_for_so_receipts' => 'getDropShipForSoReceipts',
        'base_unit' => 'getBaseUnit',
        'estimated_unit_cost' => 'getEstimatedUnitCost',
        'estimated_total_cost' => 'getEstimatedTotalCost',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inventory'] = isset($data['inventory']) ? $data['inventory'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['available'] = isset($data['available']) ? $data['available'] : null;
        $this->container['available_for_shipment'] = isset($data['available_for_shipment']) ? $data['available_for_shipment'] : null;
        $this->container['not_available'] = isset($data['not_available']) ? $data['not_available'] : null;
        $this->container['so_booked'] = isset($data['so_booked']) ? $data['so_booked'] : null;
        $this->container['so_allocated'] = isset($data['so_allocated']) ? $data['so_allocated'] : null;
        $this->container['so_shipped'] = isset($data['so_shipped']) ? $data['so_shipped'] : null;
        $this->container['so_back_ordered'] = isset($data['so_back_ordered']) ? $data['so_back_ordered'] : null;
        $this->container['in_issues'] = isset($data['in_issues']) ? $data['in_issues'] : null;
        $this->container['in_receipts'] = isset($data['in_receipts']) ? $data['in_receipts'] : null;
        $this->container['in_transit'] = isset($data['in_transit']) ? $data['in_transit'] : null;
        $this->container['in_assembly_demand'] = isset($data['in_assembly_demand']) ? $data['in_assembly_demand'] : null;
        $this->container['in_assembly_supply'] = isset($data['in_assembly_supply']) ? $data['in_assembly_supply'] : null;
        $this->container['purchase_prepared'] = isset($data['purchase_prepared']) ? $data['purchase_prepared'] : null;
        $this->container['purchase_orders'] = isset($data['purchase_orders']) ? $data['purchase_orders'] : null;
        $this->container['po_receipts'] = isset($data['po_receipts']) ? $data['po_receipts'] : null;
        $this->container['expired'] = isset($data['expired']) ? $data['expired'] : null;
        $this->container['on_hand'] = isset($data['on_hand']) ? $data['on_hand'] : null;
        $this->container['so_to_purchase'] = isset($data['so_to_purchase']) ? $data['so_to_purchase'] : null;
        $this->container['purchase_for_so'] = isset($data['purchase_for_so']) ? $data['purchase_for_so'] : null;
        $this->container['purchase_for_so_prepared'] = isset($data['purchase_for_so_prepared']) ? $data['purchase_for_so_prepared'] : null;
        $this->container['purchase_for_so_receipts'] = isset($data['purchase_for_so_receipts']) ? $data['purchase_for_so_receipts'] : null;
        $this->container['so_to_drop_ship'] = isset($data['so_to_drop_ship']) ? $data['so_to_drop_ship'] : null;
        $this->container['drop_ship_for_so'] = isset($data['drop_ship_for_so']) ? $data['drop_ship_for_so'] : null;
        $this->container['drop_ship_for_so_prepared'] = isset($data['drop_ship_for_so_prepared']) ? $data['drop_ship_for_so_prepared'] : null;
        $this->container['drop_ship_for_so_receipts'] = isset($data['drop_ship_for_so_receipts']) ? $data['drop_ship_for_so_receipts'] : null;
        $this->container['base_unit'] = isset($data['base_unit']) ? $data['base_unit'] : null;
        $this->container['estimated_unit_cost'] = isset($data['estimated_unit_cost']) ? $data['estimated_unit_cost'] : null;
        $this->container['estimated_total_cost'] = isset($data['estimated_total_cost']) ? $data['estimated_total_cost'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inventory
     *
     * @return object
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param object $inventory Mandatory field: The top part &gt; Item ID* &gt;  The stock item for which you want to view data. Click the magnifier.
     *
     * @return $this
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return object
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param object $warehouse The top part &gt; Warehouse &gt; The warehouse for which you want to view data.
     *
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location The top part &gt; Location &gt; The location for which you want to view data; select a location, or make no selection to view data for all locations.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets available
     *
     * @return double
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param double $available The table &gt; Available &gt; The quantity of the stock items available at the specific warehouse and location.
     *
     * @return $this
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets available_for_shipment
     *
     * @return double
     */
    public function getAvailableForShipment()
    {
        return $this->container['available_for_shipment'];
    }

    /**
     * Sets available_for_shipment
     *
     * @param double $available_for_shipment The table &gt; Available for shipment &gt; The quantity of the stock items available at the specific warehouse and location calculated based on the quantity on hand with the quantities shipped and on shipping deducted.
     *
     * @return $this
     */
    public function setAvailableForShipment($available_for_shipment)
    {
        $this->container['available_for_shipment'] = $available_for_shipment;

        return $this;
    }

    /**
     * Gets not_available
     *
     * @return double
     */
    public function getNotAvailable()
    {
        return $this->container['not_available'];
    }

    /**
     * Sets not_available
     *
     * @param double $not_available The table &gt; Not available &gt; The quantity of the stock items on locations for which the Include in qty. available option is not selected.
     *
     * @return $this
     */
    public function setNotAvailable($not_available)
    {
        $this->container['not_available'] = $not_available;

        return $this;
    }

    /**
     * Gets so_booked
     *
     * @return double
     */
    public function getSoBooked()
    {
        return $this->container['so_booked'];
    }

    /**
     * Sets so_booked
     *
     * @param double $so_booked The table &gt; Sales order booked &gt; The quantity of the stock items booked according to sales orders.
     *
     * @return $this
     */
    public function setSoBooked($so_booked)
    {
        $this->container['so_booked'] = $so_booked;

        return $this;
    }

    /**
     * Gets so_allocated
     *
     * @return double
     */
    public function getSoAllocated()
    {
        return $this->container['so_allocated'];
    }

    /**
     * Sets so_allocated
     *
     * @param double $so_allocated The table &gt; Sales order allocated &gt; The quantity of stock items set aside according to sales orders.
     *
     * @return $this
     */
    public function setSoAllocated($so_allocated)
    {
        $this->container['so_allocated'] = $so_allocated;

        return $this;
    }

    /**
     * Gets so_shipped
     *
     * @return double
     */
    public function getSoShipped()
    {
        return $this->container['so_shipped'];
    }

    /**
     * Sets so_shipped
     *
     * @param double $so_shipped The table &gt; Sales orders shipped &gt; The quantity of the stock items shipped according to the confirmed shipments.
     *
     * @return $this
     */
    public function setSoShipped($so_shipped)
    {
        $this->container['so_shipped'] = $so_shipped;

        return $this;
    }

    /**
     * Gets so_back_ordered
     *
     * @return double
     */
    public function getSoBackOrdered()
    {
        return $this->container['so_back_ordered'];
    }

    /**
     * Sets so_back_ordered
     *
     * @param double $so_back_ordered The table &gt; Back orders &gt; The quantity of the stock items on sales orders with the Back order status.
     *
     * @return $this
     */
    public function setSoBackOrdered($so_back_ordered)
    {
        $this->container['so_back_ordered'] = $so_back_ordered;

        return $this;
    }

    /**
     * Gets in_issues
     *
     * @return double
     */
    public function getInIssues()
    {
        return $this->container['in_issues'];
    }

    /**
     * Sets in_issues
     *
     * @param double $in_issues The table &gt; Inventory issues &gt; The quantity of the stock items included in the inventory issue documents that have not yet been released.
     *
     * @return $this
     */
    public function setInIssues($in_issues)
    {
        $this->container['in_issues'] = $in_issues;

        return $this;
    }

    /**
     * Gets in_receipts
     *
     * @return double
     */
    public function getInReceipts()
    {
        return $this->container['in_receipts'];
    }

    /**
     * Sets in_receipts
     *
     * @param double $in_receipts The table &gt; Invnetory receipts &gt; The quantity of the stock items included in the inventory receipt documents that have not yet been released.
     *
     * @return $this
     */
    public function setInReceipts($in_receipts)
    {
        $this->container['in_receipts'] = $in_receipts;

        return $this;
    }

    /**
     * Gets in_transit
     *
     * @return double
     */
    public function getInTransit()
    {
        return $this->container['in_transit'];
    }

    /**
     * Sets in_transit
     *
     * @param double $in_transit The table &gt; In transit &gt; The quantity of the stock items included as in transit quantities in the inventory transfer documents that have not yet been released.
     *
     * @return $this
     */
    public function setInTransit($in_transit)
    {
        $this->container['in_transit'] = $in_transit;

        return $this;
    }

    /**
     * Gets in_assembly_demand
     *
     * @return double
     */
    public function getInAssemblyDemand()
    {
        return $this->container['in_assembly_demand'];
    }

    /**
     * Sets in_assembly_demand
     *
     * @param double $in_assembly_demand The table &gt; In assembly demand &gt; The quantity of the stock items included in unreleased kit assembly documents as components or kits, depending on whether the item is a kit or a kit component.
     *
     * @return $this
     */
    public function setInAssemblyDemand($in_assembly_demand)
    {
        $this->container['in_assembly_demand'] = $in_assembly_demand;

        return $this;
    }

    /**
     * Gets in_assembly_supply
     *
     * @return double
     */
    public function getInAssemblySupply()
    {
        return $this->container['in_assembly_supply'];
    }

    /**
     * Sets in_assembly_supply
     *
     * @param double $in_assembly_supply The table &gt; In assembly supply &gt; The quantity of the stock items listed on unreleased kit assembly documents.
     *
     * @return $this
     */
    public function setInAssemblySupply($in_assembly_supply)
    {
        $this->container['in_assembly_supply'] = $in_assembly_supply;

        return $this;
    }

    /**
     * Gets purchase_prepared
     *
     * @return double
     */
    public function getPurchasePrepared()
    {
        return $this->container['purchase_prepared'];
    }

    /**
     * Sets purchase_prepared
     *
     * @param double $purchase_prepared The table &gt; Purchase prepared &gt; The quantity of the stock items listed on purchase orders pending approval and on hold.
     *
     * @return $this
     */
    public function setPurchasePrepared($purchase_prepared)
    {
        $this->container['purchase_prepared'] = $purchase_prepared;

        return $this;
    }

    /**
     * Gets purchase_orders
     *
     * @return double
     */
    public function getPurchaseOrders()
    {
        return $this->container['purchase_orders'];
    }

    /**
     * Sets purchase_orders
     *
     * @param double $purchase_orders The table &gt; Purchase orders &gt; The quantity of the stock items included in open purchase orders. To view the purchase orders, open the Purchase orders (PO301000) window.
     *
     * @return $this
     */
    public function setPurchaseOrders($purchase_orders)
    {
        $this->container['purchase_orders'] = $purchase_orders;

        return $this;
    }

    /**
     * Gets po_receipts
     *
     * @return double
     */
    public function getPoReceipts()
    {
        return $this->container['po_receipts'];
    }

    /**
     * Sets po_receipts
     *
     * @param double $po_receipts The table &gt; Purchase order receipts &gt; The quantity of the stock items included in the purchase receipts that have not yet been released. To view the purchase receipts, open the Purchase receipts (PO302000) window.
     *
     * @return $this
     */
    public function setPoReceipts($po_receipts)
    {
        $this->container['po_receipts'] = $po_receipts;

        return $this;
    }

    /**
     * Gets expired
     *
     * @return double
     */
    public function getExpired()
    {
        return $this->container['expired'];
    }

    /**
     * Sets expired
     *
     * @param double $expired The table &gt; Expired &gt; The quantity of the stock items that has reached its expiration date.
     *
     * @return $this
     */
    public function setExpired($expired)
    {
        $this->container['expired'] = $expired;

        return $this;
    }

    /**
     * Gets on_hand
     *
     * @return double
     */
    public function getOnHand()
    {
        return $this->container['on_hand'];
    }

    /**
     * Sets on_hand
     *
     * @param double $on_hand The table &gt; On hand &gt; The quantity of the stock items available on hand at the specified warehouse and location.
     *
     * @return $this
     */
    public function setOnHand($on_hand)
    {
        $this->container['on_hand'] = $on_hand;

        return $this;
    }

    /**
     * Gets so_to_purchase
     *
     * @return double
     */
    public function getSoToPurchase()
    {
        return $this->container['so_to_purchase'];
    }

    /**
     * Sets so_to_purchase
     *
     * @param double $so_to_purchase The table &gt; Sales order to purchase &gt; The quantity of the stock items included in unreleased sales orders requiring creating purchase orders.
     *
     * @return $this
     */
    public function setSoToPurchase($so_to_purchase)
    {
        $this->container['so_to_purchase'] = $so_to_purchase;

        return $this;
    }

    /**
     * Gets purchase_for_so
     *
     * @return double
     */
    public function getPurchaseForSo()
    {
        return $this->container['purchase_for_so'];
    }

    /**
     * Sets purchase_for_so
     *
     * @param double $purchase_for_so The table &gt; Purchase for sales order. &gt; The quantity of the stock items listed on open purchase orders created for sales orders.
     *
     * @return $this
     */
    public function setPurchaseForSo($purchase_for_so)
    {
        $this->container['purchase_for_so'] = $purchase_for_so;

        return $this;
    }

    /**
     * Gets purchase_for_so_prepared
     *
     * @return double
     */
    public function getPurchaseForSoPrepared()
    {
        return $this->container['purchase_for_so_prepared'];
    }

    /**
     * Sets purchase_for_so_prepared
     *
     * @param double $purchase_for_so_prepared The table &gt; Purchase for sales order prepared &gt; The quantity of the stock items listed on purchase orders yet on hold or pending approval and created for back orders.
     *
     * @return $this
     */
    public function setPurchaseForSoPrepared($purchase_for_so_prepared)
    {
        $this->container['purchase_for_so_prepared'] = $purchase_for_so_prepared;

        return $this;
    }

    /**
     * Gets purchase_for_so_receipts
     *
     * @return double
     */
    public function getPurchaseForSoReceipts()
    {
        return $this->container['purchase_for_so_receipts'];
    }

    /**
     * Sets purchase_for_so_receipts
     *
     * @param double $purchase_for_so_receipts The table &gt; Purchase for sales order receipts &gt; The quantity of the stock items listed on purchase receipts for orders that were created for sales orders.
     *
     * @return $this
     */
    public function setPurchaseForSoReceipts($purchase_for_so_receipts)
    {
        $this->container['purchase_for_so_receipts'] = $purchase_for_so_receipts;

        return $this;
    }

    /**
     * Gets so_to_drop_ship
     *
     * @return double
     */
    public function getSoToDropShip()
    {
        return $this->container['so_to_drop_ship'];
    }

    /**
     * Sets so_to_drop_ship
     *
     * @param double $so_to_drop_ship The table &gt; Sales order to drop-ship &gt; The quantity of the stock items included in open purchase orders created for drop-ship orders.
     *
     * @return $this
     */
    public function setSoToDropShip($so_to_drop_ship)
    {
        $this->container['so_to_drop_ship'] = $so_to_drop_ship;

        return $this;
    }

    /**
     * Gets drop_ship_for_so
     *
     * @return double
     */
    public function getDropShipForSo()
    {
        return $this->container['drop_ship_for_so'];
    }

    /**
     * Sets drop_ship_for_so
     *
     * @param double $drop_ship_for_so The table &gt; Drop-ship for sales order &gt; The quantity of the stock items listed on open drop-ship orders. This value is not included in the quantity available.
     *
     * @return $this
     */
    public function setDropShipForSo($drop_ship_for_so)
    {
        $this->container['drop_ship_for_so'] = $drop_ship_for_so;

        return $this;
    }

    /**
     * Gets drop_ship_for_so_prepared
     *
     * @return double
     */
    public function getDropShipForSoPrepared()
    {
        return $this->container['drop_ship_for_so_prepared'];
    }

    /**
     * Sets drop_ship_for_so_prepared
     *
     * @param double $drop_ship_for_so_prepared The table &gt; Drop-ship for sales order, prepared &gt; The quantity of the stock items listed on drop-ship sales orders with a status of On hold or Pending approval; this value is not included in the quantity available.
     *
     * @return $this
     */
    public function setDropShipForSoPrepared($drop_ship_for_so_prepared)
    {
        $this->container['drop_ship_for_so_prepared'] = $drop_ship_for_so_prepared;

        return $this;
    }

    /**
     * Gets drop_ship_for_so_receipts
     *
     * @return double
     */
    public function getDropShipForSoReceipts()
    {
        return $this->container['drop_ship_for_so_receipts'];
    }

    /**
     * Sets drop_ship_for_so_receipts
     *
     * @param double $drop_ship_for_so_receipts The table &gt; Drop-ship for sales order, receipts &gt; The quantity of the stock items listed on receipts for drop-ship sales orders; this value is not included in the quantity available.
     *
     * @return $this
     */
    public function setDropShipForSoReceipts($drop_ship_for_so_receipts)
    {
        $this->container['drop_ship_for_so_receipts'] = $drop_ship_for_so_receipts;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string $base_unit The table &gt; Base unit &gt; The unit of measure (UoM) selected as the base unit for the stock items in the Stock items (IN202500) window.
     *
     * @return $this
     */
    public function setBaseUnit($base_unit)
    {
        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets estimated_unit_cost
     *
     * @return double
     */
    public function getEstimatedUnitCost()
    {
        return $this->container['estimated_unit_cost'];
    }

    /**
     * Sets estimated_unit_cost
     *
     * @param double $estimated_unit_cost The table &gt; Estimated unit cost &gt; The estimated unit cost of the selected stock items.
     *
     * @return $this
     */
    public function setEstimatedUnitCost($estimated_unit_cost)
    {
        $this->container['estimated_unit_cost'] = $estimated_unit_cost;

        return $this;
    }

    /**
     * Gets estimated_total_cost
     *
     * @return double
     */
    public function getEstimatedTotalCost()
    {
        return $this->container['estimated_total_cost'];
    }

    /**
     * Sets estimated_total_cost
     *
     * @param double $estimated_total_cost The table &gt; Estimated total cost &gt; The estimated total cost of the stock items available at the specified warehouse and location.
     *
     * @return $this
     */
    public function setEstimatedTotalCost($estimated_total_cost)
    {
        $this->container['estimated_total_cost'] = $estimated_total_cost;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


