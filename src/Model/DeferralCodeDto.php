<?php
/**
 * DeferralCodeDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * DeferralCodeDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeferralCodeDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeferralCodeDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deferral_code' => 'string',
        'description' => 'string',
        'deferred_revenue_from_item' => 'bool',
        'recognition_method' => 'string',
        'code_type' => 'string',
        'deferral_account' => 'object',
        'deferral_sub' => 'object',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deferral_code' => null,
        'description' => null,
        'deferred_revenue_from_item' => null,
        'recognition_method' => null,
        'code_type' => null,
        'deferral_account' => null,
        'deferral_sub' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deferral_code' => 'deferralCode',
        'description' => 'description',
        'deferred_revenue_from_item' => 'deferredRevenueFromItem',
        'recognition_method' => 'recognitionMethod',
        'code_type' => 'codeType',
        'deferral_account' => 'deferralAccount',
        'deferral_sub' => 'deferralSub',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deferral_code' => 'setDeferralCode',
        'description' => 'setDescription',
        'deferred_revenue_from_item' => 'setDeferredRevenueFromItem',
        'recognition_method' => 'setRecognitionMethod',
        'code_type' => 'setCodeType',
        'deferral_account' => 'setDeferralAccount',
        'deferral_sub' => 'setDeferralSub',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deferral_code' => 'getDeferralCode',
        'description' => 'getDescription',
        'deferred_revenue_from_item' => 'getDeferredRevenueFromItem',
        'recognition_method' => 'getRecognitionMethod',
        'code_type' => 'getCodeType',
        'deferral_account' => 'getDeferralAccount',
        'deferral_sub' => 'getDeferralSub',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RECOGNITION_METHOD_EVEN_PERIODS = 'EvenPeriods';
    const RECOGNITION_METHOD_PRORATE_DAYS = 'ProrateDays';
    const RECOGNITION_METHOD_EXACT_DAYS = 'ExactDays';
    const RECOGNITION_METHOD_FLEXIBILE_PRORATE_DAYS = 'FlexibileProrateDays';
    const RECOGNITION_METHOD_FLEXIBILE_EXACT_DAYS = 'FlexibileExactDays';
    const RECOGNITION_METHOD_CASH_RECEIPT = 'CashReceipt';
    const CODE_TYPE_INCOME = 'Income';
    const CODE_TYPE_EXPENSE = 'Expense';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecognitionMethodAllowableValues()
    {
        return [
            self::RECOGNITION_METHOD_EVEN_PERIODS,
            self::RECOGNITION_METHOD_PRORATE_DAYS,
            self::RECOGNITION_METHOD_EXACT_DAYS,
            self::RECOGNITION_METHOD_FLEXIBILE_PRORATE_DAYS,
            self::RECOGNITION_METHOD_FLEXIBILE_EXACT_DAYS,
            self::RECOGNITION_METHOD_CASH_RECEIPT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeTypeAllowableValues()
    {
        return [
            self::CODE_TYPE_INCOME,
            self::CODE_TYPE_EXPENSE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deferral_code'] = isset($data['deferral_code']) ? $data['deferral_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['deferred_revenue_from_item'] = isset($data['deferred_revenue_from_item']) ? $data['deferred_revenue_from_item'] : null;
        $this->container['recognition_method'] = isset($data['recognition_method']) ? $data['recognition_method'] : null;
        $this->container['code_type'] = isset($data['code_type']) ? $data['code_type'] : null;
        $this->container['deferral_account'] = isset($data['deferral_account']) ? $data['deferral_account'] : null;
        $this->container['deferral_sub'] = isset($data['deferral_sub']) ? $data['deferral_sub'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRecognitionMethodAllowableValues();
        if (!is_null($this->container['recognition_method']) && !in_array($this->container['recognition_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'recognition_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCodeTypeAllowableValues();
        if (!is_null($this->container['code_type']) && !in_array($this->container['code_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'code_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deferral_code
     *
     * @return string
     */
    public function getDeferralCode()
    {
        return $this->container['deferral_code'];
    }

    /**
     * Sets deferral_code
     *
     * @param string $deferral_code Mandatory field: Deferral code* &gt;  The unique code for the deferral type.
     *
     * @return $this
     */
    public function setDeferralCode($deferral_code)
    {
        $this->container['deferral_code'] = $deferral_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description &gt; The description of the deferral code.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets deferred_revenue_from_item
     *
     * @return bool
     */
    public function getDeferredRevenueFromItem()
    {
        return $this->container['deferred_revenue_from_item'];
    }

    /**
     * Sets deferred_revenue_from_item
     *
     * @param bool $deferred_revenue_from_item Deferred revenue from item &gt; When this check box is selected, the deferred revenue of the code will be retrieved from the connected item.
     *
     * @return $this
     */
    public function setDeferredRevenueFromItem($deferred_revenue_from_item)
    {
        $this->container['deferred_revenue_from_item'] = $deferred_revenue_from_item;

        return $this;
    }

    /**
     * Gets recognition_method
     *
     * @return string
     */
    public function getRecognitionMethod()
    {
        return $this->container['recognition_method'];
    }

    /**
     * Sets recognition_method
     *
     * @param string $recognition_method Recognition method &gt; The method used to distribute the document amount over the periods.
     *
     * @return $this
     */
    public function setRecognitionMethod($recognition_method)
    {
        $allowedValues = $this->getRecognitionMethodAllowableValues();
        if (!is_null($recognition_method) && !in_array($recognition_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'recognition_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recognition_method'] = $recognition_method;

        return $this;
    }

    /**
     * Gets code_type
     *
     * @return string
     */
    public function getCodeType()
    {
        return $this->container['code_type'];
    }

    /**
     * Sets code_type
     *
     * @param string $code_type Code type &gt; The type of the deferral code.
     *
     * @return $this
     */
    public function setCodeType($code_type)
    {
        $allowedValues = $this->getCodeTypeAllowableValues();
        if (!is_null($code_type) && !in_array($code_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'code_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code_type'] = $code_type;

        return $this;
    }

    /**
     * Gets deferral_account
     *
     * @return object
     */
    public function getDeferralAccount()
    {
        return $this->container['deferral_account'];
    }

    /**
     * Sets deferral_account
     *
     * @param object $deferral_account Deferral account &gt; The account used to hold the deferred amount until it is fully recognised.
     *
     * @return $this
     */
    public function setDeferralAccount($deferral_account)
    {
        $this->container['deferral_account'] = $deferral_account;

        return $this;
    }

    /**
     * Gets deferral_sub
     *
     * @return object
     */
    public function getDeferralSub()
    {
        return $this->container['deferral_sub'];
    }

    /**
     * Sets deferral_sub
     *
     * @param object $deferral_sub Deferral sub &gt; The corresponding subaccount.
     *
     * @return $this
     */
    public function setDeferralSub($deferral_sub)
    {
        $this->container['deferral_sub'] = $deferral_sub;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


