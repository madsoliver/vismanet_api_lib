<?php
/**
 * BankSettingsUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * BankSettingsUpdateDto Class Doc Comment
 *
 * @category Class
 * @description Bank settings update Dto
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankSettingsUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BankSettingsUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bank_name' => 'object',
        'bank_address1' => 'object',
        'bank_address2' => 'object',
        'bank_address3' => 'object',
        'bank_country' => 'object',
        'iban' => 'object',
        'bban' => 'object',
        'bba_n2' => 'object',
        'bba_n3' => 'object',
        'bic' => 'object',
        'creditor_id' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bank_name' => null,
        'bank_address1' => null,
        'bank_address2' => null,
        'bank_address3' => null,
        'bank_country' => null,
        'iban' => null,
        'bban' => null,
        'bba_n2' => null,
        'bba_n3' => null,
        'bic' => null,
        'creditor_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bank_name' => 'bankName',
        'bank_address1' => 'bankAddress1',
        'bank_address2' => 'bankAddress2',
        'bank_address3' => 'bankAddress3',
        'bank_country' => 'bankCountry',
        'iban' => 'iban',
        'bban' => 'bban',
        'bba_n2' => 'bbaN2',
        'bba_n3' => 'bbaN3',
        'bic' => 'bic',
        'creditor_id' => 'creditorId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bank_name' => 'setBankName',
        'bank_address1' => 'setBankAddress1',
        'bank_address2' => 'setBankAddress2',
        'bank_address3' => 'setBankAddress3',
        'bank_country' => 'setBankCountry',
        'iban' => 'setIban',
        'bban' => 'setBban',
        'bba_n2' => 'setBbaN2',
        'bba_n3' => 'setBbaN3',
        'bic' => 'setBic',
        'creditor_id' => 'setCreditorId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bank_name' => 'getBankName',
        'bank_address1' => 'getBankAddress1',
        'bank_address2' => 'getBankAddress2',
        'bank_address3' => 'getBankAddress3',
        'bank_country' => 'getBankCountry',
        'iban' => 'getIban',
        'bban' => 'getBban',
        'bba_n2' => 'getBbaN2',
        'bba_n3' => 'getBbaN3',
        'bic' => 'getBic',
        'creditor_id' => 'getCreditorId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bank_name'] = isset($data['bank_name']) ? $data['bank_name'] : null;
        $this->container['bank_address1'] = isset($data['bank_address1']) ? $data['bank_address1'] : null;
        $this->container['bank_address2'] = isset($data['bank_address2']) ? $data['bank_address2'] : null;
        $this->container['bank_address3'] = isset($data['bank_address3']) ? $data['bank_address3'] : null;
        $this->container['bank_country'] = isset($data['bank_country']) ? $data['bank_country'] : null;
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['bban'] = isset($data['bban']) ? $data['bban'] : null;
        $this->container['bba_n2'] = isset($data['bba_n2']) ? $data['bba_n2'] : null;
        $this->container['bba_n3'] = isset($data['bba_n3']) ? $data['bba_n3'] : null;
        $this->container['bic'] = isset($data['bic']) ? $data['bic'] : null;
        $this->container['creditor_id'] = isset($data['creditor_id']) ? $data['creditor_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bank_name
     *
     * @return object
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param object $bank_name Bank name
     *
     * @return $this
     */
    public function setBankName($bank_name)
    {
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets bank_address1
     *
     * @return object
     */
    public function getBankAddress1()
    {
        return $this->container['bank_address1'];
    }

    /**
     * Sets bank_address1
     *
     * @param object $bank_address1 Bank address 1
     *
     * @return $this
     */
    public function setBankAddress1($bank_address1)
    {
        $this->container['bank_address1'] = $bank_address1;

        return $this;
    }

    /**
     * Gets bank_address2
     *
     * @return object
     */
    public function getBankAddress2()
    {
        return $this->container['bank_address2'];
    }

    /**
     * Sets bank_address2
     *
     * @param object $bank_address2 Bank address 2
     *
     * @return $this
     */
    public function setBankAddress2($bank_address2)
    {
        $this->container['bank_address2'] = $bank_address2;

        return $this;
    }

    /**
     * Gets bank_address3
     *
     * @return object
     */
    public function getBankAddress3()
    {
        return $this->container['bank_address3'];
    }

    /**
     * Sets bank_address3
     *
     * @param object $bank_address3 Bank address 3
     *
     * @return $this
     */
    public function setBankAddress3($bank_address3)
    {
        $this->container['bank_address3'] = $bank_address3;

        return $this;
    }

    /**
     * Gets bank_country
     *
     * @return object
     */
    public function getBankCountry()
    {
        return $this->container['bank_country'];
    }

    /**
     * Sets bank_country
     *
     * @param object $bank_country Bank country
     *
     * @return $this
     */
    public function setBankCountry($bank_country)
    {
        $this->container['bank_country'] = $bank_country;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return object
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param object $iban IBAN
     *
     * @return $this
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets bban
     *
     * @return object
     */
    public function getBban()
    {
        return $this->container['bban'];
    }

    /**
     * Sets bban
     *
     * @param object $bban BBAN
     *
     * @return $this
     */
    public function setBban($bban)
    {
        $this->container['bban'] = $bban;

        return $this;
    }

    /**
     * Gets bba_n2
     *
     * @return object
     */
    public function getBbaN2()
    {
        return $this->container['bba_n2'];
    }

    /**
     * Sets bba_n2
     *
     * @param object $bba_n2 BBAN 2
     *
     * @return $this
     */
    public function setBbaN2($bba_n2)
    {
        $this->container['bba_n2'] = $bba_n2;

        return $this;
    }

    /**
     * Gets bba_n3
     *
     * @return object
     */
    public function getBbaN3()
    {
        return $this->container['bba_n3'];
    }

    /**
     * Sets bba_n3
     *
     * @param object $bba_n3 BBAN 3
     *
     * @return $this
     */
    public function setBbaN3($bba_n3)
    {
        $this->container['bba_n3'] = $bba_n3;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return object
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param object $bic BIC
     *
     * @return $this
     */
    public function setBic($bic)
    {
        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets creditor_id
     *
     * @return object
     */
    public function getCreditorId()
    {
        return $this->container['creditor_id'];
    }

    /**
     * Sets creditor_id
     *
     * @param object $creditor_id Creditor Id
     *
     * @return $this
     */
    public function setCreditorId($creditor_id)
    {
        $this->container['creditor_id'] = $creditor_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


