<?php
/**
 * PaymentMethodDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * PaymentMethodDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a Payment Method in PaymentMethodController. Used for getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentMethodDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentMethodDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payment_method_id' => 'string',
        'active' => 'bool',
        'means_of_payment' => 'string',
        'description' => 'string',
        'use_in_ap' => 'bool',
        'details' => '\Ekstralys\VismaNetApi\Model\PaymentMethodDetailDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payment_method_id' => null,
        'active' => null,
        'means_of_payment' => null,
        'description' => null,
        'use_in_ap' => null,
        'details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_method_id' => 'paymentMethodID',
        'active' => 'active',
        'means_of_payment' => 'meansOfPayment',
        'description' => 'description',
        'use_in_ap' => 'useInAP',
        'details' => 'details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_method_id' => 'setPaymentMethodId',
        'active' => 'setActive',
        'means_of_payment' => 'setMeansOfPayment',
        'description' => 'setDescription',
        'use_in_ap' => 'setUseInAp',
        'details' => 'setDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_method_id' => 'getPaymentMethodId',
        'active' => 'getActive',
        'means_of_payment' => 'getMeansOfPayment',
        'description' => 'getDescription',
        'use_in_ap' => 'getUseInAp',
        'details' => 'getDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MEANS_OF_PAYMENT_CREDIT_CARD = 'CreditCard';
    const MEANS_OF_PAYMENT_CASH_OR_CHECK = 'CashOrCheck';
    const MEANS_OF_PAYMENT_DIRECT_DEPOSIT = 'DirectDeposit';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeansOfPaymentAllowableValues()
    {
        return [
            self::MEANS_OF_PAYMENT_CREDIT_CARD,
            self::MEANS_OF_PAYMENT_CASH_OR_CHECK,
            self::MEANS_OF_PAYMENT_DIRECT_DEPOSIT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_method_id'] = isset($data['payment_method_id']) ? $data['payment_method_id'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['means_of_payment'] = isset($data['means_of_payment']) ? $data['means_of_payment'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['use_in_ap'] = isset($data['use_in_ap']) ? $data['use_in_ap'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMeansOfPaymentAllowableValues();
        if (!is_null($this->container['means_of_payment']) && !in_array($this->container['means_of_payment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'means_of_payment', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_method_id
     *
     * @return string
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string $payment_method_id Mandatory field: The top part &gt; Payment method ID* &gt; The unique identifier of the payment method.
     *
     * @return $this
     */
    public function setPaymentMethodId($payment_method_id)
    {
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active The top part &gt; Active &gt; A check box that indicates whether the payment method is active in the system.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets means_of_payment
     *
     * @return string
     */
    public function getMeansOfPayment()
    {
        return $this->container['means_of_payment'];
    }

    /**
     * Sets means_of_payment
     *
     * @param string $means_of_payment The top part &gt; Means of payment &gt; One of the system's built-in payment templates. The following options are available: Credit card, Cash, Direct deposit.
     *
     * @return $this
     */
    public function setMeansOfPayment($means_of_payment)
    {
        $allowedValues = $this->getMeansOfPaymentAllowableValues();
        if (!is_null($means_of_payment) && !in_array($means_of_payment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'means_of_payment', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['means_of_payment'] = $means_of_payment;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Mandatory field: The top part &gt; Description* &gt; A description of the payment method.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets use_in_ap
     *
     * @return bool
     */
    public function getUseInAp()
    {
        return $this->container['use_in_ap'];
    }

    /**
     * Sets use_in_ap
     *
     * @param bool $use_in_ap The top part &gt; Use for supplier &gt; A check box that indicates whether the payment method will be used in Supplier ledger.
     *
     * @return $this
     */
    public function setUseInAp($use_in_ap)
    {
        $this->container['use_in_ap'] = $use_in_ap;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Ekstralys\VismaNetApi\Model\PaymentMethodDetailDto[]
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Ekstralys\VismaNetApi\Model\PaymentMethodDetailDto[] $details The settings for Customer ledger and The settings of Supplier ledger tab &gt; The table
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


