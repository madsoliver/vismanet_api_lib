<?php
/**
 * VatGlAccountsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * VatGlAccountsDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VatGlAccountsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VatGlAccountsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vat_payable_account' => 'object',
        'vat_payable_subaccount' => 'object',
        'vat_claimable_account' => 'object',
        'vat_claimable_subccount' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vat_payable_account' => null,
        'vat_payable_subaccount' => null,
        'vat_claimable_account' => null,
        'vat_claimable_subccount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vat_payable_account' => 'vatPayableAccount',
        'vat_payable_subaccount' => 'vatPayableSubaccount',
        'vat_claimable_account' => 'vatClaimableAccount',
        'vat_claimable_subccount' => 'vatClaimableSubccount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vat_payable_account' => 'setVatPayableAccount',
        'vat_payable_subaccount' => 'setVatPayableSubaccount',
        'vat_claimable_account' => 'setVatClaimableAccount',
        'vat_claimable_subccount' => 'setVatClaimableSubccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vat_payable_account' => 'getVatPayableAccount',
        'vat_payable_subaccount' => 'getVatPayableSubaccount',
        'vat_claimable_account' => 'getVatClaimableAccount',
        'vat_claimable_subccount' => 'getVatClaimableSubccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vat_payable_account'] = isset($data['vat_payable_account']) ? $data['vat_payable_account'] : null;
        $this->container['vat_payable_subaccount'] = isset($data['vat_payable_subaccount']) ? $data['vat_payable_subaccount'] : null;
        $this->container['vat_claimable_account'] = isset($data['vat_claimable_account']) ? $data['vat_claimable_account'] : null;
        $this->container['vat_claimable_subccount'] = isset($data['vat_claimable_subccount']) ? $data['vat_claimable_subccount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vat_payable_account
     *
     * @return object
     */
    public function getVatPayableAccount()
    {
        return $this->container['vat_payable_account'];
    }

    /**
     * Sets vat_payable_account
     *
     * @param object $vat_payable_account Mandatory field: VAT payable account* &gt; The liability account that accumulates the VAT amounts to be paid to a tax agency for the VAT reporting period.
     *
     * @return $this
     */
    public function setVatPayableAccount($vat_payable_account)
    {
        $this->container['vat_payable_account'] = $vat_payable_account;

        return $this;
    }

    /**
     * Gets vat_payable_subaccount
     *
     * @return object
     */
    public function getVatPayableSubaccount()
    {
        return $this->container['vat_payable_subaccount'];
    }

    /**
     * Sets vat_payable_subaccount
     *
     * @param object $vat_payable_subaccount Mandatory field: VAT payable subaccount* &gt; The corresponding VAT payable subaccount.
     *
     * @return $this
     */
    public function setVatPayableSubaccount($vat_payable_subaccount)
    {
        $this->container['vat_payable_subaccount'] = $vat_payable_subaccount;

        return $this;
    }

    /**
     * Gets vat_claimable_account
     *
     * @return object
     */
    public function getVatClaimableAccount()
    {
        return $this->container['vat_claimable_account'];
    }

    /**
     * Sets vat_claimable_account
     *
     * @param object $vat_claimable_account VAT Claimable account &gt; The account that accumulates the VAT amounts to be claimed from the tax agency for the VAT reporting period.
     *
     * @return $this
     */
    public function setVatClaimableAccount($vat_claimable_account)
    {
        $this->container['vat_claimable_account'] = $vat_claimable_account;

        return $this;
    }

    /**
     * Gets vat_claimable_subccount
     *
     * @return object
     */
    public function getVatClaimableSubccount()
    {
        return $this->container['vat_claimable_subccount'];
    }

    /**
     * Sets vat_claimable_subccount
     *
     * @param object $vat_claimable_subccount VAT claimable subaccount &gt; The corresponding tax claimable subaccount.
     *
     * @return $this
     */
    public function setVatClaimableSubccount($vat_claimable_subccount)
    {
        $this->container['vat_claimable_subccount'] = $vat_claimable_subccount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


