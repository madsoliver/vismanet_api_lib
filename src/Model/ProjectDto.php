<?php
/**
 * ProjectDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * ProjectDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a Project in ProjectController. Used for getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'internal_id' => 'int',
        'project_id' => 'string',
        'customer' => 'object',
        'hold' => 'bool',
        'status' => 'string',
        'template' => 'object',
        'description' => 'string',
        'assets' => 'double',
        'liability' => 'double',
        'income' => 'double',
        'expenses' => 'double',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'project_manager' => 'object',
        'restrict_employees' => 'bool',
        'restrict_equipment' => 'bool',
        'visibility' => 'object',
        'def_account' => 'object',
        'def_sub' => 'object',
        'def_accrual_account' => 'object',
        'def_accrual_sub' => 'object',
        'billing_period' => 'string',
        'next_billing_date' => '\DateTime',
        'last_billing_date' => '\DateTime',
        'customer_location' => 'object',
        'allocation_rule' => 'object',
        'billing_rule' => 'object',
        'rate_table' => 'object',
        'auto_allocate' => 'bool',
        'automatic_release_ar' => 'bool',
        'last_modified_date_time' => '\DateTime',
        'tasks' => '\Ekstralys\VismaNetApi\Model\TaskDto[]',
        'employees' => '\Ekstralys\VismaNetApi\Model\EmployeeDto[]',
        'public_id' => 'string',
        'system_template' => 'bool',
        'attributes' => '\Ekstralys\VismaNetApi\Model\AttributeIdValueDto[]',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'internal_id' => 'int32',
        'project_id' => null,
        'customer' => null,
        'hold' => null,
        'status' => null,
        'template' => null,
        'description' => null,
        'assets' => 'double',
        'liability' => 'double',
        'income' => 'double',
        'expenses' => 'double',
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'project_manager' => null,
        'restrict_employees' => null,
        'restrict_equipment' => null,
        'visibility' => null,
        'def_account' => null,
        'def_sub' => null,
        'def_accrual_account' => null,
        'def_accrual_sub' => null,
        'billing_period' => null,
        'next_billing_date' => 'date-time',
        'last_billing_date' => 'date-time',
        'customer_location' => null,
        'allocation_rule' => null,
        'billing_rule' => null,
        'rate_table' => null,
        'auto_allocate' => null,
        'automatic_release_ar' => null,
        'last_modified_date_time' => 'date-time',
        'tasks' => null,
        'employees' => null,
        'public_id' => 'uuid',
        'system_template' => null,
        'attributes' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'internal_id' => 'internalID',
        'project_id' => 'projectID',
        'customer' => 'customer',
        'hold' => 'hold',
        'status' => 'status',
        'template' => 'template',
        'description' => 'description',
        'assets' => 'assets',
        'liability' => 'liability',
        'income' => 'income',
        'expenses' => 'expenses',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'project_manager' => 'projectManager',
        'restrict_employees' => 'restrictEmployees',
        'restrict_equipment' => 'restrictEquipment',
        'visibility' => 'visibility',
        'def_account' => 'defAccount',
        'def_sub' => 'defSub',
        'def_accrual_account' => 'defAccrualAccount',
        'def_accrual_sub' => 'defAccrualSub',
        'billing_period' => 'billingPeriod',
        'next_billing_date' => 'nextBillingDate',
        'last_billing_date' => 'lastBillingDate',
        'customer_location' => 'customerLocation',
        'allocation_rule' => 'allocationRule',
        'billing_rule' => 'billingRule',
        'rate_table' => 'rateTable',
        'auto_allocate' => 'autoAllocate',
        'automatic_release_ar' => 'automaticReleaseAr',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'tasks' => 'tasks',
        'employees' => 'employees',
        'public_id' => 'publicId',
        'system_template' => 'systemTemplate',
        'attributes' => 'attributes',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'internal_id' => 'setInternalId',
        'project_id' => 'setProjectId',
        'customer' => 'setCustomer',
        'hold' => 'setHold',
        'status' => 'setStatus',
        'template' => 'setTemplate',
        'description' => 'setDescription',
        'assets' => 'setAssets',
        'liability' => 'setLiability',
        'income' => 'setIncome',
        'expenses' => 'setExpenses',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'project_manager' => 'setProjectManager',
        'restrict_employees' => 'setRestrictEmployees',
        'restrict_equipment' => 'setRestrictEquipment',
        'visibility' => 'setVisibility',
        'def_account' => 'setDefAccount',
        'def_sub' => 'setDefSub',
        'def_accrual_account' => 'setDefAccrualAccount',
        'def_accrual_sub' => 'setDefAccrualSub',
        'billing_period' => 'setBillingPeriod',
        'next_billing_date' => 'setNextBillingDate',
        'last_billing_date' => 'setLastBillingDate',
        'customer_location' => 'setCustomerLocation',
        'allocation_rule' => 'setAllocationRule',
        'billing_rule' => 'setBillingRule',
        'rate_table' => 'setRateTable',
        'auto_allocate' => 'setAutoAllocate',
        'automatic_release_ar' => 'setAutomaticReleaseAr',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'tasks' => 'setTasks',
        'employees' => 'setEmployees',
        'public_id' => 'setPublicId',
        'system_template' => 'setSystemTemplate',
        'attributes' => 'setAttributes',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'internal_id' => 'getInternalId',
        'project_id' => 'getProjectId',
        'customer' => 'getCustomer',
        'hold' => 'getHold',
        'status' => 'getStatus',
        'template' => 'getTemplate',
        'description' => 'getDescription',
        'assets' => 'getAssets',
        'liability' => 'getLiability',
        'income' => 'getIncome',
        'expenses' => 'getExpenses',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'project_manager' => 'getProjectManager',
        'restrict_employees' => 'getRestrictEmployees',
        'restrict_equipment' => 'getRestrictEquipment',
        'visibility' => 'getVisibility',
        'def_account' => 'getDefAccount',
        'def_sub' => 'getDefSub',
        'def_accrual_account' => 'getDefAccrualAccount',
        'def_accrual_sub' => 'getDefAccrualSub',
        'billing_period' => 'getBillingPeriod',
        'next_billing_date' => 'getNextBillingDate',
        'last_billing_date' => 'getLastBillingDate',
        'customer_location' => 'getCustomerLocation',
        'allocation_rule' => 'getAllocationRule',
        'billing_rule' => 'getBillingRule',
        'rate_table' => 'getRateTable',
        'auto_allocate' => 'getAutoAllocate',
        'automatic_release_ar' => 'getAutomaticReleaseAr',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'tasks' => 'getTasks',
        'employees' => 'getEmployees',
        'public_id' => 'getPublicId',
        'system_template' => 'getSystemTemplate',
        'attributes' => 'getAttributes',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_PLANNED = 'Planned';
    const STATUS_ACTIVE = 'Active';
    const STATUS_COMPLETED = 'Completed';
    const STATUS_CANCELLED = 'Cancelled';
    const STATUS_ON_HOLD = 'OnHold';
    const STATUS_PENDING_APPROVAL = 'PendingApproval';
    const BILLING_PERIOD_WEEKLY = 'Weekly';
    const BILLING_PERIOD_MONTHLY = 'Monthly';
    const BILLING_PERIOD_QUARTERLY = 'Quarterly';
    const BILLING_PERIOD_ANNUAL = 'Annual';
    const BILLING_PERIOD_ON_DEMAND = 'OnDemand';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PLANNED,
            self::STATUS_ACTIVE,
            self::STATUS_COMPLETED,
            self::STATUS_CANCELLED,
            self::STATUS_ON_HOLD,
            self::STATUS_PENDING_APPROVAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingPeriodAllowableValues()
    {
        return [
            self::BILLING_PERIOD_WEEKLY,
            self::BILLING_PERIOD_MONTHLY,
            self::BILLING_PERIOD_QUARTERLY,
            self::BILLING_PERIOD_ANNUAL,
            self::BILLING_PERIOD_ON_DEMAND,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['assets'] = isset($data['assets']) ? $data['assets'] : null;
        $this->container['liability'] = isset($data['liability']) ? $data['liability'] : null;
        $this->container['income'] = isset($data['income']) ? $data['income'] : null;
        $this->container['expenses'] = isset($data['expenses']) ? $data['expenses'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['project_manager'] = isset($data['project_manager']) ? $data['project_manager'] : null;
        $this->container['restrict_employees'] = isset($data['restrict_employees']) ? $data['restrict_employees'] : null;
        $this->container['restrict_equipment'] = isset($data['restrict_equipment']) ? $data['restrict_equipment'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['def_account'] = isset($data['def_account']) ? $data['def_account'] : null;
        $this->container['def_sub'] = isset($data['def_sub']) ? $data['def_sub'] : null;
        $this->container['def_accrual_account'] = isset($data['def_accrual_account']) ? $data['def_accrual_account'] : null;
        $this->container['def_accrual_sub'] = isset($data['def_accrual_sub']) ? $data['def_accrual_sub'] : null;
        $this->container['billing_period'] = isset($data['billing_period']) ? $data['billing_period'] : null;
        $this->container['next_billing_date'] = isset($data['next_billing_date']) ? $data['next_billing_date'] : null;
        $this->container['last_billing_date'] = isset($data['last_billing_date']) ? $data['last_billing_date'] : null;
        $this->container['customer_location'] = isset($data['customer_location']) ? $data['customer_location'] : null;
        $this->container['allocation_rule'] = isset($data['allocation_rule']) ? $data['allocation_rule'] : null;
        $this->container['billing_rule'] = isset($data['billing_rule']) ? $data['billing_rule'] : null;
        $this->container['rate_table'] = isset($data['rate_table']) ? $data['rate_table'] : null;
        $this->container['auto_allocate'] = isset($data['auto_allocate']) ? $data['auto_allocate'] : null;
        $this->container['automatic_release_ar'] = isset($data['automatic_release_ar']) ? $data['automatic_release_ar'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['tasks'] = isset($data['tasks']) ? $data['tasks'] : null;
        $this->container['employees'] = isset($data['employees']) ? $data['employees'] : null;
        $this->container['public_id'] = isset($data['public_id']) ? $data['public_id'] : null;
        $this->container['system_template'] = isset($data['system_template']) ? $data['system_template'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBillingPeriodAllowableValues();
        if (!is_null($this->container['billing_period']) && !in_array($this->container['billing_period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'billing_period', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets internal_id
     *
     * @return int
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param int $internal_id internal_id
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id Mandatory field: The top part &gt; Project ID* &gt; The unique ID for the project.
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return object
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param object $customer The top part &gt; Customer &gt; The customer for the project if this project is external.
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return bool
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param bool $hold The top part &gt; Hold &gt; A check box that you select to indicate that the project should have the In planning status.
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The top part &gt; Status &gt; The status of the project, which can be one of the following options: In planning, Active, Completed, Suspended, Cancelled.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets template
     *
     * @return object
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param object $template The top part &gt; Templated ID &gt; The template used for creating this project, if applicable.
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Mandatory field: The top part &gt; Description* &gt; The description of the project.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets assets
     *
     * @return double
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param double $assets The top part &gt; Assest &gt; The actual assets for the project.
     *
     * @return $this
     */
    public function setAssets($assets)
    {
        $this->container['assets'] = $assets;

        return $this;
    }

    /**
     * Gets liability
     *
     * @return double
     */
    public function getLiability()
    {
        return $this->container['liability'];
    }

    /**
     * Sets liability
     *
     * @param double $liability The top part &gt; Liabilities &gt; The actual liabilities for the project.
     *
     * @return $this
     */
    public function setLiability($liability)
    {
        $this->container['liability'] = $liability;

        return $this;
    }

    /**
     * Gets income
     *
     * @return double
     */
    public function getIncome()
    {
        return $this->container['income'];
    }

    /**
     * Sets income
     *
     * @param double $income The top part &gt; Income &gt; The income expected from the project.
     *
     * @return $this
     */
    public function setIncome($income)
    {
        $this->container['income'] = $income;

        return $this;
    }

    /**
     * Gets expenses
     *
     * @return double
     */
    public function getExpenses()
    {
        return $this->container['expenses'];
    }

    /**
     * Sets expenses
     *
     * @param double $expenses The top part &gt; Expenses &gt; The total of the current expenses incurred by the project.
     *
     * @return $this
     */
    public function setExpenses($expenses)
    {
        $this->container['expenses'] = $expenses;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Mandatory field: Summary tab &gt; Project properties section &gt; Start date* &gt; The date when the project starts.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date Summary tab &gt; Project properties section &gt; End date &gt; The date when the project is expected to end.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets project_manager
     *
     * @return object
     */
    public function getProjectManager()
    {
        return $this->container['project_manager'];
    }

    /**
     * Sets project_manager
     *
     * @param object $project_manager Summary tab &gt; Project properties section &gt; Project manager &gt; The person who is responsible for managing the project and authorised to approve the project task and task activities.
     *
     * @return $this
     */
    public function setProjectManager($project_manager)
    {
        $this->container['project_manager'] = $project_manager;

        return $this;
    }

    /**
     * Gets restrict_employees
     *
     * @return bool
     */
    public function getRestrictEmployees()
    {
        return $this->container['restrict_employees'];
    }

    /**
     * Sets restrict_employees
     *
     * @param bool $restrict_employees Summary tab &gt; Project properties section &gt; Restrict employees &gt; A check box that indicates (if selected) that only the employees listed on the Employees tab of this window can create activities and documents associated with the current project.
     *
     * @return $this
     */
    public function setRestrictEmployees($restrict_employees)
    {
        $this->container['restrict_employees'] = $restrict_employees;

        return $this;
    }

    /**
     * Gets restrict_equipment
     *
     * @return bool
     */
    public function getRestrictEquipment()
    {
        return $this->container['restrict_equipment'];
    }

    /**
     * Sets restrict_equipment
     *
     * @param bool $restrict_equipment restrict_equipment
     *
     * @return $this
     */
    public function setRestrictEquipment($restrict_equipment)
    {
        $this->container['restrict_equipment'] = $restrict_equipment;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return object
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param object $visibility Summary tab &gt; Visibility settings section &gt;
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets def_account
     *
     * @return object
     */
    public function getDefAccount()
    {
        return $this->container['def_account'];
    }

    /**
     * Sets def_account
     *
     * @param object $def_account General ledger accounts tab &gt; Default values section &gt; Default account &gt; The account to be used as one of the sources of possible accounts for the invoices and transactions for the project.
     *
     * @return $this
     */
    public function setDefAccount($def_account)
    {
        $this->container['def_account'] = $def_account;

        return $this;
    }

    /**
     * Gets def_sub
     *
     * @return object
     */
    public function getDefSub()
    {
        return $this->container['def_sub'];
    }

    /**
     * Sets def_sub
     *
     * @param object $def_sub Mandatory field: General ledger accounts tab &gt; Default values section &gt; Default subaccount* &gt; The subaccount to be used as one of the sources of possible segment values for subaccounts to be used in the invoices and transactions for the project.
     *
     * @return $this
     */
    public function setDefSub($def_sub)
    {
        $this->container['def_sub'] = $def_sub;

        return $this;
    }

    /**
     * Gets def_accrual_account
     *
     * @return object
     */
    public function getDefAccrualAccount()
    {
        return $this->container['def_accrual_account'];
    }

    /**
     * Sets def_accrual_account
     *
     * @param object $def_accrual_account General ledger accounts tab &gt; Default values section &gt; Accrual account &gt; The default accrual account to be used in project transactions for the project.
     *
     * @return $this
     */
    public function setDefAccrualAccount($def_accrual_account)
    {
        $this->container['def_accrual_account'] = $def_accrual_account;

        return $this;
    }

    /**
     * Gets def_accrual_sub
     *
     * @return object
     */
    public function getDefAccrualSub()
    {
        return $this->container['def_accrual_sub'];
    }

    /**
     * Sets def_accrual_sub
     *
     * @param object $def_accrual_sub General ledger accounts tab &gt; Default values section &gt; Accrual subaccount &gt; The default accrual subaccount to be used in project transactions for the project.
     *
     * @return $this
     */
    public function setDefAccrualSub($def_accrual_sub)
    {
        $this->container['def_accrual_sub'] = $def_accrual_sub;

        return $this;
    }

    /**
     * Gets billing_period
     *
     * @return string
     */
    public function getBillingPeriod()
    {
        return $this->container['billing_period'];
    }

    /**
     * Sets billing_period
     *
     * @param string $billing_period Summary tab &gt; Invoicing and allocation settings section &gt; Invoicing period &gt; The frequency of invoicing, which can be one of the following options: Week, Month, Quarter, Year, On demand.
     *
     * @return $this
     */
    public function setBillingPeriod($billing_period)
    {
        $allowedValues = $this->getBillingPeriodAllowableValues();
        if (!is_null($billing_period) && !in_array($billing_period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'billing_period', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billing_period'] = $billing_period;

        return $this;
    }

    /**
     * Gets next_billing_date
     *
     * @return \DateTime
     */
    public function getNextBillingDate()
    {
        return $this->container['next_billing_date'];
    }

    /**
     * Sets next_billing_date
     *
     * @param \DateTime $next_billing_date Summary tab &gt; Invoicing and allocation settings section &gt; Next invoicing date &gt; The date for which the next invoicing is scheduled for the project.
     *
     * @return $this
     */
    public function setNextBillingDate($next_billing_date)
    {
        $this->container['next_billing_date'] = $next_billing_date;

        return $this;
    }

    /**
     * Gets last_billing_date
     *
     * @return \DateTime
     */
    public function getLastBillingDate()
    {
        return $this->container['last_billing_date'];
    }

    /**
     * Sets last_billing_date
     *
     * @param \DateTime $last_billing_date Summary tab &gt; Invoicing and allocation settings section &gt; Last invoicing date &gt; The date when the latest invoicing was performed for the project.
     *
     * @return $this
     */
    public function setLastBillingDate($last_billing_date)
    {
        $this->container['last_billing_date'] = $last_billing_date;

        return $this;
    }

    /**
     * Gets customer_location
     *
     * @return object
     */
    public function getCustomerLocation()
    {
        return $this->container['customer_location'];
    }

    /**
     * Sets customer_location
     *
     * @param object $customer_location Summary tab &gt; Invoice to section &gt; Customer location &gt; The location of the project's customer.
     *
     * @return $this
     */
    public function setCustomerLocation($customer_location)
    {
        $this->container['customer_location'] = $customer_location;

        return $this;
    }

    /**
     * Gets allocation_rule
     *
     * @return object
     */
    public function getAllocationRule()
    {
        return $this->container['allocation_rule'];
    }

    /**
     * Sets allocation_rule
     *
     * @param object $allocation_rule Summary tab &gt; Invoicing and allocation settings section &gt; Allocation rule &gt; The default allocation rule that is used for the tasks created for the project.
     *
     * @return $this
     */
    public function setAllocationRule($allocation_rule)
    {
        $this->container['allocation_rule'] = $allocation_rule;

        return $this;
    }

    /**
     * Gets billing_rule
     *
     * @return object
     */
    public function getBillingRule()
    {
        return $this->container['billing_rule'];
    }

    /**
     * Sets billing_rule
     *
     * @param object $billing_rule Summary tab &gt; Invoicing and allocation settings section &gt; Invoicing rule &gt; The default invoicing rule that is used for the tasks created for the project.
     *
     * @return $this
     */
    public function setBillingRule($billing_rule)
    {
        $this->container['billing_rule'] = $billing_rule;

        return $this;
    }

    /**
     * Gets rate_table
     *
     * @return object
     */
    public function getRateTable()
    {
        return $this->container['rate_table'];
    }

    /**
     * Sets rate_table
     *
     * @param object $rate_table Summary tab &gt; Invoicing and allocation settings section &gt; Rate table &gt; The rate table to be used with the allocation rules, if applicable.
     *
     * @return $this
     */
    public function setRateTable($rate_table)
    {
        $this->container['rate_table'] = $rate_table;

        return $this;
    }

    /**
     * Gets auto_allocate
     *
     * @return bool
     */
    public function getAutoAllocate()
    {
        return $this->container['auto_allocate'];
    }

    /**
     * Sets auto_allocate
     *
     * @param bool $auto_allocate Summary tab &gt; Invoicing and allocation settings section &gt; Run allocation when you release project transactions &gt; A check box that indicates (if selected) that allocation is run automatically during the release of the documents associated with this project.
     *
     * @return $this
     */
    public function setAutoAllocate($auto_allocate)
    {
        $this->container['auto_allocate'] = $auto_allocate;

        return $this;
    }

    /**
     * Gets automatic_release_ar
     *
     * @return bool
     */
    public function getAutomaticReleaseAr()
    {
        return $this->container['automatic_release_ar'];
    }

    /**
     * Sets automatic_release_ar
     *
     * @param bool $automatic_release_ar Summary tab &gt; Invoicing and allocation settings section &gt; Automatically release customer documents &gt; A check box that indicates (if selected) that invoice documents are released automatically after the project invoicing is completed.
     *
     * @return $this
     */
    public function setAutomaticReleaseAr($automatic_release_ar)
    {
        $this->container['automatic_release_ar'] = $automatic_release_ar;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time System generated information
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets tasks
     *
     * @return \Ekstralys\VismaNetApi\Model\TaskDto[]
     */
    public function getTasks()
    {
        return $this->container['tasks'];
    }

    /**
     * Sets tasks
     *
     * @param \Ekstralys\VismaNetApi\Model\TaskDto[] $tasks Tasks tab &gt;
     *
     * @return $this
     */
    public function setTasks($tasks)
    {
        $this->container['tasks'] = $tasks;

        return $this;
    }

    /**
     * Gets employees
     *
     * @return \Ekstralys\VismaNetApi\Model\EmployeeDto[]
     */
    public function getEmployees()
    {
        return $this->container['employees'];
    }

    /**
     * Sets employees
     *
     * @param \Ekstralys\VismaNetApi\Model\EmployeeDto[] $employees The Employees tab &gt; Information in this tab is retreived from EP203000 (Employees)
     *
     * @return $this
     */
    public function setEmployees($employees)
    {
        $this->container['employees'] = $employees;

        return $this;
    }

    /**
     * Gets public_id
     *
     * @return string
     */
    public function getPublicId()
    {
        return $this->container['public_id'];
    }

    /**
     * Sets public_id
     *
     * @param string $public_id public_id
     *
     * @return $this
     */
    public function setPublicId($public_id)
    {
        $this->container['public_id'] = $public_id;

        return $this;
    }

    /**
     * Gets system_template
     *
     * @return bool
     */
    public function getSystemTemplate()
    {
        return $this->container['system_template'];
    }

    /**
     * Sets system_template
     *
     * @param bool $system_template system_template
     *
     * @return $this
     */
    public function setSystemTemplate($system_template)
    {
        $this->container['system_template'] = $system_template;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \Ekstralys\VismaNetApi\Model\AttributeIdValueDto[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \Ekstralys\VismaNetApi\Model\AttributeIdValueDto[] $attributes Attributes tab &gt;
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


