<?php
/**
 * CustomerGlAccountsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * CustomerGlAccountsDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerGlAccountsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerGlAccountsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_ledger_account' => 'object',
        'customer_ledger_subaccount' => 'object',
        'sales_account' => 'object',
        'sales_non_taxable_account' => 'object',
        'sales_eu_account' => 'object',
        'sales_export_account' => 'object',
        'sales_subaccount' => 'object',
        'discount_account' => 'object',
        'discount_subaccount' => 'object',
        'freight_account' => 'object',
        'freight_subaccount' => 'object',
        'cash_discount_account' => 'object',
        'cash_discount_subaccount' => 'object',
        'prepayment_account' => 'object',
        'prepayment_subaccount' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_ledger_account' => null,
        'customer_ledger_subaccount' => null,
        'sales_account' => null,
        'sales_non_taxable_account' => null,
        'sales_eu_account' => null,
        'sales_export_account' => null,
        'sales_subaccount' => null,
        'discount_account' => null,
        'discount_subaccount' => null,
        'freight_account' => null,
        'freight_subaccount' => null,
        'cash_discount_account' => null,
        'cash_discount_subaccount' => null,
        'prepayment_account' => null,
        'prepayment_subaccount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_ledger_account' => 'customerLedgerAccount',
        'customer_ledger_subaccount' => 'customerLedgerSubaccount',
        'sales_account' => 'salesAccount',
        'sales_non_taxable_account' => 'salesNonTaxableAccount',
        'sales_eu_account' => 'salesEuAccount',
        'sales_export_account' => 'salesExportAccount',
        'sales_subaccount' => 'salesSubaccount',
        'discount_account' => 'discountAccount',
        'discount_subaccount' => 'discountSubaccount',
        'freight_account' => 'freightAccount',
        'freight_subaccount' => 'freightSubaccount',
        'cash_discount_account' => 'cashDiscountAccount',
        'cash_discount_subaccount' => 'cashDiscountSubaccount',
        'prepayment_account' => 'prepaymentAccount',
        'prepayment_subaccount' => 'prepaymentSubaccount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_ledger_account' => 'setCustomerLedgerAccount',
        'customer_ledger_subaccount' => 'setCustomerLedgerSubaccount',
        'sales_account' => 'setSalesAccount',
        'sales_non_taxable_account' => 'setSalesNonTaxableAccount',
        'sales_eu_account' => 'setSalesEuAccount',
        'sales_export_account' => 'setSalesExportAccount',
        'sales_subaccount' => 'setSalesSubaccount',
        'discount_account' => 'setDiscountAccount',
        'discount_subaccount' => 'setDiscountSubaccount',
        'freight_account' => 'setFreightAccount',
        'freight_subaccount' => 'setFreightSubaccount',
        'cash_discount_account' => 'setCashDiscountAccount',
        'cash_discount_subaccount' => 'setCashDiscountSubaccount',
        'prepayment_account' => 'setPrepaymentAccount',
        'prepayment_subaccount' => 'setPrepaymentSubaccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_ledger_account' => 'getCustomerLedgerAccount',
        'customer_ledger_subaccount' => 'getCustomerLedgerSubaccount',
        'sales_account' => 'getSalesAccount',
        'sales_non_taxable_account' => 'getSalesNonTaxableAccount',
        'sales_eu_account' => 'getSalesEuAccount',
        'sales_export_account' => 'getSalesExportAccount',
        'sales_subaccount' => 'getSalesSubaccount',
        'discount_account' => 'getDiscountAccount',
        'discount_subaccount' => 'getDiscountSubaccount',
        'freight_account' => 'getFreightAccount',
        'freight_subaccount' => 'getFreightSubaccount',
        'cash_discount_account' => 'getCashDiscountAccount',
        'cash_discount_subaccount' => 'getCashDiscountSubaccount',
        'prepayment_account' => 'getPrepaymentAccount',
        'prepayment_subaccount' => 'getPrepaymentSubaccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_ledger_account'] = isset($data['customer_ledger_account']) ? $data['customer_ledger_account'] : null;
        $this->container['customer_ledger_subaccount'] = isset($data['customer_ledger_subaccount']) ? $data['customer_ledger_subaccount'] : null;
        $this->container['sales_account'] = isset($data['sales_account']) ? $data['sales_account'] : null;
        $this->container['sales_non_taxable_account'] = isset($data['sales_non_taxable_account']) ? $data['sales_non_taxable_account'] : null;
        $this->container['sales_eu_account'] = isset($data['sales_eu_account']) ? $data['sales_eu_account'] : null;
        $this->container['sales_export_account'] = isset($data['sales_export_account']) ? $data['sales_export_account'] : null;
        $this->container['sales_subaccount'] = isset($data['sales_subaccount']) ? $data['sales_subaccount'] : null;
        $this->container['discount_account'] = isset($data['discount_account']) ? $data['discount_account'] : null;
        $this->container['discount_subaccount'] = isset($data['discount_subaccount']) ? $data['discount_subaccount'] : null;
        $this->container['freight_account'] = isset($data['freight_account']) ? $data['freight_account'] : null;
        $this->container['freight_subaccount'] = isset($data['freight_subaccount']) ? $data['freight_subaccount'] : null;
        $this->container['cash_discount_account'] = isset($data['cash_discount_account']) ? $data['cash_discount_account'] : null;
        $this->container['cash_discount_subaccount'] = isset($data['cash_discount_subaccount']) ? $data['cash_discount_subaccount'] : null;
        $this->container['prepayment_account'] = isset($data['prepayment_account']) ? $data['prepayment_account'] : null;
        $this->container['prepayment_subaccount'] = isset($data['prepayment_subaccount']) ? $data['prepayment_subaccount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_ledger_account
     *
     * @return object
     */
    public function getCustomerLedgerAccount()
    {
        return $this->container['customer_ledger_account'];
    }

    /**
     * Sets customer_ledger_account
     *
     * @param object $customer_ledger_account customer_ledger_account
     *
     * @return $this
     */
    public function setCustomerLedgerAccount($customer_ledger_account)
    {
        $this->container['customer_ledger_account'] = $customer_ledger_account;

        return $this;
    }

    /**
     * Gets customer_ledger_subaccount
     *
     * @return object
     */
    public function getCustomerLedgerSubaccount()
    {
        return $this->container['customer_ledger_subaccount'];
    }

    /**
     * Sets customer_ledger_subaccount
     *
     * @param object $customer_ledger_subaccount customer_ledger_subaccount
     *
     * @return $this
     */
    public function setCustomerLedgerSubaccount($customer_ledger_subaccount)
    {
        $this->container['customer_ledger_subaccount'] = $customer_ledger_subaccount;

        return $this;
    }

    /**
     * Gets sales_account
     *
     * @return object
     */
    public function getSalesAccount()
    {
        return $this->container['sales_account'];
    }

    /**
     * Sets sales_account
     *
     * @param object $sales_account sales_account
     *
     * @return $this
     */
    public function setSalesAccount($sales_account)
    {
        $this->container['sales_account'] = $sales_account;

        return $this;
    }

    /**
     * Gets sales_non_taxable_account
     *
     * @return object
     */
    public function getSalesNonTaxableAccount()
    {
        return $this->container['sales_non_taxable_account'];
    }

    /**
     * Sets sales_non_taxable_account
     *
     * @param object $sales_non_taxable_account sales_non_taxable_account
     *
     * @return $this
     */
    public function setSalesNonTaxableAccount($sales_non_taxable_account)
    {
        $this->container['sales_non_taxable_account'] = $sales_non_taxable_account;

        return $this;
    }

    /**
     * Gets sales_eu_account
     *
     * @return object
     */
    public function getSalesEuAccount()
    {
        return $this->container['sales_eu_account'];
    }

    /**
     * Sets sales_eu_account
     *
     * @param object $sales_eu_account sales_eu_account
     *
     * @return $this
     */
    public function setSalesEuAccount($sales_eu_account)
    {
        $this->container['sales_eu_account'] = $sales_eu_account;

        return $this;
    }

    /**
     * Gets sales_export_account
     *
     * @return object
     */
    public function getSalesExportAccount()
    {
        return $this->container['sales_export_account'];
    }

    /**
     * Sets sales_export_account
     *
     * @param object $sales_export_account sales_export_account
     *
     * @return $this
     */
    public function setSalesExportAccount($sales_export_account)
    {
        $this->container['sales_export_account'] = $sales_export_account;

        return $this;
    }

    /**
     * Gets sales_subaccount
     *
     * @return object
     */
    public function getSalesSubaccount()
    {
        return $this->container['sales_subaccount'];
    }

    /**
     * Sets sales_subaccount
     *
     * @param object $sales_subaccount sales_subaccount
     *
     * @return $this
     */
    public function setSalesSubaccount($sales_subaccount)
    {
        $this->container['sales_subaccount'] = $sales_subaccount;

        return $this;
    }

    /**
     * Gets discount_account
     *
     * @return object
     */
    public function getDiscountAccount()
    {
        return $this->container['discount_account'];
    }

    /**
     * Sets discount_account
     *
     * @param object $discount_account discount_account
     *
     * @return $this
     */
    public function setDiscountAccount($discount_account)
    {
        $this->container['discount_account'] = $discount_account;

        return $this;
    }

    /**
     * Gets discount_subaccount
     *
     * @return object
     */
    public function getDiscountSubaccount()
    {
        return $this->container['discount_subaccount'];
    }

    /**
     * Sets discount_subaccount
     *
     * @param object $discount_subaccount discount_subaccount
     *
     * @return $this
     */
    public function setDiscountSubaccount($discount_subaccount)
    {
        $this->container['discount_subaccount'] = $discount_subaccount;

        return $this;
    }

    /**
     * Gets freight_account
     *
     * @return object
     */
    public function getFreightAccount()
    {
        return $this->container['freight_account'];
    }

    /**
     * Sets freight_account
     *
     * @param object $freight_account freight_account
     *
     * @return $this
     */
    public function setFreightAccount($freight_account)
    {
        $this->container['freight_account'] = $freight_account;

        return $this;
    }

    /**
     * Gets freight_subaccount
     *
     * @return object
     */
    public function getFreightSubaccount()
    {
        return $this->container['freight_subaccount'];
    }

    /**
     * Sets freight_subaccount
     *
     * @param object $freight_subaccount freight_subaccount
     *
     * @return $this
     */
    public function setFreightSubaccount($freight_subaccount)
    {
        $this->container['freight_subaccount'] = $freight_subaccount;

        return $this;
    }

    /**
     * Gets cash_discount_account
     *
     * @return object
     */
    public function getCashDiscountAccount()
    {
        return $this->container['cash_discount_account'];
    }

    /**
     * Sets cash_discount_account
     *
     * @param object $cash_discount_account cash_discount_account
     *
     * @return $this
     */
    public function setCashDiscountAccount($cash_discount_account)
    {
        $this->container['cash_discount_account'] = $cash_discount_account;

        return $this;
    }

    /**
     * Gets cash_discount_subaccount
     *
     * @return object
     */
    public function getCashDiscountSubaccount()
    {
        return $this->container['cash_discount_subaccount'];
    }

    /**
     * Sets cash_discount_subaccount
     *
     * @param object $cash_discount_subaccount cash_discount_subaccount
     *
     * @return $this
     */
    public function setCashDiscountSubaccount($cash_discount_subaccount)
    {
        $this->container['cash_discount_subaccount'] = $cash_discount_subaccount;

        return $this;
    }

    /**
     * Gets prepayment_account
     *
     * @return object
     */
    public function getPrepaymentAccount()
    {
        return $this->container['prepayment_account'];
    }

    /**
     * Sets prepayment_account
     *
     * @param object $prepayment_account prepayment_account
     *
     * @return $this
     */
    public function setPrepaymentAccount($prepayment_account)
    {
        $this->container['prepayment_account'] = $prepayment_account;

        return $this;
    }

    /**
     * Gets prepayment_subaccount
     *
     * @return object
     */
    public function getPrepaymentSubaccount()
    {
        return $this->container['prepayment_subaccount'];
    }

    /**
     * Sets prepayment_subaccount
     *
     * @param object $prepayment_subaccount prepayment_subaccount
     *
     * @return $this
     */
    public function setPrepaymentSubaccount($prepayment_subaccount)
    {
        $this->container['prepayment_subaccount'] = $prepayment_subaccount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


