<?php
/**
 * StocktakeLineDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * StocktakeLineDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StocktakeLineDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StocktakeLineDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'status' => 'string',
        'line_nbr' => 'int',
        'tag_nbr' => 'int',
        'inventory' => 'object',
        'location' => 'object',
        'warehouse' => 'object',
        'lot_serial_nbr' => 'string',
        'expiration_date' => '\DateTime',
        'book_quantity' => 'double',
        'physical_quantity' => 'double',
        'variance_quantity' => 'double',
        'unit_cost' => 'double',
        'ext_variance_cost' => 'double',
        'reason_code' => 'string',
        'last_modified_date_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'status' => null,
        'line_nbr' => 'int32',
        'tag_nbr' => 'int32',
        'inventory' => null,
        'location' => null,
        'warehouse' => null,
        'lot_serial_nbr' => null,
        'expiration_date' => 'date-time',
        'book_quantity' => 'double',
        'physical_quantity' => 'double',
        'variance_quantity' => 'double',
        'unit_cost' => 'double',
        'ext_variance_cost' => 'double',
        'reason_code' => null,
        'last_modified_date_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'line_nbr' => 'lineNbr',
        'tag_nbr' => 'tagNbr',
        'inventory' => 'inventory',
        'location' => 'location',
        'warehouse' => 'warehouse',
        'lot_serial_nbr' => 'lotSerialNbr',
        'expiration_date' => 'expirationDate',
        'book_quantity' => 'bookQuantity',
        'physical_quantity' => 'physicalQuantity',
        'variance_quantity' => 'varianceQuantity',
        'unit_cost' => 'unitCost',
        'ext_variance_cost' => 'extVarianceCost',
        'reason_code' => 'reasonCode',
        'last_modified_date_time' => 'lastModifiedDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'line_nbr' => 'setLineNbr',
        'tag_nbr' => 'setTagNbr',
        'inventory' => 'setInventory',
        'location' => 'setLocation',
        'warehouse' => 'setWarehouse',
        'lot_serial_nbr' => 'setLotSerialNbr',
        'expiration_date' => 'setExpirationDate',
        'book_quantity' => 'setBookQuantity',
        'physical_quantity' => 'setPhysicalQuantity',
        'variance_quantity' => 'setVarianceQuantity',
        'unit_cost' => 'setUnitCost',
        'ext_variance_cost' => 'setExtVarianceCost',
        'reason_code' => 'setReasonCode',
        'last_modified_date_time' => 'setLastModifiedDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'line_nbr' => 'getLineNbr',
        'tag_nbr' => 'getTagNbr',
        'inventory' => 'getInventory',
        'location' => 'getLocation',
        'warehouse' => 'getWarehouse',
        'lot_serial_nbr' => 'getLotSerialNbr',
        'expiration_date' => 'getExpirationDate',
        'book_quantity' => 'getBookQuantity',
        'physical_quantity' => 'getPhysicalQuantity',
        'variance_quantity' => 'getVarianceQuantity',
        'unit_cost' => 'getUnitCost',
        'ext_variance_cost' => 'getExtVarianceCost',
        'reason_code' => 'getReasonCode',
        'last_modified_date_time' => 'getLastModifiedDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_NOT_ENTERED = 'NotEntered';
    const STATUS_ENTERED = 'Entered';
    const STATUS_SKIPPED = 'Skipped';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NOT_ENTERED,
            self::STATUS_ENTERED,
            self::STATUS_SKIPPED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['line_nbr'] = isset($data['line_nbr']) ? $data['line_nbr'] : null;
        $this->container['tag_nbr'] = isset($data['tag_nbr']) ? $data['tag_nbr'] : null;
        $this->container['inventory'] = isset($data['inventory']) ? $data['inventory'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['lot_serial_nbr'] = isset($data['lot_serial_nbr']) ? $data['lot_serial_nbr'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['book_quantity'] = isset($data['book_quantity']) ? $data['book_quantity'] : null;
        $this->container['physical_quantity'] = isset($data['physical_quantity']) ? $data['physical_quantity'] : null;
        $this->container['variance_quantity'] = isset($data['variance_quantity']) ? $data['variance_quantity'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['ext_variance_cost'] = isset($data['ext_variance_cost']) ? $data['ext_variance_cost'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Stocktaking details tab &gt; Status &gt; The status of the line of the stocktaking document, which indicates whether the actual physical quantity has been specified for the line.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets line_nbr
     *
     * @return int
     */
    public function getLineNbr()
    {
        return $this->container['line_nbr'];
    }

    /**
     * Sets line_nbr
     *
     * @param int $line_nbr Stocktaking details tab &gt; Line no. &gt; The number of the line in the stocktaking document.
     *
     * @return $this
     */
    public function setLineNbr($line_nbr)
    {
        $this->container['line_nbr'] = $line_nbr;

        return $this;
    }

    /**
     * Gets tag_nbr
     *
     * @return int
     */
    public function getTagNbr()
    {
        return $this->container['tag_nbr'];
    }

    /**
     * Sets tag_nbr
     *
     * @param int $tag_nbr Stocktaking details tab &gt; Tag no. &gt; The tag number for the line item, which is the stock item with the properties specified in the line, such as location, subitem, and lot or serial number.
     *
     * @return $this
     */
    public function setTagNbr($tag_nbr)
    {
        $this->container['tag_nbr'] = $tag_nbr;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return object
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param object $inventory Stocktaking details tab &gt; Item ID &gt; The item ID of the item.
     *
     * @return $this
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location Stocktaking details tab &gt; Location &gt; The warehouse location of the item.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return object
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param object $warehouse The top part &gt; Warehouse &gt; An info field that shows the warehouse where the stocktaking count is performed.
     *
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets lot_serial_nbr
     *
     * @return string
     */
    public function getLotSerialNbr()
    {
        return $this->container['lot_serial_nbr'];
    }

    /**
     * Sets lot_serial_nbr
     *
     * @param string $lot_serial_nbr Stocktaking details tab &gt; Lot/serial number &gt; The lot or serial number of the item.
     *
     * @return $this
     */
    public function setLotSerialNbr($lot_serial_nbr)
    {
        $this->container['lot_serial_nbr'] = $lot_serial_nbr;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date Stocktaking details tab &gt; Expiration date &gt; The expiration date of the item with this specific lot or serial number.
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets book_quantity
     *
     * @return double
     */
    public function getBookQuantity()
    {
        return $this->container['book_quantity'];
    }

    /**
     * Sets book_quantity
     *
     * @param double $book_quantity Stocktaking details tab &gt; Book quantity &gt; The book quantity of the item, which is calculated based on the system records.
     *
     * @return $this
     */
    public function setBookQuantity($book_quantity)
    {
        $this->container['book_quantity'] = $book_quantity;

        return $this;
    }

    /**
     * Gets physical_quantity
     *
     * @return double
     */
    public function getPhysicalQuantity()
    {
        return $this->container['physical_quantity'];
    }

    /**
     * Sets physical_quantity
     *
     * @param double $physical_quantity Stocktaking details tab &gt; Physical quantity &gt; The physical quantity of the item as entered manually.
     *
     * @return $this
     */
    public function setPhysicalQuantity($physical_quantity)
    {
        $this->container['physical_quantity'] = $physical_quantity;

        return $this;
    }

    /**
     * Gets variance_quantity
     *
     * @return double
     */
    public function getVarianceQuantity()
    {
        return $this->container['variance_quantity'];
    }

    /**
     * Sets variance_quantity
     *
     * @param double $variance_quantity Stocktaking details tab &gt; Variance quantity &gt; The difference between the book quantity and the physical quantity for the line item.
     *
     * @return $this
     */
    public function setVarianceQuantity($variance_quantity)
    {
        $this->container['variance_quantity'] = $variance_quantity;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return double
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param double $unit_cost Stocktaking details tab &gt; Unit cost &gt; The last cost of the item’s base unit as approximation of its unit cost during the count.
     *
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets ext_variance_cost
     *
     * @return double
     */
    public function getExtVarianceCost()
    {
        return $this->container['ext_variance_cost'];
    }

    /**
     * Sets ext_variance_cost
     *
     * @param double $ext_variance_cost Stocktaking details tab &gt; Variance cost &gt; The difference between the extended cost calculated based on the book quantity and the extended cost calculated based on the physical quantity for the item.
     *
     * @return $this
     */
    public function setExtVarianceCost($ext_variance_cost)
    {
        $this->container['ext_variance_cost'] = $ext_variance_cost;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code Stocktaking details tab &gt; Reason code &gt; The reason code for the item.
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time System generated information.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


