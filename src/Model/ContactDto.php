<?php
/**
 * ContactDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * ContactDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a contact in ContactController. Used by getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'display_name' => 'string',
        'active' => 'bool',
        'title' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'position' => 'string',
        'business_account' => 'string',
        'business_account_type' => 'string',
        'same_as_account' => 'bool',
        'address' => 'object',
        'email' => 'string',
        'web' => 'string',
        'phone1' => 'string',
        'phone2' => 'string',
        'phone3' => 'string',
        'fax' => 'string',
        'contact_method' => 'string',
        'do_not_call' => 'bool',
        'do_not_fax' => 'bool',
        'do_not_email' => 'bool',
        'do_not_mail' => 'bool',
        'no_mass_mail' => 'bool',
        'no_marketing' => 'bool',
        'last_modified_date_time' => '\DateTime',
        'contact_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'display_name' => null,
        'active' => null,
        'title' => null,
        'first_name' => null,
        'last_name' => null,
        'position' => null,
        'business_account' => null,
        'business_account_type' => null,
        'same_as_account' => null,
        'address' => null,
        'email' => null,
        'web' => null,
        'phone1' => null,
        'phone2' => null,
        'phone3' => null,
        'fax' => null,
        'contact_method' => null,
        'do_not_call' => null,
        'do_not_fax' => null,
        'do_not_email' => null,
        'do_not_mail' => null,
        'no_mass_mail' => null,
        'no_marketing' => null,
        'last_modified_date_time' => 'date-time',
        'contact_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_name' => 'displayName',
        'active' => 'active',
        'title' => 'title',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'position' => 'position',
        'business_account' => 'businessAccount',
        'business_account_type' => 'businessAccountType',
        'same_as_account' => 'sameAsAccount',
        'address' => 'address',
        'email' => 'email',
        'web' => 'web',
        'phone1' => 'phone1',
        'phone2' => 'phone2',
        'phone3' => 'phone3',
        'fax' => 'fax',
        'contact_method' => 'contactMethod',
        'do_not_call' => 'doNotCall',
        'do_not_fax' => 'doNotFax',
        'do_not_email' => 'doNotEmail',
        'do_not_mail' => 'doNotMail',
        'no_mass_mail' => 'noMassMail',
        'no_marketing' => 'noMarketing',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'contact_id' => 'contactId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_name' => 'setDisplayName',
        'active' => 'setActive',
        'title' => 'setTitle',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'position' => 'setPosition',
        'business_account' => 'setBusinessAccount',
        'business_account_type' => 'setBusinessAccountType',
        'same_as_account' => 'setSameAsAccount',
        'address' => 'setAddress',
        'email' => 'setEmail',
        'web' => 'setWeb',
        'phone1' => 'setPhone1',
        'phone2' => 'setPhone2',
        'phone3' => 'setPhone3',
        'fax' => 'setFax',
        'contact_method' => 'setContactMethod',
        'do_not_call' => 'setDoNotCall',
        'do_not_fax' => 'setDoNotFax',
        'do_not_email' => 'setDoNotEmail',
        'do_not_mail' => 'setDoNotMail',
        'no_mass_mail' => 'setNoMassMail',
        'no_marketing' => 'setNoMarketing',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'contact_id' => 'setContactId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_name' => 'getDisplayName',
        'active' => 'getActive',
        'title' => 'getTitle',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'position' => 'getPosition',
        'business_account' => 'getBusinessAccount',
        'business_account_type' => 'getBusinessAccountType',
        'same_as_account' => 'getSameAsAccount',
        'address' => 'getAddress',
        'email' => 'getEmail',
        'web' => 'getWeb',
        'phone1' => 'getPhone1',
        'phone2' => 'getPhone2',
        'phone3' => 'getPhone3',
        'fax' => 'getFax',
        'contact_method' => 'getContactMethod',
        'do_not_call' => 'getDoNotCall',
        'do_not_fax' => 'getDoNotFax',
        'do_not_email' => 'getDoNotEmail',
        'do_not_mail' => 'getDoNotMail',
        'no_mass_mail' => 'getNoMassMail',
        'no_marketing' => 'getNoMarketing',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'contact_id' => 'getContactId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TITLE_DOCTOR = 'Doctor';
    const TITLE_MISS = 'Miss';
    const TITLE_MR = 'Mr';
    const TITLE_MRS = 'Mrs';
    const TITLE_MS = 'Ms';
    const TITLE_PROF = 'Prof';
    const CONTACT_METHOD_ANY = 'Any';
    const CONTACT_METHOD_EMAIL = 'Email';
    const CONTACT_METHOD_MAIL = 'Mail';
    const CONTACT_METHOD_FAX = 'Fax';
    const CONTACT_METHOD_PHONE = 'Phone';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTitleAllowableValues()
    {
        return [
            self::TITLE_DOCTOR,
            self::TITLE_MISS,
            self::TITLE_MR,
            self::TITLE_MRS,
            self::TITLE_MS,
            self::TITLE_PROF,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContactMethodAllowableValues()
    {
        return [
            self::CONTACT_METHOD_ANY,
            self::CONTACT_METHOD_EMAIL,
            self::CONTACT_METHOD_MAIL,
            self::CONTACT_METHOD_FAX,
            self::CONTACT_METHOD_PHONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['business_account'] = isset($data['business_account']) ? $data['business_account'] : null;
        $this->container['business_account_type'] = isset($data['business_account_type']) ? $data['business_account_type'] : null;
        $this->container['same_as_account'] = isset($data['same_as_account']) ? $data['same_as_account'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['web'] = isset($data['web']) ? $data['web'] : null;
        $this->container['phone1'] = isset($data['phone1']) ? $data['phone1'] : null;
        $this->container['phone2'] = isset($data['phone2']) ? $data['phone2'] : null;
        $this->container['phone3'] = isset($data['phone3']) ? $data['phone3'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['contact_method'] = isset($data['contact_method']) ? $data['contact_method'] : null;
        $this->container['do_not_call'] = isset($data['do_not_call']) ? $data['do_not_call'] : null;
        $this->container['do_not_fax'] = isset($data['do_not_fax']) ? $data['do_not_fax'] : null;
        $this->container['do_not_email'] = isset($data['do_not_email']) ? $data['do_not_email'] : null;
        $this->container['do_not_mail'] = isset($data['do_not_mail']) ? $data['do_not_mail'] : null;
        $this->container['no_mass_mail'] = isset($data['no_mass_mail']) ? $data['no_mass_mail'] : null;
        $this->container['no_marketing'] = isset($data['no_marketing']) ? $data['no_marketing'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTitleAllowableValues();
        if (!is_null($this->container['title']) && !in_array($this->container['title'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'title', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContactMethodAllowableValues();
        if (!is_null($this->container['contact_method']) && !in_array($this->container['contact_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'contact_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active The top part &gt; Active &gt; A check box that indicates (if selected) that the contact is active.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The top part &gt; First name &gt; The contact's courtesy title.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $allowedValues = $this->getTitleAllowableValues();
        if (!is_null($title) && !in_array($title, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'title', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The top part &gt; First name &gt; The first name of the contact.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Mandatory field: The top part &gt; Last name* &gt; The last name of the contact.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string $position The top part &gt; Job title &gt; The contact’s job title or position.
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets business_account
     *
     * @return string
     */
    public function getBusinessAccount()
    {
        return $this->container['business_account'];
    }

    /**
     * Sets business_account
     *
     * @param string $business_account The top part &gt; Business account &gt; The business account associated with the contact.
     *
     * @return $this
     */
    public function setBusinessAccount($business_account)
    {
        $this->container['business_account'] = $business_account;

        return $this;
    }

    /**
     * Gets business_account_type
     *
     * @return string
     */
    public function getBusinessAccountType()
    {
        return $this->container['business_account_type'];
    }

    /**
     * Sets business_account_type
     *
     * @param string $business_account_type The top part &gt; Business account &gt; The business account type of the business account associated with the contact.
     *
     * @return $this
     */
    public function setBusinessAccountType($business_account_type)
    {
        $this->container['business_account_type'] = $business_account_type;

        return $this;
    }

    /**
     * Gets same_as_account
     *
     * @return bool
     */
    public function getSameAsAccount()
    {
        return $this->container['same_as_account'];
    }

    /**
     * Sets same_as_account
     *
     * @param bool $same_as_account The Details tab &gt; Same as in account &gt; A check box that indicates (if selected) that the contact's address is the same as the address of the business account.
     *
     * @return $this
     */
    public function setSameAsAccount($same_as_account)
    {
        $this->container['same_as_account'] = $same_as_account;

        return $this;
    }

    /**
     * Gets address
     *
     * @return object
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param object $address The Details tab &gt; Address section &gt;
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The Details tab &gt; Contact section &gt; Email &gt; The email address of the contact.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets web
     *
     * @return string
     */
    public function getWeb()
    {
        return $this->container['web'];
    }

    /**
     * Sets web
     *
     * @param string $web The Details tab &gt; Contact section &gt; Web &gt; The website of the contact, if any.
     *
     * @return $this
     */
    public function setWeb($web)
    {
        $this->container['web'] = $web;

        return $this;
    }

    /**
     * Gets phone1
     *
     * @return string
     */
    public function getPhone1()
    {
        return $this->container['phone1'];
    }

    /**
     * Sets phone1
     *
     * @param string $phone1 The Details tab &gt; Contact section &gt; Business 1/Business 2/Business 3/Business assistant 1/Business fax /Home/Home fax/Mobile &gt; The primary phone number of the contact. Select the type from the drop down.
     *
     * @return $this
     */
    public function setPhone1($phone1)
    {
        $this->container['phone1'] = $phone1;

        return $this;
    }

    /**
     * Gets phone2
     *
     * @return string
     */
    public function getPhone2()
    {
        return $this->container['phone2'];
    }

    /**
     * Sets phone2
     *
     * @param string $phone2 The Details tab &gt; Contact section &gt; Business 1/Business 2/Business 3/Business assistant 1/Business fax /Home/Home fax/Mobile &gt; The primary phone number of the contact. Select the type from the drop down.
     *
     * @return $this
     */
    public function setPhone2($phone2)
    {
        $this->container['phone2'] = $phone2;

        return $this;
    }

    /**
     * Gets phone3
     *
     * @return string
     */
    public function getPhone3()
    {
        return $this->container['phone3'];
    }

    /**
     * Sets phone3
     *
     * @param string $phone3 The Details tab &gt; Contact section &gt; Business 1/Business 2/Business 3/Business assistant 1/Business fax /Home/Home fax/Mobile &gt; The primary phone number of the contact. Select the type from the drop down.
     *
     * @return $this
     */
    public function setPhone3($phone3)
    {
        $this->container['phone3'] = $phone3;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax The Details tab &gt; Contact section &gt; Business fax &gt; The fax number of the contact.
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets contact_method
     *
     * @return string
     */
    public function getContactMethod()
    {
        return $this->container['contact_method'];
    }

    /**
     * Sets contact_method
     *
     * @param string $contact_method CRM section not available in Visma.net ERP
     *
     * @return $this
     */
    public function setContactMethod($contact_method)
    {
        $allowedValues = $this->getContactMethodAllowableValues();
        if (!is_null($contact_method) && !in_array($contact_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'contact_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contact_method'] = $contact_method;

        return $this;
    }

    /**
     * Gets do_not_call
     *
     * @return bool
     */
    public function getDoNotCall()
    {
        return $this->container['do_not_call'];
    }

    /**
     * Sets do_not_call
     *
     * @param bool $do_not_call CRM section not available in Visma.net ERP
     *
     * @return $this
     */
    public function setDoNotCall($do_not_call)
    {
        $this->container['do_not_call'] = $do_not_call;

        return $this;
    }

    /**
     * Gets do_not_fax
     *
     * @return bool
     */
    public function getDoNotFax()
    {
        return $this->container['do_not_fax'];
    }

    /**
     * Sets do_not_fax
     *
     * @param bool $do_not_fax CRM section not available in Visma.net ERP
     *
     * @return $this
     */
    public function setDoNotFax($do_not_fax)
    {
        $this->container['do_not_fax'] = $do_not_fax;

        return $this;
    }

    /**
     * Gets do_not_email
     *
     * @return bool
     */
    public function getDoNotEmail()
    {
        return $this->container['do_not_email'];
    }

    /**
     * Sets do_not_email
     *
     * @param bool $do_not_email CRM section not available in Visma.net ERP
     *
     * @return $this
     */
    public function setDoNotEmail($do_not_email)
    {
        $this->container['do_not_email'] = $do_not_email;

        return $this;
    }

    /**
     * Gets do_not_mail
     *
     * @return bool
     */
    public function getDoNotMail()
    {
        return $this->container['do_not_mail'];
    }

    /**
     * Sets do_not_mail
     *
     * @param bool $do_not_mail CRM section not available in Visma.net ERP
     *
     * @return $this
     */
    public function setDoNotMail($do_not_mail)
    {
        $this->container['do_not_mail'] = $do_not_mail;

        return $this;
    }

    /**
     * Gets no_mass_mail
     *
     * @return bool
     */
    public function getNoMassMail()
    {
        return $this->container['no_mass_mail'];
    }

    /**
     * Sets no_mass_mail
     *
     * @param bool $no_mass_mail CRM section not available in Visma.net ERP
     *
     * @return $this
     */
    public function setNoMassMail($no_mass_mail)
    {
        $this->container['no_mass_mail'] = $no_mass_mail;

        return $this;
    }

    /**
     * Gets no_marketing
     *
     * @return bool
     */
    public function getNoMarketing()
    {
        return $this->container['no_marketing'];
    }

    /**
     * Sets no_marketing
     *
     * @param bool $no_marketing CRM section not available in Visma.net ERP
     *
     * @return $this
     */
    public function setNoMarketing($no_marketing)
    {
        $this->container['no_marketing'] = $no_marketing;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time Background information: The date and time when the details of the contact were last updated.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id The top part &gt; Contact ID &gt; The unique identifier of the contact, which the system generates automatically.
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


