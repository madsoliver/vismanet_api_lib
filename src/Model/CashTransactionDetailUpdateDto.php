<?php
/**
 * CashTransactionDetailUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * CashTransactionDetailUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CashTransactionDetailUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CashTransactionDetailUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'operation' => 'string',
        'line_number' => 'object',
        'branch_number' => 'object',
        'inventory_number' => 'object',
        'description' => 'object',
        'quantity' => '\Ekstralys\VismaNetApi\Model\DtoValueNullableDecimal',
        'uom' => 'object',
        'price' => '\Ekstralys\VismaNetApi\Model\DtoValueNullableDecimal',
        'amount' => '\Ekstralys\VismaNetApi\Model\DtoValueNullableDecimal',
        'offset_account' => 'object',
        'offset_subaccount' => '\Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]',
        'vat_code' => 'object',
        'not_invoiceable' => 'object',
        'project' => 'object',
        'project_task' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'operation' => null,
        'line_number' => null,
        'branch_number' => null,
        'inventory_number' => null,
        'description' => null,
        'quantity' => null,
        'uom' => null,
        'price' => null,
        'amount' => null,
        'offset_account' => null,
        'offset_subaccount' => null,
        'vat_code' => null,
        'not_invoiceable' => null,
        'project' => null,
        'project_task' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'operation' => 'operation',
        'line_number' => 'lineNumber',
        'branch_number' => 'branchNumber',
        'inventory_number' => 'inventoryNumber',
        'description' => 'description',
        'quantity' => 'quantity',
        'uom' => 'uom',
        'price' => 'price',
        'amount' => 'amount',
        'offset_account' => 'offsetAccount',
        'offset_subaccount' => 'offsetSubaccount',
        'vat_code' => 'vatCode',
        'not_invoiceable' => 'notInvoiceable',
        'project' => 'project',
        'project_task' => 'projectTask'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'operation' => 'setOperation',
        'line_number' => 'setLineNumber',
        'branch_number' => 'setBranchNumber',
        'inventory_number' => 'setInventoryNumber',
        'description' => 'setDescription',
        'quantity' => 'setQuantity',
        'uom' => 'setUom',
        'price' => 'setPrice',
        'amount' => 'setAmount',
        'offset_account' => 'setOffsetAccount',
        'offset_subaccount' => 'setOffsetSubaccount',
        'vat_code' => 'setVatCode',
        'not_invoiceable' => 'setNotInvoiceable',
        'project' => 'setProject',
        'project_task' => 'setProjectTask'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'operation' => 'getOperation',
        'line_number' => 'getLineNumber',
        'branch_number' => 'getBranchNumber',
        'inventory_number' => 'getInventoryNumber',
        'description' => 'getDescription',
        'quantity' => 'getQuantity',
        'uom' => 'getUom',
        'price' => 'getPrice',
        'amount' => 'getAmount',
        'offset_account' => 'getOffsetAccount',
        'offset_subaccount' => 'getOffsetSubaccount',
        'vat_code' => 'getVatCode',
        'not_invoiceable' => 'getNotInvoiceable',
        'project' => 'getProject',
        'project_task' => 'getProjectTask'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OPERATION_INSERT = 'Insert';
    const OPERATION_UPDATE = 'Update';
    const OPERATION_DELETE = 'Delete';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_INSERT,
            self::OPERATION_UPDATE,
            self::OPERATION_DELETE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['branch_number'] = isset($data['branch_number']) ? $data['branch_number'] : null;
        $this->container['inventory_number'] = isset($data['inventory_number']) ? $data['inventory_number'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['offset_account'] = isset($data['offset_account']) ? $data['offset_account'] : null;
        $this->container['offset_subaccount'] = isset($data['offset_subaccount']) ? $data['offset_subaccount'] : null;
        $this->container['vat_code'] = isset($data['vat_code']) ? $data['vat_code'] : null;
        $this->container['not_invoiceable'] = isset($data['not_invoiceable']) ? $data['not_invoiceable'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['project_task'] = isset($data['project_task']) ? $data['project_task'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation operation
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($operation) && !in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets line_number
     *
     * @return object
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param object $line_number line_number
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return object
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param object $branch_number branch_number
     *
     * @return $this
     */
    public function setBranchNumber($branch_number)
    {
        $this->container['branch_number'] = $branch_number;

        return $this;
    }

    /**
     * Gets inventory_number
     *
     * @return object
     */
    public function getInventoryNumber()
    {
        return $this->container['inventory_number'];
    }

    /**
     * Sets inventory_number
     *
     * @param object $inventory_number inventory_number
     *
     * @return $this
     */
    public function setInventoryNumber($inventory_number)
    {
        $this->container['inventory_number'] = $inventory_number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return object
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param object $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return \Ekstralys\VismaNetApi\Model\DtoValueNullableDecimal
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param \Ekstralys\VismaNetApi\Model\DtoValueNullableDecimal $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return object
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param object $uom uom
     *
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Ekstralys\VismaNetApi\Model\DtoValueNullableDecimal
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Ekstralys\VismaNetApi\Model\DtoValueNullableDecimal $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Ekstralys\VismaNetApi\Model\DtoValueNullableDecimal
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Ekstralys\VismaNetApi\Model\DtoValueNullableDecimal $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets offset_account
     *
     * @return object
     */
    public function getOffsetAccount()
    {
        return $this->container['offset_account'];
    }

    /**
     * Sets offset_account
     *
     * @param object $offset_account offset_account
     *
     * @return $this
     */
    public function setOffsetAccount($offset_account)
    {
        $this->container['offset_account'] = $offset_account;

        return $this;
    }

    /**
     * Gets offset_subaccount
     *
     * @return \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]
     */
    public function getOffsetSubaccount()
    {
        return $this->container['offset_subaccount'];
    }

    /**
     * Sets offset_subaccount
     *
     * @param \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[] $offset_subaccount offset_subaccount
     *
     * @return $this
     */
    public function setOffsetSubaccount($offset_subaccount)
    {
        $this->container['offset_subaccount'] = $offset_subaccount;

        return $this;
    }

    /**
     * Gets vat_code
     *
     * @return object
     */
    public function getVatCode()
    {
        return $this->container['vat_code'];
    }

    /**
     * Sets vat_code
     *
     * @param object $vat_code vat_code
     *
     * @return $this
     */
    public function setVatCode($vat_code)
    {
        $this->container['vat_code'] = $vat_code;

        return $this;
    }

    /**
     * Gets not_invoiceable
     *
     * @return object
     */
    public function getNotInvoiceable()
    {
        return $this->container['not_invoiceable'];
    }

    /**
     * Sets not_invoiceable
     *
     * @param object $not_invoiceable not_invoiceable
     *
     * @return $this
     */
    public function setNotInvoiceable($not_invoiceable)
    {
        $this->container['not_invoiceable'] = $not_invoiceable;

        return $this;
    }

    /**
     * Gets project
     *
     * @return object
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param object $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets project_task
     *
     * @return object
     */
    public function getProjectTask()
    {
        return $this->container['project_task'];
    }

    /**
     * Sets project_task
     *
     * @param object $project_task project_task
     *
     * @return $this
     */
    public function setProjectTask($project_task)
    {
        $this->container['project_task'] = $project_task;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


