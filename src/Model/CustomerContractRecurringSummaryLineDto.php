<?php
/**
 * CustomerContractRecurringSummaryLineDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * CustomerContractRecurringSummaryLineDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a CustomerContractRecurringSummaryLine in CustomerContractController. Used for getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerContractRecurringSummaryLineDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerContractRecurringSummaryLineDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'item_code' => 'string',
        'description' => 'string',
        'item_id' => 'string',
        'uom' => 'string',
        'invoice_type' => 'string',
        'included' => 'double',
        'recurring_price' => 'double',
        'recurring_discount' => 'double',
        'extra_usage_price' => 'double',
        'un_invoiced' => 'double',
        'used_total' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'item_code' => null,
        'description' => null,
        'item_id' => null,
        'uom' => null,
        'invoice_type' => null,
        'included' => 'double',
        'recurring_price' => 'double',
        'recurring_discount' => 'double',
        'extra_usage_price' => 'double',
        'un_invoiced' => 'double',
        'used_total' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_code' => 'itemCode',
        'description' => 'description',
        'item_id' => 'itemId',
        'uom' => 'uom',
        'invoice_type' => 'invoiceType',
        'included' => 'included',
        'recurring_price' => 'recurringPrice',
        'recurring_discount' => 'recurringDiscount',
        'extra_usage_price' => 'extraUsagePrice',
        'un_invoiced' => 'unInvoiced',
        'used_total' => 'usedTotal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_code' => 'setItemCode',
        'description' => 'setDescription',
        'item_id' => 'setItemId',
        'uom' => 'setUom',
        'invoice_type' => 'setInvoiceType',
        'included' => 'setIncluded',
        'recurring_price' => 'setRecurringPrice',
        'recurring_discount' => 'setRecurringDiscount',
        'extra_usage_price' => 'setExtraUsagePrice',
        'un_invoiced' => 'setUnInvoiced',
        'used_total' => 'setUsedTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_code' => 'getItemCode',
        'description' => 'getDescription',
        'item_id' => 'getItemId',
        'uom' => 'getUom',
        'invoice_type' => 'getInvoiceType',
        'included' => 'getIncluded',
        'recurring_price' => 'getRecurringPrice',
        'recurring_discount' => 'getRecurringDiscount',
        'extra_usage_price' => 'getExtraUsagePrice',
        'un_invoiced' => 'getUnInvoiced',
        'used_total' => 'getUsedTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INVOICE_TYPE_NONE = 'None';
    const INVOICE_TYPE_PREPAY = 'Prepay';
    const INVOICE_TYPE_USAGE = 'Usage';
    const INVOICE_TYPE_DEPOSITS = 'Deposits';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceTypeAllowableValues()
    {
        return [
            self::INVOICE_TYPE_NONE,
            self::INVOICE_TYPE_PREPAY,
            self::INVOICE_TYPE_USAGE,
            self::INVOICE_TYPE_DEPOSITS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_code'] = isset($data['item_code']) ? $data['item_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['included'] = isset($data['included']) ? $data['included'] : null;
        $this->container['recurring_price'] = isset($data['recurring_price']) ? $data['recurring_price'] : null;
        $this->container['recurring_discount'] = isset($data['recurring_discount']) ? $data['recurring_discount'] : null;
        $this->container['extra_usage_price'] = isset($data['extra_usage_price']) ? $data['extra_usage_price'] : null;
        $this->container['un_invoiced'] = isset($data['un_invoiced']) ? $data['un_invoiced'] : null;
        $this->container['used_total'] = isset($data['used_total']) ? $data['used_total'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!is_null($this->container['invoice_type']) && !in_array($this->container['invoice_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'invoice_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_code
     *
     * @return string
     */
    public function getItemCode()
    {
        return $this->container['item_code'];
    }

    /**
     * Sets item_code
     *
     * @param string $item_code item_code
     *
     * @return $this
     */
    public function setItemCode($item_code)
    {
        $this->container['item_code'] = $item_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string $item_id item_id
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return string
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param string $uom uom
     *
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return string
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param string $invoice_type invoice_type
     *
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!is_null($invoice_type) && !in_array($invoice_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'invoice_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets included
     *
     * @return double
     */
    public function getIncluded()
    {
        return $this->container['included'];
    }

    /**
     * Sets included
     *
     * @param double $included included
     *
     * @return $this
     */
    public function setIncluded($included)
    {
        $this->container['included'] = $included;

        return $this;
    }

    /**
     * Gets recurring_price
     *
     * @return double
     */
    public function getRecurringPrice()
    {
        return $this->container['recurring_price'];
    }

    /**
     * Sets recurring_price
     *
     * @param double $recurring_price recurring_price
     *
     * @return $this
     */
    public function setRecurringPrice($recurring_price)
    {
        $this->container['recurring_price'] = $recurring_price;

        return $this;
    }

    /**
     * Gets recurring_discount
     *
     * @return double
     */
    public function getRecurringDiscount()
    {
        return $this->container['recurring_discount'];
    }

    /**
     * Sets recurring_discount
     *
     * @param double $recurring_discount recurring_discount
     *
     * @return $this
     */
    public function setRecurringDiscount($recurring_discount)
    {
        $this->container['recurring_discount'] = $recurring_discount;

        return $this;
    }

    /**
     * Gets extra_usage_price
     *
     * @return double
     */
    public function getExtraUsagePrice()
    {
        return $this->container['extra_usage_price'];
    }

    /**
     * Sets extra_usage_price
     *
     * @param double $extra_usage_price extra_usage_price
     *
     * @return $this
     */
    public function setExtraUsagePrice($extra_usage_price)
    {
        $this->container['extra_usage_price'] = $extra_usage_price;

        return $this;
    }

    /**
     * Gets un_invoiced
     *
     * @return double
     */
    public function getUnInvoiced()
    {
        return $this->container['un_invoiced'];
    }

    /**
     * Sets un_invoiced
     *
     * @param double $un_invoiced un_invoiced
     *
     * @return $this
     */
    public function setUnInvoiced($un_invoiced)
    {
        $this->container['un_invoiced'] = $un_invoiced;

        return $this;
    }

    /**
     * Gets used_total
     *
     * @return double
     */
    public function getUsedTotal()
    {
        return $this->container['used_total'];
    }

    /**
     * Sets used_total
     *
     * @param double $used_total used_total
     *
     * @return $this
     */
    public function setUsedTotal($used_total)
    {
        $this->container['used_total'] = $used_total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


