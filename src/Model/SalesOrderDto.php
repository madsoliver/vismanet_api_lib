<?php
/**
 * SalesOrderDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * SalesOrderDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a SOOrder in SOOrderController. Used by getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesOrderDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesOrderDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'project' => 'int',
        'print_description_on_invoice' => 'bool',
        'print_note_on_external_documents' => 'bool',
        'print_note_on_internal_documents' => 'bool',
        'so_billing_contact' => 'object',
        'so_billing_address' => 'object',
        'customer_vat_zone' => 'object',
        'invoice_separately' => 'bool',
        'invoice_nbr' => 'string',
        'invoice_date' => '\DateTime',
        'terms' => 'object',
        'due_date' => '\DateTime',
        'cash_discount_date' => '\DateTime',
        'post_period' => 'string',
        'sales_person' => 'object',
        'commission_percent' => 'string',
        'commission_amount' => 'string',
        'commissionable_amount' => 'string',
        'owner' => 'object',
        'orig_order_type' => 'string',
        'orig_order_nbr' => 'string',
        'so_shipping_contact' => 'object',
        'so_shipping_address' => 'object',
        'sched_shipment' => '\DateTime',
        'ship_separately' => 'bool',
        'ship_complete' => 'string',
        'cancel_by' => '\DateTime',
        'canceled' => 'bool',
        'preferred_warehouse' => 'object',
        'ship_via' => 'object',
        'fob_point' => 'object',
        'priority' => 'int',
        'shipping_terms' => 'object',
        'shipping_zone' => 'object',
        'residential_delivery' => 'bool',
        'saturday_delivery' => 'bool',
        'insurance' => 'bool',
        'transaction_type' => 'object',
        'payment_method' => 'object',
        'cash_account' => 'string',
        'payment_ref' => 'string',
        'is_rot_rut_deductible' => 'bool',
        'lines' => '\Ekstralys\VismaNetApi\Model\SalesOrderLineDto[]',
        'shipments' => '\Ekstralys\VismaNetApi\Model\SalesOrderShipmentDto[]',
        'order_type' => 'string',
        'order_no' => 'string',
        'status' => 'string',
        'hold' => 'bool',
        'date' => '\DateTime',
        'request_on' => '\DateTime',
        'customer_order' => 'string',
        'customer_ref_no' => 'string',
        'customer' => 'object',
        'contact_id' => 'int',
        'location' => 'object',
        'currency' => 'string',
        'description' => 'string',
        'order_total' => 'double',
        'order_total_in_base_currency' => 'double',
        'vat_taxable_total' => 'double',
        'vat_taxable_total_in_base_currency' => 'double',
        'vat_exempt_total' => 'double',
        'vat_exempt_total_in_base_currency' => 'double',
        'tax_total' => 'double',
        'tax_total_in_base_currency' => 'double',
        'exchange_rate' => 'double',
        'discount_total' => 'double',
        'discount_total_in_base_currency' => 'double',
        'last_modified_date_time' => '\DateTime',
        'branch_number' => 'object',
        'note' => 'string',
        'attachments' => '\Ekstralys\VismaNetApi\Model\AttachmentDto[]',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'project' => 'int32',
        'print_description_on_invoice' => null,
        'print_note_on_external_documents' => null,
        'print_note_on_internal_documents' => null,
        'so_billing_contact' => null,
        'so_billing_address' => null,
        'customer_vat_zone' => null,
        'invoice_separately' => null,
        'invoice_nbr' => null,
        'invoice_date' => 'date-time',
        'terms' => null,
        'due_date' => 'date-time',
        'cash_discount_date' => 'date-time',
        'post_period' => null,
        'sales_person' => null,
        'commission_percent' => null,
        'commission_amount' => null,
        'commissionable_amount' => null,
        'owner' => null,
        'orig_order_type' => null,
        'orig_order_nbr' => null,
        'so_shipping_contact' => null,
        'so_shipping_address' => null,
        'sched_shipment' => 'date-time',
        'ship_separately' => null,
        'ship_complete' => null,
        'cancel_by' => 'date-time',
        'canceled' => null,
        'preferred_warehouse' => null,
        'ship_via' => null,
        'fob_point' => null,
        'priority' => 'int32',
        'shipping_terms' => null,
        'shipping_zone' => null,
        'residential_delivery' => null,
        'saturday_delivery' => null,
        'insurance' => null,
        'transaction_type' => null,
        'payment_method' => null,
        'cash_account' => null,
        'payment_ref' => null,
        'is_rot_rut_deductible' => null,
        'lines' => null,
        'shipments' => null,
        'order_type' => null,
        'order_no' => null,
        'status' => null,
        'hold' => null,
        'date' => 'date-time',
        'request_on' => 'date-time',
        'customer_order' => null,
        'customer_ref_no' => null,
        'customer' => null,
        'contact_id' => 'int32',
        'location' => null,
        'currency' => null,
        'description' => null,
        'order_total' => 'double',
        'order_total_in_base_currency' => 'double',
        'vat_taxable_total' => 'double',
        'vat_taxable_total_in_base_currency' => 'double',
        'vat_exempt_total' => 'double',
        'vat_exempt_total_in_base_currency' => 'double',
        'tax_total' => 'double',
        'tax_total_in_base_currency' => 'double',
        'exchange_rate' => 'double',
        'discount_total' => 'double',
        'discount_total_in_base_currency' => 'double',
        'last_modified_date_time' => 'date-time',
        'branch_number' => null,
        'note' => null,
        'attachments' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'project' => 'project',
        'print_description_on_invoice' => 'printDescriptionOnInvoice',
        'print_note_on_external_documents' => 'printNoteOnExternalDocuments',
        'print_note_on_internal_documents' => 'printNoteOnInternalDocuments',
        'so_billing_contact' => 'soBillingContact',
        'so_billing_address' => 'soBillingAddress',
        'customer_vat_zone' => 'customerVATZone',
        'invoice_separately' => 'invoiceSeparately',
        'invoice_nbr' => 'invoiceNbr',
        'invoice_date' => 'invoiceDate',
        'terms' => 'terms',
        'due_date' => 'dueDate',
        'cash_discount_date' => 'cashDiscountDate',
        'post_period' => 'postPeriod',
        'sales_person' => 'salesPerson',
        'commission_percent' => 'commissionPercent',
        'commission_amount' => 'commissionAmount',
        'commissionable_amount' => 'commissionableAmount',
        'owner' => 'owner',
        'orig_order_type' => 'origOrderType',
        'orig_order_nbr' => 'origOrderNbr',
        'so_shipping_contact' => 'soShippingContact',
        'so_shipping_address' => 'soShippingAddress',
        'sched_shipment' => 'schedShipment',
        'ship_separately' => 'shipSeparately',
        'ship_complete' => 'shipComplete',
        'cancel_by' => 'cancelBy',
        'canceled' => 'canceled',
        'preferred_warehouse' => 'preferredWarehouse',
        'ship_via' => 'shipVia',
        'fob_point' => 'fobPoint',
        'priority' => 'priority',
        'shipping_terms' => 'shippingTerms',
        'shipping_zone' => 'shippingZone',
        'residential_delivery' => 'residentialDelivery',
        'saturday_delivery' => 'saturdayDelivery',
        'insurance' => 'insurance',
        'transaction_type' => 'transactionType',
        'payment_method' => 'paymentMethod',
        'cash_account' => 'cashAccount',
        'payment_ref' => 'paymentRef',
        'is_rot_rut_deductible' => 'isRotRutDeductible',
        'lines' => 'lines',
        'shipments' => 'shipments',
        'order_type' => 'orderType',
        'order_no' => 'orderNo',
        'status' => 'status',
        'hold' => 'hold',
        'date' => 'date',
        'request_on' => 'requestOn',
        'customer_order' => 'customerOrder',
        'customer_ref_no' => 'customerRefNo',
        'customer' => 'customer',
        'contact_id' => 'contactId',
        'location' => 'location',
        'currency' => 'currency',
        'description' => 'description',
        'order_total' => 'orderTotal',
        'order_total_in_base_currency' => 'orderTotalInBaseCurrency',
        'vat_taxable_total' => 'vatTaxableTotal',
        'vat_taxable_total_in_base_currency' => 'vatTaxableTotalInBaseCurrency',
        'vat_exempt_total' => 'vatExemptTotal',
        'vat_exempt_total_in_base_currency' => 'vatExemptTotalInBaseCurrency',
        'tax_total' => 'taxTotal',
        'tax_total_in_base_currency' => 'taxTotalInBaseCurrency',
        'exchange_rate' => 'exchangeRate',
        'discount_total' => 'discountTotal',
        'discount_total_in_base_currency' => 'discountTotalInBaseCurrency',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'branch_number' => 'branchNumber',
        'note' => 'note',
        'attachments' => 'attachments',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'project' => 'setProject',
        'print_description_on_invoice' => 'setPrintDescriptionOnInvoice',
        'print_note_on_external_documents' => 'setPrintNoteOnExternalDocuments',
        'print_note_on_internal_documents' => 'setPrintNoteOnInternalDocuments',
        'so_billing_contact' => 'setSoBillingContact',
        'so_billing_address' => 'setSoBillingAddress',
        'customer_vat_zone' => 'setCustomerVatZone',
        'invoice_separately' => 'setInvoiceSeparately',
        'invoice_nbr' => 'setInvoiceNbr',
        'invoice_date' => 'setInvoiceDate',
        'terms' => 'setTerms',
        'due_date' => 'setDueDate',
        'cash_discount_date' => 'setCashDiscountDate',
        'post_period' => 'setPostPeriod',
        'sales_person' => 'setSalesPerson',
        'commission_percent' => 'setCommissionPercent',
        'commission_amount' => 'setCommissionAmount',
        'commissionable_amount' => 'setCommissionableAmount',
        'owner' => 'setOwner',
        'orig_order_type' => 'setOrigOrderType',
        'orig_order_nbr' => 'setOrigOrderNbr',
        'so_shipping_contact' => 'setSoShippingContact',
        'so_shipping_address' => 'setSoShippingAddress',
        'sched_shipment' => 'setSchedShipment',
        'ship_separately' => 'setShipSeparately',
        'ship_complete' => 'setShipComplete',
        'cancel_by' => 'setCancelBy',
        'canceled' => 'setCanceled',
        'preferred_warehouse' => 'setPreferredWarehouse',
        'ship_via' => 'setShipVia',
        'fob_point' => 'setFobPoint',
        'priority' => 'setPriority',
        'shipping_terms' => 'setShippingTerms',
        'shipping_zone' => 'setShippingZone',
        'residential_delivery' => 'setResidentialDelivery',
        'saturday_delivery' => 'setSaturdayDelivery',
        'insurance' => 'setInsurance',
        'transaction_type' => 'setTransactionType',
        'payment_method' => 'setPaymentMethod',
        'cash_account' => 'setCashAccount',
        'payment_ref' => 'setPaymentRef',
        'is_rot_rut_deductible' => 'setIsRotRutDeductible',
        'lines' => 'setLines',
        'shipments' => 'setShipments',
        'order_type' => 'setOrderType',
        'order_no' => 'setOrderNo',
        'status' => 'setStatus',
        'hold' => 'setHold',
        'date' => 'setDate',
        'request_on' => 'setRequestOn',
        'customer_order' => 'setCustomerOrder',
        'customer_ref_no' => 'setCustomerRefNo',
        'customer' => 'setCustomer',
        'contact_id' => 'setContactId',
        'location' => 'setLocation',
        'currency' => 'setCurrency',
        'description' => 'setDescription',
        'order_total' => 'setOrderTotal',
        'order_total_in_base_currency' => 'setOrderTotalInBaseCurrency',
        'vat_taxable_total' => 'setVatTaxableTotal',
        'vat_taxable_total_in_base_currency' => 'setVatTaxableTotalInBaseCurrency',
        'vat_exempt_total' => 'setVatExemptTotal',
        'vat_exempt_total_in_base_currency' => 'setVatExemptTotalInBaseCurrency',
        'tax_total' => 'setTaxTotal',
        'tax_total_in_base_currency' => 'setTaxTotalInBaseCurrency',
        'exchange_rate' => 'setExchangeRate',
        'discount_total' => 'setDiscountTotal',
        'discount_total_in_base_currency' => 'setDiscountTotalInBaseCurrency',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'branch_number' => 'setBranchNumber',
        'note' => 'setNote',
        'attachments' => 'setAttachments',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'project' => 'getProject',
        'print_description_on_invoice' => 'getPrintDescriptionOnInvoice',
        'print_note_on_external_documents' => 'getPrintNoteOnExternalDocuments',
        'print_note_on_internal_documents' => 'getPrintNoteOnInternalDocuments',
        'so_billing_contact' => 'getSoBillingContact',
        'so_billing_address' => 'getSoBillingAddress',
        'customer_vat_zone' => 'getCustomerVatZone',
        'invoice_separately' => 'getInvoiceSeparately',
        'invoice_nbr' => 'getInvoiceNbr',
        'invoice_date' => 'getInvoiceDate',
        'terms' => 'getTerms',
        'due_date' => 'getDueDate',
        'cash_discount_date' => 'getCashDiscountDate',
        'post_period' => 'getPostPeriod',
        'sales_person' => 'getSalesPerson',
        'commission_percent' => 'getCommissionPercent',
        'commission_amount' => 'getCommissionAmount',
        'commissionable_amount' => 'getCommissionableAmount',
        'owner' => 'getOwner',
        'orig_order_type' => 'getOrigOrderType',
        'orig_order_nbr' => 'getOrigOrderNbr',
        'so_shipping_contact' => 'getSoShippingContact',
        'so_shipping_address' => 'getSoShippingAddress',
        'sched_shipment' => 'getSchedShipment',
        'ship_separately' => 'getShipSeparately',
        'ship_complete' => 'getShipComplete',
        'cancel_by' => 'getCancelBy',
        'canceled' => 'getCanceled',
        'preferred_warehouse' => 'getPreferredWarehouse',
        'ship_via' => 'getShipVia',
        'fob_point' => 'getFobPoint',
        'priority' => 'getPriority',
        'shipping_terms' => 'getShippingTerms',
        'shipping_zone' => 'getShippingZone',
        'residential_delivery' => 'getResidentialDelivery',
        'saturday_delivery' => 'getSaturdayDelivery',
        'insurance' => 'getInsurance',
        'transaction_type' => 'getTransactionType',
        'payment_method' => 'getPaymentMethod',
        'cash_account' => 'getCashAccount',
        'payment_ref' => 'getPaymentRef',
        'is_rot_rut_deductible' => 'getIsRotRutDeductible',
        'lines' => 'getLines',
        'shipments' => 'getShipments',
        'order_type' => 'getOrderType',
        'order_no' => 'getOrderNo',
        'status' => 'getStatus',
        'hold' => 'getHold',
        'date' => 'getDate',
        'request_on' => 'getRequestOn',
        'customer_order' => 'getCustomerOrder',
        'customer_ref_no' => 'getCustomerRefNo',
        'customer' => 'getCustomer',
        'contact_id' => 'getContactId',
        'location' => 'getLocation',
        'currency' => 'getCurrency',
        'description' => 'getDescription',
        'order_total' => 'getOrderTotal',
        'order_total_in_base_currency' => 'getOrderTotalInBaseCurrency',
        'vat_taxable_total' => 'getVatTaxableTotal',
        'vat_taxable_total_in_base_currency' => 'getVatTaxableTotalInBaseCurrency',
        'vat_exempt_total' => 'getVatExemptTotal',
        'vat_exempt_total_in_base_currency' => 'getVatExemptTotalInBaseCurrency',
        'tax_total' => 'getTaxTotal',
        'tax_total_in_base_currency' => 'getTaxTotalInBaseCurrency',
        'exchange_rate' => 'getExchangeRate',
        'discount_total' => 'getDiscountTotal',
        'discount_total_in_base_currency' => 'getDiscountTotalInBaseCurrency',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'branch_number' => 'getBranchNumber',
        'note' => 'getNote',
        'attachments' => 'getAttachments',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SHIP_COMPLETE_BACK_ORDER_ALLOWED = 'BackOrderAllowed';
    const SHIP_COMPLETE_CANCEL_REMAINDER = 'CancelRemainder';
    const SHIP_COMPLETE_SHIP_COMPLETE = 'ShipComplete';
    const STATUS_OPEN = 'Open';
    const STATUS_HOLD = 'Hold';
    const STATUS_CREDIT_HOLD = 'CreditHold';
    const STATUS_COMPLETED = 'Completed';
    const STATUS_CANCELLED = 'Cancelled';
    const STATUS_BACK_ORDER = 'BackOrder';
    const STATUS_SHIPPING = 'Shipping';
    const STATUS_INVOICED = 'Invoiced';
    const STATUS_PENDING_APPROVAL = 'PendingApproval';
    const STATUS_VOIDED = 'Voided';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipCompleteAllowableValues()
    {
        return [
            self::SHIP_COMPLETE_BACK_ORDER_ALLOWED,
            self::SHIP_COMPLETE_CANCEL_REMAINDER,
            self::SHIP_COMPLETE_SHIP_COMPLETE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OPEN,
            self::STATUS_HOLD,
            self::STATUS_CREDIT_HOLD,
            self::STATUS_COMPLETED,
            self::STATUS_CANCELLED,
            self::STATUS_BACK_ORDER,
            self::STATUS_SHIPPING,
            self::STATUS_INVOICED,
            self::STATUS_PENDING_APPROVAL,
            self::STATUS_VOIDED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['print_description_on_invoice'] = isset($data['print_description_on_invoice']) ? $data['print_description_on_invoice'] : null;
        $this->container['print_note_on_external_documents'] = isset($data['print_note_on_external_documents']) ? $data['print_note_on_external_documents'] : null;
        $this->container['print_note_on_internal_documents'] = isset($data['print_note_on_internal_documents']) ? $data['print_note_on_internal_documents'] : null;
        $this->container['so_billing_contact'] = isset($data['so_billing_contact']) ? $data['so_billing_contact'] : null;
        $this->container['so_billing_address'] = isset($data['so_billing_address']) ? $data['so_billing_address'] : null;
        $this->container['customer_vat_zone'] = isset($data['customer_vat_zone']) ? $data['customer_vat_zone'] : null;
        $this->container['invoice_separately'] = isset($data['invoice_separately']) ? $data['invoice_separately'] : null;
        $this->container['invoice_nbr'] = isset($data['invoice_nbr']) ? $data['invoice_nbr'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['cash_discount_date'] = isset($data['cash_discount_date']) ? $data['cash_discount_date'] : null;
        $this->container['post_period'] = isset($data['post_period']) ? $data['post_period'] : null;
        $this->container['sales_person'] = isset($data['sales_person']) ? $data['sales_person'] : null;
        $this->container['commission_percent'] = isset($data['commission_percent']) ? $data['commission_percent'] : null;
        $this->container['commission_amount'] = isset($data['commission_amount']) ? $data['commission_amount'] : null;
        $this->container['commissionable_amount'] = isset($data['commissionable_amount']) ? $data['commissionable_amount'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['orig_order_type'] = isset($data['orig_order_type']) ? $data['orig_order_type'] : null;
        $this->container['orig_order_nbr'] = isset($data['orig_order_nbr']) ? $data['orig_order_nbr'] : null;
        $this->container['so_shipping_contact'] = isset($data['so_shipping_contact']) ? $data['so_shipping_contact'] : null;
        $this->container['so_shipping_address'] = isset($data['so_shipping_address']) ? $data['so_shipping_address'] : null;
        $this->container['sched_shipment'] = isset($data['sched_shipment']) ? $data['sched_shipment'] : null;
        $this->container['ship_separately'] = isset($data['ship_separately']) ? $data['ship_separately'] : null;
        $this->container['ship_complete'] = isset($data['ship_complete']) ? $data['ship_complete'] : null;
        $this->container['cancel_by'] = isset($data['cancel_by']) ? $data['cancel_by'] : null;
        $this->container['canceled'] = isset($data['canceled']) ? $data['canceled'] : null;
        $this->container['preferred_warehouse'] = isset($data['preferred_warehouse']) ? $data['preferred_warehouse'] : null;
        $this->container['ship_via'] = isset($data['ship_via']) ? $data['ship_via'] : null;
        $this->container['fob_point'] = isset($data['fob_point']) ? $data['fob_point'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['shipping_terms'] = isset($data['shipping_terms']) ? $data['shipping_terms'] : null;
        $this->container['shipping_zone'] = isset($data['shipping_zone']) ? $data['shipping_zone'] : null;
        $this->container['residential_delivery'] = isset($data['residential_delivery']) ? $data['residential_delivery'] : null;
        $this->container['saturday_delivery'] = isset($data['saturday_delivery']) ? $data['saturday_delivery'] : null;
        $this->container['insurance'] = isset($data['insurance']) ? $data['insurance'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['cash_account'] = isset($data['cash_account']) ? $data['cash_account'] : null;
        $this->container['payment_ref'] = isset($data['payment_ref']) ? $data['payment_ref'] : null;
        $this->container['is_rot_rut_deductible'] = isset($data['is_rot_rut_deductible']) ? $data['is_rot_rut_deductible'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['shipments'] = isset($data['shipments']) ? $data['shipments'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['order_no'] = isset($data['order_no']) ? $data['order_no'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['request_on'] = isset($data['request_on']) ? $data['request_on'] : null;
        $this->container['customer_order'] = isset($data['customer_order']) ? $data['customer_order'] : null;
        $this->container['customer_ref_no'] = isset($data['customer_ref_no']) ? $data['customer_ref_no'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['order_total'] = isset($data['order_total']) ? $data['order_total'] : null;
        $this->container['order_total_in_base_currency'] = isset($data['order_total_in_base_currency']) ? $data['order_total_in_base_currency'] : null;
        $this->container['vat_taxable_total'] = isset($data['vat_taxable_total']) ? $data['vat_taxable_total'] : null;
        $this->container['vat_taxable_total_in_base_currency'] = isset($data['vat_taxable_total_in_base_currency']) ? $data['vat_taxable_total_in_base_currency'] : null;
        $this->container['vat_exempt_total'] = isset($data['vat_exempt_total']) ? $data['vat_exempt_total'] : null;
        $this->container['vat_exempt_total_in_base_currency'] = isset($data['vat_exempt_total_in_base_currency']) ? $data['vat_exempt_total_in_base_currency'] : null;
        $this->container['tax_total'] = isset($data['tax_total']) ? $data['tax_total'] : null;
        $this->container['tax_total_in_base_currency'] = isset($data['tax_total_in_base_currency']) ? $data['tax_total_in_base_currency'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['discount_total'] = isset($data['discount_total']) ? $data['discount_total'] : null;
        $this->container['discount_total_in_base_currency'] = isset($data['discount_total_in_base_currency']) ? $data['discount_total_in_base_currency'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['branch_number'] = isset($data['branch_number']) ? $data['branch_number'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getShipCompleteAllowableValues();
        if (!is_null($this->container['ship_complete']) && !in_array($this->container['ship_complete'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ship_complete', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets project
     *
     * @return int
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param int $project Mandatory field: The top part &gt; Project* &gt; The field consists of Project ID and Project description. Project ID: The identifier for the project with which this document is associated, or the code indicating that this document is not associated with any project; the non-project code is specified in the Project accounting preferences (PM101000) window.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets print_description_on_invoice
     *
     * @return bool
     */
    public function getPrintDescriptionOnInvoice()
    {
        return $this->container['print_description_on_invoice'];
    }

    /**
     * Sets print_description_on_invoice
     *
     * @param bool $print_description_on_invoice The top part &gt; Print description on invoice &gt; A check box
     *
     * @return $this
     */
    public function setPrintDescriptionOnInvoice($print_description_on_invoice)
    {
        $this->container['print_description_on_invoice'] = $print_description_on_invoice;

        return $this;
    }

    /**
     * Gets print_note_on_external_documents
     *
     * @return bool
     */
    public function getPrintNoteOnExternalDocuments()
    {
        return $this->container['print_note_on_external_documents'];
    }

    /**
     * Sets print_note_on_external_documents
     *
     * @param bool $print_note_on_external_documents The top part &gt; Print note on external sales documents &gt; A check box
     *
     * @return $this
     */
    public function setPrintNoteOnExternalDocuments($print_note_on_external_documents)
    {
        $this->container['print_note_on_external_documents'] = $print_note_on_external_documents;

        return $this;
    }

    /**
     * Gets print_note_on_internal_documents
     *
     * @return bool
     */
    public function getPrintNoteOnInternalDocuments()
    {
        return $this->container['print_note_on_internal_documents'];
    }

    /**
     * Sets print_note_on_internal_documents
     *
     * @param bool $print_note_on_internal_documents The top part &gt; Print line note on internal sales documents &gt; A check box
     *
     * @return $this
     */
    public function setPrintNoteOnInternalDocuments($print_note_on_internal_documents)
    {
        $this->container['print_note_on_internal_documents'] = $print_note_on_internal_documents;

        return $this;
    }

    /**
     * Gets so_billing_contact
     *
     * @return object
     */
    public function getSoBillingContact()
    {
        return $this->container['so_billing_contact'];
    }

    /**
     * Sets so_billing_contact
     *
     * @param object $so_billing_contact The Financial settings tab &gt; The Invoice address section or on the Delivery address section
     *
     * @return $this
     */
    public function setSoBillingContact($so_billing_contact)
    {
        $this->container['so_billing_contact'] = $so_billing_contact;

        return $this;
    }

    /**
     * Gets so_billing_address
     *
     * @return object
     */
    public function getSoBillingAddress()
    {
        return $this->container['so_billing_address'];
    }

    /**
     * Sets so_billing_address
     *
     * @param object $so_billing_address Financial settings tab &gt; Invoice address section
     *
     * @return $this
     */
    public function setSoBillingAddress($so_billing_address)
    {
        $this->container['so_billing_address'] = $so_billing_address;

        return $this;
    }

    /**
     * Gets customer_vat_zone
     *
     * @return object
     */
    public function getCustomerVatZone()
    {
        return $this->container['customer_vat_zone'];
    }

    /**
     * Sets customer_vat_zone
     *
     * @param object $customer_vat_zone Financial settings tab &gt; Financial information section &gt; Customer VAT zone &gt; The customers VAT zone to be used to process customer sales orders, which generally is the zone associated with the customer's delivery address.
     *
     * @return $this
     */
    public function setCustomerVatZone($customer_vat_zone)
    {
        $this->container['customer_vat_zone'] = $customer_vat_zone;

        return $this;
    }

    /**
     * Gets invoice_separately
     *
     * @return bool
     */
    public function getInvoiceSeparately()
    {
        return $this->container['invoice_separately'];
    }

    /**
     * Sets invoice_separately
     *
     * @param bool $invoice_separately Financial settings tab &gt; Financial information section &gt; Invoice separately &gt; A check box that indicating that this document is to be invoiced separately (if that is required).
     *
     * @return $this
     */
    public function setInvoiceSeparately($invoice_separately)
    {
        $this->container['invoice_separately'] = $invoice_separately;

        return $this;
    }

    /**
     * Gets invoice_nbr
     *
     * @return string
     */
    public function getInvoiceNbr()
    {
        return $this->container['invoice_nbr'];
    }

    /**
     * Sets invoice_nbr
     *
     * @param string $invoice_nbr Financial settings tab &gt; Financial information section &gt; Invoice no.&gt; The invoice number of the invoice generated for this order.
     *
     * @return $this
     */
    public function setInvoiceNbr($invoice_nbr)
    {
        $this->container['invoice_nbr'] = $invoice_nbr;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date Financial settings tab &gt; Financial information section &gt; Invoice date&gt; The date of the invoice generated for the order.
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return object
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param object $terms Mandatory field: Financial settings tab &gt; Financial information section &gt; Terms* &gt; The credit terms used in relations with the customer. See also window CS206500.
     *
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date Financial settings tab &gt; Financial information section &gt; Due date &gt; The due date of the invoice according to the credit terms.
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets cash_discount_date
     *
     * @return \DateTime
     */
    public function getCashDiscountDate()
    {
        return $this->container['cash_discount_date'];
    }

    /**
     * Sets cash_discount_date
     *
     * @param \DateTime $cash_discount_date Financial settings tab &gt; Financial information section &gt; Cash discount date &gt; The date when the cash discount is available for the invoice based on the credit terms.
     *
     * @return $this
     */
    public function setCashDiscountDate($cash_discount_date)
    {
        $this->container['cash_discount_date'] = $cash_discount_date;

        return $this;
    }

    /**
     * Gets post_period
     *
     * @return string
     */
    public function getPostPeriod()
    {
        return $this->container['post_period'];
    }

    /**
     * Sets post_period
     *
     * @param string $post_period The Financial settings tab &gt; Financial information section &gt; Post period &gt; The period to post the transactions generated by the invoice. Format MMYYYY.
     *
     * @return $this
     */
    public function setPostPeriod($post_period)
    {
        $this->container['post_period'] = $post_period;

        return $this;
    }

    /**
     * Gets sales_person
     *
     * @return object
     */
    public function getSalesPerson()
    {
        return $this->container['sales_person'];
    }

    /**
     * Sets sales_person
     *
     * @param object $sales_person The Commissions tab &gt; Salesperson ID &gt; The salesperson.
     *
     * @return $this
     */
    public function setSalesPerson($sales_person)
    {
        $this->container['sales_person'] = $sales_person;

        return $this;
    }

    /**
     * Gets commission_percent
     *
     * @return string
     */
    public function getCommissionPercent()
    {
        return $this->container['commission_percent'];
    }

    /**
     * Sets commission_percent
     *
     * @param string $commission_percent The Commissions tab &gt; Commission (%) &gt; The percentage of commission generally earned by the salesperson.
     *
     * @return $this
     */
    public function setCommissionPercent($commission_percent)
    {
        $this->container['commission_percent'] = $commission_percent;

        return $this;
    }

    /**
     * Gets commission_amount
     *
     * @return string
     */
    public function getCommissionAmount()
    {
        return $this->container['commission_amount'];
    }

    /**
     * Sets commission_amount
     *
     * @param string $commission_amount The Commissions tab &gt; Commission amt. &gt; The commission amount earned by the salesperson on this document.
     *
     * @return $this
     */
    public function setCommissionAmount($commission_amount)
    {
        $this->container['commission_amount'] = $commission_amount;

        return $this;
    }

    /**
     * Gets commissionable_amount
     *
     * @return string
     */
    public function getCommissionableAmount()
    {
        return $this->container['commissionable_amount'];
    }

    /**
     * Sets commissionable_amount
     *
     * @param string $commissionable_amount The Commissions tab &gt; Commissionable amount &gt; The amount used to calculate the commission.
     *
     * @return $this
     */
    public function setCommissionableAmount($commissionable_amount)
    {
        $this->container['commissionable_amount'] = $commissionable_amount;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return object
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param object $owner The Financial settings tab &gt; Financial information section &gt; Owner &gt; The user in the work group who is responsible for the sales order.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets orig_order_type
     *
     * @return string
     */
    public function getOrigOrderType()
    {
        return $this->container['orig_order_type'];
    }

    /**
     * Sets orig_order_type
     *
     * @param string $orig_order_type Mandatory field: The top part &gt; Order type* &gt; The type of the document, which is one of the predefined order types or a custom order type created by using the window SO201000.
     *
     * @return $this
     */
    public function setOrigOrderType($orig_order_type)
    {
        $this->container['orig_order_type'] = $orig_order_type;

        return $this;
    }

    /**
     * Gets orig_order_nbr
     *
     * @return string
     */
    public function getOrigOrderNbr()
    {
        return $this->container['orig_order_nbr'];
    }

    /**
     * Sets orig_order_nbr
     *
     * @param string $orig_order_nbr The top part &gt; Order no. &gt; The order number of the document.
     *
     * @return $this
     */
    public function setOrigOrderNbr($orig_order_nbr)
    {
        $this->container['orig_order_nbr'] = $orig_order_nbr;

        return $this;
    }

    /**
     * Gets so_shipping_contact
     *
     * @return object
     */
    public function getSoShippingContact()
    {
        return $this->container['so_shipping_contact'];
    }

    /**
     * Sets so_shipping_contact
     *
     * @param object $so_shipping_contact Delivery settings tab &gt; Delivery address contact section
     *
     * @return $this
     */
    public function setSoShippingContact($so_shipping_contact)
    {
        $this->container['so_shipping_contact'] = $so_shipping_contact;

        return $this;
    }

    /**
     * Gets so_shipping_address
     *
     * @return object
     */
    public function getSoShippingAddress()
    {
        return $this->container['so_shipping_address'];
    }

    /**
     * Sets so_shipping_address
     *
     * @param object $so_shipping_address Delivery settings tab &gt; Delivery address section
     *
     * @return $this
     */
    public function setSoShippingAddress($so_shipping_address)
    {
        $this->container['so_shipping_address'] = $so_shipping_address;

        return $this;
    }

    /**
     * Gets sched_shipment
     *
     * @return \DateTime
     */
    public function getSchedShipment()
    {
        return $this->container['sched_shipment'];
    }

    /**
     * Sets sched_shipment
     *
     * @param \DateTime $sched_shipment Delivery settings tab &gt; Shipping information section &gt; Sched. shipment &gt; The date when the ordered goods are scheduled to be shipped.
     *
     * @return $this
     */
    public function setSchedShipment($sched_shipment)
    {
        $this->container['sched_shipment'] = $sched_shipment;

        return $this;
    }

    /**
     * Gets ship_separately
     *
     * @return bool
     */
    public function getShipSeparately()
    {
        return $this->container['ship_separately'];
    }

    /**
     * Sets ship_separately
     *
     * @param bool $ship_separately Delivery settings tab &gt; Shipping information section &gt; Ship separately &gt; This check box indicates that the goods for the customer should be shipped separately for each sales order.
     *
     * @return $this
     */
    public function setShipSeparately($ship_separately)
    {
        $this->container['ship_separately'] = $ship_separately;

        return $this;
    }

    /**
     * Gets ship_complete
     *
     * @return string
     */
    public function getShipComplete()
    {
        return $this->container['ship_complete'];
    }

    /**
     * Sets ship_complete
     *
     * @param string $ship_complete Delivery settings tab &gt; Shipping information section &gt; Shipping rule &gt; An option that controls whether incomplete and partial shipments for the order are allowed.
     *
     * @return $this
     */
    public function setShipComplete($ship_complete)
    {
        $allowedValues = $this->getShipCompleteAllowableValues();
        if (!is_null($ship_complete) && !in_array($ship_complete, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ship_complete', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ship_complete'] = $ship_complete;

        return $this;
    }

    /**
     * Gets cancel_by
     *
     * @return \DateTime
     */
    public function getCancelBy()
    {
        return $this->container['cancel_by'];
    }

    /**
     * Sets cancel_by
     *
     * @param \DateTime $cancel_by Delivery settings tab &gt; Shipping information section &gt; Cancel by &gt; The date when the order should be cancelled if the Back order allowed option has been selected in the Shipping rule field.
     *
     * @return $this
     */
    public function setCancelBy($cancel_by)
    {
        $this->container['cancel_by'] = $cancel_by;

        return $this;
    }

    /**
     * Gets canceled
     *
     * @return bool
     */
    public function getCanceled()
    {
        return $this->container['canceled'];
    }

    /**
     * Sets canceled
     *
     * @param bool $canceled The Delivery settings tab &gt; The Shipping information section &gt; Cancelled &gt; A check box that indicates that the order has been cancelled on the date specified in Cancel by.
     *
     * @return $this
     */
    public function setCanceled($canceled)
    {
        $this->container['canceled'] = $canceled;

        return $this;
    }

    /**
     * Gets preferred_warehouse
     *
     * @return object
     */
    public function getPreferredWarehouse()
    {
        return $this->container['preferred_warehouse'];
    }

    /**
     * Sets preferred_warehouse
     *
     * @param object $preferred_warehouse The Delivery settings tab &gt; The shipping information section &gt; Preferred warehouse ID
     *
     * @return $this
     */
    public function setPreferredWarehouse($preferred_warehouse)
    {
        $this->container['preferred_warehouse'] = $preferred_warehouse;

        return $this;
    }

    /**
     * Gets ship_via
     *
     * @return object
     */
    public function getShipVia()
    {
        return $this->container['ship_via'];
    }

    /**
     * Sets ship_via
     *
     * @param object $ship_via The Delivery settings tab &gt; Shipping information section &gt; Ship via &gt;  The Ship via code that represents the carrier and its service to be used for shipping the ordered goods.
     *
     * @return $this
     */
    public function setShipVia($ship_via)
    {
        $this->container['ship_via'] = $ship_via;

        return $this;
    }

    /**
     * Gets fob_point
     *
     * @return object
     */
    public function getFobPoint()
    {
        return $this->container['fob_point'];
    }

    /**
     * Sets fob_point
     *
     * @param object $fob_point Delivery settings tab &gt; Shipping information section &gt; FOB point &gt; The point where ownership of the goods is transferred to the customer.
     *
     * @return $this
     */
    public function setFobPoint($fob_point)
    {
        $this->container['fob_point'] = $fob_point;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority Delivery settings tab &gt; Shipping information section &gt; Priority &gt; Field only for informational purposes. The level of priority for processing order of this customer, as specified for the customer on the Shipping settings tab on the AR303000 window.
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets shipping_terms
     *
     * @return object
     */
    public function getShippingTerms()
    {
        return $this->container['shipping_terms'];
    }

    /**
     * Sets shipping_terms
     *
     * @param object $shipping_terms Delivery settings tab &gt; Shipping information section &gt; Shipping terms
     *
     * @return $this
     */
    public function setShippingTerms($shipping_terms)
    {
        $this->container['shipping_terms'] = $shipping_terms;

        return $this;
    }

    /**
     * Gets shipping_zone
     *
     * @return object
     */
    public function getShippingZone()
    {
        return $this->container['shipping_zone'];
    }

    /**
     * Sets shipping_zone
     *
     * @param object $shipping_zone Delivery settings tab &gt; Shipping information section &gt; Shipping zone
     *
     * @return $this
     */
    public function setShippingZone($shipping_zone)
    {
        $this->container['shipping_zone'] = $shipping_zone;

        return $this;
    }

    /**
     * Gets residential_delivery
     *
     * @return bool
     */
    public function getResidentialDelivery()
    {
        return $this->container['residential_delivery'];
    }

    /**
     * Sets residential_delivery
     *
     * @param bool $residential_delivery Delivery settings tab &gt; Shipping information section &gt; Residential delivery &gt; A check box that you select to indicate that the shipment should be delivered to a residential area.
     *
     * @return $this
     */
    public function setResidentialDelivery($residential_delivery)
    {
        $this->container['residential_delivery'] = $residential_delivery;

        return $this;
    }

    /**
     * Gets saturday_delivery
     *
     * @return bool
     */
    public function getSaturdayDelivery()
    {
        return $this->container['saturday_delivery'];
    }

    /**
     * Sets saturday_delivery
     *
     * @param bool $saturday_delivery Delivery settings tab &gt; Shipping information section &gt; Saturday delivery &gt; A check box that indicates that the order may be delivered on Saturday.
     *
     * @return $this
     */
    public function setSaturdayDelivery($saturday_delivery)
    {
        $this->container['saturday_delivery'] = $saturday_delivery;

        return $this;
    }

    /**
     * Gets insurance
     *
     * @return bool
     */
    public function getInsurance()
    {
        return $this->container['insurance'];
    }

    /**
     * Sets insurance
     *
     * @param bool $insurance Delivery settings tab &gt; Shipping information section &gt; Insurance &gt; A check box that you select to indicate that insurance is required for this order.
     *
     * @return $this
     */
    public function setInsurance($insurance)
    {
        $this->container['insurance'] = $insurance;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return object
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param object $transaction_type Delivery settings tab &gt; Intrastat section &gt; Transaction type
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return object
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param object $payment_method Payment settings tab &gt; Payment method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets cash_account
     *
     * @return string
     */
    public function getCashAccount()
    {
        return $this->container['cash_account'];
    }

    /**
     * Sets cash_account
     *
     * @param string $cash_account Payment settings tab &gt; Cash account
     *
     * @return $this
     */
    public function setCashAccount($cash_account)
    {
        $this->container['cash_account'] = $cash_account;

        return $this;
    }

    /**
     * Gets payment_ref
     *
     * @return string
     */
    public function getPaymentRef()
    {
        return $this->container['payment_ref'];
    }

    /**
     * Sets payment_ref
     *
     * @param string $payment_ref Payment settings tab &gt; Payment ref.
     *
     * @return $this
     */
    public function setPaymentRef($payment_ref)
    {
        $this->container['payment_ref'] = $payment_ref;

        return $this;
    }

    /**
     * Gets is_rot_rut_deductible
     *
     * @return bool
     */
    public function getIsRotRutDeductible()
    {
        return $this->container['is_rot_rut_deductible'];
    }

    /**
     * Sets is_rot_rut_deductible
     *
     * @param bool $is_rot_rut_deductible A check box indicating if the document is Rot/rut deductible (applicable for the Swedish markets)
     *
     * @return $this
     */
    public function setIsRotRutDeductible($is_rot_rut_deductible)
    {
        $this->container['is_rot_rut_deductible'] = $is_rot_rut_deductible;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Ekstralys\VismaNetApi\Model\SalesOrderLineDto[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Ekstralys\VismaNetApi\Model\SalesOrderLineDto[] $lines Document details tab &gt;
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets shipments
     *
     * @return \Ekstralys\VismaNetApi\Model\SalesOrderShipmentDto[]
     */
    public function getShipments()
    {
        return $this->container['shipments'];
    }

    /**
     * Sets shipments
     *
     * @param \Ekstralys\VismaNetApi\Model\SalesOrderShipmentDto[] $shipments Shipment tab &gt;
     *
     * @return $this
     */
    public function setShipments($shipments)
    {
        $this->container['shipments'] = $shipments;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string $order_type Mandatory field: The top part &gt; Order type &gt; The type of the document, which is one of the predefined order types or a custom order type created by using the (SO201000) window.
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets order_no
     *
     * @return string
     */
    public function getOrderNo()
    {
        return $this->container['order_no'];
    }

    /**
     * Sets order_no
     *
     * @param string $order_no The top part &gt; Order no.: &gt; The reference number of the document.
     *
     * @return $this
     */
    public function setOrderNo($order_no)
    {
        $this->container['order_no'] = $order_no;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The top part &gt; Status &gt; The status of the document, which can be one of the following options: On hold, Credit hold, Pending aååroval, Rejected, Open, Cancelled, Shipping, Back order, Invoiced, Completed.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return bool
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param bool $hold The top part &gt; Hold &gt; A check box that you select if the document is on hold and should not be processed further at this time.
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Mandatory field: The top part &gt; Date* &gt;  The date of the document.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets request_on
     *
     * @return \DateTime
     */
    public function getRequestOn()
    {
        return $this->container['request_on'];
    }

    /**
     * Sets request_on
     *
     * @param \DateTime $request_on Mandatory field: The top part &gt; Requested on &gt; The date when the customer wants to receive the goods; this date provides the default values for the Requested on dates for order lines.
     *
     * @return $this
     */
    public function setRequestOn($request_on)
    {
        $this->container['request_on'] = $request_on;

        return $this;
    }

    /**
     * Gets customer_order
     *
     * @return string
     */
    public function getCustomerOrder()
    {
        return $this->container['customer_order'];
    }

    /**
     * Sets customer_order
     *
     * @param string $customer_order The top part &gt; Customer order &gt; The reference number of the original customer document that the sales order is based on.
     *
     * @return $this
     */
    public function setCustomerOrder($customer_order)
    {
        $this->container['customer_order'] = $customer_order;

        return $this;
    }

    /**
     * Gets customer_ref_no
     *
     * @return string
     */
    public function getCustomerRefNo()
    {
        return $this->container['customer_ref_no'];
    }

    /**
     * Sets customer_ref_no
     *
     * @param string $customer_ref_no The top part &gt; External reference &gt; The reference number of the sales order in a third-party application if Visma.net Financials is integrated with such an application and imports the sales orders from it.
     *
     * @return $this
     */
    public function setCustomerRefNo($customer_ref_no)
    {
        $this->container['customer_ref_no'] = $customer_ref_no;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return object
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param object $customer The top part &gt; Customer &gt; The customer that has ordered the goods or services.
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id The top part &gt; Contact &gt; The contact person of the customer.
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location Mandatory field: The top part &gt; Location* &gt; The customer location from which the goods or services have been ordered or, if the sales order is created from an opportunity, the customer location specified for the opportunity.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The top part &gt; Currency &gt; The currency of the document.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The top part &gt; Description &gt; A brief description of the document.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets order_total
     *
     * @return double
     */
    public function getOrderTotal()
    {
        return $this->container['order_total'];
    }

    /**
     * Sets order_total
     *
     * @param double $order_total The top part &gt; Order total &gt; The total amount of the document, which is calculated as follows:  Line Total + Misc.Charges + Freight + Premium Freight – Discount Total+ Tax Total
     *
     * @return $this
     */
    public function setOrderTotal($order_total)
    {
        $this->container['order_total'] = $order_total;

        return $this;
    }

    /**
     * Gets order_total_in_base_currency
     *
     * @return double
     */
    public function getOrderTotalInBaseCurrency()
    {
        return $this->container['order_total_in_base_currency'];
    }

    /**
     * Sets order_total_in_base_currency
     *
     * @param double $order_total_in_base_currency order_total_in_base_currency
     *
     * @return $this
     */
    public function setOrderTotalInBaseCurrency($order_total_in_base_currency)
    {
        $this->container['order_total_in_base_currency'] = $order_total_in_base_currency;

        return $this;
    }

    /**
     * Gets vat_taxable_total
     *
     * @return double
     */
    public function getVatTaxableTotal()
    {
        return $this->container['vat_taxable_total'];
    }

    /**
     * Sets vat_taxable_total
     *
     * @param double $vat_taxable_total The top part &gt; VAT taxable total &gt; The document total that is subject to VAT.
     *
     * @return $this
     */
    public function setVatTaxableTotal($vat_taxable_total)
    {
        $this->container['vat_taxable_total'] = $vat_taxable_total;

        return $this;
    }

    /**
     * Gets vat_taxable_total_in_base_currency
     *
     * @return double
     */
    public function getVatTaxableTotalInBaseCurrency()
    {
        return $this->container['vat_taxable_total_in_base_currency'];
    }

    /**
     * Sets vat_taxable_total_in_base_currency
     *
     * @param double $vat_taxable_total_in_base_currency vat_taxable_total_in_base_currency
     *
     * @return $this
     */
    public function setVatTaxableTotalInBaseCurrency($vat_taxable_total_in_base_currency)
    {
        $this->container['vat_taxable_total_in_base_currency'] = $vat_taxable_total_in_base_currency;

        return $this;
    }

    /**
     * Gets vat_exempt_total
     *
     * @return double
     */
    public function getVatExemptTotal()
    {
        return $this->container['vat_exempt_total'];
    }

    /**
     * Sets vat_exempt_total
     *
     * @param double $vat_exempt_total The top part &gt; VAT exempt total &gt; The document total that is exempt from VAT.
     *
     * @return $this
     */
    public function setVatExemptTotal($vat_exempt_total)
    {
        $this->container['vat_exempt_total'] = $vat_exempt_total;

        return $this;
    }

    /**
     * Gets vat_exempt_total_in_base_currency
     *
     * @return double
     */
    public function getVatExemptTotalInBaseCurrency()
    {
        return $this->container['vat_exempt_total_in_base_currency'];
    }

    /**
     * Sets vat_exempt_total_in_base_currency
     *
     * @param double $vat_exempt_total_in_base_currency vat_exempt_total_in_base_currency
     *
     * @return $this
     */
    public function setVatExemptTotalInBaseCurrency($vat_exempt_total_in_base_currency)
    {
        $this->container['vat_exempt_total_in_base_currency'] = $vat_exempt_total_in_base_currency;

        return $this;
    }

    /**
     * Gets tax_total
     *
     * @return double
     */
    public function getTaxTotal()
    {
        return $this->container['tax_total'];
    }

    /**
     * Sets tax_total
     *
     * @param double $tax_total The top part &gt; VAT total &gt; The total amount of tax paid on the document.
     *
     * @return $this
     */
    public function setTaxTotal($tax_total)
    {
        $this->container['tax_total'] = $tax_total;

        return $this;
    }

    /**
     * Gets tax_total_in_base_currency
     *
     * @return double
     */
    public function getTaxTotalInBaseCurrency()
    {
        return $this->container['tax_total_in_base_currency'];
    }

    /**
     * Sets tax_total_in_base_currency
     *
     * @param double $tax_total_in_base_currency tax_total_in_base_currency
     *
     * @return $this
     */
    public function setTaxTotalInBaseCurrency($tax_total_in_base_currency)
    {
        $this->container['tax_total_in_base_currency'] = $tax_total_in_base_currency;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return double
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param double $exchange_rate exchange_rate
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets discount_total
     *
     * @return double
     */
    public function getDiscountTotal()
    {
        return $this->container['discount_total'];
    }

    /**
     * Sets discount_total
     *
     * @param double $discount_total discount_total
     *
     * @return $this
     */
    public function setDiscountTotal($discount_total)
    {
        $this->container['discount_total'] = $discount_total;

        return $this;
    }

    /**
     * Gets discount_total_in_base_currency
     *
     * @return double
     */
    public function getDiscountTotalInBaseCurrency()
    {
        return $this->container['discount_total_in_base_currency'];
    }

    /**
     * Sets discount_total_in_base_currency
     *
     * @param double $discount_total_in_base_currency discount_total_in_base_currency
     *
     * @return $this
     */
    public function setDiscountTotalInBaseCurrency($discount_total_in_base_currency)
    {
        $this->container['discount_total_in_base_currency'] = $discount_total_in_base_currency;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time Background information collected from the system.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return object
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param object $branch_number Mandatory field: Document details tab &gt; Branch* &gt; The branch of the company.
     *
     * @return $this
     */
    public function setBranchNumber($branch_number)
    {
        $this->container['branch_number'] = $branch_number;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Icon Notes on top of the window &gt; Pop-up window for providing any user-defined text connected to the order.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Ekstralys\VismaNetApi\Model\AttachmentDto[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Ekstralys\VismaNetApi\Model\AttachmentDto[] $attachments The data containing information about the document attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


