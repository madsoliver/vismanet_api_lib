<?php
/**
 * StocktakeDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * StocktakeDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StocktakeDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StocktakeDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reference_nbr' => 'string',
        'description' => 'string',
        'summary_status' => 'string',
        'freeze_date' => '\DateTime',
        'number_of_lines' => 'int',
        'physical_qty' => 'double',
        'variance_qty' => 'double',
        'variance_cost' => 'double',
        'last_modified_date_time' => '\DateTime',
        'lines' => '\Ekstralys\VismaNetApi\Model\StocktakeLineDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reference_nbr' => null,
        'description' => null,
        'summary_status' => null,
        'freeze_date' => 'date-time',
        'number_of_lines' => 'int32',
        'physical_qty' => 'double',
        'variance_qty' => 'double',
        'variance_cost' => 'double',
        'last_modified_date_time' => 'date-time',
        'lines' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reference_nbr' => 'referenceNbr',
        'description' => 'description',
        'summary_status' => 'summaryStatus',
        'freeze_date' => 'freezeDate',
        'number_of_lines' => 'numberOfLines',
        'physical_qty' => 'physicalQty',
        'variance_qty' => 'varianceQty',
        'variance_cost' => 'varianceCost',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'lines' => 'lines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reference_nbr' => 'setReferenceNbr',
        'description' => 'setDescription',
        'summary_status' => 'setSummaryStatus',
        'freeze_date' => 'setFreezeDate',
        'number_of_lines' => 'setNumberOfLines',
        'physical_qty' => 'setPhysicalQty',
        'variance_qty' => 'setVarianceQty',
        'variance_cost' => 'setVarianceCost',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'lines' => 'setLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reference_nbr' => 'getReferenceNbr',
        'description' => 'getDescription',
        'summary_status' => 'getSummaryStatus',
        'freeze_date' => 'getFreezeDate',
        'number_of_lines' => 'getNumberOfLines',
        'physical_qty' => 'getPhysicalQty',
        'variance_qty' => 'getVarianceQty',
        'variance_cost' => 'getVarianceCost',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'lines' => 'getLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SUMMARY_STATUS_CANCELLED = 'Cancelled';
    const SUMMARY_STATUS_COMPLETED = 'Completed';
    const SUMMARY_STATUS_COUNTING = 'Counting';
    const SUMMARY_STATUS_ENTERING = 'Entering';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSummaryStatusAllowableValues()
    {
        return [
            self::SUMMARY_STATUS_CANCELLED,
            self::SUMMARY_STATUS_COMPLETED,
            self::SUMMARY_STATUS_COUNTING,
            self::SUMMARY_STATUS_ENTERING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reference_nbr'] = isset($data['reference_nbr']) ? $data['reference_nbr'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['summary_status'] = isset($data['summary_status']) ? $data['summary_status'] : null;
        $this->container['freeze_date'] = isset($data['freeze_date']) ? $data['freeze_date'] : null;
        $this->container['number_of_lines'] = isset($data['number_of_lines']) ? $data['number_of_lines'] : null;
        $this->container['physical_qty'] = isset($data['physical_qty']) ? $data['physical_qty'] : null;
        $this->container['variance_qty'] = isset($data['variance_qty']) ? $data['variance_qty'] : null;
        $this->container['variance_cost'] = isset($data['variance_cost']) ? $data['variance_cost'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSummaryStatusAllowableValues();
        if (!is_null($this->container['summary_status']) && !in_array($this->container['summary_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'summary_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reference_nbr
     *
     * @return string
     */
    public function getReferenceNbr()
    {
        return $this->container['reference_nbr'];
    }

    /**
     * Sets reference_nbr
     *
     * @param string $reference_nbr The top part &gt; Ref. no. &gt; The reference number of the stocktaking document to be reviewed.
     *
     * @return $this
     */
    public function setReferenceNbr($reference_nbr)
    {
        $this->container['reference_nbr'] = $reference_nbr;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The top part &gt; Description &gt; The description of the stocktaking.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets summary_status
     *
     * @return string
     */
    public function getSummaryStatus()
    {
        return $this->container['summary_status'];
    }

    /**
     * Sets summary_status
     *
     * @param string $summary_status The top part &gt; Status &gt; An info field that shows the current status of this stocktaking document.
     *
     * @return $this
     */
    public function setSummaryStatus($summary_status)
    {
        $allowedValues = $this->getSummaryStatusAllowableValues();
        if (!is_null($summary_status) && !in_array($summary_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'summary_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['summary_status'] = $summary_status;

        return $this;
    }

    /**
     * Gets freeze_date
     *
     * @return \DateTime
     */
    public function getFreezeDate()
    {
        return $this->container['freeze_date'];
    }

    /**
     * Sets freeze_date
     *
     * @param \DateTime $freeze_date The top part &gt; Freeze date &gt; An info field that shows the date when the stocktaking document was created.
     *
     * @return $this
     */
    public function setFreezeDate($freeze_date)
    {
        $this->container['freeze_date'] = $freeze_date;

        return $this;
    }

    /**
     * Gets number_of_lines
     *
     * @return int
     */
    public function getNumberOfLines()
    {
        return $this->container['number_of_lines'];
    }

    /**
     * Sets number_of_lines
     *
     * @param int $number_of_lines number_of_lines
     *
     * @return $this
     */
    public function setNumberOfLines($number_of_lines)
    {
        $this->container['number_of_lines'] = $number_of_lines;

        return $this;
    }

    /**
     * Gets physical_qty
     *
     * @return double
     */
    public function getPhysicalQty()
    {
        return $this->container['physical_qty'];
    }

    /**
     * Sets physical_qty
     *
     * @param double $physical_qty The top part &gt; Total physical qty. &gt; An info field showing the total actual quantity of all stock items listed in the document.
     *
     * @return $this
     */
    public function setPhysicalQty($physical_qty)
    {
        $this->container['physical_qty'] = $physical_qty;

        return $this;
    }

    /**
     * Gets variance_qty
     *
     * @return double
     */
    public function getVarianceQty()
    {
        return $this->container['variance_qty'];
    }

    /**
     * Sets variance_qty
     *
     * @param double $variance_qty The top part &gt; Total variance qty. &gt; An info field showing the total variance quantity for the document.
     *
     * @return $this
     */
    public function setVarianceQty($variance_qty)
    {
        $this->container['variance_qty'] = $variance_qty;

        return $this;
    }

    /**
     * Gets variance_cost
     *
     * @return double
     */
    public function getVarianceCost()
    {
        return $this->container['variance_cost'];
    }

    /**
     * Sets variance_cost
     *
     * @param double $variance_cost The top part &gt; Total variance cost &gt; An info field showing the total variance cost for all stock items listed in the document.
     *
     * @return $this
     */
    public function setVarianceCost($variance_cost)
    {
        $this->container['variance_cost'] = $variance_cost;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time System generated information.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Ekstralys\VismaNetApi\Model\StocktakeLineDto[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Ekstralys\VismaNetApi\Model\StocktakeLineDto[] $lines Stocktaking details tab &gt;
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


