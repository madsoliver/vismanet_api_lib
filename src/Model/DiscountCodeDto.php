<?php
/**
 * DiscountCodeDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * DiscountCodeDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiscountCodeDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DiscountCodeDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'discount_code' => 'string',
        'description' => 'string',
        'discount_type' => 'string',
        'applicable_to' => 'string',
        'apply_to_deferred_revenue' => 'bool',
        'manual' => 'bool',
        'exclude_from_discountable_amount' => 'bool',
        'skip_document_discounts' => 'bool',
        'auto_numbering' => 'bool',
        'last_number' => 'string',
        'created_date_time' => '\DateTime',
        'last_modified_date_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'discount_code' => null,
        'description' => null,
        'discount_type' => null,
        'applicable_to' => null,
        'apply_to_deferred_revenue' => null,
        'manual' => null,
        'exclude_from_discountable_amount' => null,
        'skip_document_discounts' => null,
        'auto_numbering' => null,
        'last_number' => null,
        'created_date_time' => 'date-time',
        'last_modified_date_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'discount_code' => 'discountCode',
        'description' => 'description',
        'discount_type' => 'discountType',
        'applicable_to' => 'applicableTo',
        'apply_to_deferred_revenue' => 'applyToDeferredRevenue',
        'manual' => 'manual',
        'exclude_from_discountable_amount' => 'excludeFromDiscountableAmount',
        'skip_document_discounts' => 'skipDocumentDiscounts',
        'auto_numbering' => 'autoNumbering',
        'last_number' => 'lastNumber',
        'created_date_time' => 'createdDateTime',
        'last_modified_date_time' => 'lastModifiedDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'discount_code' => 'setDiscountCode',
        'description' => 'setDescription',
        'discount_type' => 'setDiscountType',
        'applicable_to' => 'setApplicableTo',
        'apply_to_deferred_revenue' => 'setApplyToDeferredRevenue',
        'manual' => 'setManual',
        'exclude_from_discountable_amount' => 'setExcludeFromDiscountableAmount',
        'skip_document_discounts' => 'setSkipDocumentDiscounts',
        'auto_numbering' => 'setAutoNumbering',
        'last_number' => 'setLastNumber',
        'created_date_time' => 'setCreatedDateTime',
        'last_modified_date_time' => 'setLastModifiedDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'discount_code' => 'getDiscountCode',
        'description' => 'getDescription',
        'discount_type' => 'getDiscountType',
        'applicable_to' => 'getApplicableTo',
        'apply_to_deferred_revenue' => 'getApplyToDeferredRevenue',
        'manual' => 'getManual',
        'exclude_from_discountable_amount' => 'getExcludeFromDiscountableAmount',
        'skip_document_discounts' => 'getSkipDocumentDiscounts',
        'auto_numbering' => 'getAutoNumbering',
        'last_number' => 'getLastNumber',
        'created_date_time' => 'getCreatedDateTime',
        'last_modified_date_time' => 'getLastModifiedDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['discount_code'] = isset($data['discount_code']) ? $data['discount_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['discount_type'] = isset($data['discount_type']) ? $data['discount_type'] : null;
        $this->container['applicable_to'] = isset($data['applicable_to']) ? $data['applicable_to'] : null;
        $this->container['apply_to_deferred_revenue'] = isset($data['apply_to_deferred_revenue']) ? $data['apply_to_deferred_revenue'] : null;
        $this->container['manual'] = isset($data['manual']) ? $data['manual'] : null;
        $this->container['exclude_from_discountable_amount'] = isset($data['exclude_from_discountable_amount']) ? $data['exclude_from_discountable_amount'] : null;
        $this->container['skip_document_discounts'] = isset($data['skip_document_discounts']) ? $data['skip_document_discounts'] : null;
        $this->container['auto_numbering'] = isset($data['auto_numbering']) ? $data['auto_numbering'] : null;
        $this->container['last_number'] = isset($data['last_number']) ? $data['last_number'] : null;
        $this->container['created_date_time'] = isset($data['created_date_time']) ? $data['created_date_time'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets discount_code
     *
     * @return string
     */
    public function getDiscountCode()
    {
        return $this->container['discount_code'];
    }

    /**
     * Sets discount_code
     *
     * @param string $discount_code discount_code
     *
     * @return $this
     */
    public function setDiscountCode($discount_code)
    {
        $this->container['discount_code'] = $discount_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets discount_type
     *
     * @return string
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     *
     * @param string $discount_type DiscountType: L - Line, G - Group, D - Document
     *
     * @return $this
     */
    public function setDiscountType($discount_type)
    {
        $this->container['discount_type'] = $discount_type;

        return $this;
    }

    /**
     * Gets applicable_to
     *
     * @return string
     */
    public function getApplicableTo()
    {
        return $this->container['applicable_to'];
    }

    /**
     * Sets applicable_to
     *
     * @param string $applicable_to Mandatory field: Discount codes table &gt; Applicable to &gt; The entity to which the discount may be applied.  Applicable To values:   CU - Customer,  CI - Customer and Item,  CP - Customer and Item Price Class,  CE - Customer Price Class,  PI - Customer Price Class and Item,  PP - Customer Price Class and Item Price Class,  CB - Customer and Branch,  PB - Customer Price Class and Branch,  WH - Warehouse,  WI - Warehouse and Item,  WC - Warehouse and Customer,  WP - Warehouse and Item Price Class,  WE - Warehouse and Customer Price Class,  BR - Branch,  IN - Item,  IE - Item Price Class,  UN - Unconditional
     *
     * @return $this
     */
    public function setApplicableTo($applicable_to)
    {
        $this->container['applicable_to'] = $applicable_to;

        return $this;
    }

    /**
     * Gets apply_to_deferred_revenue
     *
     * @return bool
     */
    public function getApplyToDeferredRevenue()
    {
        return $this->container['apply_to_deferred_revenue'];
    }

    /**
     * Sets apply_to_deferred_revenue
     *
     * @param bool $apply_to_deferred_revenue Discount codes table &gt; Apply to deferred revenue &gt; A check box that (if selected) indicates that a discount should be applied to a component price while computing a deferred revenue for the component.
     *
     * @return $this
     */
    public function setApplyToDeferredRevenue($apply_to_deferred_revenue)
    {
        $this->container['apply_to_deferred_revenue'] = $apply_to_deferred_revenue;

        return $this;
    }

    /**
     * Gets manual
     *
     * @return bool
     */
    public function getManual()
    {
        return $this->container['manual'];
    }

    /**
     * Sets manual
     *
     * @param bool $manual Discount codes table &gt; Manual &gt; A check box that (if selected) indicates that this discount is excluded from automatic searches for the best available discount.
     *
     * @return $this
     */
    public function setManual($manual)
    {
        $this->container['manual'] = $manual;

        return $this;
    }

    /**
     * Gets exclude_from_discountable_amount
     *
     * @return bool
     */
    public function getExcludeFromDiscountableAmount()
    {
        return $this->container['exclude_from_discountable_amount'];
    }

    /**
     * Sets exclude_from_discountable_amount
     *
     * @param bool $exclude_from_discountable_amount Discount codes table &gt; Exclude from discountable amount &gt; A check box that (if selected) indicates that the line amount is excluded from the amount that is the base for any applicable Group or Document discount.
     *
     * @return $this
     */
    public function setExcludeFromDiscountableAmount($exclude_from_discountable_amount)
    {
        $this->container['exclude_from_discountable_amount'] = $exclude_from_discountable_amount;

        return $this;
    }

    /**
     * Gets skip_document_discounts
     *
     * @return bool
     */
    public function getSkipDocumentDiscounts()
    {
        return $this->container['skip_document_discounts'];
    }

    /**
     * Sets skip_document_discounts
     *
     * @param bool $skip_document_discounts Discount codes table &gt; Skip document discounts &gt; A check box that indicates (if selected) that after this discount has been applied, no other applicable discounts should be applied.
     *
     * @return $this
     */
    public function setSkipDocumentDiscounts($skip_document_discounts)
    {
        $this->container['skip_document_discounts'] = $skip_document_discounts;

        return $this;
    }

    /**
     * Gets auto_numbering
     *
     * @return bool
     */
    public function getAutoNumbering()
    {
        return $this->container['auto_numbering'];
    }

    /**
     * Sets auto_numbering
     *
     * @param bool $auto_numbering Discount codes table &gt; Auto numbering &gt; A check box that you select to use auto-numbering for generating IDs for series based on this discount code.
     *
     * @return $this
     */
    public function setAutoNumbering($auto_numbering)
    {
        $this->container['auto_numbering'] = $auto_numbering;

        return $this;
    }

    /**
     * Gets last_number
     *
     * @return string
     */
    public function getLastNumber()
    {
        return $this->container['last_number'];
    }

    /**
     * Sets last_number
     *
     * @param string $last_number Discount codes table &gt; Last number &gt; The last ID used for the series if series IDs are auto-numbered.
     *
     * @return $this
     */
    public function setLastNumber($last_number)
    {
        $this->container['last_number'] = $last_number;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return \DateTime
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param \DateTime $created_date_time System generated value.
     *
     * @return $this
     */
    public function setCreatedDateTime($created_date_time)
    {
        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time System generated value.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


