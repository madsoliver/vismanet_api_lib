<?php
/**
 * InventoryQueryParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * InventoryQueryParameters Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryQueryParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryQueryParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alternate_id' => 'string',
        'inventory_number' => 'string',
        'sales_category' => 'int',
        'add_cost_price_statistics' => 'bool',
        'attributes' => 'string',
        'description' => 'string',
        'availability_last_modified_date_time' => 'string',
        'availability_last_modified_date_time_condition' => 'string',
        'inventory_types' => 'string[]',
        'expand_cross_reference' => 'bool',
        'expand_attachment' => 'bool',
        'expand_attribute' => 'bool',
        'expand_warehouse_detail' => 'bool',
        'expand_account_information' => 'bool',
        'expand_inventory_units' => 'bool',
        'expand_supplier_details' => 'bool',
        'expand_sales_categories' => 'bool',
        'attachment_last_modified_date_time' => 'string',
        'attachment_last_modified_date_time_condition' => 'string',
        'number_to_read' => 'int',
        'skip_records' => 'int',
        'greater_than_value' => 'string',
        'last_modified_date_time' => 'string',
        'last_modified_date_time_condition' => 'string',
        'created_date_time' => 'string',
        'created_date_time_condition' => 'string',
        'page_number' => 'int',
        'page_size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alternate_id' => null,
        'inventory_number' => null,
        'sales_category' => 'int32',
        'add_cost_price_statistics' => null,
        'attributes' => null,
        'description' => null,
        'availability_last_modified_date_time' => null,
        'availability_last_modified_date_time_condition' => null,
        'inventory_types' => null,
        'expand_cross_reference' => null,
        'expand_attachment' => null,
        'expand_attribute' => null,
        'expand_warehouse_detail' => null,
        'expand_account_information' => null,
        'expand_inventory_units' => null,
        'expand_supplier_details' => null,
        'expand_sales_categories' => null,
        'attachment_last_modified_date_time' => null,
        'attachment_last_modified_date_time_condition' => null,
        'number_to_read' => 'int32',
        'skip_records' => 'int32',
        'greater_than_value' => null,
        'last_modified_date_time' => null,
        'last_modified_date_time_condition' => null,
        'created_date_time' => null,
        'created_date_time_condition' => null,
        'page_number' => 'int32',
        'page_size' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alternate_id' => 'alternateID',
        'inventory_number' => 'inventoryNumber',
        'sales_category' => 'salesCategory',
        'add_cost_price_statistics' => 'addCostPriceStatistics',
        'attributes' => 'attributes',
        'description' => 'description',
        'availability_last_modified_date_time' => 'availabilityLastModifiedDateTime',
        'availability_last_modified_date_time_condition' => 'availabilityLastModifiedDateTimeCondition',
        'inventory_types' => 'inventoryTypes',
        'expand_cross_reference' => 'expandCrossReference',
        'expand_attachment' => 'expandAttachment',
        'expand_attribute' => 'expandAttribute',
        'expand_warehouse_detail' => 'expandWarehouseDetail',
        'expand_account_information' => 'expandAccountInformation',
        'expand_inventory_units' => 'expandInventoryUnits',
        'expand_supplier_details' => 'expandSupplierDetails',
        'expand_sales_categories' => 'expandSalesCategories',
        'attachment_last_modified_date_time' => 'attachmentLastModifiedDateTime',
        'attachment_last_modified_date_time_condition' => 'attachmentLastModifiedDateTimeCondition',
        'number_to_read' => 'numberToRead',
        'skip_records' => 'skipRecords',
        'greater_than_value' => 'greaterThanValue',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'last_modified_date_time_condition' => 'lastModifiedDateTimeCondition',
        'created_date_time' => 'createdDateTime',
        'created_date_time_condition' => 'createdDateTimeCondition',
        'page_number' => 'pageNumber',
        'page_size' => 'pageSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alternate_id' => 'setAlternateId',
        'inventory_number' => 'setInventoryNumber',
        'sales_category' => 'setSalesCategory',
        'add_cost_price_statistics' => 'setAddCostPriceStatistics',
        'attributes' => 'setAttributes',
        'description' => 'setDescription',
        'availability_last_modified_date_time' => 'setAvailabilityLastModifiedDateTime',
        'availability_last_modified_date_time_condition' => 'setAvailabilityLastModifiedDateTimeCondition',
        'inventory_types' => 'setInventoryTypes',
        'expand_cross_reference' => 'setExpandCrossReference',
        'expand_attachment' => 'setExpandAttachment',
        'expand_attribute' => 'setExpandAttribute',
        'expand_warehouse_detail' => 'setExpandWarehouseDetail',
        'expand_account_information' => 'setExpandAccountInformation',
        'expand_inventory_units' => 'setExpandInventoryUnits',
        'expand_supplier_details' => 'setExpandSupplierDetails',
        'expand_sales_categories' => 'setExpandSalesCategories',
        'attachment_last_modified_date_time' => 'setAttachmentLastModifiedDateTime',
        'attachment_last_modified_date_time_condition' => 'setAttachmentLastModifiedDateTimeCondition',
        'number_to_read' => 'setNumberToRead',
        'skip_records' => 'setSkipRecords',
        'greater_than_value' => 'setGreaterThanValue',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'last_modified_date_time_condition' => 'setLastModifiedDateTimeCondition',
        'created_date_time' => 'setCreatedDateTime',
        'created_date_time_condition' => 'setCreatedDateTimeCondition',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alternate_id' => 'getAlternateId',
        'inventory_number' => 'getInventoryNumber',
        'sales_category' => 'getSalesCategory',
        'add_cost_price_statistics' => 'getAddCostPriceStatistics',
        'attributes' => 'getAttributes',
        'description' => 'getDescription',
        'availability_last_modified_date_time' => 'getAvailabilityLastModifiedDateTime',
        'availability_last_modified_date_time_condition' => 'getAvailabilityLastModifiedDateTimeCondition',
        'inventory_types' => 'getInventoryTypes',
        'expand_cross_reference' => 'getExpandCrossReference',
        'expand_attachment' => 'getExpandAttachment',
        'expand_attribute' => 'getExpandAttribute',
        'expand_warehouse_detail' => 'getExpandWarehouseDetail',
        'expand_account_information' => 'getExpandAccountInformation',
        'expand_inventory_units' => 'getExpandInventoryUnits',
        'expand_supplier_details' => 'getExpandSupplierDetails',
        'expand_sales_categories' => 'getExpandSalesCategories',
        'attachment_last_modified_date_time' => 'getAttachmentLastModifiedDateTime',
        'attachment_last_modified_date_time_condition' => 'getAttachmentLastModifiedDateTimeCondition',
        'number_to_read' => 'getNumberToRead',
        'skip_records' => 'getSkipRecords',
        'greater_than_value' => 'getGreaterThanValue',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'last_modified_date_time_condition' => 'getLastModifiedDateTimeCondition',
        'created_date_time' => 'getCreatedDateTime',
        'created_date_time_condition' => 'getCreatedDateTimeCondition',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alternate_id'] = isset($data['alternate_id']) ? $data['alternate_id'] : null;
        $this->container['inventory_number'] = isset($data['inventory_number']) ? $data['inventory_number'] : null;
        $this->container['sales_category'] = isset($data['sales_category']) ? $data['sales_category'] : null;
        $this->container['add_cost_price_statistics'] = isset($data['add_cost_price_statistics']) ? $data['add_cost_price_statistics'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['availability_last_modified_date_time'] = isset($data['availability_last_modified_date_time']) ? $data['availability_last_modified_date_time'] : null;
        $this->container['availability_last_modified_date_time_condition'] = isset($data['availability_last_modified_date_time_condition']) ? $data['availability_last_modified_date_time_condition'] : null;
        $this->container['inventory_types'] = isset($data['inventory_types']) ? $data['inventory_types'] : null;
        $this->container['expand_cross_reference'] = isset($data['expand_cross_reference']) ? $data['expand_cross_reference'] : null;
        $this->container['expand_attachment'] = isset($data['expand_attachment']) ? $data['expand_attachment'] : null;
        $this->container['expand_attribute'] = isset($data['expand_attribute']) ? $data['expand_attribute'] : null;
        $this->container['expand_warehouse_detail'] = isset($data['expand_warehouse_detail']) ? $data['expand_warehouse_detail'] : null;
        $this->container['expand_account_information'] = isset($data['expand_account_information']) ? $data['expand_account_information'] : null;
        $this->container['expand_inventory_units'] = isset($data['expand_inventory_units']) ? $data['expand_inventory_units'] : null;
        $this->container['expand_supplier_details'] = isset($data['expand_supplier_details']) ? $data['expand_supplier_details'] : null;
        $this->container['expand_sales_categories'] = isset($data['expand_sales_categories']) ? $data['expand_sales_categories'] : null;
        $this->container['attachment_last_modified_date_time'] = isset($data['attachment_last_modified_date_time']) ? $data['attachment_last_modified_date_time'] : null;
        $this->container['attachment_last_modified_date_time_condition'] = isset($data['attachment_last_modified_date_time_condition']) ? $data['attachment_last_modified_date_time_condition'] : null;
        $this->container['number_to_read'] = isset($data['number_to_read']) ? $data['number_to_read'] : null;
        $this->container['skip_records'] = isset($data['skip_records']) ? $data['skip_records'] : null;
        $this->container['greater_than_value'] = isset($data['greater_than_value']) ? $data['greater_than_value'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['last_modified_date_time_condition'] = isset($data['last_modified_date_time_condition']) ? $data['last_modified_date_time_condition'] : null;
        $this->container['created_date_time'] = isset($data['created_date_time']) ? $data['created_date_time'] : null;
        $this->container['created_date_time_condition'] = isset($data['created_date_time_condition']) ? $data['created_date_time_condition'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alternate_id
     *
     * @return string
     */
    public function getAlternateId()
    {
        return $this->container['alternate_id'];
    }

    /**
     * Sets alternate_id
     *
     * @param string $alternate_id Applies for both Stock and Non-stock items.  Some fields in this filter applies only for one of these.
     *
     * @return $this
     */
    public function setAlternateId($alternate_id)
    {
        $this->container['alternate_id'] = $alternate_id;

        return $this;
    }

    /**
     * Gets inventory_number
     *
     * @return string
     */
    public function getInventoryNumber()
    {
        return $this->container['inventory_number'];
    }

    /**
     * Sets inventory_number
     *
     * @param string $inventory_number The Item ID.
     *
     * @return $this
     */
    public function setInventoryNumber($inventory_number)
    {
        $this->container['inventory_number'] = $inventory_number;

        return $this;
    }

    /**
     * Gets sales_category
     *
     * @return int
     */
    public function getSalesCategory()
    {
        return $this->container['sales_category'];
    }

    /**
     * Sets sales_category
     *
     * @param int $sales_category The Category ID for the sales category, found on the Attributes tab.
     *
     * @return $this
     */
    public function setSalesCategory($sales_category)
    {
        $this->container['sales_category'] = $sales_category;

        return $this;
    }

    /**
     * Gets add_cost_price_statistics
     *
     * @return bool
     */
    public function getAddCostPriceStatistics()
    {
        return $this->container['add_cost_price_statistics'];
    }

    /**
     * Sets add_cost_price_statistics
     *
     * @param bool $add_cost_price_statistics This filter can be used only for stock items, from the Price/cost information tab.
     *
     * @return $this
     */
    public function setAddCostPriceStatistics($add_cost_price_statistics)
    {
        $this->container['add_cost_price_statistics'] = $add_cost_price_statistics;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return string
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param string $attributes Attributes (additional information) connected to the item.
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A brief description of the stock item from the Top part of the window.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets availability_last_modified_date_time
     *
     * @return string
     */
    public function getAvailabilityLastModifiedDateTime()
    {
        return $this->container['availability_last_modified_date_time'];
    }

    /**
     * Sets availability_last_modified_date_time
     *
     * @param string $availability_last_modified_date_time System retrieved information.
     *
     * @return $this
     */
    public function setAvailabilityLastModifiedDateTime($availability_last_modified_date_time)
    {
        $this->container['availability_last_modified_date_time'] = $availability_last_modified_date_time;

        return $this;
    }

    /**
     * Gets availability_last_modified_date_time_condition
     *
     * @return string
     */
    public function getAvailabilityLastModifiedDateTimeCondition()
    {
        return $this->container['availability_last_modified_date_time_condition'];
    }

    /**
     * Sets availability_last_modified_date_time_condition
     *
     * @param string $availability_last_modified_date_time_condition System retrieved information for state/condition.
     *
     * @return $this
     */
    public function setAvailabilityLastModifiedDateTimeCondition($availability_last_modified_date_time_condition)
    {
        $this->container['availability_last_modified_date_time_condition'] = $availability_last_modified_date_time_condition;

        return $this;
    }

    /**
     * Gets inventory_types
     *
     * @return string[]
     */
    public function getInventoryTypes()
    {
        return $this->container['inventory_types'];
    }

    /**
     * Sets inventory_types
     *
     * @param string[] $inventory_types Filter on one or more inventory types: NonStockItem, LaborItem, ServiceItem, ChargeItem, ExpenseItem, FinishedGoodItem, ComponentPartItem or SubassemblyItem
     *
     * @return $this
     */
    public function setInventoryTypes($inventory_types)
    {
        $this->container['inventory_types'] = $inventory_types;

        return $this;
    }

    /**
     * Gets expand_cross_reference
     *
     * @return bool
     */
    public function getExpandCrossReference()
    {
        return $this->container['expand_cross_reference'];
    }

    /**
     * Sets expand_cross_reference
     *
     * @param bool $expand_cross_reference These expand fields are by default set to true, but will be changed in the future.   Set to true to retrieve information about the cross-references (item ID and suppliers/customers ID for the item connected to the item.
     *
     * @return $this
     */
    public function setExpandCrossReference($expand_cross_reference)
    {
        $this->container['expand_cross_reference'] = $expand_cross_reference;

        return $this;
    }

    /**
     * Gets expand_attachment
     *
     * @return bool
     */
    public function getExpandAttachment()
    {
        return $this->container['expand_attachment'];
    }

    /**
     * Sets expand_attachment
     *
     * @param bool $expand_attachment Set to true to retrieve information about the attachments connected to the item.
     *
     * @return $this
     */
    public function setExpandAttachment($expand_attachment)
    {
        $this->container['expand_attachment'] = $expand_attachment;

        return $this;
    }

    /**
     * Gets expand_attribute
     *
     * @return bool
     */
    public function getExpandAttribute()
    {
        return $this->container['expand_attribute'];
    }

    /**
     * Sets expand_attribute
     *
     * @param bool $expand_attribute Set to true to retrieve the attribute descriptions used for the item.
     *
     * @return $this
     */
    public function setExpandAttribute($expand_attribute)
    {
        $this->container['expand_attribute'] = $expand_attribute;

        return $this;
    }

    /**
     * Gets expand_warehouse_detail
     *
     * @return bool
     */
    public function getExpandWarehouseDetail()
    {
        return $this->container['expand_warehouse_detail'];
    }

    /**
     * Sets expand_warehouse_detail
     *
     * @param bool $expand_warehouse_detail Set to true to retrieve information about the warehouse connected to the item.
     *
     * @return $this
     */
    public function setExpandWarehouseDetail($expand_warehouse_detail)
    {
        $this->container['expand_warehouse_detail'] = $expand_warehouse_detail;

        return $this;
    }

    /**
     * Gets expand_account_information
     *
     * @return bool
     */
    public function getExpandAccountInformation()
    {
        return $this->container['expand_account_information'];
    }

    /**
     * Sets expand_account_information
     *
     * @param bool $expand_account_information Set to true to retrieve information about the account information connected to the item.
     *
     * @return $this
     */
    public function setExpandAccountInformation($expand_account_information)
    {
        $this->container['expand_account_information'] = $expand_account_information;

        return $this;
    }

    /**
     * Gets expand_inventory_units
     *
     * @return bool
     */
    public function getExpandInventoryUnits()
    {
        return $this->container['expand_inventory_units'];
    }

    /**
     * Sets expand_inventory_units
     *
     * @param bool $expand_inventory_units Set to true to retrieve information about the units of measure connected to the item.
     *
     * @return $this
     */
    public function setExpandInventoryUnits($expand_inventory_units)
    {
        $this->container['expand_inventory_units'] = $expand_inventory_units;

        return $this;
    }

    /**
     * Gets expand_supplier_details
     *
     * @return bool
     */
    public function getExpandSupplierDetails()
    {
        return $this->container['expand_supplier_details'];
    }

    /**
     * Sets expand_supplier_details
     *
     * @param bool $expand_supplier_details Set to true to retrieve details about the supplier connected to the item.
     *
     * @return $this
     */
    public function setExpandSupplierDetails($expand_supplier_details)
    {
        $this->container['expand_supplier_details'] = $expand_supplier_details;

        return $this;
    }

    /**
     * Gets expand_sales_categories
     *
     * @return bool
     */
    public function getExpandSalesCategories()
    {
        return $this->container['expand_sales_categories'];
    }

    /**
     * Sets expand_sales_categories
     *
     * @param bool $expand_sales_categories Set to true to retrieve details about the sales categories connected to the item.
     *
     * @return $this
     */
    public function setExpandSalesCategories($expand_sales_categories)
    {
        $this->container['expand_sales_categories'] = $expand_sales_categories;

        return $this;
    }

    /**
     * Gets attachment_last_modified_date_time
     *
     * @return string
     */
    public function getAttachmentLastModifiedDateTime()
    {
        return $this->container['attachment_last_modified_date_time'];
    }

    /**
     * Sets attachment_last_modified_date_time
     *
     * @param string $attachment_last_modified_date_time System retrieved information for last modified date and time for attachment.
     *
     * @return $this
     */
    public function setAttachmentLastModifiedDateTime($attachment_last_modified_date_time)
    {
        $this->container['attachment_last_modified_date_time'] = $attachment_last_modified_date_time;

        return $this;
    }

    /**
     * Gets attachment_last_modified_date_time_condition
     *
     * @return string
     */
    public function getAttachmentLastModifiedDateTimeCondition()
    {
        return $this->container['attachment_last_modified_date_time_condition'];
    }

    /**
     * Sets attachment_last_modified_date_time_condition
     *
     * @param string $attachment_last_modified_date_time_condition System retrieved information for state/condition for attachment.
     *
     * @return $this
     */
    public function setAttachmentLastModifiedDateTimeCondition($attachment_last_modified_date_time_condition)
    {
        $this->container['attachment_last_modified_date_time_condition'] = $attachment_last_modified_date_time_condition;

        return $this;
    }

    /**
     * Gets number_to_read
     *
     * @return int
     */
    public function getNumberToRead()
    {
        return $this->container['number_to_read'];
    }

    /**
     * Sets number_to_read
     *
     * @param int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.
     *
     * @return $this
     */
    public function setNumberToRead($number_to_read)
    {
        $this->container['number_to_read'] = $number_to_read;

        return $this;
    }

    /**
     * Gets skip_records
     *
     * @return int
     */
    public function getSkipRecords()
    {
        return $this->container['skip_records'];
    }

    /**
     * Sets skip_records
     *
     * @param int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.
     *
     * @return $this
     */
    public function setSkipRecords($skip_records)
    {
        $this->container['skip_records'] = $skip_records;

        return $this;
    }

    /**
     * Gets greater_than_value
     *
     * @return string
     */
    public function getGreaterThanValue()
    {
        return $this->container['greater_than_value'];
    }

    /**
     * Sets greater_than_value
     *
     * @param string $greater_than_value Greater than value. The item which is the object for this, varies from API to API.
     *
     * @return $this
     */
    public function setGreaterThanValue($greater_than_value)
    {
        $this->container['greater_than_value'] = $greater_than_value;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return string
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets last_modified_date_time_condition
     *
     * @return string
     */
    public function getLastModifiedDateTimeCondition()
    {
        return $this->container['last_modified_date_time_condition'];
    }

    /**
     * Sets last_modified_date_time_condition
     *
     * @param string $last_modified_date_time_condition System retrieved information for state/condition.
     *
     * @return $this
     */
    public function setLastModifiedDateTimeCondition($last_modified_date_time_condition)
    {
        $this->container['last_modified_date_time_condition'] = $last_modified_date_time_condition;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return string
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param string $created_date_time Creation date and time.
     *
     * @return $this
     */
    public function setCreatedDateTime($created_date_time)
    {
        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets created_date_time_condition
     *
     * @return string
     */
    public function getCreatedDateTimeCondition()
    {
        return $this->container['created_date_time_condition'];
    }

    /**
     * Sets created_date_time_condition
     *
     * @param string $created_date_time_condition System-retrieved information for state/condition
     *
     * @return $this
     */
    public function setCreatedDateTimeCondition($created_date_time_condition)
    {
        $this->container['created_date_time_condition'] = $created_date_time_condition;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number Pagination parameter. Page number.
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size Pagination parameter. Number of items to be collected.
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


