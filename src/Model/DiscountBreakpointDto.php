<?php
/**
 * DiscountBreakpointDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * DiscountBreakpointDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiscountBreakpointDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DiscountBreakpointDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_nbr' => 'int',
        'active' => 'bool',
        'break_amount' => 'double',
        'amount_to' => 'double',
        'last_break_amount' => 'double',
        'last_amount_to' => 'double',
        'pending_break_amount' => 'double',
        'break_quantity' => 'double',
        'quantity_to' => 'double',
        'last_break_quantity' => 'double',
        'last_quantity_to' => 'double',
        'pending_break_quantity' => 'double',
        'discount_amount' => 'double',
        'discount_percent' => 'double',
        'last_discount_amount' => 'double',
        'last_discount_percent' => 'double',
        'last_discount' => 'double',
        'pending_discount_amount' => 'double',
        'pending_discount_percent' => 'double',
        'free_item_qty' => 'double',
        'last_free_item_qty' => 'double',
        'pending_free_item_qty' => 'double',
        'pending_date' => '\DateTime',
        'effective_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_nbr' => 'int32',
        'active' => null,
        'break_amount' => 'double',
        'amount_to' => 'double',
        'last_break_amount' => 'double',
        'last_amount_to' => 'double',
        'pending_break_amount' => 'double',
        'break_quantity' => 'double',
        'quantity_to' => 'double',
        'last_break_quantity' => 'double',
        'last_quantity_to' => 'double',
        'pending_break_quantity' => 'double',
        'discount_amount' => 'double',
        'discount_percent' => 'double',
        'last_discount_amount' => 'double',
        'last_discount_percent' => 'double',
        'last_discount' => 'double',
        'pending_discount_amount' => 'double',
        'pending_discount_percent' => 'double',
        'free_item_qty' => 'double',
        'last_free_item_qty' => 'double',
        'pending_free_item_qty' => 'double',
        'pending_date' => 'date-time',
        'effective_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_nbr' => 'lineNbr',
        'active' => 'active',
        'break_amount' => 'breakAmount',
        'amount_to' => 'amountTo',
        'last_break_amount' => 'lastBreakAmount',
        'last_amount_to' => 'lastAmountTo',
        'pending_break_amount' => 'pendingBreakAmount',
        'break_quantity' => 'breakQuantity',
        'quantity_to' => 'quantityTo',
        'last_break_quantity' => 'lastBreakQuantity',
        'last_quantity_to' => 'lastQuantityTo',
        'pending_break_quantity' => 'pendingBreakQuantity',
        'discount_amount' => 'discountAmount',
        'discount_percent' => 'discountPercent',
        'last_discount_amount' => 'lastDiscountAmount',
        'last_discount_percent' => 'lastDiscountPercent',
        'last_discount' => 'lastDiscount',
        'pending_discount_amount' => 'pendingDiscountAmount',
        'pending_discount_percent' => 'pendingDiscountPercent',
        'free_item_qty' => 'freeItemQty',
        'last_free_item_qty' => 'lastFreeItemQty',
        'pending_free_item_qty' => 'pendingFreeItemQty',
        'pending_date' => 'pendingDate',
        'effective_date' => 'effectiveDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_nbr' => 'setLineNbr',
        'active' => 'setActive',
        'break_amount' => 'setBreakAmount',
        'amount_to' => 'setAmountTo',
        'last_break_amount' => 'setLastBreakAmount',
        'last_amount_to' => 'setLastAmountTo',
        'pending_break_amount' => 'setPendingBreakAmount',
        'break_quantity' => 'setBreakQuantity',
        'quantity_to' => 'setQuantityTo',
        'last_break_quantity' => 'setLastBreakQuantity',
        'last_quantity_to' => 'setLastQuantityTo',
        'pending_break_quantity' => 'setPendingBreakQuantity',
        'discount_amount' => 'setDiscountAmount',
        'discount_percent' => 'setDiscountPercent',
        'last_discount_amount' => 'setLastDiscountAmount',
        'last_discount_percent' => 'setLastDiscountPercent',
        'last_discount' => 'setLastDiscount',
        'pending_discount_amount' => 'setPendingDiscountAmount',
        'pending_discount_percent' => 'setPendingDiscountPercent',
        'free_item_qty' => 'setFreeItemQty',
        'last_free_item_qty' => 'setLastFreeItemQty',
        'pending_free_item_qty' => 'setPendingFreeItemQty',
        'pending_date' => 'setPendingDate',
        'effective_date' => 'setEffectiveDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_nbr' => 'getLineNbr',
        'active' => 'getActive',
        'break_amount' => 'getBreakAmount',
        'amount_to' => 'getAmountTo',
        'last_break_amount' => 'getLastBreakAmount',
        'last_amount_to' => 'getLastAmountTo',
        'pending_break_amount' => 'getPendingBreakAmount',
        'break_quantity' => 'getBreakQuantity',
        'quantity_to' => 'getQuantityTo',
        'last_break_quantity' => 'getLastBreakQuantity',
        'last_quantity_to' => 'getLastQuantityTo',
        'pending_break_quantity' => 'getPendingBreakQuantity',
        'discount_amount' => 'getDiscountAmount',
        'discount_percent' => 'getDiscountPercent',
        'last_discount_amount' => 'getLastDiscountAmount',
        'last_discount_percent' => 'getLastDiscountPercent',
        'last_discount' => 'getLastDiscount',
        'pending_discount_amount' => 'getPendingDiscountAmount',
        'pending_discount_percent' => 'getPendingDiscountPercent',
        'free_item_qty' => 'getFreeItemQty',
        'last_free_item_qty' => 'getLastFreeItemQty',
        'pending_free_item_qty' => 'getPendingFreeItemQty',
        'pending_date' => 'getPendingDate',
        'effective_date' => 'getEffectiveDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_nbr'] = isset($data['line_nbr']) ? $data['line_nbr'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['break_amount'] = isset($data['break_amount']) ? $data['break_amount'] : null;
        $this->container['amount_to'] = isset($data['amount_to']) ? $data['amount_to'] : null;
        $this->container['last_break_amount'] = isset($data['last_break_amount']) ? $data['last_break_amount'] : null;
        $this->container['last_amount_to'] = isset($data['last_amount_to']) ? $data['last_amount_to'] : null;
        $this->container['pending_break_amount'] = isset($data['pending_break_amount']) ? $data['pending_break_amount'] : null;
        $this->container['break_quantity'] = isset($data['break_quantity']) ? $data['break_quantity'] : null;
        $this->container['quantity_to'] = isset($data['quantity_to']) ? $data['quantity_to'] : null;
        $this->container['last_break_quantity'] = isset($data['last_break_quantity']) ? $data['last_break_quantity'] : null;
        $this->container['last_quantity_to'] = isset($data['last_quantity_to']) ? $data['last_quantity_to'] : null;
        $this->container['pending_break_quantity'] = isset($data['pending_break_quantity']) ? $data['pending_break_quantity'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['last_discount_amount'] = isset($data['last_discount_amount']) ? $data['last_discount_amount'] : null;
        $this->container['last_discount_percent'] = isset($data['last_discount_percent']) ? $data['last_discount_percent'] : null;
        $this->container['last_discount'] = isset($data['last_discount']) ? $data['last_discount'] : null;
        $this->container['pending_discount_amount'] = isset($data['pending_discount_amount']) ? $data['pending_discount_amount'] : null;
        $this->container['pending_discount_percent'] = isset($data['pending_discount_percent']) ? $data['pending_discount_percent'] : null;
        $this->container['free_item_qty'] = isset($data['free_item_qty']) ? $data['free_item_qty'] : null;
        $this->container['last_free_item_qty'] = isset($data['last_free_item_qty']) ? $data['last_free_item_qty'] : null;
        $this->container['pending_free_item_qty'] = isset($data['pending_free_item_qty']) ? $data['pending_free_item_qty'] : null;
        $this->container['pending_date'] = isset($data['pending_date']) ? $data['pending_date'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_nbr
     *
     * @return int
     */
    public function getLineNbr()
    {
        return $this->container['line_nbr'];
    }

    /**
     * Sets line_nbr
     *
     * @param int $line_nbr line_nbr
     *
     * @return $this
     */
    public function setLineNbr($line_nbr)
    {
        $this->container['line_nbr'] = $line_nbr;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active The top part &gt; Active &gt; A check box that indicates (if selected) that the series is active.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets break_amount
     *
     * @return double
     */
    public function getBreakAmount()
    {
        return $this->container['break_amount'];
    }

    /**
     * Sets break_amount
     *
     * @param double $break_amount Discount breakpoints tab &gt; Break amount &gt; The line amount (break point) that starts the new range for the currently effective series.
     *
     * @return $this
     */
    public function setBreakAmount($break_amount)
    {
        $this->container['break_amount'] = $break_amount;

        return $this;
    }

    /**
     * Gets amount_to
     *
     * @return double
     */
    public function getAmountTo()
    {
        return $this->container['amount_to'];
    }

    /**
     * Sets amount_to
     *
     * @param double $amount_to amount_to
     *
     * @return $this
     */
    public function setAmountTo($amount_to)
    {
        $this->container['amount_to'] = $amount_to;

        return $this;
    }

    /**
     * Gets last_break_amount
     *
     * @return double
     */
    public function getLastBreakAmount()
    {
        return $this->container['last_break_amount'];
    }

    /**
     * Sets last_break_amount
     *
     * @param double $last_break_amount Discount breakpoints tab &gt; Last break amount &gt; The amount (break point) that started the new range for the previously effective series (the one that was used before the effective date).
     *
     * @return $this
     */
    public function setLastBreakAmount($last_break_amount)
    {
        $this->container['last_break_amount'] = $last_break_amount;

        return $this;
    }

    /**
     * Gets last_amount_to
     *
     * @return double
     */
    public function getLastAmountTo()
    {
        return $this->container['last_amount_to'];
    }

    /**
     * Sets last_amount_to
     *
     * @param double $last_amount_to last_amount_to
     *
     * @return $this
     */
    public function setLastAmountTo($last_amount_to)
    {
        $this->container['last_amount_to'] = $last_amount_to;

        return $this;
    }

    /**
     * Gets pending_break_amount
     *
     * @return double
     */
    public function getPendingBreakAmount()
    {
        return $this->container['pending_break_amount'];
    }

    /**
     * Sets pending_break_amount
     *
     * @param double $pending_break_amount Discount breakpoints tab &gt; Pending break amount &gt; The amount (break point) that starts the new range for the pending series (one that is not yet in effect).
     *
     * @return $this
     */
    public function setPendingBreakAmount($pending_break_amount)
    {
        $this->container['pending_break_amount'] = $pending_break_amount;

        return $this;
    }

    /**
     * Gets break_quantity
     *
     * @return double
     */
    public function getBreakQuantity()
    {
        return $this->container['break_quantity'];
    }

    /**
     * Sets break_quantity
     *
     * @param double $break_quantity Discount breakpoints tab &gt; Break quantity &gt; The quantity of items (break quantity) that starts the new range for a discount level for the currently effective series. Any break quantity should be specified in the base units.
     *
     * @return $this
     */
    public function setBreakQuantity($break_quantity)
    {
        $this->container['break_quantity'] = $break_quantity;

        return $this;
    }

    /**
     * Gets quantity_to
     *
     * @return double
     */
    public function getQuantityTo()
    {
        return $this->container['quantity_to'];
    }

    /**
     * Sets quantity_to
     *
     * @param double $quantity_to quantity_to
     *
     * @return $this
     */
    public function setQuantityTo($quantity_to)
    {
        $this->container['quantity_to'] = $quantity_to;

        return $this;
    }

    /**
     * Gets last_break_quantity
     *
     * @return double
     */
    public function getLastBreakQuantity()
    {
        return $this->container['last_break_quantity'];
    }

    /**
     * Sets last_break_quantity
     *
     * @param double $last_break_quantity Discount breakpoints tab &gt; Last break quantity &gt; The quantity of item (break point) that started the range for the discount series used before the effective date.
     *
     * @return $this
     */
    public function setLastBreakQuantity($last_break_quantity)
    {
        $this->container['last_break_quantity'] = $last_break_quantity;

        return $this;
    }

    /**
     * Gets last_quantity_to
     *
     * @return double
     */
    public function getLastQuantityTo()
    {
        return $this->container['last_quantity_to'];
    }

    /**
     * Sets last_quantity_to
     *
     * @param double $last_quantity_to last_quantity_to
     *
     * @return $this
     */
    public function setLastQuantityTo($last_quantity_to)
    {
        $this->container['last_quantity_to'] = $last_quantity_to;

        return $this;
    }

    /**
     * Gets pending_break_quantity
     *
     * @return double
     */
    public function getPendingBreakQuantity()
    {
        return $this->container['pending_break_quantity'];
    }

    /**
     * Sets pending_break_quantity
     *
     * @param double $pending_break_quantity Discount breakpoints tab &gt; Pending break quantity &gt; The quantity of items (break point) that starts the new range for the pending (not yet effective) series.
     *
     * @return $this
     */
    public function setPendingBreakQuantity($pending_break_quantity)
    {
        $this->container['pending_break_quantity'] = $pending_break_quantity;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return double
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param double $discount_amount Discount breakpoints tab &gt; Discount amount &gt; The discount amount to be used for the quantities that exceed this break quantity if the Amount option is selected as Discount by.
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return double
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param double $discount_percent Discount breakpoints tab &gt; Discount percent &gt; The discount percent to be currently used for the quantities that exceed this break quantity if the Percent option is selected as Discount by.
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets last_discount_amount
     *
     * @return double
     */
    public function getLastDiscountAmount()
    {
        return $this->container['last_discount_amount'];
    }

    /**
     * Sets last_discount_amount
     *
     * @param double $last_discount_amount Discount breakpoints tab &gt; Last discount amount &gt; The amount used as the discount for the discount series that was in effect before the effective date.
     *
     * @return $this
     */
    public function setLastDiscountAmount($last_discount_amount)
    {
        $this->container['last_discount_amount'] = $last_discount_amount;

        return $this;
    }

    /**
     * Gets last_discount_percent
     *
     * @return double
     */
    public function getLastDiscountPercent()
    {
        return $this->container['last_discount_percent'];
    }

    /**
     * Sets last_discount_percent
     *
     * @param double $last_discount_percent Discount breakpoints tab &gt; Last discount percent &gt; The percentage used for the break point in the previously effective series.
     *
     * @return $this
     */
    public function setLastDiscountPercent($last_discount_percent)
    {
        $this->container['last_discount_percent'] = $last_discount_percent;

        return $this;
    }

    /**
     * Gets last_discount
     *
     * @return double
     */
    public function getLastDiscount()
    {
        return $this->container['last_discount'];
    }

    /**
     * Sets last_discount
     *
     * @param double $last_discount Discount breakpoints tab &gt; Last discount amount &gt; The amount used as the discount for the discount series that was in effect before the effective date.
     *
     * @return $this
     */
    public function setLastDiscount($last_discount)
    {
        $this->container['last_discount'] = $last_discount;

        return $this;
    }

    /**
     * Gets pending_discount_amount
     *
     * @return double
     */
    public function getPendingDiscountAmount()
    {
        return $this->container['pending_discount_amount'];
    }

    /**
     * Sets pending_discount_amount
     *
     * @param double $pending_discount_amount Discount breakpoints tab &gt; Pending discount amount &gt; The amount to be used as the discount for the pending series if the Amount option is selected as Discount by.
     *
     * @return $this
     */
    public function setPendingDiscountAmount($pending_discount_amount)
    {
        $this->container['pending_discount_amount'] = $pending_discount_amount;

        return $this;
    }

    /**
     * Gets pending_discount_percent
     *
     * @return double
     */
    public function getPendingDiscountPercent()
    {
        return $this->container['pending_discount_percent'];
    }

    /**
     * Sets pending_discount_percent
     *
     * @param double $pending_discount_percent Discount breakpoints tab &gt; Pending discount percent &gt; The discount percent to be used for the break point in the pending series.
     *
     * @return $this
     */
    public function setPendingDiscountPercent($pending_discount_percent)
    {
        $this->container['pending_discount_percent'] = $pending_discount_percent;

        return $this;
    }

    /**
     * Gets free_item_qty
     *
     * @return double
     */
    public function getFreeItemQty()
    {
        return $this->container['free_item_qty'];
    }

    /**
     * Sets free_item_qty
     *
     * @param double $free_item_qty Discount breakpoints tab &gt; Free item qty. &gt; The quantity of the free item to be added as the discount to orders for this discount series.
     *
     * @return $this
     */
    public function setFreeItemQty($free_item_qty)
    {
        $this->container['free_item_qty'] = $free_item_qty;

        return $this;
    }

    /**
     * Gets last_free_item_qty
     *
     * @return double
     */
    public function getLastFreeItemQty()
    {
        return $this->container['last_free_item_qty'];
    }

    /**
     * Sets last_free_item_qty
     *
     * @param double $last_free_item_qty Discount breakpoints tab &gt; Last free item qty. &gt; The quantity of the free item that was used as the discount for the previously effective series.
     *
     * @return $this
     */
    public function setLastFreeItemQty($last_free_item_qty)
    {
        $this->container['last_free_item_qty'] = $last_free_item_qty;

        return $this;
    }

    /**
     * Gets pending_free_item_qty
     *
     * @return double
     */
    public function getPendingFreeItemQty()
    {
        return $this->container['pending_free_item_qty'];
    }

    /**
     * Sets pending_free_item_qty
     *
     * @param double $pending_free_item_qty Discount breakpoints tab &gt; Pending free item qty. &gt; The quantity of the free item to be added as the discount to orders for the pending discount series.
     *
     * @return $this
     */
    public function setPendingFreeItemQty($pending_free_item_qty)
    {
        $this->container['pending_free_item_qty'] = $pending_free_item_qty;

        return $this;
    }

    /**
     * Gets pending_date
     *
     * @return \DateTime
     */
    public function getPendingDate()
    {
        return $this->container['pending_date'];
    }

    /**
     * Sets pending_date
     *
     * @param \DateTime $pending_date pending_date
     *
     * @return $this
     */
    public function setPendingDate($pending_date)
    {
        $this->container['pending_date'] = $pending_date;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date effective_date
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


