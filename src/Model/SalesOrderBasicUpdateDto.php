<?php
/**
 * SalesOrderBasicUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * SalesOrderBasicUpdateDto Class Doc Comment
 *
 * @category Class
 * @description This class represent a Sales Order in Sales Order Controller. Used to pass data to server for creating or updating an order
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesOrderBasicUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesOrderBasicUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lines' => '\Ekstralys\VismaNetApi\Model\SalesOrderBasicLineUpdateDto[]',
        'order_type' => 'object',
        'order_number' => 'object',
        'hold' => 'object',
        'date' => 'object',
        'request_on' => 'object',
        'customer_order' => 'object',
        'customer_ref_no' => 'object',
        'customer' => 'object',
        'location' => 'object',
        'contact_id' => 'object',
        'gln' => 'object',
        'vat_registration_id' => 'object',
        'currency' => 'object',
        'description' => 'object',
        'recalculate_shipment' => 'object',
        'branch_number' => 'object',
        'note' => 'object',
        'override_number_series' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lines' => null,
        'order_type' => null,
        'order_number' => null,
        'hold' => null,
        'date' => null,
        'request_on' => null,
        'customer_order' => null,
        'customer_ref_no' => null,
        'customer' => null,
        'location' => null,
        'contact_id' => null,
        'gln' => null,
        'vat_registration_id' => null,
        'currency' => null,
        'description' => null,
        'recalculate_shipment' => null,
        'branch_number' => null,
        'note' => null,
        'override_number_series' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lines' => 'lines',
        'order_type' => 'orderType',
        'order_number' => 'orderNumber',
        'hold' => 'hold',
        'date' => 'date',
        'request_on' => 'requestOn',
        'customer_order' => 'customerOrder',
        'customer_ref_no' => 'customerRefNo',
        'customer' => 'customer',
        'location' => 'location',
        'contact_id' => 'contactId',
        'gln' => 'gln',
        'vat_registration_id' => 'vatRegistrationId',
        'currency' => 'currency',
        'description' => 'description',
        'recalculate_shipment' => 'recalculateShipment',
        'branch_number' => 'branchNumber',
        'note' => 'note',
        'override_number_series' => 'overrideNumberSeries'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lines' => 'setLines',
        'order_type' => 'setOrderType',
        'order_number' => 'setOrderNumber',
        'hold' => 'setHold',
        'date' => 'setDate',
        'request_on' => 'setRequestOn',
        'customer_order' => 'setCustomerOrder',
        'customer_ref_no' => 'setCustomerRefNo',
        'customer' => 'setCustomer',
        'location' => 'setLocation',
        'contact_id' => 'setContactId',
        'gln' => 'setGln',
        'vat_registration_id' => 'setVatRegistrationId',
        'currency' => 'setCurrency',
        'description' => 'setDescription',
        'recalculate_shipment' => 'setRecalculateShipment',
        'branch_number' => 'setBranchNumber',
        'note' => 'setNote',
        'override_number_series' => 'setOverrideNumberSeries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lines' => 'getLines',
        'order_type' => 'getOrderType',
        'order_number' => 'getOrderNumber',
        'hold' => 'getHold',
        'date' => 'getDate',
        'request_on' => 'getRequestOn',
        'customer_order' => 'getCustomerOrder',
        'customer_ref_no' => 'getCustomerRefNo',
        'customer' => 'getCustomer',
        'location' => 'getLocation',
        'contact_id' => 'getContactId',
        'gln' => 'getGln',
        'vat_registration_id' => 'getVatRegistrationId',
        'currency' => 'getCurrency',
        'description' => 'getDescription',
        'recalculate_shipment' => 'getRecalculateShipment',
        'branch_number' => 'getBranchNumber',
        'note' => 'getNote',
        'override_number_series' => 'getOverrideNumberSeries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['request_on'] = isset($data['request_on']) ? $data['request_on'] : null;
        $this->container['customer_order'] = isset($data['customer_order']) ? $data['customer_order'] : null;
        $this->container['customer_ref_no'] = isset($data['customer_ref_no']) ? $data['customer_ref_no'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['gln'] = isset($data['gln']) ? $data['gln'] : null;
        $this->container['vat_registration_id'] = isset($data['vat_registration_id']) ? $data['vat_registration_id'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['recalculate_shipment'] = isset($data['recalculate_shipment']) ? $data['recalculate_shipment'] : null;
        $this->container['branch_number'] = isset($data['branch_number']) ? $data['branch_number'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['override_number_series'] = isset($data['override_number_series']) ? $data['override_number_series'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_type'] === null) {
            $invalidProperties[] = "'order_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lines
     *
     * @return \Ekstralys\VismaNetApi\Model\SalesOrderBasicLineUpdateDto[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Ekstralys\VismaNetApi\Model\SalesOrderBasicLineUpdateDto[] $lines lines
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return object
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param object $order_type Mandatory field
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return object
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param object $order_number order_number
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return object
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param object $hold hold
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets date
     *
     * @return object
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param object $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets request_on
     *
     * @return object
     */
    public function getRequestOn()
    {
        return $this->container['request_on'];
    }

    /**
     * Sets request_on
     *
     * @param object $request_on request_on
     *
     * @return $this
     */
    public function setRequestOn($request_on)
    {
        $this->container['request_on'] = $request_on;

        return $this;
    }

    /**
     * Gets customer_order
     *
     * @return object
     */
    public function getCustomerOrder()
    {
        return $this->container['customer_order'];
    }

    /**
     * Sets customer_order
     *
     * @param object $customer_order customer_order
     *
     * @return $this
     */
    public function setCustomerOrder($customer_order)
    {
        $this->container['customer_order'] = $customer_order;

        return $this;
    }

    /**
     * Gets customer_ref_no
     *
     * @return object
     */
    public function getCustomerRefNo()
    {
        return $this->container['customer_ref_no'];
    }

    /**
     * Sets customer_ref_no
     *
     * @param object $customer_ref_no customer_ref_no
     *
     * @return $this
     */
    public function setCustomerRefNo($customer_ref_no)
    {
        $this->container['customer_ref_no'] = $customer_ref_no;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return object
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param object $customer Mandatory field if GLN or VatRegistrationId is not specified.
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return object
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param object $contact_id contact_id
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets gln
     *
     * @return object
     */
    public function getGln()
    {
        return $this->container['gln'];
    }

    /**
     * Sets gln
     *
     * @param object $gln Mandatory field if Customer or VatRegistrationId is not specified.
     *
     * @return $this
     */
    public function setGln($gln)
    {
        $this->container['gln'] = $gln;

        return $this;
    }

    /**
     * Gets vat_registration_id
     *
     * @return object
     */
    public function getVatRegistrationId()
    {
        return $this->container['vat_registration_id'];
    }

    /**
     * Sets vat_registration_id
     *
     * @param object $vat_registration_id Mandatory field if Customer or GLN is not specified.
     *
     * @return $this
     */
    public function setVatRegistrationId($vat_registration_id)
    {
        $this->container['vat_registration_id'] = $vat_registration_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return object
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param object $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets description
     *
     * @return object
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param object $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets recalculate_shipment
     *
     * @return object
     */
    public function getRecalculateShipment()
    {
        return $this->container['recalculate_shipment'];
    }

    /**
     * Sets recalculate_shipment
     *
     * @param object $recalculate_shipment recalculate_shipment
     *
     * @return $this
     */
    public function setRecalculateShipment($recalculate_shipment)
    {
        $this->container['recalculate_shipment'] = $recalculate_shipment;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return object
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param object $branch_number branch_number
     *
     * @return $this
     */
    public function setBranchNumber($branch_number)
    {
        $this->container['branch_number'] = $branch_number;

        return $this;
    }

    /**
     * Gets note
     *
     * @return object
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param object $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets override_number_series
     *
     * @return object
     */
    public function getOverrideNumberSeries()
    {
        return $this->container['override_number_series'];
    }

    /**
     * Sets override_number_series
     *
     * @param object $override_number_series override_number_series
     *
     * @return $this
     */
    public function setOverrideNumberSeries($override_number_series)
    {
        $this->container['override_number_series'] = $override_number_series;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


