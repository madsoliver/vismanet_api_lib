<?php
/**
 * ProjectTransactionLineUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * ProjectTransactionLineUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectTransactionLineUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectTransactionLineUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'operation' => 'string',
        'tran_id' => 'object',
        'date' => 'object',
        'inventory_id' => 'object',
        'uom' => 'object',
        'quantity' => 'object',
        'billable_quantity' => 'object',
        'unit_rate' => 'object',
        'amount' => 'object',
        'billable' => 'object',
        'financial_period' => 'object',
        'batch_nbr' => 'object',
        'use_billable_qty' => 'object',
        'project' => 'object',
        'project_task' => 'object',
        'debit_account' => 'object',
        'debit_subaccount' => 'object',
        'credit_account' => 'object',
        'credit_subaccount' => 'object',
        'branch' => 'object',
        'employee' => 'object',
        'customer_vendor' => 'object',
        'account_group' => 'object',
        'location' => 'object',
        'description' => 'object',
        'note' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'operation' => null,
        'tran_id' => null,
        'date' => null,
        'inventory_id' => null,
        'uom' => null,
        'quantity' => null,
        'billable_quantity' => null,
        'unit_rate' => null,
        'amount' => null,
        'billable' => null,
        'financial_period' => null,
        'batch_nbr' => null,
        'use_billable_qty' => null,
        'project' => null,
        'project_task' => null,
        'debit_account' => null,
        'debit_subaccount' => null,
        'credit_account' => null,
        'credit_subaccount' => null,
        'branch' => null,
        'employee' => null,
        'customer_vendor' => null,
        'account_group' => null,
        'location' => null,
        'description' => null,
        'note' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'operation' => 'operation',
        'tran_id' => 'tranId',
        'date' => 'date',
        'inventory_id' => 'inventoryId',
        'uom' => 'uom',
        'quantity' => 'quantity',
        'billable_quantity' => 'billableQuantity',
        'unit_rate' => 'unitRate',
        'amount' => 'amount',
        'billable' => 'billable',
        'financial_period' => 'financialPeriod',
        'batch_nbr' => 'batchNbr',
        'use_billable_qty' => 'useBillableQty',
        'project' => 'project',
        'project_task' => 'projectTask',
        'debit_account' => 'debitAccount',
        'debit_subaccount' => 'debitSubaccount',
        'credit_account' => 'creditAccount',
        'credit_subaccount' => 'creditSubaccount',
        'branch' => 'branch',
        'employee' => 'employee',
        'customer_vendor' => 'customerVendor',
        'account_group' => 'accountGroup',
        'location' => 'location',
        'description' => 'description',
        'note' => 'note'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'operation' => 'setOperation',
        'tran_id' => 'setTranId',
        'date' => 'setDate',
        'inventory_id' => 'setInventoryId',
        'uom' => 'setUom',
        'quantity' => 'setQuantity',
        'billable_quantity' => 'setBillableQuantity',
        'unit_rate' => 'setUnitRate',
        'amount' => 'setAmount',
        'billable' => 'setBillable',
        'financial_period' => 'setFinancialPeriod',
        'batch_nbr' => 'setBatchNbr',
        'use_billable_qty' => 'setUseBillableQty',
        'project' => 'setProject',
        'project_task' => 'setProjectTask',
        'debit_account' => 'setDebitAccount',
        'debit_subaccount' => 'setDebitSubaccount',
        'credit_account' => 'setCreditAccount',
        'credit_subaccount' => 'setCreditSubaccount',
        'branch' => 'setBranch',
        'employee' => 'setEmployee',
        'customer_vendor' => 'setCustomerVendor',
        'account_group' => 'setAccountGroup',
        'location' => 'setLocation',
        'description' => 'setDescription',
        'note' => 'setNote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'operation' => 'getOperation',
        'tran_id' => 'getTranId',
        'date' => 'getDate',
        'inventory_id' => 'getInventoryId',
        'uom' => 'getUom',
        'quantity' => 'getQuantity',
        'billable_quantity' => 'getBillableQuantity',
        'unit_rate' => 'getUnitRate',
        'amount' => 'getAmount',
        'billable' => 'getBillable',
        'financial_period' => 'getFinancialPeriod',
        'batch_nbr' => 'getBatchNbr',
        'use_billable_qty' => 'getUseBillableQty',
        'project' => 'getProject',
        'project_task' => 'getProjectTask',
        'debit_account' => 'getDebitAccount',
        'debit_subaccount' => 'getDebitSubaccount',
        'credit_account' => 'getCreditAccount',
        'credit_subaccount' => 'getCreditSubaccount',
        'branch' => 'getBranch',
        'employee' => 'getEmployee',
        'customer_vendor' => 'getCustomerVendor',
        'account_group' => 'getAccountGroup',
        'location' => 'getLocation',
        'description' => 'getDescription',
        'note' => 'getNote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OPERATION_INSERT = 'Insert';
    const OPERATION_UPDATE = 'Update';
    const OPERATION_DELETE = 'Delete';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_INSERT,
            self::OPERATION_UPDATE,
            self::OPERATION_DELETE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['tran_id'] = isset($data['tran_id']) ? $data['tran_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['billable_quantity'] = isset($data['billable_quantity']) ? $data['billable_quantity'] : null;
        $this->container['unit_rate'] = isset($data['unit_rate']) ? $data['unit_rate'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['billable'] = isset($data['billable']) ? $data['billable'] : null;
        $this->container['financial_period'] = isset($data['financial_period']) ? $data['financial_period'] : null;
        $this->container['batch_nbr'] = isset($data['batch_nbr']) ? $data['batch_nbr'] : null;
        $this->container['use_billable_qty'] = isset($data['use_billable_qty']) ? $data['use_billable_qty'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['project_task'] = isset($data['project_task']) ? $data['project_task'] : null;
        $this->container['debit_account'] = isset($data['debit_account']) ? $data['debit_account'] : null;
        $this->container['debit_subaccount'] = isset($data['debit_subaccount']) ? $data['debit_subaccount'] : null;
        $this->container['credit_account'] = isset($data['credit_account']) ? $data['credit_account'] : null;
        $this->container['credit_subaccount'] = isset($data['credit_subaccount']) ? $data['credit_subaccount'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['customer_vendor'] = isset($data['customer_vendor']) ? $data['customer_vendor'] : null;
        $this->container['account_group'] = isset($data['account_group']) ? $data['account_group'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation operation
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($operation) && !in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets tran_id
     *
     * @return object
     */
    public function getTranId()
    {
        return $this->container['tran_id'];
    }

    /**
     * Sets tran_id
     *
     * @param object $tran_id tran_id
     *
     * @return $this
     */
    public function setTranId($tran_id)
    {
        $this->container['tran_id'] = $tran_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return object
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param object $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets inventory_id
     *
     * @return object
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param object $inventory_id inventory_id
     *
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return object
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param object $uom uom
     *
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return object
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param object $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets billable_quantity
     *
     * @return object
     */
    public function getBillableQuantity()
    {
        return $this->container['billable_quantity'];
    }

    /**
     * Sets billable_quantity
     *
     * @param object $billable_quantity billable_quantity
     *
     * @return $this
     */
    public function setBillableQuantity($billable_quantity)
    {
        $this->container['billable_quantity'] = $billable_quantity;

        return $this;
    }

    /**
     * Gets unit_rate
     *
     * @return object
     */
    public function getUnitRate()
    {
        return $this->container['unit_rate'];
    }

    /**
     * Sets unit_rate
     *
     * @param object $unit_rate unit_rate
     *
     * @return $this
     */
    public function setUnitRate($unit_rate)
    {
        $this->container['unit_rate'] = $unit_rate;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return object
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param object $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets billable
     *
     * @return object
     */
    public function getBillable()
    {
        return $this->container['billable'];
    }

    /**
     * Sets billable
     *
     * @param object $billable billable
     *
     * @return $this
     */
    public function setBillable($billable)
    {
        $this->container['billable'] = $billable;

        return $this;
    }

    /**
     * Gets financial_period
     *
     * @return object
     */
    public function getFinancialPeriod()
    {
        return $this->container['financial_period'];
    }

    /**
     * Sets financial_period
     *
     * @param object $financial_period financial_period
     *
     * @return $this
     */
    public function setFinancialPeriod($financial_period)
    {
        $this->container['financial_period'] = $financial_period;

        return $this;
    }

    /**
     * Gets batch_nbr
     *
     * @return object
     */
    public function getBatchNbr()
    {
        return $this->container['batch_nbr'];
    }

    /**
     * Sets batch_nbr
     *
     * @param object $batch_nbr batch_nbr
     *
     * @return $this
     */
    public function setBatchNbr($batch_nbr)
    {
        $this->container['batch_nbr'] = $batch_nbr;

        return $this;
    }

    /**
     * Gets use_billable_qty
     *
     * @return object
     */
    public function getUseBillableQty()
    {
        return $this->container['use_billable_qty'];
    }

    /**
     * Sets use_billable_qty
     *
     * @param object $use_billable_qty use_billable_qty
     *
     * @return $this
     */
    public function setUseBillableQty($use_billable_qty)
    {
        $this->container['use_billable_qty'] = $use_billable_qty;

        return $this;
    }

    /**
     * Gets project
     *
     * @return object
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param object $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets project_task
     *
     * @return object
     */
    public function getProjectTask()
    {
        return $this->container['project_task'];
    }

    /**
     * Sets project_task
     *
     * @param object $project_task project_task
     *
     * @return $this
     */
    public function setProjectTask($project_task)
    {
        $this->container['project_task'] = $project_task;

        return $this;
    }

    /**
     * Gets debit_account
     *
     * @return object
     */
    public function getDebitAccount()
    {
        return $this->container['debit_account'];
    }

    /**
     * Sets debit_account
     *
     * @param object $debit_account debit_account
     *
     * @return $this
     */
    public function setDebitAccount($debit_account)
    {
        $this->container['debit_account'] = $debit_account;

        return $this;
    }

    /**
     * Gets debit_subaccount
     *
     * @return object
     */
    public function getDebitSubaccount()
    {
        return $this->container['debit_subaccount'];
    }

    /**
     * Sets debit_subaccount
     *
     * @param object $debit_subaccount debit_subaccount
     *
     * @return $this
     */
    public function setDebitSubaccount($debit_subaccount)
    {
        $this->container['debit_subaccount'] = $debit_subaccount;

        return $this;
    }

    /**
     * Gets credit_account
     *
     * @return object
     */
    public function getCreditAccount()
    {
        return $this->container['credit_account'];
    }

    /**
     * Sets credit_account
     *
     * @param object $credit_account credit_account
     *
     * @return $this
     */
    public function setCreditAccount($credit_account)
    {
        $this->container['credit_account'] = $credit_account;

        return $this;
    }

    /**
     * Gets credit_subaccount
     *
     * @return object
     */
    public function getCreditSubaccount()
    {
        return $this->container['credit_subaccount'];
    }

    /**
     * Sets credit_subaccount
     *
     * @param object $credit_subaccount credit_subaccount
     *
     * @return $this
     */
    public function setCreditSubaccount($credit_subaccount)
    {
        $this->container['credit_subaccount'] = $credit_subaccount;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return object
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param object $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return object
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param object $employee employee
     *
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets customer_vendor
     *
     * @return object
     */
    public function getCustomerVendor()
    {
        return $this->container['customer_vendor'];
    }

    /**
     * Sets customer_vendor
     *
     * @param object $customer_vendor customer_vendor
     *
     * @return $this
     */
    public function setCustomerVendor($customer_vendor)
    {
        $this->container['customer_vendor'] = $customer_vendor;

        return $this;
    }

    /**
     * Gets account_group
     *
     * @return object
     */
    public function getAccountGroup()
    {
        return $this->container['account_group'];
    }

    /**
     * Sets account_group
     *
     * @param object $account_group account_group
     *
     * @return $this
     */
    public function setAccountGroup($account_group)
    {
        $this->container['account_group'] = $account_group;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets description
     *
     * @return object
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param object $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets note
     *
     * @return object
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param object $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


