<?php
/**
 * CustomerContractDetailsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * CustomerContractDetailsDto Class Doc Comment
 *
 * @category Class
 * @description This class represents the CustomerContractDetails in CustomerContractController. Used for getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerContractDetailsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerContractDetailsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'effective_from' => '\DateTime',
        'promo_code' => 'object',
        'pending_setup' => 'double',
        'pending_recurring' => 'double',
        'pending_renewal' => 'double',
        'total_pending' => 'double',
        'current_setup' => 'double',
        'current_recurring' => 'double',
        'current_renewal' => 'double',
        'lines' => '\Ekstralys\VismaNetApi\Model\CustomerContractDetailsLineDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'effective_from' => 'date-time',
        'promo_code' => null,
        'pending_setup' => 'double',
        'pending_recurring' => 'double',
        'pending_renewal' => 'double',
        'total_pending' => 'double',
        'current_setup' => 'double',
        'current_recurring' => 'double',
        'current_renewal' => 'double',
        'lines' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'effective_from' => 'effectiveFrom',
        'promo_code' => 'promoCode',
        'pending_setup' => 'pendingSetup',
        'pending_recurring' => 'pendingRecurring',
        'pending_renewal' => 'pendingRenewal',
        'total_pending' => 'totalPending',
        'current_setup' => 'currentSetup',
        'current_recurring' => 'currentRecurring',
        'current_renewal' => 'currentRenewal',
        'lines' => 'lines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'effective_from' => 'setEffectiveFrom',
        'promo_code' => 'setPromoCode',
        'pending_setup' => 'setPendingSetup',
        'pending_recurring' => 'setPendingRecurring',
        'pending_renewal' => 'setPendingRenewal',
        'total_pending' => 'setTotalPending',
        'current_setup' => 'setCurrentSetup',
        'current_recurring' => 'setCurrentRecurring',
        'current_renewal' => 'setCurrentRenewal',
        'lines' => 'setLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'effective_from' => 'getEffectiveFrom',
        'promo_code' => 'getPromoCode',
        'pending_setup' => 'getPendingSetup',
        'pending_recurring' => 'getPendingRecurring',
        'pending_renewal' => 'getPendingRenewal',
        'total_pending' => 'getTotalPending',
        'current_setup' => 'getCurrentSetup',
        'current_recurring' => 'getCurrentRecurring',
        'current_renewal' => 'getCurrentRenewal',
        'lines' => 'getLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['effective_from'] = isset($data['effective_from']) ? $data['effective_from'] : null;
        $this->container['promo_code'] = isset($data['promo_code']) ? $data['promo_code'] : null;
        $this->container['pending_setup'] = isset($data['pending_setup']) ? $data['pending_setup'] : null;
        $this->container['pending_recurring'] = isset($data['pending_recurring']) ? $data['pending_recurring'] : null;
        $this->container['pending_renewal'] = isset($data['pending_renewal']) ? $data['pending_renewal'] : null;
        $this->container['total_pending'] = isset($data['total_pending']) ? $data['total_pending'] : null;
        $this->container['current_setup'] = isset($data['current_setup']) ? $data['current_setup'] : null;
        $this->container['current_recurring'] = isset($data['current_recurring']) ? $data['current_recurring'] : null;
        $this->container['current_renewal'] = isset($data['current_renewal']) ? $data['current_renewal'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets effective_from
     *
     * @return \DateTime
     */
    public function getEffectiveFrom()
    {
        return $this->container['effective_from'];
    }

    /**
     * Sets effective_from
     *
     * @param \DateTime $effective_from effective_from
     *
     * @return $this
     */
    public function setEffectiveFrom($effective_from)
    {
        $this->container['effective_from'] = $effective_from;

        return $this;
    }

    /**
     * Gets promo_code
     *
     * @return object
     */
    public function getPromoCode()
    {
        return $this->container['promo_code'];
    }

    /**
     * Sets promo_code
     *
     * @param object $promo_code promo_code
     *
     * @return $this
     */
    public function setPromoCode($promo_code)
    {
        $this->container['promo_code'] = $promo_code;

        return $this;
    }

    /**
     * Gets pending_setup
     *
     * @return double
     */
    public function getPendingSetup()
    {
        return $this->container['pending_setup'];
    }

    /**
     * Sets pending_setup
     *
     * @param double $pending_setup pending_setup
     *
     * @return $this
     */
    public function setPendingSetup($pending_setup)
    {
        $this->container['pending_setup'] = $pending_setup;

        return $this;
    }

    /**
     * Gets pending_recurring
     *
     * @return double
     */
    public function getPendingRecurring()
    {
        return $this->container['pending_recurring'];
    }

    /**
     * Sets pending_recurring
     *
     * @param double $pending_recurring pending_recurring
     *
     * @return $this
     */
    public function setPendingRecurring($pending_recurring)
    {
        $this->container['pending_recurring'] = $pending_recurring;

        return $this;
    }

    /**
     * Gets pending_renewal
     *
     * @return double
     */
    public function getPendingRenewal()
    {
        return $this->container['pending_renewal'];
    }

    /**
     * Sets pending_renewal
     *
     * @param double $pending_renewal pending_renewal
     *
     * @return $this
     */
    public function setPendingRenewal($pending_renewal)
    {
        $this->container['pending_renewal'] = $pending_renewal;

        return $this;
    }

    /**
     * Gets total_pending
     *
     * @return double
     */
    public function getTotalPending()
    {
        return $this->container['total_pending'];
    }

    /**
     * Sets total_pending
     *
     * @param double $total_pending total_pending
     *
     * @return $this
     */
    public function setTotalPending($total_pending)
    {
        $this->container['total_pending'] = $total_pending;

        return $this;
    }

    /**
     * Gets current_setup
     *
     * @return double
     */
    public function getCurrentSetup()
    {
        return $this->container['current_setup'];
    }

    /**
     * Sets current_setup
     *
     * @param double $current_setup current_setup
     *
     * @return $this
     */
    public function setCurrentSetup($current_setup)
    {
        $this->container['current_setup'] = $current_setup;

        return $this;
    }

    /**
     * Gets current_recurring
     *
     * @return double
     */
    public function getCurrentRecurring()
    {
        return $this->container['current_recurring'];
    }

    /**
     * Sets current_recurring
     *
     * @param double $current_recurring current_recurring
     *
     * @return $this
     */
    public function setCurrentRecurring($current_recurring)
    {
        $this->container['current_recurring'] = $current_recurring;

        return $this;
    }

    /**
     * Gets current_renewal
     *
     * @return double
     */
    public function getCurrentRenewal()
    {
        return $this->container['current_renewal'];
    }

    /**
     * Sets current_renewal
     *
     * @param double $current_renewal current_renewal
     *
     * @return $this
     */
    public function setCurrentRenewal($current_renewal)
    {
        $this->container['current_renewal'] = $current_renewal;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Ekstralys\VismaNetApi\Model\CustomerContractDetailsLineDto[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Ekstralys\VismaNetApi\Model\CustomerContractDetailsLineDto[] $lines lines
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


