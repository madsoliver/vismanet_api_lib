<?php
/**
 * TransactionDetailDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * TransactionDetailDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionDetailDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionDetailDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_number' => 'int',
        'branch' => 'object',
        'item' => 'object',
        'description' => 'string',
        'quantity' => 'double',
        'uom' => 'string',
        'price' => 'double',
        'amount' => 'double',
        'offset_cash_account' => '\Ekstralys\VismaNetApi\Model\AccountNumberTypeDescriptionDto',
        'offset_account' => '\Ekstralys\VismaNetApi\Model\AccountNumberTypeDescriptionDto',
        'offset_sub_account' => 'object',
        'tax_category' => 'object',
        'non_billable' => 'bool',
        'project' => 'object',
        'project_task' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_number' => 'int32',
        'branch' => null,
        'item' => null,
        'description' => null,
        'quantity' => 'double',
        'uom' => null,
        'price' => 'double',
        'amount' => 'double',
        'offset_cash_account' => null,
        'offset_account' => null,
        'offset_sub_account' => null,
        'tax_category' => null,
        'non_billable' => null,
        'project' => null,
        'project_task' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_number' => 'lineNumber',
        'branch' => 'branch',
        'item' => 'item',
        'description' => 'description',
        'quantity' => 'quantity',
        'uom' => 'uom',
        'price' => 'price',
        'amount' => 'amount',
        'offset_cash_account' => 'offsetCashAccount',
        'offset_account' => 'offsetAccount',
        'offset_sub_account' => 'offsetSubAccount',
        'tax_category' => 'taxCategory',
        'non_billable' => 'nonBillable',
        'project' => 'project',
        'project_task' => 'projectTask'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_number' => 'setLineNumber',
        'branch' => 'setBranch',
        'item' => 'setItem',
        'description' => 'setDescription',
        'quantity' => 'setQuantity',
        'uom' => 'setUom',
        'price' => 'setPrice',
        'amount' => 'setAmount',
        'offset_cash_account' => 'setOffsetCashAccount',
        'offset_account' => 'setOffsetAccount',
        'offset_sub_account' => 'setOffsetSubAccount',
        'tax_category' => 'setTaxCategory',
        'non_billable' => 'setNonBillable',
        'project' => 'setProject',
        'project_task' => 'setProjectTask'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_number' => 'getLineNumber',
        'branch' => 'getBranch',
        'item' => 'getItem',
        'description' => 'getDescription',
        'quantity' => 'getQuantity',
        'uom' => 'getUom',
        'price' => 'getPrice',
        'amount' => 'getAmount',
        'offset_cash_account' => 'getOffsetCashAccount',
        'offset_account' => 'getOffsetAccount',
        'offset_sub_account' => 'getOffsetSubAccount',
        'tax_category' => 'getTaxCategory',
        'non_billable' => 'getNonBillable',
        'project' => 'getProject',
        'project_task' => 'getProjectTask'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['offset_cash_account'] = isset($data['offset_cash_account']) ? $data['offset_cash_account'] : null;
        $this->container['offset_account'] = isset($data['offset_account']) ? $data['offset_account'] : null;
        $this->container['offset_sub_account'] = isset($data['offset_sub_account']) ? $data['offset_sub_account'] : null;
        $this->container['tax_category'] = isset($data['tax_category']) ? $data['tax_category'] : null;
        $this->container['non_billable'] = isset($data['non_billable']) ? $data['non_billable'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['project_task'] = isset($data['project_task']) ? $data['project_task'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_number
     *
     * @return int
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int $line_number The line number in the table.
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return object
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param object $branch Mandatory field: Branch &gt; The branch that created the transaction.
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets item
     *
     * @return object
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param object $item Item ID &gt; The ID of the non-stock item specified as the transaction subject.
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description &gt; The description provided for the item.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity Quantity &gt; The quantity of the item.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return string
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param string $uom UoM &gt; The unit of measure of the item.
     *
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price Price &gt; The unit price for the item.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount Amount &gt; The total amount for all units or items.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets offset_cash_account
     *
     * @return \Ekstralys\VismaNetApi\Model\AccountNumberTypeDescriptionDto
     */
    public function getOffsetCashAccount()
    {
        return $this->container['offset_cash_account'];
    }

    /**
     * Sets offset_cash_account
     *
     * @param \Ekstralys\VismaNetApi\Model\AccountNumberTypeDescriptionDto $offset_cash_account Offset cash account &gt; The cash account to be used for the transaction.
     *
     * @return $this
     */
    public function setOffsetCashAccount($offset_cash_account)
    {
        $this->container['offset_cash_account'] = $offset_cash_account;

        return $this;
    }

    /**
     * Gets offset_account
     *
     * @return \Ekstralys\VismaNetApi\Model\AccountNumberTypeDescriptionDto
     */
    public function getOffsetAccount()
    {
        return $this->container['offset_account'];
    }

    /**
     * Sets offset_account
     *
     * @param \Ekstralys\VismaNetApi\Model\AccountNumberTypeDescriptionDto $offset_account Mandatory field: Offset account* &gt; The account to be updated by the transaction.
     *
     * @return $this
     */
    public function setOffsetAccount($offset_account)
    {
        $this->container['offset_account'] = $offset_account;

        return $this;
    }

    /**
     * Gets offset_sub_account
     *
     * @return object
     */
    public function getOffsetSubAccount()
    {
        return $this->container['offset_sub_account'];
    }

    /**
     * Sets offset_sub_account
     *
     * @param object $offset_sub_account Mandatory field: Offset subaccount* &gt; The corresponding subaccount to be used for the transaction.
     *
     * @return $this
     */
    public function setOffsetSubAccount($offset_sub_account)
    {
        $this->container['offset_sub_account'] = $offset_sub_account;

        return $this;
    }

    /**
     * Gets tax_category
     *
     * @return object
     */
    public function getTaxCategory()
    {
        return $this->container['tax_category'];
    }

    /**
     * Sets tax_category
     *
     * @param object $tax_category VAT category &gt; The category that applies to the transaction.
     *
     * @return $this
     */
    public function setTaxCategory($tax_category)
    {
        $this->container['tax_category'] = $tax_category;

        return $this;
    }

    /**
     * Gets non_billable
     *
     * @return bool
     */
    public function getNonBillable()
    {
        return $this->container['non_billable'];
    }

    /**
     * Sets non_billable
     *
     * @param bool $non_billable Non-invoiceable &gt; A check box that indicates (if selected) that this transaction is non-invoiceable in the project.
     *
     * @return $this
     */
    public function setNonBillable($non_billable)
    {
        $this->container['non_billable'] = $non_billable;

        return $this;
    }

    /**
     * Gets project
     *
     * @return object
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param object $project Project &gt; The project with which this transaction is associated, or the code indicating that this transaction is not associated with any project.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets project_task
     *
     * @return object
     */
    public function getProjectTask()
    {
        return $this->container['project_task'];
    }

    /**
     * Sets project_task
     *
     * @param object $project_task Project task &gt; The particular task of the project with which this transaction is associated.
     *
     * @return $this
     */
    public function setProjectTask($project_task)
    {
        $this->container['project_task'] = $project_task;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


