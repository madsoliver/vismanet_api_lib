<?php
/**
 * SalesOrderDocumentLineDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * SalesOrderDocumentLineDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a SOOrder in SOOrderController. Used by getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesOrderDocumentLineDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesOrderDocumentLineDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_nbr' => 'int',
        'sort_order' => 'int',
        'inventory' => 'object',
        'warehouse' => 'object',
        'uom' => 'string',
        'quantity' => 'double',
        'qty_on_shipments' => 'double',
        'open_qty' => 'double',
        'unit_cost' => 'double',
        'unit_price' => 'double',
        'unit_price_in_base_currency' => 'double',
        'discount_code' => 'string',
        'discount_percent' => 'double',
        'discount_amount' => 'double',
        'manual_discount' => 'bool',
        'disc_unit_price' => 'double',
        'ext_price' => 'double',
        'unbilled_amount' => 'double',
        'line_description' => 'string',
        'branch_number' => 'object',
        'note' => 'string',
        'attachments' => '\Ekstralys\VismaNetApi\Model\AttachmentDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_nbr' => 'int32',
        'sort_order' => 'int32',
        'inventory' => null,
        'warehouse' => null,
        'uom' => null,
        'quantity' => 'double',
        'qty_on_shipments' => 'double',
        'open_qty' => 'double',
        'unit_cost' => 'double',
        'unit_price' => 'double',
        'unit_price_in_base_currency' => 'double',
        'discount_code' => null,
        'discount_percent' => 'double',
        'discount_amount' => 'double',
        'manual_discount' => null,
        'disc_unit_price' => 'double',
        'ext_price' => 'double',
        'unbilled_amount' => 'double',
        'line_description' => null,
        'branch_number' => null,
        'note' => null,
        'attachments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_nbr' => 'lineNbr',
        'sort_order' => 'sortOrder',
        'inventory' => 'inventory',
        'warehouse' => 'warehouse',
        'uom' => 'uom',
        'quantity' => 'quantity',
        'qty_on_shipments' => 'qtyOnShipments',
        'open_qty' => 'openQty',
        'unit_cost' => 'unitCost',
        'unit_price' => 'unitPrice',
        'unit_price_in_base_currency' => 'unitPriceInBaseCurrency',
        'discount_code' => 'discountCode',
        'discount_percent' => 'discountPercent',
        'discount_amount' => 'discountAmount',
        'manual_discount' => 'manualDiscount',
        'disc_unit_price' => 'discUnitPrice',
        'ext_price' => 'extPrice',
        'unbilled_amount' => 'unbilledAmount',
        'line_description' => 'lineDescription',
        'branch_number' => 'branchNumber',
        'note' => 'note',
        'attachments' => 'attachments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_nbr' => 'setLineNbr',
        'sort_order' => 'setSortOrder',
        'inventory' => 'setInventory',
        'warehouse' => 'setWarehouse',
        'uom' => 'setUom',
        'quantity' => 'setQuantity',
        'qty_on_shipments' => 'setQtyOnShipments',
        'open_qty' => 'setOpenQty',
        'unit_cost' => 'setUnitCost',
        'unit_price' => 'setUnitPrice',
        'unit_price_in_base_currency' => 'setUnitPriceInBaseCurrency',
        'discount_code' => 'setDiscountCode',
        'discount_percent' => 'setDiscountPercent',
        'discount_amount' => 'setDiscountAmount',
        'manual_discount' => 'setManualDiscount',
        'disc_unit_price' => 'setDiscUnitPrice',
        'ext_price' => 'setExtPrice',
        'unbilled_amount' => 'setUnbilledAmount',
        'line_description' => 'setLineDescription',
        'branch_number' => 'setBranchNumber',
        'note' => 'setNote',
        'attachments' => 'setAttachments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_nbr' => 'getLineNbr',
        'sort_order' => 'getSortOrder',
        'inventory' => 'getInventory',
        'warehouse' => 'getWarehouse',
        'uom' => 'getUom',
        'quantity' => 'getQuantity',
        'qty_on_shipments' => 'getQtyOnShipments',
        'open_qty' => 'getOpenQty',
        'unit_cost' => 'getUnitCost',
        'unit_price' => 'getUnitPrice',
        'unit_price_in_base_currency' => 'getUnitPriceInBaseCurrency',
        'discount_code' => 'getDiscountCode',
        'discount_percent' => 'getDiscountPercent',
        'discount_amount' => 'getDiscountAmount',
        'manual_discount' => 'getManualDiscount',
        'disc_unit_price' => 'getDiscUnitPrice',
        'ext_price' => 'getExtPrice',
        'unbilled_amount' => 'getUnbilledAmount',
        'line_description' => 'getLineDescription',
        'branch_number' => 'getBranchNumber',
        'note' => 'getNote',
        'attachments' => 'getAttachments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_nbr'] = isset($data['line_nbr']) ? $data['line_nbr'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['inventory'] = isset($data['inventory']) ? $data['inventory'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['qty_on_shipments'] = isset($data['qty_on_shipments']) ? $data['qty_on_shipments'] : null;
        $this->container['open_qty'] = isset($data['open_qty']) ? $data['open_qty'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['unit_price_in_base_currency'] = isset($data['unit_price_in_base_currency']) ? $data['unit_price_in_base_currency'] : null;
        $this->container['discount_code'] = isset($data['discount_code']) ? $data['discount_code'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['manual_discount'] = isset($data['manual_discount']) ? $data['manual_discount'] : null;
        $this->container['disc_unit_price'] = isset($data['disc_unit_price']) ? $data['disc_unit_price'] : null;
        $this->container['ext_price'] = isset($data['ext_price']) ? $data['ext_price'] : null;
        $this->container['unbilled_amount'] = isset($data['unbilled_amount']) ? $data['unbilled_amount'] : null;
        $this->container['line_description'] = isset($data['line_description']) ? $data['line_description'] : null;
        $this->container['branch_number'] = isset($data['branch_number']) ? $data['branch_number'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_nbr
     *
     * @return int
     */
    public function getLineNbr()
    {
        return $this->container['line_nbr'];
    }

    /**
     * Sets line_nbr
     *
     * @param int $line_nbr Document details tab &gt; Line no. &gt; The line number of the document.
     *
     * @return $this
     */
    public function setLineNbr($line_nbr)
    {
        $this->container['line_nbr'] = $line_nbr;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int $sort_order Document details tab &gt; Line order &gt; The order number of the document line. The system regenerates this number automatically when you reorder the lines in the table.
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return object
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param object $inventory inventory
     *
     * @return $this
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return object
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param object $warehouse warehouse
     *
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return string
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param string $uom Mandatory field: Document details tab &gt; UoM* &gt; The unit of measure (UoM) used for the item with this item ID.
     *
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity Document details tab &gt; Quantity &gt; The quantity of the item sold, measured in the UoM.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets qty_on_shipments
     *
     * @return double
     */
    public function getQtyOnShipments()
    {
        return $this->container['qty_on_shipments'];
    }

    /**
     * Sets qty_on_shipments
     *
     * @param double $qty_on_shipments Document details tab &gt; Qty. on shipments &gt; A read-only column that displays the quantity of the stock item being prepared for shipment and already shipped for this order.
     *
     * @return $this
     */
    public function setQtyOnShipments($qty_on_shipments)
    {
        $this->container['qty_on_shipments'] = $qty_on_shipments;

        return $this;
    }

    /**
     * Gets open_qty
     *
     * @return double
     */
    public function getOpenQty()
    {
        return $this->container['open_qty'];
    }

    /**
     * Sets open_qty
     *
     * @param double $open_qty Document details tab &gt; Open qty. &gt; The quantity of the item to be shipped; that is, the total quantity minus the quantity shipped according to closed shipment documents.
     *
     * @return $this
     */
    public function setOpenQty($open_qty)
    {
        $this->container['open_qty'] = $open_qty;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return double
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param double $unit_cost Document details tab &gt; Unit Cost &gt; The cost of the unit on the sales order.
     *
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return double
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param double $unit_price Document details tab &gt; Unit price &gt; The price of the unit on the sales order.
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_price_in_base_currency
     *
     * @return double
     */
    public function getUnitPriceInBaseCurrency()
    {
        return $this->container['unit_price_in_base_currency'];
    }

    /**
     * Sets unit_price_in_base_currency
     *
     * @param double $unit_price_in_base_currency unit_price_in_base_currency
     *
     * @return $this
     */
    public function setUnitPriceInBaseCurrency($unit_price_in_base_currency)
    {
        $this->container['unit_price_in_base_currency'] = $unit_price_in_base_currency;

        return $this;
    }

    /**
     * Gets discount_code
     *
     * @return string
     */
    public function getDiscountCode()
    {
        return $this->container['discount_code'];
    }

    /**
     * Sets discount_code
     *
     * @param string $discount_code Mandatory field: Document details tab &gt; Discount details tab &gt; Discount code* &gt; The code of the discount that has been applied to this line.
     *
     * @return $this
     */
    public function setDiscountCode($discount_code)
    {
        $this->container['discount_code'] = $discount_code;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return double
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param double $discount_percent Document details tab &gt; Discount percent &gt; The percent of the line-level discount that has been applied manually or automatically to this line item (if the item is not a free item).
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return double
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param double $discount_amount Document details tab &gt; Discount amount &gt; The amount of the line-level discount that has been applied manually or automatically to this line item (if the item is not a free item).
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets manual_discount
     *
     * @return bool
     */
    public function getManualDiscount()
    {
        return $this->container['manual_discount'];
    }

    /**
     * Sets manual_discount
     *
     * @param bool $manual_discount Document details tab &gt; Manual discount &gt; A check box that indicates (if selected) that the discount has been applied manually.
     *
     * @return $this
     */
    public function setManualDiscount($manual_discount)
    {
        $this->container['manual_discount'] = $manual_discount;

        return $this;
    }

    /**
     * Gets disc_unit_price
     *
     * @return double
     */
    public function getDiscUnitPrice()
    {
        return $this->container['disc_unit_price'];
    }

    /**
     * Sets disc_unit_price
     *
     * @param double $disc_unit_price Document details tab &gt; Disc. unit price &gt; The unit price, which has been recalculated after the application of discounts.
     *
     * @return $this
     */
    public function setDiscUnitPrice($disc_unit_price)
    {
        $this->container['disc_unit_price'] = $disc_unit_price;

        return $this;
    }

    /**
     * Gets ext_price
     *
     * @return double
     */
    public function getExtPrice()
    {
        return $this->container['ext_price'];
    }

    /**
     * Sets ext_price
     *
     * @param double $ext_price Document details tab &gt; Extended cost &gt; The extended price, which is the unit price multiplied by the quantity.
     *
     * @return $this
     */
    public function setExtPrice($ext_price)
    {
        $this->container['ext_price'] = $ext_price;

        return $this;
    }

    /**
     * Gets unbilled_amount
     *
     * @return double
     */
    public function getUnbilledAmount()
    {
        return $this->container['unbilled_amount'];
    }

    /**
     * Sets unbilled_amount
     *
     * @param double $unbilled_amount Document details tab &gt; Amount not yet invoiced &gt; The amount of cancelled shipments and cancelled remainders.
     *
     * @return $this
     */
    public function setUnbilledAmount($unbilled_amount)
    {
        $this->container['unbilled_amount'] = $unbilled_amount;

        return $this;
    }

    /**
     * Gets line_description
     *
     * @return string
     */
    public function getLineDescription()
    {
        return $this->container['line_description'];
    }

    /**
     * Sets line_description
     *
     * @param string $line_description Document details tab &gt; Line description &gt; The description of the unit.
     *
     * @return $this
     */
    public function setLineDescription($line_description)
    {
        $this->container['line_description'] = $line_description;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return object
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param object $branch_number branch_number
     *
     * @return $this
     */
    public function setBranchNumber($branch_number)
    {
        $this->container['branch_number'] = $branch_number;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Tables in tab &gt; Icon Notes &gt; Pop-up window for providing any user-defined text connected to the order.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Ekstralys\VismaNetApi\Model\AttachmentDto[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Ekstralys\VismaNetApi\Model\AttachmentDto[] $attachments The data containing information about the document attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


