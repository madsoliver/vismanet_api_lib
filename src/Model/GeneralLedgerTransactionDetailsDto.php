<?php
/**
 * GeneralLedgerTransactionDetailsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * GeneralLedgerTransactionDetailsDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GeneralLedgerTransactionDetailsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GeneralLedgerTransactionDetailsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_number' => 'int',
        'module' => 'string',
        'batch_number' => 'string',
        'tran_date' => '\DateTime',
        'period' => 'string',
        'description' => 'string',
        'ref_number' => 'string',
        'branch' => 'object',
        'account' => 'object',
        'ledger' => 'object',
        'subaccount' => 'string',
        'beg_balance' => 'double',
        'debit_amount' => 'double',
        'credit_amount' => 'double',
        'ending_balance' => 'double',
        'currency' => 'string',
        'curr_beg_balance' => 'double',
        'curr_debit_amount' => 'double',
        'curr_credit_amount' => 'double',
        'curr_ending_balance' => 'double',
        'last_modified_date_time' => '\DateTime',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_number' => 'int32',
        'module' => null,
        'batch_number' => null,
        'tran_date' => 'date-time',
        'period' => null,
        'description' => null,
        'ref_number' => null,
        'branch' => null,
        'account' => null,
        'ledger' => null,
        'subaccount' => null,
        'beg_balance' => 'double',
        'debit_amount' => 'double',
        'credit_amount' => 'double',
        'ending_balance' => 'double',
        'currency' => null,
        'curr_beg_balance' => 'double',
        'curr_debit_amount' => 'double',
        'curr_credit_amount' => 'double',
        'curr_ending_balance' => 'double',
        'last_modified_date_time' => 'date-time',
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_number' => 'lineNumber',
        'module' => 'module',
        'batch_number' => 'batchNumber',
        'tran_date' => 'tranDate',
        'period' => 'period',
        'description' => 'description',
        'ref_number' => 'refNumber',
        'branch' => 'branch',
        'account' => 'account',
        'ledger' => 'ledger',
        'subaccount' => 'subaccount',
        'beg_balance' => 'begBalance',
        'debit_amount' => 'debitAmount',
        'credit_amount' => 'creditAmount',
        'ending_balance' => 'endingBalance',
        'currency' => 'currency',
        'curr_beg_balance' => 'currBegBalance',
        'curr_debit_amount' => 'currDebitAmount',
        'curr_credit_amount' => 'currCreditAmount',
        'curr_ending_balance' => 'currEndingBalance',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_number' => 'setLineNumber',
        'module' => 'setModule',
        'batch_number' => 'setBatchNumber',
        'tran_date' => 'setTranDate',
        'period' => 'setPeriod',
        'description' => 'setDescription',
        'ref_number' => 'setRefNumber',
        'branch' => 'setBranch',
        'account' => 'setAccount',
        'ledger' => 'setLedger',
        'subaccount' => 'setSubaccount',
        'beg_balance' => 'setBegBalance',
        'debit_amount' => 'setDebitAmount',
        'credit_amount' => 'setCreditAmount',
        'ending_balance' => 'setEndingBalance',
        'currency' => 'setCurrency',
        'curr_beg_balance' => 'setCurrBegBalance',
        'curr_debit_amount' => 'setCurrDebitAmount',
        'curr_credit_amount' => 'setCurrCreditAmount',
        'curr_ending_balance' => 'setCurrEndingBalance',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_number' => 'getLineNumber',
        'module' => 'getModule',
        'batch_number' => 'getBatchNumber',
        'tran_date' => 'getTranDate',
        'period' => 'getPeriod',
        'description' => 'getDescription',
        'ref_number' => 'getRefNumber',
        'branch' => 'getBranch',
        'account' => 'getAccount',
        'ledger' => 'getLedger',
        'subaccount' => 'getSubaccount',
        'beg_balance' => 'getBegBalance',
        'debit_amount' => 'getDebitAmount',
        'credit_amount' => 'getCreditAmount',
        'ending_balance' => 'getEndingBalance',
        'currency' => 'getCurrency',
        'curr_beg_balance' => 'getCurrBegBalance',
        'curr_debit_amount' => 'getCurrDebitAmount',
        'curr_credit_amount' => 'getCurrCreditAmount',
        'curr_ending_balance' => 'getCurrEndingBalance',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['module'] = isset($data['module']) ? $data['module'] : null;
        $this->container['batch_number'] = isset($data['batch_number']) ? $data['batch_number'] : null;
        $this->container['tran_date'] = isset($data['tran_date']) ? $data['tran_date'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['ref_number'] = isset($data['ref_number']) ? $data['ref_number'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['ledger'] = isset($data['ledger']) ? $data['ledger'] : null;
        $this->container['subaccount'] = isset($data['subaccount']) ? $data['subaccount'] : null;
        $this->container['beg_balance'] = isset($data['beg_balance']) ? $data['beg_balance'] : null;
        $this->container['debit_amount'] = isset($data['debit_amount']) ? $data['debit_amount'] : null;
        $this->container['credit_amount'] = isset($data['credit_amount']) ? $data['credit_amount'] : null;
        $this->container['ending_balance'] = isset($data['ending_balance']) ? $data['ending_balance'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['curr_beg_balance'] = isset($data['curr_beg_balance']) ? $data['curr_beg_balance'] : null;
        $this->container['curr_debit_amount'] = isset($data['curr_debit_amount']) ? $data['curr_debit_amount'] : null;
        $this->container['curr_credit_amount'] = isset($data['curr_credit_amount']) ? $data['curr_credit_amount'] : null;
        $this->container['curr_ending_balance'] = isset($data['curr_ending_balance']) ? $data['curr_ending_balance'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_number
     *
     * @return int
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int $line_number line_number
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets module
     *
     * @return string
     */
    public function getModule()
    {
        return $this->container['module'];
    }

    /**
     * Sets module
     *
     * @param string $module Workspace &gt; The workspace where the transaction originated.
     *
     * @return $this
     */
    public function setModule($module)
    {
        $this->container['module'] = $module;

        return $this;
    }

    /**
     * Gets batch_number
     *
     * @return string
     */
    public function getBatchNumber()
    {
        return $this->container['batch_number'];
    }

    /**
     * Sets batch_number
     *
     * @param string $batch_number Batch number &gt; The reference number of the batch (generated for the transaction) that updated the balance of the selected account.
     *
     * @return $this
     */
    public function setBatchNumber($batch_number)
    {
        $this->container['batch_number'] = $batch_number;

        return $this;
    }

    /**
     * Gets tran_date
     *
     * @return \DateTime
     */
    public function getTranDate()
    {
        return $this->container['tran_date'];
    }

    /**
     * Sets tran_date
     *
     * @param \DateTime $tran_date Trans date &gt; The date of the transaction.
     *
     * @return $this
     */
    public function setTranDate($tran_date)
    {
        $this->container['tran_date'] = $tran_date;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string $period Period &gt; The financial period of the transaction.
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description &gt; The user-defined description of the transaction.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ref_number
     *
     * @return string
     */
    public function getRefNumber()
    {
        return $this->container['ref_number'];
    }

    /**
     * Sets ref_number
     *
     * @param string $ref_number Ref. number &gt; The reference number of the external document on which this transaction is based.
     *
     * @return $this
     */
    public function setRefNumber($ref_number)
    {
        $this->container['ref_number'] = $ref_number;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return object
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param object $branch Branch &gt; The branch of the company.
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets account
     *
     * @return object
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param object $account Account &gt; The account updated by the batch transactions.
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets ledger
     *
     * @return object
     */
    public function getLedger()
    {
        return $this->container['ledger'];
    }

    /**
     * Sets ledger
     *
     * @param object $ledger Ledger &gt; The ledger used for the batch.
     *
     * @return $this
     */
    public function setLedger($ledger)
    {
        $this->container['ledger'] = $ledger;

        return $this;
    }

    /**
     * Gets subaccount
     *
     * @return string
     */
    public function getSubaccount()
    {
        return $this->container['subaccount'];
    }

    /**
     * Sets subaccount
     *
     * @param string $subaccount Subaccount &gt; The subaccount used in the batch.
     *
     * @return $this
     */
    public function setSubaccount($subaccount)
    {
        $this->container['subaccount'] = $subaccount;

        return $this;
    }

    /**
     * Gets beg_balance
     *
     * @return double
     */
    public function getBegBalance()
    {
        return $this->container['beg_balance'];
    }

    /**
     * Sets beg_balance
     *
     * @param double $beg_balance Beg. balance &gt; The running total of the account's beginning balance calculated in the order of transactions displayed in the table.
     *
     * @return $this
     */
    public function setBegBalance($beg_balance)
    {
        $this->container['beg_balance'] = $beg_balance;

        return $this;
    }

    /**
     * Gets debit_amount
     *
     * @return double
     */
    public function getDebitAmount()
    {
        return $this->container['debit_amount'];
    }

    /**
     * Sets debit_amount
     *
     * @param double $debit_amount Debit amount &gt; The transaction debit amount charged to the account during the selected financial period.
     *
     * @return $this
     */
    public function setDebitAmount($debit_amount)
    {
        $this->container['debit_amount'] = $debit_amount;

        return $this;
    }

    /**
     * Gets credit_amount
     *
     * @return double
     */
    public function getCreditAmount()
    {
        return $this->container['credit_amount'];
    }

    /**
     * Sets credit_amount
     *
     * @param double $credit_amount Credit amount &gt; The transaction credit amount charged to the account during the selected financial period.
     *
     * @return $this
     */
    public function setCreditAmount($credit_amount)
    {
        $this->container['credit_amount'] = $credit_amount;

        return $this;
    }

    /**
     * Gets ending_balance
     *
     * @return double
     */
    public function getEndingBalance()
    {
        return $this->container['ending_balance'];
    }

    /**
     * Sets ending_balance
     *
     * @param double $ending_balance Ending balance &gt; The running total of the account's ending balance calculated in the order of transactions displayed in the table.
     *
     * @return $this
     */
    public function setEndingBalance($ending_balance)
    {
        $this->container['ending_balance'] = $ending_balance;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Click the Show currency details check box to view the below fields in the window.  Currency &gt; The currency of transactions in the account. If it is not specified, the balance is in the base currency.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets curr_beg_balance
     *
     * @return double
     */
    public function getCurrBegBalance()
    {
        return $this->container['curr_beg_balance'];
    }

    /**
     * Sets curr_beg_balance
     *
     * @param double $curr_beg_balance Beg. balance (currency) &gt; The account balance in the selected currency at the start of the selected period.
     *
     * @return $this
     */
    public function setCurrBegBalance($curr_beg_balance)
    {
        $this->container['curr_beg_balance'] = $curr_beg_balance;

        return $this;
    }

    /**
     * Gets curr_debit_amount
     *
     * @return double
     */
    public function getCurrDebitAmount()
    {
        return $this->container['curr_debit_amount'];
    }

    /**
     * Sets curr_debit_amount
     *
     * @param double $curr_debit_amount Debit amount (currency) &gt; The debit amount in the selected currency for the specified account over the selected period.
     *
     * @return $this
     */
    public function setCurrDebitAmount($curr_debit_amount)
    {
        $this->container['curr_debit_amount'] = $curr_debit_amount;

        return $this;
    }

    /**
     * Gets curr_credit_amount
     *
     * @return double
     */
    public function getCurrCreditAmount()
    {
        return $this->container['curr_credit_amount'];
    }

    /**
     * Sets curr_credit_amount
     *
     * @param double $curr_credit_amount Credit amount (currency) &gt; The credit amount in the selected currency for the specified account over the selected period.
     *
     * @return $this
     */
    public function setCurrCreditAmount($curr_credit_amount)
    {
        $this->container['curr_credit_amount'] = $curr_credit_amount;

        return $this;
    }

    /**
     * Gets curr_ending_balance
     *
     * @return double
     */
    public function getCurrEndingBalance()
    {
        return $this->container['curr_ending_balance'];
    }

    /**
     * Sets curr_ending_balance
     *
     * @param double $curr_ending_balance Ending balance (currency) &gt; The account balance in the selected currency at the start of the selected period.
     *
     * @return $this
     */
    public function setCurrEndingBalance($curr_ending_balance)
    {
        $this->container['curr_ending_balance'] = $curr_ending_balance;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time System generated information reflecting when the last change was done.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


