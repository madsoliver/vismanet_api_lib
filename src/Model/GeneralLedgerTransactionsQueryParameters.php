<?php
/**
 * GeneralLedgerTransactionsQueryParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * GeneralLedgerTransactionsQueryParameters Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GeneralLedgerTransactionsQueryParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GeneralLedgerTransactionsQueryParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'branch' => 'string',
        'ledger' => 'string',
        'from_period' => 'string',
        'to_period' => 'string',
        'account' => 'string',
        'subaccount_id' => 'string',
        'from_date' => 'string',
        'to_date' => 'string',
        'include_unposted' => 'bool',
        'include_unreleased' => 'bool',
        'skip_records' => 'int',
        'number_to_read' => 'int',
        'last_modified_date_time' => 'string',
        'last_modified_date_time_condition' => 'string',
        'page_number' => 'int',
        'page_size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'branch' => null,
        'ledger' => null,
        'from_period' => null,
        'to_period' => null,
        'account' => null,
        'subaccount_id' => null,
        'from_date' => null,
        'to_date' => null,
        'include_unposted' => null,
        'include_unreleased' => null,
        'skip_records' => 'int32',
        'number_to_read' => 'int32',
        'last_modified_date_time' => null,
        'last_modified_date_time_condition' => null,
        'page_number' => 'int32',
        'page_size' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'branch' => 'branch',
        'ledger' => 'ledger',
        'from_period' => 'fromPeriod',
        'to_period' => 'toPeriod',
        'account' => 'account',
        'subaccount_id' => 'subaccountId',
        'from_date' => 'fromDate',
        'to_date' => 'toDate',
        'include_unposted' => 'includeUnposted',
        'include_unreleased' => 'includeUnreleased',
        'skip_records' => 'skipRecords',
        'number_to_read' => 'numberToRead',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'last_modified_date_time_condition' => 'lastModifiedDateTimeCondition',
        'page_number' => 'pageNumber',
        'page_size' => 'pageSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'branch' => 'setBranch',
        'ledger' => 'setLedger',
        'from_period' => 'setFromPeriod',
        'to_period' => 'setToPeriod',
        'account' => 'setAccount',
        'subaccount_id' => 'setSubaccountId',
        'from_date' => 'setFromDate',
        'to_date' => 'setToDate',
        'include_unposted' => 'setIncludeUnposted',
        'include_unreleased' => 'setIncludeUnreleased',
        'skip_records' => 'setSkipRecords',
        'number_to_read' => 'setNumberToRead',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'last_modified_date_time_condition' => 'setLastModifiedDateTimeCondition',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'branch' => 'getBranch',
        'ledger' => 'getLedger',
        'from_period' => 'getFromPeriod',
        'to_period' => 'getToPeriod',
        'account' => 'getAccount',
        'subaccount_id' => 'getSubaccountId',
        'from_date' => 'getFromDate',
        'to_date' => 'getToDate',
        'include_unposted' => 'getIncludeUnposted',
        'include_unreleased' => 'getIncludeUnreleased',
        'skip_records' => 'getSkipRecords',
        'number_to_read' => 'getNumberToRead',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'last_modified_date_time_condition' => 'getLastModifiedDateTimeCondition',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['ledger'] = isset($data['ledger']) ? $data['ledger'] : null;
        $this->container['from_period'] = isset($data['from_period']) ? $data['from_period'] : null;
        $this->container['to_period'] = isset($data['to_period']) ? $data['to_period'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['subaccount_id'] = isset($data['subaccount_id']) ? $data['subaccount_id'] : null;
        $this->container['from_date'] = isset($data['from_date']) ? $data['from_date'] : null;
        $this->container['to_date'] = isset($data['to_date']) ? $data['to_date'] : null;
        $this->container['include_unposted'] = isset($data['include_unposted']) ? $data['include_unposted'] : null;
        $this->container['include_unreleased'] = isset($data['include_unreleased']) ? $data['include_unreleased'] : null;
        $this->container['skip_records'] = isset($data['skip_records']) ? $data['skip_records'] : null;
        $this->container['number_to_read'] = isset($data['number_to_read']) ? $data['number_to_read'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['last_modified_date_time_condition'] = isset($data['last_modified_date_time_condition']) ? $data['last_modified_date_time_condition'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ledger'] === null) {
            $invalidProperties[] = "'ledger' can't be null";
        }
        if ($this->container['from_period'] === null) {
            $invalidProperties[] = "'from_period' can't be null";
        }
        if ($this->container['to_period'] === null) {
            $invalidProperties[] = "'to_period' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets branch
     *
     * @return string
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string $branch The branch CD
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets ledger
     *
     * @return string
     */
    public function getLedger()
    {
        return $this->container['ledger'];
    }

    /**
     * Sets ledger
     *
     * @param string $ledger Mandatory. The ledger in which you want to view the account balances.
     *
     * @return $this
     */
    public function setLedger($ledger)
    {
        $this->container['ledger'] = $ledger;

        return $this;
    }

    /**
     * Gets from_period
     *
     * @return string
     */
    public function getFromPeriod()
    {
        return $this->container['from_period'];
    }

    /**
     * Sets from_period
     *
     * @param string $from_period Mandatory. The financial period that begins the date range of the batches you want to view. Format YYYYPP
     *
     * @return $this
     */
    public function setFromPeriod($from_period)
    {
        $this->container['from_period'] = $from_period;

        return $this;
    }

    /**
     * Gets to_period
     *
     * @return string
     */
    public function getToPeriod()
    {
        return $this->container['to_period'];
    }

    /**
     * Sets to_period
     *
     * @param string $to_period Mandatory. The financial period that ends the date range of the batches you want to view. Format YYYYPP
     *
     * @return $this
     */
    public function setToPeriod($to_period)
    {
        $this->container['to_period'] = $to_period;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string $account The account CD for which you want to view activities in the selected financial period.
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets subaccount_id
     *
     * @return string
     */
    public function getSubaccountId()
    {
        return $this->container['subaccount_id'];
    }

    /**
     * Sets subaccount_id
     *
     * @param string $subaccount_id The Subaccount
     *
     * @return $this
     */
    public function setSubaccountId($subaccount_id)
    {
        $this->container['subaccount_id'] = $subaccount_id;

        return $this;
    }

    /**
     * Gets from_date
     *
     * @return string
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     *
     * @param string $from_date The first date of the interval within the period. Format YYYY-MM-DD
     *
     * @return $this
     */
    public function setFromDate($from_date)
    {
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets to_date
     *
     * @return string
     */
    public function getToDate()
    {
        return $this->container['to_date'];
    }

    /**
     * Sets to_date
     *
     * @param string $to_date The last date of the interval within the selected period. Format YYYY-MM-DD
     *
     * @return $this
     */
    public function setToDate($to_date)
    {
        $this->container['to_date'] = $to_date;

        return $this;
    }

    /**
     * Gets include_unposted
     *
     * @return bool
     */
    public function getIncludeUnposted()
    {
        return $this->container['include_unposted'];
    }

    /**
     * Sets include_unposted
     *
     * @param bool $include_unposted Checkmark indicating if unposted batches are included.
     *
     * @return $this
     */
    public function setIncludeUnposted($include_unposted)
    {
        $this->container['include_unposted'] = $include_unposted;

        return $this;
    }

    /**
     * Gets include_unreleased
     *
     * @return bool
     */
    public function getIncludeUnreleased()
    {
        return $this->container['include_unreleased'];
    }

    /**
     * Sets include_unreleased
     *
     * @param bool $include_unreleased Checkmark indicating if unreleased (balanced) batches are included.
     *
     * @return $this
     */
    public function setIncludeUnreleased($include_unreleased)
    {
        $this->container['include_unreleased'] = $include_unreleased;

        return $this;
    }

    /**
     * Gets skip_records
     *
     * @return int
     */
    public function getSkipRecords()
    {
        return $this->container['skip_records'];
    }

    /**
     * Sets skip_records
     *
     * @param int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.
     *
     * @return $this
     */
    public function setSkipRecords($skip_records)
    {
        $this->container['skip_records'] = $skip_records;

        return $this;
    }

    /**
     * Gets number_to_read
     *
     * @return int
     */
    public function getNumberToRead()
    {
        return $this->container['number_to_read'];
    }

    /**
     * Sets number_to_read
     *
     * @param int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.
     *
     * @return $this
     */
    public function setNumberToRead($number_to_read)
    {
        $this->container['number_to_read'] = $number_to_read;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return string
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param string $last_modified_date_time System retrieved information for last modified date and time. Valid date/time format is yyyy-MM-dd, yyyy-MM-dd HH:mm:ss or yyyy-MM-dd HH:mm:ss.FFF. FFF stands for milliseconds.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets last_modified_date_time_condition
     *
     * @return string
     */
    public function getLastModifiedDateTimeCondition()
    {
        return $this->container['last_modified_date_time_condition'];
    }

    /**
     * Sets last_modified_date_time_condition
     *
     * @param string $last_modified_date_time_condition Value to be used for filtering lastModifiedDateTime value.
     *
     * @return $this
     */
    public function setLastModifiedDateTimeCondition($last_modified_date_time_condition)
    {
        $this->container['last_modified_date_time_condition'] = $last_modified_date_time_condition;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number Pagination parameter. Page number.
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size Pagination parameter. Number of items to be collected.
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


