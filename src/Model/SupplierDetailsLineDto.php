<?php
/**
 * SupplierDetailsLineDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * SupplierDetailsLineDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupplierDetailsLineDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SupplierDetailsLineDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'bool',
        'default' => 'bool',
        'supplier_id' => 'string',
        'supplier_name' => 'string',
        'location' => 'string',
        'warehouse' => 'string',
        'purchase_unit' => 'string',
        'supplier_item_id' => 'string',
        'shipment_lead_time' => 'int',
        'lead_time' => 'int',
        'min_order_freq' => 'int',
        'min_order_qty' => 'double',
        'max_order_qty' => 'double',
        'lot_size' => 'double',
        'eoq' => 'double',
        'currency_id' => 'string',
        'last_supplier_price' => 'double',
        'override' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => null,
        'default' => null,
        'supplier_id' => null,
        'supplier_name' => null,
        'location' => null,
        'warehouse' => null,
        'purchase_unit' => null,
        'supplier_item_id' => null,
        'shipment_lead_time' => 'int32',
        'lead_time' => 'int32',
        'min_order_freq' => 'int32',
        'min_order_qty' => 'double',
        'max_order_qty' => 'double',
        'lot_size' => 'double',
        'eoq' => 'double',
        'currency_id' => null,
        'last_supplier_price' => 'double',
        'override' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'default' => 'default',
        'supplier_id' => 'supplierId',
        'supplier_name' => 'supplierName',
        'location' => 'location',
        'warehouse' => 'warehouse',
        'purchase_unit' => 'purchaseUnit',
        'supplier_item_id' => 'supplierItemId',
        'shipment_lead_time' => 'shipmentLeadTime',
        'lead_time' => 'leadTime',
        'min_order_freq' => 'minOrderFreq',
        'min_order_qty' => 'minOrderQty',
        'max_order_qty' => 'maxOrderQty',
        'lot_size' => 'lotSize',
        'eoq' => 'eoq',
        'currency_id' => 'currencyId',
        'last_supplier_price' => 'lastSupplierPrice',
        'override' => 'override'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'default' => 'setDefault',
        'supplier_id' => 'setSupplierId',
        'supplier_name' => 'setSupplierName',
        'location' => 'setLocation',
        'warehouse' => 'setWarehouse',
        'purchase_unit' => 'setPurchaseUnit',
        'supplier_item_id' => 'setSupplierItemId',
        'shipment_lead_time' => 'setShipmentLeadTime',
        'lead_time' => 'setLeadTime',
        'min_order_freq' => 'setMinOrderFreq',
        'min_order_qty' => 'setMinOrderQty',
        'max_order_qty' => 'setMaxOrderQty',
        'lot_size' => 'setLotSize',
        'eoq' => 'setEoq',
        'currency_id' => 'setCurrencyId',
        'last_supplier_price' => 'setLastSupplierPrice',
        'override' => 'setOverride'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'default' => 'getDefault',
        'supplier_id' => 'getSupplierId',
        'supplier_name' => 'getSupplierName',
        'location' => 'getLocation',
        'warehouse' => 'getWarehouse',
        'purchase_unit' => 'getPurchaseUnit',
        'supplier_item_id' => 'getSupplierItemId',
        'shipment_lead_time' => 'getShipmentLeadTime',
        'lead_time' => 'getLeadTime',
        'min_order_freq' => 'getMinOrderFreq',
        'min_order_qty' => 'getMinOrderQty',
        'max_order_qty' => 'getMaxOrderQty',
        'lot_size' => 'getLotSize',
        'eoq' => 'getEoq',
        'currency_id' => 'getCurrencyId',
        'last_supplier_price' => 'getLastSupplierPrice',
        'override' => 'getOverride'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['default'] = isset($data['default']) ? $data['default'] : null;
        $this->container['supplier_id'] = isset($data['supplier_id']) ? $data['supplier_id'] : null;
        $this->container['supplier_name'] = isset($data['supplier_name']) ? $data['supplier_name'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['purchase_unit'] = isset($data['purchase_unit']) ? $data['purchase_unit'] : null;
        $this->container['supplier_item_id'] = isset($data['supplier_item_id']) ? $data['supplier_item_id'] : null;
        $this->container['shipment_lead_time'] = isset($data['shipment_lead_time']) ? $data['shipment_lead_time'] : null;
        $this->container['lead_time'] = isset($data['lead_time']) ? $data['lead_time'] : null;
        $this->container['min_order_freq'] = isset($data['min_order_freq']) ? $data['min_order_freq'] : null;
        $this->container['min_order_qty'] = isset($data['min_order_qty']) ? $data['min_order_qty'] : null;
        $this->container['max_order_qty'] = isset($data['max_order_qty']) ? $data['max_order_qty'] : null;
        $this->container['lot_size'] = isset($data['lot_size']) ? $data['lot_size'] : null;
        $this->container['eoq'] = isset($data['eoq']) ? $data['eoq'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['last_supplier_price'] = isset($data['last_supplier_price']) ? $data['last_supplier_price'] : null;
        $this->container['override'] = isset($data['override']) ? $data['override'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets default
     *
     * @return bool
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param bool $default default
     *
     * @return $this
     */
    public function setDefault($default)
    {
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return string
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param string $supplier_id supplier_id
     *
     * @return $this
     */
    public function setSupplierId($supplier_id)
    {
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string $supplier_name supplier_name
     *
     * @return $this
     */
    public function setSupplierName($supplier_name)
    {
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return string
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param string $warehouse warehouse
     *
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets purchase_unit
     *
     * @return string
     */
    public function getPurchaseUnit()
    {
        return $this->container['purchase_unit'];
    }

    /**
     * Sets purchase_unit
     *
     * @param string $purchase_unit purchase_unit
     *
     * @return $this
     */
    public function setPurchaseUnit($purchase_unit)
    {
        $this->container['purchase_unit'] = $purchase_unit;

        return $this;
    }

    /**
     * Gets supplier_item_id
     *
     * @return string
     */
    public function getSupplierItemId()
    {
        return $this->container['supplier_item_id'];
    }

    /**
     * Sets supplier_item_id
     *
     * @param string $supplier_item_id supplier_item_id
     *
     * @return $this
     */
    public function setSupplierItemId($supplier_item_id)
    {
        $this->container['supplier_item_id'] = $supplier_item_id;

        return $this;
    }

    /**
     * Gets shipment_lead_time
     *
     * @return int
     */
    public function getShipmentLeadTime()
    {
        return $this->container['shipment_lead_time'];
    }

    /**
     * Sets shipment_lead_time
     *
     * @param int $shipment_lead_time shipment_lead_time
     *
     * @return $this
     */
    public function setShipmentLeadTime($shipment_lead_time)
    {
        $this->container['shipment_lead_time'] = $shipment_lead_time;

        return $this;
    }

    /**
     * Gets lead_time
     *
     * @return int
     */
    public function getLeadTime()
    {
        return $this->container['lead_time'];
    }

    /**
     * Sets lead_time
     *
     * @param int $lead_time lead_time
     *
     * @return $this
     */
    public function setLeadTime($lead_time)
    {
        $this->container['lead_time'] = $lead_time;

        return $this;
    }

    /**
     * Gets min_order_freq
     *
     * @return int
     */
    public function getMinOrderFreq()
    {
        return $this->container['min_order_freq'];
    }

    /**
     * Sets min_order_freq
     *
     * @param int $min_order_freq min_order_freq
     *
     * @return $this
     */
    public function setMinOrderFreq($min_order_freq)
    {
        $this->container['min_order_freq'] = $min_order_freq;

        return $this;
    }

    /**
     * Gets min_order_qty
     *
     * @return double
     */
    public function getMinOrderQty()
    {
        return $this->container['min_order_qty'];
    }

    /**
     * Sets min_order_qty
     *
     * @param double $min_order_qty min_order_qty
     *
     * @return $this
     */
    public function setMinOrderQty($min_order_qty)
    {
        $this->container['min_order_qty'] = $min_order_qty;

        return $this;
    }

    /**
     * Gets max_order_qty
     *
     * @return double
     */
    public function getMaxOrderQty()
    {
        return $this->container['max_order_qty'];
    }

    /**
     * Sets max_order_qty
     *
     * @param double $max_order_qty max_order_qty
     *
     * @return $this
     */
    public function setMaxOrderQty($max_order_qty)
    {
        $this->container['max_order_qty'] = $max_order_qty;

        return $this;
    }

    /**
     * Gets lot_size
     *
     * @return double
     */
    public function getLotSize()
    {
        return $this->container['lot_size'];
    }

    /**
     * Sets lot_size
     *
     * @param double $lot_size lot_size
     *
     * @return $this
     */
    public function setLotSize($lot_size)
    {
        $this->container['lot_size'] = $lot_size;

        return $this;
    }

    /**
     * Gets eoq
     *
     * @return double
     */
    public function getEoq()
    {
        return $this->container['eoq'];
    }

    /**
     * Sets eoq
     *
     * @param double $eoq eoq
     *
     * @return $this
     */
    public function setEoq($eoq)
    {
        $this->container['eoq'] = $eoq;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets last_supplier_price
     *
     * @return double
     */
    public function getLastSupplierPrice()
    {
        return $this->container['last_supplier_price'];
    }

    /**
     * Sets last_supplier_price
     *
     * @param double $last_supplier_price last_supplier_price
     *
     * @return $this
     */
    public function setLastSupplierPrice($last_supplier_price)
    {
        $this->container['last_supplier_price'] = $last_supplier_price;

        return $this;
    }

    /**
     * Gets override
     *
     * @return bool
     */
    public function getOverride()
    {
        return $this->container['override'];
    }

    /**
     * Sets override
     *
     * @param bool $override override
     *
     * @return $this
     */
    public function setOverride($override)
    {
        $this->container['override'] = $override;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


