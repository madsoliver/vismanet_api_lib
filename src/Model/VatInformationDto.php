<?php
/**
 * VatInformationDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * VatInformationDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VatInformationDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VatInformationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vat_category_id' => 'string',
        'vat_id' => 'string',
        'description' => 'string',
        'type' => 'string',
        'deductible_vat' => 'bool',
        'reverse_vat' => 'bool',
        'statistical_vat' => 'bool',
        'pending_vat' => 'bool',
        'includein_vat_exempt_total' => 'bool',
        'includein_vat_total' => 'bool',
        'enter_from_vat_invoice' => 'bool',
        'calculate_on' => 'string',
        'cash_discount' => 'string',
        'vat_agency_id' => 'object',
        'not_valid_after' => '\DateTime',
        'eu_report_code' => 'string',
        'document_text' => 'string',
        'default_non_stock_item' => 'object',
        'visma_xml_vat_type' => 'string',
        'last_modified_date_time' => '\DateTime',
        'gl_accounts' => 'object',
        'schedules' => '\Ekstralys\VismaNetApi\Model\VatInformationScheduleDto[]',
        'categories' => '\Ekstralys\VismaNetApi\Model\VatCategoryDto[]',
        'zones' => '\Ekstralys\VismaNetApi\Model\VatZoneDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vat_category_id' => null,
        'vat_id' => null,
        'description' => null,
        'type' => null,
        'deductible_vat' => null,
        'reverse_vat' => null,
        'statistical_vat' => null,
        'pending_vat' => null,
        'includein_vat_exempt_total' => null,
        'includein_vat_total' => null,
        'enter_from_vat_invoice' => null,
        'calculate_on' => null,
        'cash_discount' => null,
        'vat_agency_id' => null,
        'not_valid_after' => 'date-time',
        'eu_report_code' => null,
        'document_text' => null,
        'default_non_stock_item' => null,
        'visma_xml_vat_type' => null,
        'last_modified_date_time' => 'date-time',
        'gl_accounts' => null,
        'schedules' => null,
        'categories' => null,
        'zones' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vat_category_id' => 'vatCategoryId',
        'vat_id' => 'vatId',
        'description' => 'description',
        'type' => 'type',
        'deductible_vat' => 'deductibleVat',
        'reverse_vat' => 'reverseVat',
        'statistical_vat' => 'statisticalVat',
        'pending_vat' => 'pendingVat',
        'includein_vat_exempt_total' => 'includeinVatExemptTotal',
        'includein_vat_total' => 'includeinVatTotal',
        'enter_from_vat_invoice' => 'enterFromVatInvoice',
        'calculate_on' => 'calculateOn',
        'cash_discount' => 'cashDiscount',
        'vat_agency_id' => 'vatAgencyId',
        'not_valid_after' => 'notValidAfter',
        'eu_report_code' => 'euReportCode',
        'document_text' => 'documentText',
        'default_non_stock_item' => 'defaultNonStockItem',
        'visma_xml_vat_type' => 'vismaXmlVatType',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'gl_accounts' => 'glAccounts',
        'schedules' => 'schedules',
        'categories' => 'categories',
        'zones' => 'zones'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vat_category_id' => 'setVatCategoryId',
        'vat_id' => 'setVatId',
        'description' => 'setDescription',
        'type' => 'setType',
        'deductible_vat' => 'setDeductibleVat',
        'reverse_vat' => 'setReverseVat',
        'statistical_vat' => 'setStatisticalVat',
        'pending_vat' => 'setPendingVat',
        'includein_vat_exempt_total' => 'setIncludeinVatExemptTotal',
        'includein_vat_total' => 'setIncludeinVatTotal',
        'enter_from_vat_invoice' => 'setEnterFromVatInvoice',
        'calculate_on' => 'setCalculateOn',
        'cash_discount' => 'setCashDiscount',
        'vat_agency_id' => 'setVatAgencyId',
        'not_valid_after' => 'setNotValidAfter',
        'eu_report_code' => 'setEuReportCode',
        'document_text' => 'setDocumentText',
        'default_non_stock_item' => 'setDefaultNonStockItem',
        'visma_xml_vat_type' => 'setVismaXmlVatType',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'gl_accounts' => 'setGlAccounts',
        'schedules' => 'setSchedules',
        'categories' => 'setCategories',
        'zones' => 'setZones'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vat_category_id' => 'getVatCategoryId',
        'vat_id' => 'getVatId',
        'description' => 'getDescription',
        'type' => 'getType',
        'deductible_vat' => 'getDeductibleVat',
        'reverse_vat' => 'getReverseVat',
        'statistical_vat' => 'getStatisticalVat',
        'pending_vat' => 'getPendingVat',
        'includein_vat_exempt_total' => 'getIncludeinVatExemptTotal',
        'includein_vat_total' => 'getIncludeinVatTotal',
        'enter_from_vat_invoice' => 'getEnterFromVatInvoice',
        'calculate_on' => 'getCalculateOn',
        'cash_discount' => 'getCashDiscount',
        'vat_agency_id' => 'getVatAgencyId',
        'not_valid_after' => 'getNotValidAfter',
        'eu_report_code' => 'getEuReportCode',
        'document_text' => 'getDocumentText',
        'default_non_stock_item' => 'getDefaultNonStockItem',
        'visma_xml_vat_type' => 'getVismaXmlVatType',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'gl_accounts' => 'getGlAccounts',
        'schedules' => 'getSchedules',
        'categories' => 'getCategories',
        'zones' => 'getZones'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_SALES = 'Sales';
    const TYPE__USE = 'Use';
    const TYPE_VAT = 'Vat';
    const TYPE_WITHHOLDING = 'Withholding';
    const TYPE_EXEMPT_VAT = 'ExemptVat';
    const TYPE_STATISTICAL_VAT = 'StatisticalVat';
    const TYPE_DIRECT_VAT = 'DirectVat';
    const TYPE_PENDING_VAT = 'PendingVat';
    const TYPE_REVERSE_VAT = 'ReverseVat';
    const CALCULATE_ON_EXTRACT_FROM_ITEM_AMOUNT = 'ExtractFromItemAmount';
    const CALCULATE_ON_ITEM_AMOUNT = 'ItemAmount';
    const CALCULATE_ON_ITEM_TAX_AMOUNT = 'ItemTaxAmount';
    const CALCULATE_ON_DOCUMENT_AMOUNT = 'DocumentAmount';
    const CALCULATE_ON_DOCUMEN_TAX_AMOUNT = 'DocumenTaxAmount';
    const CASH_DISCOUNT_TO_TAXABLE_AMOUNT = 'ToTaxableAmount';
    const CASH_DISCOUNT_TO_PROMT_PAYMENT = 'ToPromtPayment';
    const CASH_DISCOUNT_TO_TAX_AMOUNT = 'ToTaxAmount';
    const CASH_DISCOUNT_ADJUST_TAX = 'AdjustTax';
    const CASH_DISCOUNT_NO_ADJUST = 'NoAdjust';
    const EU_REPORT_CODE_SALES_OF_GOODS = 'SalesOfGoods';
    const EU_REPORT_CODE_TRIANGULATION = 'Triangulation';
    const EU_REPORT_CODE_SALES_OF_SERVICE = 'SalesOfService';
    const VISMA_XML_VAT_TYPE_VAT_TYPE_HIGH = 'VatTypeHigh';
    const VISMA_XML_VAT_TYPE_VAT_TYPE_MEDIUM = 'VatTypeMedium';
    const VISMA_XML_VAT_TYPE_VAT_TYPE_LOW = 'VatTypeLow';
    const VISMA_XML_VAT_TYPE_VAT_TYPE_ZERO = 'VatTypeZero';
    const VISMA_XML_VAT_TYPE_VAT_TYPE_EXEMPT = 'VatTypeExempt';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SALES,
            self::TYPE__USE,
            self::TYPE_VAT,
            self::TYPE_WITHHOLDING,
            self::TYPE_EXEMPT_VAT,
            self::TYPE_STATISTICAL_VAT,
            self::TYPE_DIRECT_VAT,
            self::TYPE_PENDING_VAT,
            self::TYPE_REVERSE_VAT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCalculateOnAllowableValues()
    {
        return [
            self::CALCULATE_ON_EXTRACT_FROM_ITEM_AMOUNT,
            self::CALCULATE_ON_ITEM_AMOUNT,
            self::CALCULATE_ON_ITEM_TAX_AMOUNT,
            self::CALCULATE_ON_DOCUMENT_AMOUNT,
            self::CALCULATE_ON_DOCUMEN_TAX_AMOUNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCashDiscountAllowableValues()
    {
        return [
            self::CASH_DISCOUNT_TO_TAXABLE_AMOUNT,
            self::CASH_DISCOUNT_TO_PROMT_PAYMENT,
            self::CASH_DISCOUNT_TO_TAX_AMOUNT,
            self::CASH_DISCOUNT_ADJUST_TAX,
            self::CASH_DISCOUNT_NO_ADJUST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEuReportCodeAllowableValues()
    {
        return [
            self::EU_REPORT_CODE_SALES_OF_GOODS,
            self::EU_REPORT_CODE_TRIANGULATION,
            self::EU_REPORT_CODE_SALES_OF_SERVICE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVismaXmlVatTypeAllowableValues()
    {
        return [
            self::VISMA_XML_VAT_TYPE_VAT_TYPE_HIGH,
            self::VISMA_XML_VAT_TYPE_VAT_TYPE_MEDIUM,
            self::VISMA_XML_VAT_TYPE_VAT_TYPE_LOW,
            self::VISMA_XML_VAT_TYPE_VAT_TYPE_ZERO,
            self::VISMA_XML_VAT_TYPE_VAT_TYPE_EXEMPT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vat_category_id'] = isset($data['vat_category_id']) ? $data['vat_category_id'] : null;
        $this->container['vat_id'] = isset($data['vat_id']) ? $data['vat_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['deductible_vat'] = isset($data['deductible_vat']) ? $data['deductible_vat'] : null;
        $this->container['reverse_vat'] = isset($data['reverse_vat']) ? $data['reverse_vat'] : null;
        $this->container['statistical_vat'] = isset($data['statistical_vat']) ? $data['statistical_vat'] : null;
        $this->container['pending_vat'] = isset($data['pending_vat']) ? $data['pending_vat'] : null;
        $this->container['includein_vat_exempt_total'] = isset($data['includein_vat_exempt_total']) ? $data['includein_vat_exempt_total'] : null;
        $this->container['includein_vat_total'] = isset($data['includein_vat_total']) ? $data['includein_vat_total'] : null;
        $this->container['enter_from_vat_invoice'] = isset($data['enter_from_vat_invoice']) ? $data['enter_from_vat_invoice'] : null;
        $this->container['calculate_on'] = isset($data['calculate_on']) ? $data['calculate_on'] : null;
        $this->container['cash_discount'] = isset($data['cash_discount']) ? $data['cash_discount'] : null;
        $this->container['vat_agency_id'] = isset($data['vat_agency_id']) ? $data['vat_agency_id'] : null;
        $this->container['not_valid_after'] = isset($data['not_valid_after']) ? $data['not_valid_after'] : null;
        $this->container['eu_report_code'] = isset($data['eu_report_code']) ? $data['eu_report_code'] : null;
        $this->container['document_text'] = isset($data['document_text']) ? $data['document_text'] : null;
        $this->container['default_non_stock_item'] = isset($data['default_non_stock_item']) ? $data['default_non_stock_item'] : null;
        $this->container['visma_xml_vat_type'] = isset($data['visma_xml_vat_type']) ? $data['visma_xml_vat_type'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['gl_accounts'] = isset($data['gl_accounts']) ? $data['gl_accounts'] : null;
        $this->container['schedules'] = isset($data['schedules']) ? $data['schedules'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['zones'] = isset($data['zones']) ? $data['zones'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCalculateOnAllowableValues();
        if (!is_null($this->container['calculate_on']) && !in_array($this->container['calculate_on'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'calculate_on', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCashDiscountAllowableValues();
        if (!is_null($this->container['cash_discount']) && !in_array($this->container['cash_discount'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'cash_discount', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEuReportCodeAllowableValues();
        if (!is_null($this->container['eu_report_code']) && !in_array($this->container['eu_report_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'eu_report_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVismaXmlVatTypeAllowableValues();
        if (!is_null($this->container['visma_xml_vat_type']) && !in_array($this->container['visma_xml_vat_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'visma_xml_vat_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vat_category_id
     *
     * @return string
     */
    public function getVatCategoryId()
    {
        return $this->container['vat_category_id'];
    }

    /**
     * Sets vat_category_id
     *
     * @param string $vat_category_id VatCategoryId is deprecated, please use Vat Id instead
     *
     * @return $this
     */
    public function setVatCategoryId($vat_category_id)
    {
        $this->container['vat_category_id'] = $vat_category_id;

        return $this;
    }

    /**
     * Gets vat_id
     *
     * @return string
     */
    public function getVatId()
    {
        return $this->container['vat_id'];
    }

    /**
     * Sets vat_id
     *
     * @param string $vat_id Mandatory field: VAT settings tab &gt; VAT ID* &gt; The unique ID of the VAT.
     *
     * @return $this
     */
    public function setVatId($vat_id)
    {
        $this->container['vat_id'] = $vat_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description VAT settings tab &gt; Description &gt; A detailed description of the VAT.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type VAT settings tab &gt; VAT type &gt; The type of VAT.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets deductible_vat
     *
     * @return bool
     */
    public function getDeductibleVat()
    {
        return $this->container['deductible_vat'];
    }

    /**
     * Sets deductible_vat
     *
     * @param bool $deductible_vat VAT settings tab &gt; Partially deductible VAT &gt; A check box that indicates (if selected) that this is a deductible value-added VAT.
     *
     * @return $this
     */
    public function setDeductibleVat($deductible_vat)
    {
        $this->container['deductible_vat'] = $deductible_vat;

        return $this;
    }

    /**
     * Gets reverse_vat
     *
     * @return bool
     */
    public function getReverseVat()
    {
        return $this->container['reverse_vat'];
    }

    /**
     * Sets reverse_vat
     *
     * @param bool $reverse_vat VAT settings tab &gt; Reverse VAT &gt; A check box that indicates (if selected) that this is a reverse VAT.
     *
     * @return $this
     */
    public function setReverseVat($reverse_vat)
    {
        $this->container['reverse_vat'] = $reverse_vat;

        return $this;
    }

    /**
     * Gets statistical_vat
     *
     * @return bool
     */
    public function getStatisticalVat()
    {
        return $this->container['statistical_vat'];
    }

    /**
     * Sets statistical_vat
     *
     * @param bool $statistical_vat VAT settings tab &gt; Statistical VAT &gt; A check box that indicates (if selected) that the VAT on documents will be calculated only for statistical purposes or will be reported only but not actually paid.
     *
     * @return $this
     */
    public function setStatisticalVat($statistical_vat)
    {
        $this->container['statistical_vat'] = $statistical_vat;

        return $this;
    }

    /**
     * Gets pending_vat
     *
     * @return bool
     */
    public function getPendingVat()
    {
        return $this->container['pending_vat'];
    }

    /**
     * Sets pending_vat
     *
     * @param bool $pending_vat VAT settings tab &gt; Pendig VAT &gt; A check box that indicates (if selected) that the VAT that should be calculated in documents, but should not be recorded to the VAT report until the VAT invoice is received.
     *
     * @return $this
     */
    public function setPendingVat($pending_vat)
    {
        $this->container['pending_vat'] = $pending_vat;

        return $this;
    }

    /**
     * Gets includein_vat_exempt_total
     *
     * @return bool
     */
    public function getIncludeinVatExemptTotal()
    {
        return $this->container['includein_vat_exempt_total'];
    }

    /**
     * Sets includein_vat_exempt_total
     *
     * @param bool $includein_vat_exempt_total VAT settings tab &gt; Include in VAT exempt total &gt; A check box that indicates (if selected) that this value-added VAT has a zero rate and is used to calculate a document subtotal that is actually exempt from VAT.
     *
     * @return $this
     */
    public function setIncludeinVatExemptTotal($includein_vat_exempt_total)
    {
        $this->container['includein_vat_exempt_total'] = $includein_vat_exempt_total;

        return $this;
    }

    /**
     * Gets includein_vat_total
     *
     * @return bool
     */
    public function getIncludeinVatTotal()
    {
        return $this->container['includein_vat_total'];
    }

    /**
     * Sets includein_vat_total
     *
     * @param bool $includein_vat_total VAT settings tab &gt; Include in VAT taxable total &gt; A check box that indicates (if selected) that the VAT taxable amount should appear in the VAT taxable total field in the documents (such as invoices).
     *
     * @return $this
     */
    public function setIncludeinVatTotal($includein_vat_total)
    {
        $this->container['includein_vat_total'] = $includein_vat_total;

        return $this;
    }

    /**
     * Gets enter_from_vat_invoice
     *
     * @return bool
     */
    public function getEnterFromVatInvoice()
    {
        return $this->container['enter_from_vat_invoice'];
    }

    /**
     * Sets enter_from_vat_invoice
     *
     * @param bool $enter_from_vat_invoice VAT settings tab &gt; Enter from VAT invoice &gt; A check box that indicates (if selected) that this VAT should be calculated for documents only if the documents are added to a VAT invoice or VAT adjustment.
     *
     * @return $this
     */
    public function setEnterFromVatInvoice($enter_from_vat_invoice)
    {
        $this->container['enter_from_vat_invoice'] = $enter_from_vat_invoice;

        return $this;
    }

    /**
     * Gets calculate_on
     *
     * @return string
     */
    public function getCalculateOn()
    {
        return $this->container['calculate_on'];
    }

    /**
     * Sets calculate_on
     *
     * @param string $calculate_on VAT settings tab &gt; Calculate on &gt; The method of calculating the tax amount, which is one of the following options: Extract from item amount, Item amount, Item and VAT amount, Document amount, Document and VAT amount.
     *
     * @return $this
     */
    public function setCalculateOn($calculate_on)
    {
        $allowedValues = $this->getCalculateOnAllowableValues();
        if (!is_null($calculate_on) && !in_array($calculate_on, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'calculate_on', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['calculate_on'] = $calculate_on;

        return $this;
    }

    /**
     * Gets cash_discount
     *
     * @return string
     */
    public function getCashDiscount()
    {
        return $this->container['cash_discount'];
    }

    /**
     * Sets cash_discount
     *
     * @param string $cash_discount VAT settings tab &gt; Cash discount &gt; The method of calculating the tax base amount if a cash discount is applied.
     *
     * @return $this
     */
    public function setCashDiscount($cash_discount)
    {
        $allowedValues = $this->getCashDiscountAllowableValues();
        if (!is_null($cash_discount) && !in_array($cash_discount, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cash_discount', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cash_discount'] = $cash_discount;

        return $this;
    }

    /**
     * Gets vat_agency_id
     *
     * @return object
     */
    public function getVatAgencyId()
    {
        return $this->container['vat_agency_id'];
    }

    /**
     * Sets vat_agency_id
     *
     * @param object $vat_agency_id VAT settings tab &gt; Tax agency &gt; The name of the tax agency to receive the VAT.
     *
     * @return $this
     */
    public function setVatAgencyId($vat_agency_id)
    {
        $this->container['vat_agency_id'] = $vat_agency_id;

        return $this;
    }

    /**
     * Gets not_valid_after
     *
     * @return \DateTime
     */
    public function getNotValidAfter()
    {
        return $this->container['not_valid_after'];
    }

    /**
     * Sets not_valid_after
     *
     * @param \DateTime $not_valid_after VAT settings tab &gt; Not valid after &gt; The date after which the VAT is not effective.
     *
     * @return $this
     */
    public function setNotValidAfter($not_valid_after)
    {
        $this->container['not_valid_after'] = $not_valid_after;

        return $this;
    }

    /**
     * Gets eu_report_code
     *
     * @return string
     */
    public function getEuReportCode()
    {
        return $this->container['eu_report_code'];
    }

    /**
     * Sets eu_report_code
     *
     * @param string $eu_report_code VAT settings tab &gt; EU report code &gt; The EU reporting code for the VAT.
     *
     * @return $this
     */
    public function setEuReportCode($eu_report_code)
    {
        $allowedValues = $this->getEuReportCodeAllowableValues();
        if (!is_null($eu_report_code) && !in_array($eu_report_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'eu_report_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eu_report_code'] = $eu_report_code;

        return $this;
    }

    /**
     * Gets document_text
     *
     * @return string
     */
    public function getDocumentText()
    {
        return $this->container['document_text'];
    }

    /**
     * Sets document_text
     *
     * @param string $document_text VAT Settings tab &gt; Document text tab &gt; Document text &gt; The text to be printed to the VAT document.
     *
     * @return $this
     */
    public function setDocumentText($document_text)
    {
        $this->container['document_text'] = $document_text;

        return $this;
    }

    /**
     * Gets default_non_stock_item
     *
     * @return object
     */
    public function getDefaultNonStockItem()
    {
        return $this->container['default_non_stock_item'];
    }

    /**
     * Sets default_non_stock_item
     *
     * @param object $default_non_stock_item VAT settings tab &gt; Default non-stock item &gt; The default non-stock item for the VAT ID.
     *
     * @return $this
     */
    public function setDefaultNonStockItem($default_non_stock_item)
    {
        $this->container['default_non_stock_item'] = $default_non_stock_item;

        return $this;
    }

    /**
     * Gets visma_xml_vat_type
     *
     * @return string
     */
    public function getVismaXmlVatType()
    {
        return $this->container['visma_xml_vat_type'];
    }

    /**
     * Sets visma_xml_vat_type
     *
     * @param string $visma_xml_vat_type VAT settings tab &gt; Visma XML VAT type &gt; The VAT type to be used in Visma XML files.
     *
     * @return $this
     */
    public function setVismaXmlVatType($visma_xml_vat_type)
    {
        $allowedValues = $this->getVismaXmlVatTypeAllowableValues();
        if (!is_null($visma_xml_vat_type) && !in_array($visma_xml_vat_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'visma_xml_vat_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['visma_xml_vat_type'] = $visma_xml_vat_type;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time System generated information.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets gl_accounts
     *
     * @return object
     */
    public function getGlAccounts()
    {
        return $this->container['gl_accounts'];
    }

    /**
     * Sets gl_accounts
     *
     * @param object $gl_accounts General ledger accounts &gt;
     *
     * @return $this
     */
    public function setGlAccounts($gl_accounts)
    {
        $this->container['gl_accounts'] = $gl_accounts;

        return $this;
    }

    /**
     * Gets schedules
     *
     * @return \Ekstralys\VismaNetApi\Model\VatInformationScheduleDto[]
     */
    public function getSchedules()
    {
        return $this->container['schedules'];
    }

    /**
     * Sets schedules
     *
     * @param \Ekstralys\VismaNetApi\Model\VatInformationScheduleDto[] $schedules Both tabs &gt; VAT schedule &gt;
     *
     * @return $this
     */
    public function setSchedules($schedules)
    {
        $this->container['schedules'] = $schedules;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Ekstralys\VismaNetApi\Model\VatCategoryDto[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Ekstralys\VismaNetApi\Model\VatCategoryDto[] $categories Both tabs &gt; Categories tab &gt;
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets zones
     *
     * @return \Ekstralys\VismaNetApi\Model\VatZoneDto[]
     */
    public function getZones()
    {
        return $this->container['zones'];
    }

    /**
     * Sets zones
     *
     * @param \Ekstralys\VismaNetApi\Model\VatZoneDto[] $zones Both tabs &gt; Zones tab &gt;
     *
     * @return $this
     */
    public function setZones($zones)
    {
        $this->container['zones'] = $zones;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


