<?php
/**
 * SalesOrderShipmentDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * SalesOrderShipmentDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesOrderShipmentDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesOrderShipmentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipment_type' => 'string',
        'shipment_no' => 'string',
        'shipment_date' => '\DateTime',
        'shipped_qty' => 'double',
        'shipped_weight' => 'double',
        'shipped_volume' => 'double',
        'invoice_type' => 'string',
        'invoice_no' => 'string',
        'inventory_doc_type' => 'string',
        'inventory_ref_no' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipment_type' => null,
        'shipment_no' => null,
        'shipment_date' => 'date-time',
        'shipped_qty' => 'double',
        'shipped_weight' => 'double',
        'shipped_volume' => 'double',
        'invoice_type' => null,
        'invoice_no' => null,
        'inventory_doc_type' => null,
        'inventory_ref_no' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipment_type' => 'shipmentType',
        'shipment_no' => 'shipmentNo',
        'shipment_date' => 'shipmentDate',
        'shipped_qty' => 'shippedQty',
        'shipped_weight' => 'shippedWeight',
        'shipped_volume' => 'shippedVolume',
        'invoice_type' => 'invoiceType',
        'invoice_no' => 'invoiceNo',
        'inventory_doc_type' => 'inventoryDocType',
        'inventory_ref_no' => 'inventoryRefNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipment_type' => 'setShipmentType',
        'shipment_no' => 'setShipmentNo',
        'shipment_date' => 'setShipmentDate',
        'shipped_qty' => 'setShippedQty',
        'shipped_weight' => 'setShippedWeight',
        'shipped_volume' => 'setShippedVolume',
        'invoice_type' => 'setInvoiceType',
        'invoice_no' => 'setInvoiceNo',
        'inventory_doc_type' => 'setInventoryDocType',
        'inventory_ref_no' => 'setInventoryRefNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipment_type' => 'getShipmentType',
        'shipment_no' => 'getShipmentNo',
        'shipment_date' => 'getShipmentDate',
        'shipped_qty' => 'getShippedQty',
        'shipped_weight' => 'getShippedWeight',
        'shipped_volume' => 'getShippedVolume',
        'invoice_type' => 'getInvoiceType',
        'invoice_no' => 'getInvoiceNo',
        'inventory_doc_type' => 'getInventoryDocType',
        'inventory_ref_no' => 'getInventoryRefNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipment_type'] = isset($data['shipment_type']) ? $data['shipment_type'] : null;
        $this->container['shipment_no'] = isset($data['shipment_no']) ? $data['shipment_no'] : null;
        $this->container['shipment_date'] = isset($data['shipment_date']) ? $data['shipment_date'] : null;
        $this->container['shipped_qty'] = isset($data['shipped_qty']) ? $data['shipped_qty'] : null;
        $this->container['shipped_weight'] = isset($data['shipped_weight']) ? $data['shipped_weight'] : null;
        $this->container['shipped_volume'] = isset($data['shipped_volume']) ? $data['shipped_volume'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['invoice_no'] = isset($data['invoice_no']) ? $data['invoice_no'] : null;
        $this->container['inventory_doc_type'] = isset($data['inventory_doc_type']) ? $data['inventory_doc_type'] : null;
        $this->container['inventory_ref_no'] = isset($data['inventory_ref_no']) ? $data['inventory_ref_no'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipment_type
     *
     * @return string
     */
    public function getShipmentType()
    {
        return $this->container['shipment_type'];
    }

    /**
     * Sets shipment_type
     *
     * @param string $shipment_type shipment_type
     *
     * @return $this
     */
    public function setShipmentType($shipment_type)
    {
        $this->container['shipment_type'] = $shipment_type;

        return $this;
    }

    /**
     * Gets shipment_no
     *
     * @return string
     */
    public function getShipmentNo()
    {
        return $this->container['shipment_no'];
    }

    /**
     * Sets shipment_no
     *
     * @param string $shipment_no shipment_no
     *
     * @return $this
     */
    public function setShipmentNo($shipment_no)
    {
        $this->container['shipment_no'] = $shipment_no;

        return $this;
    }

    /**
     * Gets shipment_date
     *
     * @return \DateTime
     */
    public function getShipmentDate()
    {
        return $this->container['shipment_date'];
    }

    /**
     * Sets shipment_date
     *
     * @param \DateTime $shipment_date shipment_date
     *
     * @return $this
     */
    public function setShipmentDate($shipment_date)
    {
        $this->container['shipment_date'] = $shipment_date;

        return $this;
    }

    /**
     * Gets shipped_qty
     *
     * @return double
     */
    public function getShippedQty()
    {
        return $this->container['shipped_qty'];
    }

    /**
     * Sets shipped_qty
     *
     * @param double $shipped_qty shipped_qty
     *
     * @return $this
     */
    public function setShippedQty($shipped_qty)
    {
        $this->container['shipped_qty'] = $shipped_qty;

        return $this;
    }

    /**
     * Gets shipped_weight
     *
     * @return double
     */
    public function getShippedWeight()
    {
        return $this->container['shipped_weight'];
    }

    /**
     * Sets shipped_weight
     *
     * @param double $shipped_weight shipped_weight
     *
     * @return $this
     */
    public function setShippedWeight($shipped_weight)
    {
        $this->container['shipped_weight'] = $shipped_weight;

        return $this;
    }

    /**
     * Gets shipped_volume
     *
     * @return double
     */
    public function getShippedVolume()
    {
        return $this->container['shipped_volume'];
    }

    /**
     * Sets shipped_volume
     *
     * @param double $shipped_volume shipped_volume
     *
     * @return $this
     */
    public function setShippedVolume($shipped_volume)
    {
        $this->container['shipped_volume'] = $shipped_volume;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return string
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param string $invoice_type invoice_type
     *
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets invoice_no
     *
     * @return string
     */
    public function getInvoiceNo()
    {
        return $this->container['invoice_no'];
    }

    /**
     * Sets invoice_no
     *
     * @param string $invoice_no invoice_no
     *
     * @return $this
     */
    public function setInvoiceNo($invoice_no)
    {
        $this->container['invoice_no'] = $invoice_no;

        return $this;
    }

    /**
     * Gets inventory_doc_type
     *
     * @return string
     */
    public function getInventoryDocType()
    {
        return $this->container['inventory_doc_type'];
    }

    /**
     * Sets inventory_doc_type
     *
     * @param string $inventory_doc_type inventory_doc_type
     *
     * @return $this
     */
    public function setInventoryDocType($inventory_doc_type)
    {
        $this->container['inventory_doc_type'] = $inventory_doc_type;

        return $this;
    }

    /**
     * Gets inventory_ref_no
     *
     * @return string
     */
    public function getInventoryRefNo()
    {
        return $this->container['inventory_ref_no'];
    }

    /**
     * Sets inventory_ref_no
     *
     * @param string $inventory_ref_no inventory_ref_no
     *
     * @return $this
     */
    public function setInventoryRefNo($inventory_ref_no)
    {
        $this->container['inventory_ref_no'] = $inventory_ref_no;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


