<?php
/**
 * DiscountDetailDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * DiscountDetailDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiscountDetailDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DiscountDetailDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_nbr' => 'int',
        'skip_discount' => 'bool',
        'discount_code' => 'string',
        'sequance_id' => 'string',
        'type' => 'string',
        'manual_discount' => 'bool',
        'discountable_amt' => 'double',
        'discountable_qty' => 'double',
        'discount_amt' => 'double',
        'discount' => 'double',
        'free_item' => 'int',
        'free_item_qty' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_nbr' => 'int32',
        'skip_discount' => null,
        'discount_code' => null,
        'sequance_id' => null,
        'type' => null,
        'manual_discount' => null,
        'discountable_amt' => 'double',
        'discountable_qty' => 'double',
        'discount_amt' => 'double',
        'discount' => 'double',
        'free_item' => 'int32',
        'free_item_qty' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_nbr' => 'lineNbr',
        'skip_discount' => 'skipDiscount',
        'discount_code' => 'discountCode',
        'sequance_id' => 'sequanceID',
        'type' => 'type',
        'manual_discount' => 'manualDiscount',
        'discountable_amt' => 'discountableAmt',
        'discountable_qty' => 'discountableQty',
        'discount_amt' => 'discountAmt',
        'discount' => 'discount',
        'free_item' => 'freeItem',
        'free_item_qty' => 'freeItemQty'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_nbr' => 'setLineNbr',
        'skip_discount' => 'setSkipDiscount',
        'discount_code' => 'setDiscountCode',
        'sequance_id' => 'setSequanceId',
        'type' => 'setType',
        'manual_discount' => 'setManualDiscount',
        'discountable_amt' => 'setDiscountableAmt',
        'discountable_qty' => 'setDiscountableQty',
        'discount_amt' => 'setDiscountAmt',
        'discount' => 'setDiscount',
        'free_item' => 'setFreeItem',
        'free_item_qty' => 'setFreeItemQty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_nbr' => 'getLineNbr',
        'skip_discount' => 'getSkipDiscount',
        'discount_code' => 'getDiscountCode',
        'sequance_id' => 'getSequanceId',
        'type' => 'getType',
        'manual_discount' => 'getManualDiscount',
        'discountable_amt' => 'getDiscountableAmt',
        'discountable_qty' => 'getDiscountableQty',
        'discount_amt' => 'getDiscountAmt',
        'discount' => 'getDiscount',
        'free_item' => 'getFreeItem',
        'free_item_qty' => 'getFreeItemQty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_LINE = 'Line';
    const TYPE_GROUP = 'Group';
    const TYPE_DOCUMENT = 'Document';
    const TYPE_FLAT = 'Flat';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_LINE,
            self::TYPE_GROUP,
            self::TYPE_DOCUMENT,
            self::TYPE_FLAT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_nbr'] = isset($data['line_nbr']) ? $data['line_nbr'] : null;
        $this->container['skip_discount'] = isset($data['skip_discount']) ? $data['skip_discount'] : null;
        $this->container['discount_code'] = isset($data['discount_code']) ? $data['discount_code'] : null;
        $this->container['sequance_id'] = isset($data['sequance_id']) ? $data['sequance_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['manual_discount'] = isset($data['manual_discount']) ? $data['manual_discount'] : null;
        $this->container['discountable_amt'] = isset($data['discountable_amt']) ? $data['discountable_amt'] : null;
        $this->container['discountable_qty'] = isset($data['discountable_qty']) ? $data['discountable_qty'] : null;
        $this->container['discount_amt'] = isset($data['discount_amt']) ? $data['discount_amt'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['free_item'] = isset($data['free_item']) ? $data['free_item'] : null;
        $this->container['free_item_qty'] = isset($data['free_item_qty']) ? $data['free_item_qty'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_nbr
     *
     * @return int
     */
    public function getLineNbr()
    {
        return $this->container['line_nbr'];
    }

    /**
     * Sets line_nbr
     *
     * @param int $line_nbr The table &gt; Line number.
     *
     * @return $this
     */
    public function setLineNbr($line_nbr)
    {
        $this->container['line_nbr'] = $line_nbr;

        return $this;
    }

    /**
     * Gets skip_discount
     *
     * @return bool
     */
    public function getSkipDiscount()
    {
        return $this->container['skip_discount'];
    }

    /**
     * Sets skip_discount
     *
     * @param bool $skip_discount The table &gt; Skip discount &gt; A check box that you select to cancel a Group or Document level discount for the document.
     *
     * @return $this
     */
    public function setSkipDiscount($skip_discount)
    {
        $this->container['skip_discount'] = $skip_discount;

        return $this;
    }

    /**
     * Gets discount_code
     *
     * @return string
     */
    public function getDiscountCode()
    {
        return $this->container['discount_code'];
    }

    /**
     * Sets discount_code
     *
     * @param string $discount_code Mandatory field: The table &gt; Discount code* &gt; The discount code of the supplier discount applied to the document automatically or manually.
     *
     * @return $this
     */
    public function setDiscountCode($discount_code)
    {
        $this->container['discount_code'] = $discount_code;

        return $this;
    }

    /**
     * Gets sequance_id
     *
     * @return string
     */
    public function getSequanceId()
    {
        return $this->container['sequance_id'];
    }

    /**
     * Sets sequance_id
     *
     * @param string $sequance_id Mandatory field: The table &gt; Series ID* &gt; The ID of the discount sequence applied to the document.
     *
     * @return $this
     */
    public function setSequanceId($sequance_id)
    {
        $this->container['sequance_id'] = $sequance_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The table &gt; Type &gt; The type of discount applied to the document (Group or Document).
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets manual_discount
     *
     * @return bool
     */
    public function getManualDiscount()
    {
        return $this->container['manual_discount'];
    }

    /**
     * Sets manual_discount
     *
     * @param bool $manual_discount The table &gt; Manual discount &gt; A check box that indicates (if selected) that the supplier discount shown in this row has been applied manually .
     *
     * @return $this
     */
    public function setManualDiscount($manual_discount)
    {
        $this->container['manual_discount'] = $manual_discount;

        return $this;
    }

    /**
     * Gets discountable_amt
     *
     * @return double
     */
    public function getDiscountableAmt()
    {
        return $this->container['discountable_amt'];
    }

    /**
     * Sets discountable_amt
     *
     * @param double $discountable_amt The table &gt; Discountable amt. &gt; The amount used as a base for discount calculation if the discount is defined as based on the amount.
     *
     * @return $this
     */
    public function setDiscountableAmt($discountable_amt)
    {
        $this->container['discountable_amt'] = $discountable_amt;

        return $this;
    }

    /**
     * Gets discountable_qty
     *
     * @return double
     */
    public function getDiscountableQty()
    {
        return $this->container['discountable_qty'];
    }

    /**
     * Sets discountable_qty
     *
     * @param double $discountable_qty The table &gt; Discountable qty. &gt; The quantity used as a base for discount calculation if the discount is defined as based on the item quantity.
     *
     * @return $this
     */
    public function setDiscountableQty($discountable_qty)
    {
        $this->container['discountable_qty'] = $discountable_qty;

        return $this;
    }

    /**
     * Gets discount_amt
     *
     * @return double
     */
    public function getDiscountAmt()
    {
        return $this->container['discount_amt'];
    }

    /**
     * Sets discount_amt
     *
     * @param double $discount_amt The table &gt; Discount amt. &gt; The amount of the discount.
     *
     * @return $this
     */
    public function setDiscountAmt($discount_amt)
    {
        $this->container['discount_amt'] = $discount_amt;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return double
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param double $discount The table &gt; Discount percent &gt; The discount percent if by definition the discount is calculated as a percentage.
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets free_item
     *
     * @return int
     */
    public function getFreeItem()
    {
        return $this->container['free_item'];
    }

    /**
     * Sets free_item
     *
     * @param int $free_item The table &gt; Free item &gt; The item ID of the free item, if one is specified by the discount applied to the document.
     *
     * @return $this
     */
    public function setFreeItem($free_item)
    {
        $this->container['free_item'] = $free_item;

        return $this;
    }

    /**
     * Gets free_item_qty
     *
     * @return double
     */
    public function getFreeItemQty()
    {
        return $this->container['free_item_qty'];
    }

    /**
     * Sets free_item_qty
     *
     * @param double $free_item_qty The table &gt; Free item qty.&gt; The quantity of the free item to be added as the discount.
     *
     * @return $this
     */
    public function setFreeItemQty($free_item_qty)
    {
        $this->container['free_item_qty'] = $free_item_qty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


