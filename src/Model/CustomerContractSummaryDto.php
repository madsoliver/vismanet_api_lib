<?php
/**
 * CustomerContractSummaryDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * CustomerContractSummaryDto Class Doc Comment
 *
 * @category Class
 * @description This class represents the CustomerContractSummary in CustomerContractController. Used for getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerContractSummaryDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerContractSummaryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'setup_date' => '\DateTime',
        'activation_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'termination_date' => '\DateTime',
        'mass_renewal' => 'bool',
        'renewal_point' => 'int',
        'grace_period' => 'int',
        'currency' => 'string',
        'invoicing_schedule_starts_on' => '\DateTime',
        'invoicing_period' => 'string',
        'last_invoicing_date' => '\DateTime',
        'next_invoicing_date' => '\DateTime',
        'invoice_to' => 'string',
        'invoice_account' => 'object',
        'invoice_location' => '\Ekstralys\VismaNetApi\Model\LocationNameDescriptionDto',
        'owner' => 'object',
        'sales_person' => 'object',
        'case_count_item' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'setup_date' => 'date-time',
        'activation_date' => 'date-time',
        'expiration_date' => 'date-time',
        'termination_date' => 'date-time',
        'mass_renewal' => null,
        'renewal_point' => 'int32',
        'grace_period' => 'int32',
        'currency' => null,
        'invoicing_schedule_starts_on' => 'date-time',
        'invoicing_period' => null,
        'last_invoicing_date' => 'date-time',
        'next_invoicing_date' => 'date-time',
        'invoice_to' => null,
        'invoice_account' => null,
        'invoice_location' => null,
        'owner' => null,
        'sales_person' => null,
        'case_count_item' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'setup_date' => 'setupDate',
        'activation_date' => 'activationDate',
        'expiration_date' => 'expirationDate',
        'termination_date' => 'terminationDate',
        'mass_renewal' => 'massRenewal',
        'renewal_point' => 'renewalPoint',
        'grace_period' => 'gracePeriod',
        'currency' => 'currency',
        'invoicing_schedule_starts_on' => 'invoicingScheduleStartsOn',
        'invoicing_period' => 'invoicingPeriod',
        'last_invoicing_date' => 'lastInvoicingDate',
        'next_invoicing_date' => 'nextInvoicingDate',
        'invoice_to' => 'invoiceTo',
        'invoice_account' => 'invoiceAccount',
        'invoice_location' => 'invoiceLocation',
        'owner' => 'owner',
        'sales_person' => 'salesPerson',
        'case_count_item' => 'caseCountItem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'setup_date' => 'setSetupDate',
        'activation_date' => 'setActivationDate',
        'expiration_date' => 'setExpirationDate',
        'termination_date' => 'setTerminationDate',
        'mass_renewal' => 'setMassRenewal',
        'renewal_point' => 'setRenewalPoint',
        'grace_period' => 'setGracePeriod',
        'currency' => 'setCurrency',
        'invoicing_schedule_starts_on' => 'setInvoicingScheduleStartsOn',
        'invoicing_period' => 'setInvoicingPeriod',
        'last_invoicing_date' => 'setLastInvoicingDate',
        'next_invoicing_date' => 'setNextInvoicingDate',
        'invoice_to' => 'setInvoiceTo',
        'invoice_account' => 'setInvoiceAccount',
        'invoice_location' => 'setInvoiceLocation',
        'owner' => 'setOwner',
        'sales_person' => 'setSalesPerson',
        'case_count_item' => 'setCaseCountItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'setup_date' => 'getSetupDate',
        'activation_date' => 'getActivationDate',
        'expiration_date' => 'getExpirationDate',
        'termination_date' => 'getTerminationDate',
        'mass_renewal' => 'getMassRenewal',
        'renewal_point' => 'getRenewalPoint',
        'grace_period' => 'getGracePeriod',
        'currency' => 'getCurrency',
        'invoicing_schedule_starts_on' => 'getInvoicingScheduleStartsOn',
        'invoicing_period' => 'getInvoicingPeriod',
        'last_invoicing_date' => 'getLastInvoicingDate',
        'next_invoicing_date' => 'getNextInvoicingDate',
        'invoice_to' => 'getInvoiceTo',
        'invoice_account' => 'getInvoiceAccount',
        'invoice_location' => 'getInvoiceLocation',
        'owner' => 'getOwner',
        'sales_person' => 'getSalesPerson',
        'case_count_item' => 'getCaseCountItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INVOICING_PERIOD_STATEMENT = 'Statement';
    const INVOICING_PERIOD_QUARTERLY = 'Quarterly';
    const INVOICING_PERIOD_MONTHLY = 'Monthly';
    const INVOICING_PERIOD_ANNUAL = 'Annual';
    const INVOICING_PERIOD_SEMI_ANNUAL = 'SemiAnnual';
    const INVOICING_PERIOD_WEEKLY = 'Weekly';
    const INVOICING_PERIOD_ON_DEMAND = 'OnDemand';
    const INVOICE_TO_PARENT_ACCOUNT = 'ParentAccount';
    const INVOICE_TO_CUSTOMER_ACCOUNT = 'CustomerAccount';
    const INVOICE_TO_SPECIFIC_ACCOUNT = 'SpecificAccount';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoicingPeriodAllowableValues()
    {
        return [
            self::INVOICING_PERIOD_STATEMENT,
            self::INVOICING_PERIOD_QUARTERLY,
            self::INVOICING_PERIOD_MONTHLY,
            self::INVOICING_PERIOD_ANNUAL,
            self::INVOICING_PERIOD_SEMI_ANNUAL,
            self::INVOICING_PERIOD_WEEKLY,
            self::INVOICING_PERIOD_ON_DEMAND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceToAllowableValues()
    {
        return [
            self::INVOICE_TO_PARENT_ACCOUNT,
            self::INVOICE_TO_CUSTOMER_ACCOUNT,
            self::INVOICE_TO_SPECIFIC_ACCOUNT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['setup_date'] = isset($data['setup_date']) ? $data['setup_date'] : null;
        $this->container['activation_date'] = isset($data['activation_date']) ? $data['activation_date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['termination_date'] = isset($data['termination_date']) ? $data['termination_date'] : null;
        $this->container['mass_renewal'] = isset($data['mass_renewal']) ? $data['mass_renewal'] : null;
        $this->container['renewal_point'] = isset($data['renewal_point']) ? $data['renewal_point'] : null;
        $this->container['grace_period'] = isset($data['grace_period']) ? $data['grace_period'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['invoicing_schedule_starts_on'] = isset($data['invoicing_schedule_starts_on']) ? $data['invoicing_schedule_starts_on'] : null;
        $this->container['invoicing_period'] = isset($data['invoicing_period']) ? $data['invoicing_period'] : null;
        $this->container['last_invoicing_date'] = isset($data['last_invoicing_date']) ? $data['last_invoicing_date'] : null;
        $this->container['next_invoicing_date'] = isset($data['next_invoicing_date']) ? $data['next_invoicing_date'] : null;
        $this->container['invoice_to'] = isset($data['invoice_to']) ? $data['invoice_to'] : null;
        $this->container['invoice_account'] = isset($data['invoice_account']) ? $data['invoice_account'] : null;
        $this->container['invoice_location'] = isset($data['invoice_location']) ? $data['invoice_location'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['sales_person'] = isset($data['sales_person']) ? $data['sales_person'] : null;
        $this->container['case_count_item'] = isset($data['case_count_item']) ? $data['case_count_item'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInvoicingPeriodAllowableValues();
        if (!is_null($this->container['invoicing_period']) && !in_array($this->container['invoicing_period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'invoicing_period', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInvoiceToAllowableValues();
        if (!is_null($this->container['invoice_to']) && !in_array($this->container['invoice_to'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'invoice_to', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets setup_date
     *
     * @return \DateTime
     */
    public function getSetupDate()
    {
        return $this->container['setup_date'];
    }

    /**
     * Sets setup_date
     *
     * @param \DateTime $setup_date Mandatory field: Contract settings section &gt; Setup date* &gt; The date of contract setup.
     *
     * @return $this
     */
    public function setSetupDate($setup_date)
    {
        $this->container['setup_date'] = $setup_date;

        return $this;
    }

    /**
     * Gets activation_date
     *
     * @return \DateTime
     */
    public function getActivationDate()
    {
        return $this->container['activation_date'];
    }

    /**
     * Sets activation_date
     *
     * @param \DateTime $activation_date Contract settings section &gt; Activation date &gt; The date to initiate the provision of the contract services.
     *
     * @return $this
     */
    public function setActivationDate($activation_date)
    {
        $this->container['activation_date'] = $activation_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date Contract settings section &gt; Expiration date &gt; The date when the contract expires.
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets termination_date
     *
     * @return \DateTime
     */
    public function getTerminationDate()
    {
        return $this->container['termination_date'];
    }

    /**
     * Sets termination_date
     *
     * @param \DateTime $termination_date Contract settings section &gt; Termination date &gt; The date when the contract will be cancelled; no services will be provided.
     *
     * @return $this
     */
    public function setTerminationDate($termination_date)
    {
        $this->container['termination_date'] = $termination_date;

        return $this;
    }

    /**
     * Gets mass_renewal
     *
     * @return bool
     */
    public function getMassRenewal()
    {
        return $this->container['mass_renewal'];
    }

    /**
     * Sets mass_renewal
     *
     * @param bool $mass_renewal Contract settings section &gt; Mass renewal &gt; A check box indicating renewal of all contract at expiration date.
     *
     * @return $this
     */
    public function setMassRenewal($mass_renewal)
    {
        $this->container['mass_renewal'] = $mass_renewal;

        return $this;
    }

    /**
     * Gets renewal_point
     *
     * @return int
     */
    public function getRenewalPoint()
    {
        return $this->container['renewal_point'];
    }

    /**
     * Sets renewal_point
     *
     * @param int $renewal_point Contract settings section &gt; Renewal point &gt; The number of days before expiration where the renewal process are to begin.
     *
     * @return $this
     */
    public function setRenewalPoint($renewal_point)
    {
        $this->container['renewal_point'] = $renewal_point;

        return $this;
    }

    /**
     * Gets grace_period
     *
     * @return int
     */
    public function getGracePeriod()
    {
        return $this->container['grace_period'];
    }

    /**
     * Sets grace_period
     *
     * @param int $grace_period Contract settings section &gt; Grace period &gt; The number of days after the expiration date where the contract can still be renewed.
     *
     * @return $this
     */
    public function setGracePeriod($grace_period)
    {
        $this->container['grace_period'] = $grace_period;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Mandatory field: Contract settings section &gt; Currency* &gt; The currency used in the contract.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets invoicing_schedule_starts_on
     *
     * @return \DateTime
     */
    public function getInvoicingScheduleStartsOn()
    {
        return $this->container['invoicing_schedule_starts_on'];
    }

    /**
     * Sets invoicing_schedule_starts_on
     *
     * @param \DateTime $invoicing_schedule_starts_on Invoicing schedule section &gt; Invoice schedule starts on &gt; A read-only field that displays the start date of the first invoicing period.
     *
     * @return $this
     */
    public function setInvoicingScheduleStartsOn($invoicing_schedule_starts_on)
    {
        $this->container['invoicing_schedule_starts_on'] = $invoicing_schedule_starts_on;

        return $this;
    }

    /**
     * Gets invoicing_period
     *
     * @return string
     */
    public function getInvoicingPeriod()
    {
        return $this->container['invoicing_period'];
    }

    /**
     * Sets invoicing_period
     *
     * @param string $invoicing_period Mandatory field: Invoicing schedule section &gt; Invoicing period* &gt; The type of invoicing schedule, which can be one of the following options: Weekly, Monthly; Quarterly, Half a year, Yearly, On demand, Statement based.
     *
     * @return $this
     */
    public function setInvoicingPeriod($invoicing_period)
    {
        $allowedValues = $this->getInvoicingPeriodAllowableValues();
        if (!is_null($invoicing_period) && !in_array($invoicing_period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'invoicing_period', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoicing_period'] = $invoicing_period;

        return $this;
    }

    /**
     * Gets last_invoicing_date
     *
     * @return \DateTime
     */
    public function getLastInvoicingDate()
    {
        return $this->container['last_invoicing_date'];
    }

    /**
     * Sets last_invoicing_date
     *
     * @param \DateTime $last_invoicing_date Invoicing schedule section &gt; Last invoicing date &gt; A read-only field that shows the date when the invoicing was performed most recently.
     *
     * @return $this
     */
    public function setLastInvoicingDate($last_invoicing_date)
    {
        $this->container['last_invoicing_date'] = $last_invoicing_date;

        return $this;
    }

    /**
     * Gets next_invoicing_date
     *
     * @return \DateTime
     */
    public function getNextInvoicingDate()
    {
        return $this->container['next_invoicing_date'];
    }

    /**
     * Sets next_invoicing_date
     *
     * @param \DateTime $next_invoicing_date Invoicing schedule section &gt; Next invoicing date &gt; The date of the next invoicing invoice, according to the invoicing schedule.
     *
     * @return $this
     */
    public function setNextInvoicingDate($next_invoicing_date)
    {
        $this->container['next_invoicing_date'] = $next_invoicing_date;

        return $this;
    }

    /**
     * Gets invoice_to
     *
     * @return string
     */
    public function getInvoiceTo()
    {
        return $this->container['invoice_to'];
    }

    /**
     * Sets invoice_to
     *
     * @param string $invoice_to Invoice information section &gt; Invoice to &gt; The setting that defines the customer account to be invoiced for a contract. The following options are available: Parent account, Customer account, Specific account.
     *
     * @return $this
     */
    public function setInvoiceTo($invoice_to)
    {
        $allowedValues = $this->getInvoiceToAllowableValues();
        if (!is_null($invoice_to) && !in_array($invoice_to, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'invoice_to', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_to'] = $invoice_to;

        return $this;
    }

    /**
     * Gets invoice_account
     *
     * @return object
     */
    public function getInvoiceAccount()
    {
        return $this->container['invoice_account'];
    }

    /**
     * Sets invoice_account
     *
     * @param object $invoice_account Invoice information section &gt; Account &gt;  The specific account that is to be invoiced for contract services.
     *
     * @return $this
     */
    public function setInvoiceAccount($invoice_account)
    {
        $this->container['invoice_account'] = $invoice_account;

        return $this;
    }

    /**
     * Gets invoice_location
     *
     * @return \Ekstralys\VismaNetApi\Model\LocationNameDescriptionDto
     */
    public function getInvoiceLocation()
    {
        return $this->container['invoice_location'];
    }

    /**
     * Sets invoice_location
     *
     * @param \Ekstralys\VismaNetApi\Model\LocationNameDescriptionDto $invoice_location Invoice information section &gt; Location &gt; The customer location associated with the account the contract is invoiced to.
     *
     * @return $this
     */
    public function setInvoiceLocation($invoice_location)
    {
        $this->container['invoice_location'] = $invoice_location;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return object
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param object $owner Contract management section &gt; Owner &gt; The owner of the contract.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets sales_person
     *
     * @return object
     */
    public function getSalesPerson()
    {
        return $this->container['sales_person'];
    }

    /**
     * Sets sales_person
     *
     * @param object $sales_person Contract management &gt; Salesperson &gt; The salesperson associated with the contract.
     *
     * @return $this
     */
    public function setSalesPerson($sales_person)
    {
        $this->container['sales_person'] = $sales_person;

        return $this;
    }

    /**
     * Gets case_count_item
     *
     * @return object
     */
    public function getCaseCountItem()
    {
        return $this->container['case_count_item'];
    }

    /**
     * Sets case_count_item
     *
     * @param object $case_count_item Contract management section &gt; Case count item &gt; A non-stock item used for counting cases associated with the contract.
     *
     * @return $this
     */
    public function setCaseCountItem($case_count_item)
    {
        $this->container['case_count_item'] = $case_count_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


