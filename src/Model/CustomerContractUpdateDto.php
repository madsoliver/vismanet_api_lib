<?php
/**
 * CustomerContractUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * CustomerContractUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerContractUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerContractUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contract_id' => 'object',
        'contract_template' => 'object',
        'customer' => 'object',
        'location' => 'object',
        'description' => 'object',
        'setup_date' => 'object',
        'activation_date' => 'object',
        'expiration_date' => 'object',
        'mass_renewal' => 'object',
        'renewal_point' => 'object',
        'grace_period' => 'object',
        'currency' => 'object',
        'invoice_to' => 'object',
        'invoice_account' => 'object',
        'invoice_location' => 'object',
        'owner' => 'object',
        'sales_person' => 'object',
        'details' => '\Ekstralys\VismaNetApi\Model\CustomerContractDetailsUpdateDto[]',
        'attribute_lines' => '\Ekstralys\VismaNetApi\Model\AttributeLineUpdateDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contract_id' => null,
        'contract_template' => null,
        'customer' => null,
        'location' => null,
        'description' => null,
        'setup_date' => null,
        'activation_date' => null,
        'expiration_date' => null,
        'mass_renewal' => null,
        'renewal_point' => null,
        'grace_period' => null,
        'currency' => null,
        'invoice_to' => null,
        'invoice_account' => null,
        'invoice_location' => null,
        'owner' => null,
        'sales_person' => null,
        'details' => null,
        'attribute_lines' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contract_id' => 'contractId',
        'contract_template' => 'contractTemplate',
        'customer' => 'customer',
        'location' => 'location',
        'description' => 'description',
        'setup_date' => 'setupDate',
        'activation_date' => 'activationDate',
        'expiration_date' => 'expirationDate',
        'mass_renewal' => 'massRenewal',
        'renewal_point' => 'renewalPoint',
        'grace_period' => 'gracePeriod',
        'currency' => 'currency',
        'invoice_to' => 'invoiceTo',
        'invoice_account' => 'invoiceAccount',
        'invoice_location' => 'invoiceLocation',
        'owner' => 'owner',
        'sales_person' => 'salesPerson',
        'details' => 'details',
        'attribute_lines' => 'attributeLines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contract_id' => 'setContractId',
        'contract_template' => 'setContractTemplate',
        'customer' => 'setCustomer',
        'location' => 'setLocation',
        'description' => 'setDescription',
        'setup_date' => 'setSetupDate',
        'activation_date' => 'setActivationDate',
        'expiration_date' => 'setExpirationDate',
        'mass_renewal' => 'setMassRenewal',
        'renewal_point' => 'setRenewalPoint',
        'grace_period' => 'setGracePeriod',
        'currency' => 'setCurrency',
        'invoice_to' => 'setInvoiceTo',
        'invoice_account' => 'setInvoiceAccount',
        'invoice_location' => 'setInvoiceLocation',
        'owner' => 'setOwner',
        'sales_person' => 'setSalesPerson',
        'details' => 'setDetails',
        'attribute_lines' => 'setAttributeLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contract_id' => 'getContractId',
        'contract_template' => 'getContractTemplate',
        'customer' => 'getCustomer',
        'location' => 'getLocation',
        'description' => 'getDescription',
        'setup_date' => 'getSetupDate',
        'activation_date' => 'getActivationDate',
        'expiration_date' => 'getExpirationDate',
        'mass_renewal' => 'getMassRenewal',
        'renewal_point' => 'getRenewalPoint',
        'grace_period' => 'getGracePeriod',
        'currency' => 'getCurrency',
        'invoice_to' => 'getInvoiceTo',
        'invoice_account' => 'getInvoiceAccount',
        'invoice_location' => 'getInvoiceLocation',
        'owner' => 'getOwner',
        'sales_person' => 'getSalesPerson',
        'details' => 'getDetails',
        'attribute_lines' => 'getAttributeLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contract_id'] = isset($data['contract_id']) ? $data['contract_id'] : null;
        $this->container['contract_template'] = isset($data['contract_template']) ? $data['contract_template'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['setup_date'] = isset($data['setup_date']) ? $data['setup_date'] : null;
        $this->container['activation_date'] = isset($data['activation_date']) ? $data['activation_date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['mass_renewal'] = isset($data['mass_renewal']) ? $data['mass_renewal'] : null;
        $this->container['renewal_point'] = isset($data['renewal_point']) ? $data['renewal_point'] : null;
        $this->container['grace_period'] = isset($data['grace_period']) ? $data['grace_period'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['invoice_to'] = isset($data['invoice_to']) ? $data['invoice_to'] : null;
        $this->container['invoice_account'] = isset($data['invoice_account']) ? $data['invoice_account'] : null;
        $this->container['invoice_location'] = isset($data['invoice_location']) ? $data['invoice_location'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['sales_person'] = isset($data['sales_person']) ? $data['sales_person'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['attribute_lines'] = isset($data['attribute_lines']) ? $data['attribute_lines'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contract_id
     *
     * @return object
     */
    public function getContractId()
    {
        return $this->container['contract_id'];
    }

    /**
     * Sets contract_id
     *
     * @param object $contract_id Mandatory for POST, not applicable for PUT.
     *
     * @return $this
     */
    public function setContractId($contract_id)
    {
        $this->container['contract_id'] = $contract_id;

        return $this;
    }

    /**
     * Gets contract_template
     *
     * @return object
     */
    public function getContractTemplate()
    {
        return $this->container['contract_template'];
    }

    /**
     * Sets contract_template
     *
     * @param object $contract_template Mandatory for POST, not applicable for PUT.
     *
     * @return $this
     */
    public function setContractTemplate($contract_template)
    {
        $this->container['contract_template'] = $contract_template;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return object
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param object $customer Mandatory for POST, not applicable for PUT.
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets description
     *
     * @return object
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param object $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets setup_date
     *
     * @return object
     */
    public function getSetupDate()
    {
        return $this->container['setup_date'];
    }

    /**
     * Sets setup_date
     *
     * @param object $setup_date setup_date
     *
     * @return $this
     */
    public function setSetupDate($setup_date)
    {
        $this->container['setup_date'] = $setup_date;

        return $this;
    }

    /**
     * Gets activation_date
     *
     * @return object
     */
    public function getActivationDate()
    {
        return $this->container['activation_date'];
    }

    /**
     * Sets activation_date
     *
     * @param object $activation_date activation_date
     *
     * @return $this
     */
    public function setActivationDate($activation_date)
    {
        $this->container['activation_date'] = $activation_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return object
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param object $expiration_date expiration_date
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets mass_renewal
     *
     * @return object
     */
    public function getMassRenewal()
    {
        return $this->container['mass_renewal'];
    }

    /**
     * Sets mass_renewal
     *
     * @param object $mass_renewal mass_renewal
     *
     * @return $this
     */
    public function setMassRenewal($mass_renewal)
    {
        $this->container['mass_renewal'] = $mass_renewal;

        return $this;
    }

    /**
     * Gets renewal_point
     *
     * @return object
     */
    public function getRenewalPoint()
    {
        return $this->container['renewal_point'];
    }

    /**
     * Sets renewal_point
     *
     * @param object $renewal_point renewal_point
     *
     * @return $this
     */
    public function setRenewalPoint($renewal_point)
    {
        $this->container['renewal_point'] = $renewal_point;

        return $this;
    }

    /**
     * Gets grace_period
     *
     * @return object
     */
    public function getGracePeriod()
    {
        return $this->container['grace_period'];
    }

    /**
     * Sets grace_period
     *
     * @param object $grace_period grace_period
     *
     * @return $this
     */
    public function setGracePeriod($grace_period)
    {
        $this->container['grace_period'] = $grace_period;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return object
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param object $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets invoice_to
     *
     * @return object
     */
    public function getInvoiceTo()
    {
        return $this->container['invoice_to'];
    }

    /**
     * Sets invoice_to
     *
     * @param object $invoice_to invoice_to
     *
     * @return $this
     */
    public function setInvoiceTo($invoice_to)
    {
        $this->container['invoice_to'] = $invoice_to;

        return $this;
    }

    /**
     * Gets invoice_account
     *
     * @return object
     */
    public function getInvoiceAccount()
    {
        return $this->container['invoice_account'];
    }

    /**
     * Sets invoice_account
     *
     * @param object $invoice_account invoice_account
     *
     * @return $this
     */
    public function setInvoiceAccount($invoice_account)
    {
        $this->container['invoice_account'] = $invoice_account;

        return $this;
    }

    /**
     * Gets invoice_location
     *
     * @return object
     */
    public function getInvoiceLocation()
    {
        return $this->container['invoice_location'];
    }

    /**
     * Sets invoice_location
     *
     * @param object $invoice_location invoice_location
     *
     * @return $this
     */
    public function setInvoiceLocation($invoice_location)
    {
        $this->container['invoice_location'] = $invoice_location;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return object
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param object $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets sales_person
     *
     * @return object
     */
    public function getSalesPerson()
    {
        return $this->container['sales_person'];
    }

    /**
     * Sets sales_person
     *
     * @param object $sales_person sales_person
     *
     * @return $this
     */
    public function setSalesPerson($sales_person)
    {
        $this->container['sales_person'] = $sales_person;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Ekstralys\VismaNetApi\Model\CustomerContractDetailsUpdateDto[]
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Ekstralys\VismaNetApi\Model\CustomerContractDetailsUpdateDto[] $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets attribute_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\AttributeLineUpdateDto[]
     */
    public function getAttributeLines()
    {
        return $this->container['attribute_lines'];
    }

    /**
     * Sets attribute_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\AttributeLineUpdateDto[] $attribute_lines attribute_lines
     *
     * @return $this
     */
    public function setAttributeLines($attribute_lines)
    {
        $this->container['attribute_lines'] = $attribute_lines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


