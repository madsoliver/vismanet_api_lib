<?php
/**
 * CustomerContractDetailsUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * CustomerContractDetailsUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerContractDetailsUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerContractDetailsUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'operation' => 'string',
        'contract_detail_id' => 'object',
        'item_code' => 'object',
        'included' => 'object',
        'setup_price' => 'object',
        'recurring_price' => 'object',
        'extra_usage_price' => 'object',
        'renewal_price' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'operation' => null,
        'contract_detail_id' => null,
        'item_code' => null,
        'included' => null,
        'setup_price' => null,
        'recurring_price' => null,
        'extra_usage_price' => null,
        'renewal_price' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'operation' => 'operation',
        'contract_detail_id' => 'contractDetailId',
        'item_code' => 'itemCode',
        'included' => 'included',
        'setup_price' => 'setupPrice',
        'recurring_price' => 'recurringPrice',
        'extra_usage_price' => 'extraUsagePrice',
        'renewal_price' => 'renewalPrice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'operation' => 'setOperation',
        'contract_detail_id' => 'setContractDetailId',
        'item_code' => 'setItemCode',
        'included' => 'setIncluded',
        'setup_price' => 'setSetupPrice',
        'recurring_price' => 'setRecurringPrice',
        'extra_usage_price' => 'setExtraUsagePrice',
        'renewal_price' => 'setRenewalPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'operation' => 'getOperation',
        'contract_detail_id' => 'getContractDetailId',
        'item_code' => 'getItemCode',
        'included' => 'getIncluded',
        'setup_price' => 'getSetupPrice',
        'recurring_price' => 'getRecurringPrice',
        'extra_usage_price' => 'getExtraUsagePrice',
        'renewal_price' => 'getRenewalPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OPERATION_INSERT = 'Insert';
    const OPERATION_UPDATE = 'Update';
    const OPERATION_DELETE = 'Delete';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_INSERT,
            self::OPERATION_UPDATE,
            self::OPERATION_DELETE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['contract_detail_id'] = isset($data['contract_detail_id']) ? $data['contract_detail_id'] : null;
        $this->container['item_code'] = isset($data['item_code']) ? $data['item_code'] : null;
        $this->container['included'] = isset($data['included']) ? $data['included'] : null;
        $this->container['setup_price'] = isset($data['setup_price']) ? $data['setup_price'] : null;
        $this->container['recurring_price'] = isset($data['recurring_price']) ? $data['recurring_price'] : null;
        $this->container['extra_usage_price'] = isset($data['extra_usage_price']) ? $data['extra_usage_price'] : null;
        $this->container['renewal_price'] = isset($data['renewal_price']) ? $data['renewal_price'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation operation
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($operation) && !in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets contract_detail_id
     *
     * @return object
     */
    public function getContractDetailId()
    {
        return $this->container['contract_detail_id'];
    }

    /**
     * Sets contract_detail_id
     *
     * @param object $contract_detail_id contract_detail_id
     *
     * @return $this
     */
    public function setContractDetailId($contract_detail_id)
    {
        $this->container['contract_detail_id'] = $contract_detail_id;

        return $this;
    }

    /**
     * Gets item_code
     *
     * @return object
     */
    public function getItemCode()
    {
        return $this->container['item_code'];
    }

    /**
     * Sets item_code
     *
     * @param object $item_code item_code
     *
     * @return $this
     */
    public function setItemCode($item_code)
    {
        $this->container['item_code'] = $item_code;

        return $this;
    }

    /**
     * Gets included
     *
     * @return object
     */
    public function getIncluded()
    {
        return $this->container['included'];
    }

    /**
     * Sets included
     *
     * @param object $included included
     *
     * @return $this
     */
    public function setIncluded($included)
    {
        $this->container['included'] = $included;

        return $this;
    }

    /**
     * Gets setup_price
     *
     * @return object
     */
    public function getSetupPrice()
    {
        return $this->container['setup_price'];
    }

    /**
     * Sets setup_price
     *
     * @param object $setup_price setup_price
     *
     * @return $this
     */
    public function setSetupPrice($setup_price)
    {
        $this->container['setup_price'] = $setup_price;

        return $this;
    }

    /**
     * Gets recurring_price
     *
     * @return object
     */
    public function getRecurringPrice()
    {
        return $this->container['recurring_price'];
    }

    /**
     * Sets recurring_price
     *
     * @param object $recurring_price recurring_price
     *
     * @return $this
     */
    public function setRecurringPrice($recurring_price)
    {
        $this->container['recurring_price'] = $recurring_price;

        return $this;
    }

    /**
     * Gets extra_usage_price
     *
     * @return object
     */
    public function getExtraUsagePrice()
    {
        return $this->container['extra_usage_price'];
    }

    /**
     * Sets extra_usage_price
     *
     * @param object $extra_usage_price extra_usage_price
     *
     * @return $this
     */
    public function setExtraUsagePrice($extra_usage_price)
    {
        $this->container['extra_usage_price'] = $extra_usage_price;

        return $this;
    }

    /**
     * Gets renewal_price
     *
     * @return object
     */
    public function getRenewalPrice()
    {
        return $this->container['renewal_price'];
    }

    /**
     * Sets renewal_price
     *
     * @param object $renewal_price renewal_price
     *
     * @return $this
     */
    public function setRenewalPrice($renewal_price)
    {
        $this->container['renewal_price'] = $renewal_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


