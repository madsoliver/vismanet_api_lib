<?php
/**
 * ProjectTaskUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * ProjectTaskUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectTaskUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectTaskUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'task_id' => 'object',
        'description' => 'object',
        'planned_start' => 'object',
        'planned_end' => 'object',
        'start_date' => 'object',
        'rate_table' => 'object',
        'status' => 'object',
        'visibility' => 'object',
        'restrict_employees' => 'object',
        'employees' => '\Ekstralys\VismaNetApi\Model\TaskEmployeeUpdateDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'task_id' => null,
        'description' => null,
        'planned_start' => null,
        'planned_end' => null,
        'start_date' => null,
        'rate_table' => null,
        'status' => null,
        'visibility' => null,
        'restrict_employees' => null,
        'employees' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'task_id' => 'taskId',
        'description' => 'description',
        'planned_start' => 'plannedStart',
        'planned_end' => 'plannedEnd',
        'start_date' => 'startDate',
        'rate_table' => 'rateTable',
        'status' => 'status',
        'visibility' => 'visibility',
        'restrict_employees' => 'restrictEmployees',
        'employees' => 'employees'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'task_id' => 'setTaskId',
        'description' => 'setDescription',
        'planned_start' => 'setPlannedStart',
        'planned_end' => 'setPlannedEnd',
        'start_date' => 'setStartDate',
        'rate_table' => 'setRateTable',
        'status' => 'setStatus',
        'visibility' => 'setVisibility',
        'restrict_employees' => 'setRestrictEmployees',
        'employees' => 'setEmployees'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'task_id' => 'getTaskId',
        'description' => 'getDescription',
        'planned_start' => 'getPlannedStart',
        'planned_end' => 'getPlannedEnd',
        'start_date' => 'getStartDate',
        'rate_table' => 'getRateTable',
        'status' => 'getStatus',
        'visibility' => 'getVisibility',
        'restrict_employees' => 'getRestrictEmployees',
        'employees' => 'getEmployees'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['planned_start'] = isset($data['planned_start']) ? $data['planned_start'] : null;
        $this->container['planned_end'] = isset($data['planned_end']) ? $data['planned_end'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['rate_table'] = isset($data['rate_table']) ? $data['rate_table'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['restrict_employees'] = isset($data['restrict_employees']) ? $data['restrict_employees'] : null;
        $this->container['employees'] = isset($data['employees']) ? $data['employees'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets task_id
     *
     * @return object
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param object $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return object
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param object $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets planned_start
     *
     * @return object
     */
    public function getPlannedStart()
    {
        return $this->container['planned_start'];
    }

    /**
     * Sets planned_start
     *
     * @param object $planned_start planned_start
     *
     * @return $this
     */
    public function setPlannedStart($planned_start)
    {
        $this->container['planned_start'] = $planned_start;

        return $this;
    }

    /**
     * Gets planned_end
     *
     * @return object
     */
    public function getPlannedEnd()
    {
        return $this->container['planned_end'];
    }

    /**
     * Sets planned_end
     *
     * @param object $planned_end planned_end
     *
     * @return $this
     */
    public function setPlannedEnd($planned_end)
    {
        $this->container['planned_end'] = $planned_end;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return object
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param object $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets rate_table
     *
     * @return object
     */
    public function getRateTable()
    {
        return $this->container['rate_table'];
    }

    /**
     * Sets rate_table
     *
     * @param object $rate_table rate_table
     *
     * @return $this
     */
    public function setRateTable($rate_table)
    {
        $this->container['rate_table'] = $rate_table;

        return $this;
    }

    /**
     * Gets status
     *
     * @return object
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param object $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return object
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param object $visibility visibility
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets restrict_employees
     *
     * @return object
     */
    public function getRestrictEmployees()
    {
        return $this->container['restrict_employees'];
    }

    /**
     * Sets restrict_employees
     *
     * @param object $restrict_employees restrict_employees
     *
     * @return $this
     */
    public function setRestrictEmployees($restrict_employees)
    {
        $this->container['restrict_employees'] = $restrict_employees;

        return $this;
    }

    /**
     * Gets employees
     *
     * @return \Ekstralys\VismaNetApi\Model\TaskEmployeeUpdateDto[]
     */
    public function getEmployees()
    {
        return $this->container['employees'];
    }

    /**
     * Sets employees
     *
     * @param \Ekstralys\VismaNetApi\Model\TaskEmployeeUpdateDto[] $employees employees
     *
     * @return $this
     */
    public function setEmployees($employees)
    {
        $this->container['employees'] = $employees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


