<?php
/**
 * UnitOfMeasureDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * UnitOfMeasureDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UnitOfMeasureDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UnitOfMeasureDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'from_unit' => 'string',
        'to_unit' => 'string',
        'unit_mult_div' => 'string',
        'unit_rate' => 'double',
        'supplementary_measure_unit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'from_unit' => null,
        'to_unit' => null,
        'unit_mult_div' => null,
        'unit_rate' => 'double',
        'supplementary_measure_unit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from_unit' => 'fromUnit',
        'to_unit' => 'toUnit',
        'unit_mult_div' => 'unitMultDiv',
        'unit_rate' => 'unitRate',
        'supplementary_measure_unit' => 'supplementaryMeasureUnit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from_unit' => 'setFromUnit',
        'to_unit' => 'setToUnit',
        'unit_mult_div' => 'setUnitMultDiv',
        'unit_rate' => 'setUnitRate',
        'supplementary_measure_unit' => 'setSupplementaryMeasureUnit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from_unit' => 'getFromUnit',
        'to_unit' => 'getToUnit',
        'unit_mult_div' => 'getUnitMultDiv',
        'unit_rate' => 'getUnitRate',
        'supplementary_measure_unit' => 'getSupplementaryMeasureUnit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const UNIT_MULT_DIV_MULTIPLY = 'Multiply';
    const UNIT_MULT_DIV_DIVIDE = 'Divide';
    const SUPPLEMENTARY_MEASURE_UNIT_NONE = 'None';
    const SUPPLEMENTARY_MEASURE_UNIT_CARATS = 'Carats';
    const SUPPLEMENTARY_MEASURE_UNIT_NUMBER_OF_CELLS = 'NumberOfCells';
    const SUPPLEMENTARY_MEASURE_UNIT_CARRYING_CAPACITY_TONS = 'CarryingCapacityTons';
    const SUPPLEMENTARY_MEASURE_UNIT_GRAM = 'Gram';
    const SUPPLEMENTARY_MEASURE_UNIT_GRAM_FISSILE_ISOTYPES = 'GramFissileIsotypes';
    const SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM = 'Kilogram';
    const SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_CHOLINE_CHLORIDE = 'KilogramCholineChloride';
    const SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_HYDROGEN_PEROXIDE = 'KilogramHydrogenPeroxide';
    const SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_POTASSIUM_OXIDE = 'KilogramPotassiumOxide';
    const SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_POTASSIUM_HYDROXIDE = 'KilogramPotassiumHydroxide';
    const SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_METHYLAMINES = 'KilogramMethylamines';
    const SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_DRAINED_NET_WEIGHT = 'KilogramDrainedNetWeight';
    const SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_SUBSTANCE90_DRY = 'KilogramSubstance90Dry';
    const SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_NITROGEN = 'KilogramNitrogen';
    const SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_SODIUM_HYDROXIDE = 'KilogramSodiumHydroxide';
    const SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_DIPHOSPHORUS_PENTAOXIDE = 'KilogramDiphosphorusPentaoxide';
    const SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_URANIUM = 'KilogramUranium';
    const SUPPLEMENTARY_MEASURE_UNIT_NUMBER_OF_ITEMS = 'NumberOfItems';
    const SUPPLEMENTARY_MEASURE_UNIT_NUMBER_OF_PAIRS = 'NumberOfPairs';
    const SUPPLEMENTARY_MEASURE_UNIT_ITEMS100 = 'Items100';
    const SUPPLEMENTARY_MEASURE_UNIT_ITEMS1000 = 'Items1000';
    const SUPPLEMENTARY_MEASURE_UNIT_KILOWATT_HOURS1000 = 'KilowattHours1000';
    const SUPPLEMENTARY_MEASURE_UNIT_LITRE = 'Litre';
    const SUPPLEMENTARY_MEASURE_UNIT_LITRE_PURE_ALCO = 'LitrePureAlco';
    const SUPPLEMENTARY_MEASURE_UNIT_LITRES1000 = 'Litres1000';
    const SUPPLEMENTARY_MEASURE_UNIT_METER = 'Meter';
    const SUPPLEMENTARY_MEASURE_UNIT_SQUARE_METER = 'SquareMeter';
    const SUPPLEMENTARY_MEASURE_UNIT_CUBIC_METER = 'CubicMeter';
    const SUPPLEMENTARY_MEASURE_UNIT_CUBIC_METERS1000 = 'CubicMeters1000';
    const SUPPLEMENTARY_MEASURE_UNIT_TERAJOULE = 'Terajoule';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitMultDivAllowableValues()
    {
        return [
            self::UNIT_MULT_DIV_MULTIPLY,
            self::UNIT_MULT_DIV_DIVIDE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSupplementaryMeasureUnitAllowableValues()
    {
        return [
            self::SUPPLEMENTARY_MEASURE_UNIT_NONE,
            self::SUPPLEMENTARY_MEASURE_UNIT_CARATS,
            self::SUPPLEMENTARY_MEASURE_UNIT_NUMBER_OF_CELLS,
            self::SUPPLEMENTARY_MEASURE_UNIT_CARRYING_CAPACITY_TONS,
            self::SUPPLEMENTARY_MEASURE_UNIT_GRAM,
            self::SUPPLEMENTARY_MEASURE_UNIT_GRAM_FISSILE_ISOTYPES,
            self::SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM,
            self::SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_CHOLINE_CHLORIDE,
            self::SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_HYDROGEN_PEROXIDE,
            self::SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_POTASSIUM_OXIDE,
            self::SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_POTASSIUM_HYDROXIDE,
            self::SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_METHYLAMINES,
            self::SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_DRAINED_NET_WEIGHT,
            self::SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_SUBSTANCE90_DRY,
            self::SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_NITROGEN,
            self::SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_SODIUM_HYDROXIDE,
            self::SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_DIPHOSPHORUS_PENTAOXIDE,
            self::SUPPLEMENTARY_MEASURE_UNIT_KILOGRAM_URANIUM,
            self::SUPPLEMENTARY_MEASURE_UNIT_NUMBER_OF_ITEMS,
            self::SUPPLEMENTARY_MEASURE_UNIT_NUMBER_OF_PAIRS,
            self::SUPPLEMENTARY_MEASURE_UNIT_ITEMS100,
            self::SUPPLEMENTARY_MEASURE_UNIT_ITEMS1000,
            self::SUPPLEMENTARY_MEASURE_UNIT_KILOWATT_HOURS1000,
            self::SUPPLEMENTARY_MEASURE_UNIT_LITRE,
            self::SUPPLEMENTARY_MEASURE_UNIT_LITRE_PURE_ALCO,
            self::SUPPLEMENTARY_MEASURE_UNIT_LITRES1000,
            self::SUPPLEMENTARY_MEASURE_UNIT_METER,
            self::SUPPLEMENTARY_MEASURE_UNIT_SQUARE_METER,
            self::SUPPLEMENTARY_MEASURE_UNIT_CUBIC_METER,
            self::SUPPLEMENTARY_MEASURE_UNIT_CUBIC_METERS1000,
            self::SUPPLEMENTARY_MEASURE_UNIT_TERAJOULE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from_unit'] = isset($data['from_unit']) ? $data['from_unit'] : null;
        $this->container['to_unit'] = isset($data['to_unit']) ? $data['to_unit'] : null;
        $this->container['unit_mult_div'] = isset($data['unit_mult_div']) ? $data['unit_mult_div'] : null;
        $this->container['unit_rate'] = isset($data['unit_rate']) ? $data['unit_rate'] : null;
        $this->container['supplementary_measure_unit'] = isset($data['supplementary_measure_unit']) ? $data['supplementary_measure_unit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUnitMultDivAllowableValues();
        if (!is_null($this->container['unit_mult_div']) && !in_array($this->container['unit_mult_div'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'unit_mult_div', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSupplementaryMeasureUnitAllowableValues();
        if (!is_null($this->container['supplementary_measure_unit']) && !in_array($this->container['supplementary_measure_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'supplementary_measure_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from_unit
     *
     * @return string
     */
    public function getFromUnit()
    {
        return $this->container['from_unit'];
    }

    /**
     * Sets from_unit
     *
     * @param string $from_unit Mandatory field: The table &gt; From unit* &gt; The unit to be converted.
     *
     * @return $this
     */
    public function setFromUnit($from_unit)
    {
        $this->container['from_unit'] = $from_unit;

        return $this;
    }

    /**
     * Gets to_unit
     *
     * @return string
     */
    public function getToUnit()
    {
        return $this->container['to_unit'];
    }

    /**
     * Sets to_unit
     *
     * @param string $to_unit Mandatory field: The table &gt; To unit* &gt; The unit to which the unit specified in the From unit will be converted with the use of the specified operation and specified conversion factor.
     *
     * @return $this
     */
    public function setToUnit($to_unit)
    {
        $this->container['to_unit'] = $to_unit;

        return $this;
    }

    /**
     * Gets unit_mult_div
     *
     * @return string
     */
    public function getUnitMultDiv()
    {
        return $this->container['unit_mult_div'];
    }

    /**
     * Sets unit_mult_div
     *
     * @param string $unit_mult_div The table &gt; Multiply/divide &gt; The operation to be performed for conversion of the From unit to the To unit.
     *
     * @return $this
     */
    public function setUnitMultDiv($unit_mult_div)
    {
        $allowedValues = $this->getUnitMultDivAllowableValues();
        if (!is_null($unit_mult_div) && !in_array($unit_mult_div, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'unit_mult_div', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unit_mult_div'] = $unit_mult_div;

        return $this;
    }

    /**
     * Gets unit_rate
     *
     * @return double
     */
    public function getUnitRate()
    {
        return $this->container['unit_rate'];
    }

    /**
     * Sets unit_rate
     *
     * @param double $unit_rate The table &gt; Conversion factor &gt; The factor to be used for the unit conversion with the specified operation.
     *
     * @return $this
     */
    public function setUnitRate($unit_rate)
    {
        $this->container['unit_rate'] = $unit_rate;

        return $this;
    }

    /**
     * Gets supplementary_measure_unit
     *
     * @return string
     */
    public function getSupplementaryMeasureUnit()
    {
        return $this->container['supplementary_measure_unit'];
    }

    /**
     * Sets supplementary_measure_unit
     *
     * @param string $supplementary_measure_unit The table &gt; Supplementary measure unit &gt; The supplementary measure unit to which the conversion will be made for Intrastat.
     *
     * @return $this
     */
    public function setSupplementaryMeasureUnit($supplementary_measure_unit)
    {
        $allowedValues = $this->getSupplementaryMeasureUnitAllowableValues();
        if (!is_null($supplementary_measure_unit) && !in_array($supplementary_measure_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'supplementary_measure_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['supplementary_measure_unit'] = $supplementary_measure_unit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


