<?php
/**
 * ProjectTransactionDocumentDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * ProjectTransactionDocumentDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectTransactionDocumentDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectTransactionDocumentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ref_nbr' => 'string',
        'description' => 'string',
        'orig_doc_nbr' => 'string',
        'status' => 'string',
        'module' => 'string',
        'orig_doc_type' => 'string',
        'note' => 'string',
        'lines' => '\Ekstralys\VismaNetApi\Model\ProjectTransactionLineDto[]',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ref_nbr' => null,
        'description' => null,
        'orig_doc_nbr' => null,
        'status' => null,
        'module' => null,
        'orig_doc_type' => null,
        'note' => null,
        'lines' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_nbr' => 'refNbr',
        'description' => 'description',
        'orig_doc_nbr' => 'origDocNbr',
        'status' => 'status',
        'module' => 'module',
        'orig_doc_type' => 'origDocType',
        'note' => 'note',
        'lines' => 'lines',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ref_nbr' => 'setRefNbr',
        'description' => 'setDescription',
        'orig_doc_nbr' => 'setOrigDocNbr',
        'status' => 'setStatus',
        'module' => 'setModule',
        'orig_doc_type' => 'setOrigDocType',
        'note' => 'setNote',
        'lines' => 'setLines',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ref_nbr' => 'getRefNbr',
        'description' => 'getDescription',
        'orig_doc_nbr' => 'getOrigDocNbr',
        'status' => 'getStatus',
        'module' => 'getModule',
        'orig_doc_type' => 'getOrigDocType',
        'note' => 'getNote',
        'lines' => 'getLines',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_HOLD = 'Hold';
    const STATUS_BALANCED = 'Balanced';
    const STATUS_RELEASED = 'Released';
    const MODULE_MODULE_GL = 'ModuleGL';
    const MODULE_MODULE_AP = 'ModuleAP';
    const MODULE_MODULE_AR = 'ModuleAR';
    const MODULE_MODULE_CA = 'ModuleCA';
    const MODULE_MODULE_CM = 'ModuleCM';
    const MODULE_MODULE_IN = 'ModuleIN';
    const MODULE_MODULE_SO = 'ModuleSO';
    const MODULE_MODULE_PO = 'ModulePO';
    const MODULE_MODULE_DR = 'ModuleDR';
    const MODULE_MODULE_FA = 'ModuleFA';
    const MODULE_MODULE_EP = 'ModuleEP';
    const MODULE_MODULE_PM = 'ModulePM';
    const MODULE_MODULE_TX = 'ModuleTX';
    const MODULE_MODULE_CR = 'ModuleCR';
    const ORIG_DOC_TYPE_ALLOCATION = 'Allocation';
    const ORIG_DOC_TYPE_TIMECARD = 'Timecard';
    const ORIG_DOC_TYPE__CASE = 'Case';
    const ORIG_DOC_TYPE_EXPENSE_CLAIM = 'ExpenseClaim';
    const ORIG_DOC_TYPE_EQUIPMENT_TIMECARD = 'EquipmentTimecard';
    const ORIG_DOC_TYPE_ALLOCATION_REVERSAL = 'AllocationReversal';
    const ORIG_DOC_TYPE_REVERSAL = 'Reversal';
    const ORIG_DOC_TYPE_CREDIT_MEMO = 'CreditMemo';
    const ORIG_DOC_TYPE_UNBILLED_REMAINDER = 'UnbilledRemainder';
    const ORIG_DOC_TYPE_PROFORMA_BILLING = 'ProformaBilling';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_HOLD,
            self::STATUS_BALANCED,
            self::STATUS_RELEASED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModuleAllowableValues()
    {
        return [
            self::MODULE_MODULE_GL,
            self::MODULE_MODULE_AP,
            self::MODULE_MODULE_AR,
            self::MODULE_MODULE_CA,
            self::MODULE_MODULE_CM,
            self::MODULE_MODULE_IN,
            self::MODULE_MODULE_SO,
            self::MODULE_MODULE_PO,
            self::MODULE_MODULE_DR,
            self::MODULE_MODULE_FA,
            self::MODULE_MODULE_EP,
            self::MODULE_MODULE_PM,
            self::MODULE_MODULE_TX,
            self::MODULE_MODULE_CR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrigDocTypeAllowableValues()
    {
        return [
            self::ORIG_DOC_TYPE_ALLOCATION,
            self::ORIG_DOC_TYPE_TIMECARD,
            self::ORIG_DOC_TYPE__CASE,
            self::ORIG_DOC_TYPE_EXPENSE_CLAIM,
            self::ORIG_DOC_TYPE_EQUIPMENT_TIMECARD,
            self::ORIG_DOC_TYPE_ALLOCATION_REVERSAL,
            self::ORIG_DOC_TYPE_REVERSAL,
            self::ORIG_DOC_TYPE_CREDIT_MEMO,
            self::ORIG_DOC_TYPE_UNBILLED_REMAINDER,
            self::ORIG_DOC_TYPE_PROFORMA_BILLING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref_nbr'] = isset($data['ref_nbr']) ? $data['ref_nbr'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['orig_doc_nbr'] = isset($data['orig_doc_nbr']) ? $data['orig_doc_nbr'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['module'] = isset($data['module']) ? $data['module'] : null;
        $this->container['orig_doc_type'] = isset($data['orig_doc_type']) ? $data['orig_doc_type'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModuleAllowableValues();
        if (!is_null($this->container['module']) && !in_array($this->container['module'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'module', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrigDocTypeAllowableValues();
        if (!is_null($this->container['orig_doc_type']) && !in_array($this->container['orig_doc_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'orig_doc_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ref_nbr
     *
     * @return string
     */
    public function getRefNbr()
    {
        return $this->container['ref_nbr'];
    }

    /**
     * Sets ref_nbr
     *
     * @param string $ref_nbr The top part &gt; Ref. no. &gt; The reference number of the transaction.
     *
     * @return $this
     */
    public function setRefNbr($ref_nbr)
    {
        $this->container['ref_nbr'] = $ref_nbr;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The top part &gt; Description &gt; The description provided for the transaction.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets orig_doc_nbr
     *
     * @return string
     */
    public function getOrigDocNbr()
    {
        return $this->container['orig_doc_nbr'];
    }

    /**
     * Sets orig_doc_nbr
     *
     * @param string $orig_doc_nbr The top part &gt; Orig. doc. no. &gt; The reference number of the underlying document for the transaction.
     *
     * @return $this
     */
    public function setOrigDocNbr($orig_doc_nbr)
    {
        $this->container['orig_doc_nbr'] = $orig_doc_nbr;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The top part &gt; Status &gt; The status of the transaction. The following statuses are possible: Balanced, Released.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets module
     *
     * @return string
     */
    public function getModule()
    {
        return $this->container['module'];
    }

    /**
     * Sets module
     *
     * @param string $module The top part &gt; Module &gt; The module you create the transactions in.
     *
     * @return $this
     */
    public function setModule($module)
    {
        $allowedValues = $this->getModuleAllowableValues();
        if (!is_null($module) && !in_array($module, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'module', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['module'] = $module;

        return $this;
    }

    /**
     * Gets orig_doc_type
     *
     * @return string
     */
    public function getOrigDocType()
    {
        return $this->container['orig_doc_type'];
    }

    /**
     * Sets orig_doc_type
     *
     * @param string $orig_doc_type The top part &gt; Orig. doc. no. &gt; The type of the document the transaction is based on. It has one of the following values: Allocation, Time card, Case, Expense claim, Allocation reversal, Reversal, Credit note.
     *
     * @return $this
     */
    public function setOrigDocType($orig_doc_type)
    {
        $allowedValues = $this->getOrigDocTypeAllowableValues();
        if (!is_null($orig_doc_type) && !in_array($orig_doc_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'orig_doc_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['orig_doc_type'] = $orig_doc_type;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Ekstralys\VismaNetApi\Model\ProjectTransactionLineDto[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Ekstralys\VismaNetApi\Model\ProjectTransactionLineDto[] $lines The table &gt;
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


