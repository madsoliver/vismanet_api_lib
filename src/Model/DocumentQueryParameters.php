<?php
/**
 * DocumentQueryParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * DocumentQueryParameters Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentQueryParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentQueryParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'document_type' => 'string',
        'released' => 'int',
        'dunning_level' => 'int',
        'closed_financial_period' => 'string',
        'dunning_letter_date_time' => 'string',
        'dunning_letter_date_time_condition' => 'string',
        'project' => 'string',
        'expand_applications' => 'bool',
        'expand_dunning_information' => 'bool',
        'expand_attachments' => 'bool',
        'expand_tax_details' => 'bool',
        'expand_invoice_address' => 'bool',
        'financial_period' => 'string',
        'document_due_date' => '\DateTime',
        'status' => 'string',
        'number_to_read' => 'int',
        'skip_records' => 'int',
        'external_reference' => 'string',
        'payment_reference' => 'string',
        'customer_ref_number' => 'string',
        'greater_than_value' => 'string',
        'last_modified_date_time' => 'string',
        'last_modified_date_time_condition' => 'string',
        'created_date_time' => 'string',
        'created_date_time_condition' => 'string',
        'page_number' => 'int',
        'page_size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'document_type' => null,
        'released' => 'int32',
        'dunning_level' => 'int32',
        'closed_financial_period' => null,
        'dunning_letter_date_time' => null,
        'dunning_letter_date_time_condition' => null,
        'project' => null,
        'expand_applications' => null,
        'expand_dunning_information' => null,
        'expand_attachments' => null,
        'expand_tax_details' => null,
        'expand_invoice_address' => null,
        'financial_period' => null,
        'document_due_date' => 'date-time',
        'status' => null,
        'number_to_read' => 'int32',
        'skip_records' => 'int32',
        'external_reference' => null,
        'payment_reference' => null,
        'customer_ref_number' => null,
        'greater_than_value' => null,
        'last_modified_date_time' => null,
        'last_modified_date_time_condition' => null,
        'created_date_time' => null,
        'created_date_time_condition' => null,
        'page_number' => 'int32',
        'page_size' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_type' => 'documentType',
        'released' => 'released',
        'dunning_level' => 'dunningLevel',
        'closed_financial_period' => 'closedFinancialPeriod',
        'dunning_letter_date_time' => 'dunningLetterDateTime',
        'dunning_letter_date_time_condition' => 'dunningLetterDateTimeCondition',
        'project' => 'project',
        'expand_applications' => 'expandApplications',
        'expand_dunning_information' => 'expandDunningInformation',
        'expand_attachments' => 'expandAttachments',
        'expand_tax_details' => 'expandTaxDetails',
        'expand_invoice_address' => 'expandInvoiceAddress',
        'financial_period' => 'financialPeriod',
        'document_due_date' => 'documentDueDate',
        'status' => 'status',
        'number_to_read' => 'numberToRead',
        'skip_records' => 'skipRecords',
        'external_reference' => 'externalReference',
        'payment_reference' => 'paymentReference',
        'customer_ref_number' => 'customerRefNumber',
        'greater_than_value' => 'greaterThanValue',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'last_modified_date_time_condition' => 'lastModifiedDateTimeCondition',
        'created_date_time' => 'createdDateTime',
        'created_date_time_condition' => 'createdDateTimeCondition',
        'page_number' => 'pageNumber',
        'page_size' => 'pageSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_type' => 'setDocumentType',
        'released' => 'setReleased',
        'dunning_level' => 'setDunningLevel',
        'closed_financial_period' => 'setClosedFinancialPeriod',
        'dunning_letter_date_time' => 'setDunningLetterDateTime',
        'dunning_letter_date_time_condition' => 'setDunningLetterDateTimeCondition',
        'project' => 'setProject',
        'expand_applications' => 'setExpandApplications',
        'expand_dunning_information' => 'setExpandDunningInformation',
        'expand_attachments' => 'setExpandAttachments',
        'expand_tax_details' => 'setExpandTaxDetails',
        'expand_invoice_address' => 'setExpandInvoiceAddress',
        'financial_period' => 'setFinancialPeriod',
        'document_due_date' => 'setDocumentDueDate',
        'status' => 'setStatus',
        'number_to_read' => 'setNumberToRead',
        'skip_records' => 'setSkipRecords',
        'external_reference' => 'setExternalReference',
        'payment_reference' => 'setPaymentReference',
        'customer_ref_number' => 'setCustomerRefNumber',
        'greater_than_value' => 'setGreaterThanValue',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'last_modified_date_time_condition' => 'setLastModifiedDateTimeCondition',
        'created_date_time' => 'setCreatedDateTime',
        'created_date_time_condition' => 'setCreatedDateTimeCondition',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_type' => 'getDocumentType',
        'released' => 'getReleased',
        'dunning_level' => 'getDunningLevel',
        'closed_financial_period' => 'getClosedFinancialPeriod',
        'dunning_letter_date_time' => 'getDunningLetterDateTime',
        'dunning_letter_date_time_condition' => 'getDunningLetterDateTimeCondition',
        'project' => 'getProject',
        'expand_applications' => 'getExpandApplications',
        'expand_dunning_information' => 'getExpandDunningInformation',
        'expand_attachments' => 'getExpandAttachments',
        'expand_tax_details' => 'getExpandTaxDetails',
        'expand_invoice_address' => 'getExpandInvoiceAddress',
        'financial_period' => 'getFinancialPeriod',
        'document_due_date' => 'getDocumentDueDate',
        'status' => 'getStatus',
        'number_to_read' => 'getNumberToRead',
        'skip_records' => 'getSkipRecords',
        'external_reference' => 'getExternalReference',
        'payment_reference' => 'getPaymentReference',
        'customer_ref_number' => 'getCustomerRefNumber',
        'greater_than_value' => 'getGreaterThanValue',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'last_modified_date_time_condition' => 'getLastModifiedDateTimeCondition',
        'created_date_time' => 'getCreatedDateTime',
        'created_date_time_condition' => 'getCreatedDateTimeCondition',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DOCUMENT_TYPE_INVOICE = 'Invoice';
    const DOCUMENT_TYPE_DEBIT_NOTE = 'DebitNote';
    const DOCUMENT_TYPE_CREDIT_NOTE = 'CreditNote';
    const DOCUMENT_TYPE_PAYMENT = 'Payment';
    const DOCUMENT_TYPE_VOID_PAYMENT = 'VoidPayment';
    const DOCUMENT_TYPE_PREPAYMENT = 'Prepayment';
    const DOCUMENT_TYPE_REFUND = 'Refund';
    const DOCUMENT_TYPE_FIN_CHARGE = 'FinCharge';
    const DOCUMENT_TYPE_SMALL_BALANCE_WO = 'SmallBalanceWo';
    const DOCUMENT_TYPE_SMALL_CREDIT_WO = 'SmallCreditWo';
    const DOCUMENT_TYPE_CASH_SALE = 'CashSale';
    const DOCUMENT_TYPE_CASH_RETURN = 'CashReturn';
    const DOCUMENT_TYPE_UNDEFINED = 'Undefined';
    const DOCUMENT_TYPE_NO_UPDATE = 'NoUpdate';
    const STATUS_HOLD = 'Hold';
    const STATUS_BALANCED = 'Balanced';
    const STATUS_VOIDED = 'Voided';
    const STATUS_SCHEDULED = 'Scheduled';
    const STATUS_OPEN = 'Open';
    const STATUS_CLOSED = 'Closed';
    const STATUS_PENDING_PRINT = 'PendingPrint';
    const STATUS_PENDING_EMAIL = 'PendingEmail';
    const STATUS_CREDIT_HOLD = 'CreditHold';
    const STATUS_CC_HOLD = 'CcHold';
    const STATUS_RESERVED = 'Reserved';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_INVOICE,
            self::DOCUMENT_TYPE_DEBIT_NOTE,
            self::DOCUMENT_TYPE_CREDIT_NOTE,
            self::DOCUMENT_TYPE_PAYMENT,
            self::DOCUMENT_TYPE_VOID_PAYMENT,
            self::DOCUMENT_TYPE_PREPAYMENT,
            self::DOCUMENT_TYPE_REFUND,
            self::DOCUMENT_TYPE_FIN_CHARGE,
            self::DOCUMENT_TYPE_SMALL_BALANCE_WO,
            self::DOCUMENT_TYPE_SMALL_CREDIT_WO,
            self::DOCUMENT_TYPE_CASH_SALE,
            self::DOCUMENT_TYPE_CASH_RETURN,
            self::DOCUMENT_TYPE_UNDEFINED,
            self::DOCUMENT_TYPE_NO_UPDATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_HOLD,
            self::STATUS_BALANCED,
            self::STATUS_VOIDED,
            self::STATUS_SCHEDULED,
            self::STATUS_OPEN,
            self::STATUS_CLOSED,
            self::STATUS_PENDING_PRINT,
            self::STATUS_PENDING_EMAIL,
            self::STATUS_CREDIT_HOLD,
            self::STATUS_CC_HOLD,
            self::STATUS_RESERVED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['released'] = isset($data['released']) ? $data['released'] : null;
        $this->container['dunning_level'] = isset($data['dunning_level']) ? $data['dunning_level'] : null;
        $this->container['closed_financial_period'] = isset($data['closed_financial_period']) ? $data['closed_financial_period'] : null;
        $this->container['dunning_letter_date_time'] = isset($data['dunning_letter_date_time']) ? $data['dunning_letter_date_time'] : null;
        $this->container['dunning_letter_date_time_condition'] = isset($data['dunning_letter_date_time_condition']) ? $data['dunning_letter_date_time_condition'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['expand_applications'] = isset($data['expand_applications']) ? $data['expand_applications'] : null;
        $this->container['expand_dunning_information'] = isset($data['expand_dunning_information']) ? $data['expand_dunning_information'] : null;
        $this->container['expand_attachments'] = isset($data['expand_attachments']) ? $data['expand_attachments'] : null;
        $this->container['expand_tax_details'] = isset($data['expand_tax_details']) ? $data['expand_tax_details'] : null;
        $this->container['expand_invoice_address'] = isset($data['expand_invoice_address']) ? $data['expand_invoice_address'] : null;
        $this->container['financial_period'] = isset($data['financial_period']) ? $data['financial_period'] : null;
        $this->container['document_due_date'] = isset($data['document_due_date']) ? $data['document_due_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['number_to_read'] = isset($data['number_to_read']) ? $data['number_to_read'] : null;
        $this->container['skip_records'] = isset($data['skip_records']) ? $data['skip_records'] : null;
        $this->container['external_reference'] = isset($data['external_reference']) ? $data['external_reference'] : null;
        $this->container['payment_reference'] = isset($data['payment_reference']) ? $data['payment_reference'] : null;
        $this->container['customer_ref_number'] = isset($data['customer_ref_number']) ? $data['customer_ref_number'] : null;
        $this->container['greater_than_value'] = isset($data['greater_than_value']) ? $data['greater_than_value'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['last_modified_date_time_condition'] = isset($data['last_modified_date_time_condition']) ? $data['last_modified_date_time_condition'] : null;
        $this->container['created_date_time'] = isset($data['created_date_time']) ? $data['created_date_time'] : null;
        $this->container['created_date_time_condition'] = isset($data['created_date_time_condition']) ? $data['created_date_time_condition'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['document_type']) && !in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'document_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type The field is deprecated for specific customer document endpoints. It will only be usable from customer document endpoint.
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($document_type) && !in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets released
     *
     * @return int
     */
    public function getReleased()
    {
        return $this->container['released'];
    }

    /**
     * Sets released
     *
     * @param int $released Parameter for showing if invoice has been released or not.
     *
     * @return $this
     */
    public function setReleased($released)
    {
        $this->container['released'] = $released;

        return $this;
    }

    /**
     * Gets dunning_level
     *
     * @return int
     */
    public function getDunningLevel()
    {
        return $this->container['dunning_level'];
    }

    /**
     * Sets dunning_level
     *
     * @param int $dunning_level The dunning level of the document.
     *
     * @return $this
     */
    public function setDunningLevel($dunning_level)
    {
        $this->container['dunning_level'] = $dunning_level;

        return $this;
    }

    /**
     * Gets closed_financial_period
     *
     * @return string
     */
    public function getClosedFinancialPeriod()
    {
        return $this->container['closed_financial_period'];
    }

    /**
     * Sets closed_financial_period
     *
     * @param string $closed_financial_period The date of the closing of the financial period.
     *
     * @return $this
     */
    public function setClosedFinancialPeriod($closed_financial_period)
    {
        $this->container['closed_financial_period'] = $closed_financial_period;

        return $this;
    }

    /**
     * Gets dunning_letter_date_time
     *
     * @return string
     */
    public function getDunningLetterDateTime()
    {
        return $this->container['dunning_letter_date_time'];
    }

    /**
     * Sets dunning_letter_date_time
     *
     * @param string $dunning_letter_date_time The date and time for when the document last released a dunning letter.
     *
     * @return $this
     */
    public function setDunningLetterDateTime($dunning_letter_date_time)
    {
        $this->container['dunning_letter_date_time'] = $dunning_letter_date_time;

        return $this;
    }

    /**
     * Gets dunning_letter_date_time_condition
     *
     * @return string
     */
    public function getDunningLetterDateTimeCondition()
    {
        return $this->container['dunning_letter_date_time_condition'];
    }

    /**
     * Sets dunning_letter_date_time_condition
     *
     * @param string $dunning_letter_date_time_condition Set time/date as before (&lt;), after (&gt;), before and including (=&lt;) OR after and including (=&gt;) to filter on time frame.
     *
     * @return $this
     */
    public function setDunningLetterDateTimeCondition($dunning_letter_date_time_condition)
    {
        $this->container['dunning_letter_date_time_condition'] = $dunning_letter_date_time_condition;

        return $this;
    }

    /**
     * Gets project
     *
     * @return string
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param string $project The project with which the document is associated.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets expand_applications
     *
     * @return bool
     */
    public function getExpandApplications()
    {
        return $this->container['expand_applications'];
    }

    /**
     * Sets expand_applications
     *
     * @param bool $expand_applications True if you want to see all dunning information regarding this document.
     *
     * @return $this
     */
    public function setExpandApplications($expand_applications)
    {
        $this->container['expand_applications'] = $expand_applications;

        return $this;
    }

    /**
     * Gets expand_dunning_information
     *
     * @return bool
     */
    public function getExpandDunningInformation()
    {
        return $this->container['expand_dunning_information'];
    }

    /**
     * Sets expand_dunning_information
     *
     * @param bool $expand_dunning_information expand_dunning_information
     *
     * @return $this
     */
    public function setExpandDunningInformation($expand_dunning_information)
    {
        $this->container['expand_dunning_information'] = $expand_dunning_information;

        return $this;
    }

    /**
     * Gets expand_attachments
     *
     * @return bool
     */
    public function getExpandAttachments()
    {
        return $this->container['expand_attachments'];
    }

    /**
     * Sets expand_attachments
     *
     * @param bool $expand_attachments True if you want to see all attachments regarding this document.
     *
     * @return $this
     */
    public function setExpandAttachments($expand_attachments)
    {
        $this->container['expand_attachments'] = $expand_attachments;

        return $this;
    }

    /**
     * Gets expand_tax_details
     *
     * @return bool
     */
    public function getExpandTaxDetails()
    {
        return $this->container['expand_tax_details'];
    }

    /**
     * Sets expand_tax_details
     *
     * @param bool $expand_tax_details True if you want to see all VAT details regarding this document.
     *
     * @return $this
     */
    public function setExpandTaxDetails($expand_tax_details)
    {
        $this->container['expand_tax_details'] = $expand_tax_details;

        return $this;
    }

    /**
     * Gets expand_invoice_address
     *
     * @return bool
     */
    public function getExpandInvoiceAddress()
    {
        return $this->container['expand_invoice_address'];
    }

    /**
     * Sets expand_invoice_address
     *
     * @param bool $expand_invoice_address True if you want to see all information regarding the invoice address for this document.
     *
     * @return $this
     */
    public function setExpandInvoiceAddress($expand_invoice_address)
    {
        $this->container['expand_invoice_address'] = $expand_invoice_address;

        return $this;
    }

    /**
     * Gets financial_period
     *
     * @return string
     */
    public function getFinancialPeriod()
    {
        return $this->container['financial_period'];
    }

    /**
     * Sets financial_period
     *
     * @param string $financial_period The financial period to which the transactions recorded in the document is posted. Format YYYYMM.
     *
     * @return $this
     */
    public function setFinancialPeriod($financial_period)
    {
        $this->container['financial_period'] = $financial_period;

        return $this;
    }

    /**
     * Gets document_due_date
     *
     * @return \DateTime
     */
    public function getDocumentDueDate()
    {
        return $this->container['document_due_date'];
    }

    /**
     * Sets document_due_date
     *
     * @param \DateTime $document_due_date The date when payment for the document is due, in accordance with the credit terms.
     *
     * @return $this
     */
    public function setDocumentDueDate($document_due_date)
    {
        $this->container['document_due_date'] = $document_due_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the document. Use the dropdown to select status.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets number_to_read
     *
     * @return int
     */
    public function getNumberToRead()
    {
        return $this->container['number_to_read'];
    }

    /**
     * Sets number_to_read
     *
     * @param int $number_to_read This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.
     *
     * @return $this
     */
    public function setNumberToRead($number_to_read)
    {
        $this->container['number_to_read'] = $number_to_read;

        return $this;
    }

    /**
     * Gets skip_records
     *
     * @return int
     */
    public function getSkipRecords()
    {
        return $this->container['skip_records'];
    }

    /**
     * Sets skip_records
     *
     * @param int $skip_records This field has been deprecated and will be removed in future versions. Use pagenumber and pagesize for pagination purposes. Pagenumber and pagesize does not work with NumberToRead and SkipRecords.
     *
     * @return $this
     */
    public function setSkipRecords($skip_records)
    {
        $this->container['skip_records'] = $skip_records;

        return $this;
    }

    /**
     * Gets external_reference
     *
     * @return string
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     *
     * @param string $external_reference The top part &gt; External reference &gt; The external reference used in AutoInvoice.
     *
     * @return $this
     */
    public function setExternalReference($external_reference)
    {
        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets payment_reference
     *
     * @return string
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     *
     * @param string $payment_reference The top part &gt; Payment ref. &gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window..
     *
     * @return $this
     */
    public function setPaymentReference($payment_reference)
    {
        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }

    /**
     * Gets customer_ref_number
     *
     * @return string
     */
    public function getCustomerRefNumber()
    {
        return $this->container['customer_ref_number'];
    }

    /**
     * Sets customer_ref_number
     *
     * @param string $customer_ref_number The top part &gt; External reference &gt; The external reference used in AutoInvoice.
     *
     * @return $this
     */
    public function setCustomerRefNumber($customer_ref_number)
    {
        $this->container['customer_ref_number'] = $customer_ref_number;

        return $this;
    }

    /**
     * Gets greater_than_value
     *
     * @return string
     */
    public function getGreaterThanValue()
    {
        return $this->container['greater_than_value'];
    }

    /**
     * Sets greater_than_value
     *
     * @param string $greater_than_value Greater than value. The item which is the object for this, varies from API to API.
     *
     * @return $this
     */
    public function setGreaterThanValue($greater_than_value)
    {
        $this->container['greater_than_value'] = $greater_than_value;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return string
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param string $last_modified_date_time System generated value for last modification of transaction/record. Use format: YYYY-MM-DD HH:MM (date and time) to filter from date to present.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets last_modified_date_time_condition
     *
     * @return string
     */
    public function getLastModifiedDateTimeCondition()
    {
        return $this->container['last_modified_date_time_condition'];
    }

    /**
     * Sets last_modified_date_time_condition
     *
     * @param string $last_modified_date_time_condition System retrieved information for state/condition.
     *
     * @return $this
     */
    public function setLastModifiedDateTimeCondition($last_modified_date_time_condition)
    {
        $this->container['last_modified_date_time_condition'] = $last_modified_date_time_condition;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return string
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param string $created_date_time Creation date and time.
     *
     * @return $this
     */
    public function setCreatedDateTime($created_date_time)
    {
        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets created_date_time_condition
     *
     * @return string
     */
    public function getCreatedDateTimeCondition()
    {
        return $this->container['created_date_time_condition'];
    }

    /**
     * Sets created_date_time_condition
     *
     * @param string $created_date_time_condition System-retrieved information for state/condition
     *
     * @return $this
     */
    public function setCreatedDateTimeCondition($created_date_time_condition)
    {
        $this->container['created_date_time_condition'] = $created_date_time_condition;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number Pagination parameter. Page number.
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size Pagination parameter. Number of items to be collected.
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


