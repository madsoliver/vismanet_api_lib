<?php
/**
 * RotRutDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * RotRutDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a RutRot in RutRotController. Used for getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RotRutDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RotRutDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'doc_type' => 'string',
        'ref_nbr' => 'string',
        'distributed_automaticaly' => 'bool',
        'type' => 'string',
        'total_deductable_amount' => 'double',
        'other_cost' => 'double',
        'material_cost' => 'double',
        'work_price' => 'double',
        'distributed_amount' => 'double',
        'appartment' => 'string',
        'estate' => 'string',
        'organization_nbr' => 'string',
        'distribution' => '\Ekstralys\VismaNetApi\Model\RotRutDistributionDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'doc_type' => null,
        'ref_nbr' => null,
        'distributed_automaticaly' => null,
        'type' => null,
        'total_deductable_amount' => 'double',
        'other_cost' => 'double',
        'material_cost' => 'double',
        'work_price' => 'double',
        'distributed_amount' => 'double',
        'appartment' => null,
        'estate' => null,
        'organization_nbr' => null,
        'distribution' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'doc_type' => 'docType',
        'ref_nbr' => 'refNbr',
        'distributed_automaticaly' => 'distributedAutomaticaly',
        'type' => 'type',
        'total_deductable_amount' => 'totalDeductableAmount',
        'other_cost' => 'otherCost',
        'material_cost' => 'materialCost',
        'work_price' => 'workPrice',
        'distributed_amount' => 'distributedAmount',
        'appartment' => 'appartment',
        'estate' => 'estate',
        'organization_nbr' => 'organizationNbr',
        'distribution' => 'distribution'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'doc_type' => 'setDocType',
        'ref_nbr' => 'setRefNbr',
        'distributed_automaticaly' => 'setDistributedAutomaticaly',
        'type' => 'setType',
        'total_deductable_amount' => 'setTotalDeductableAmount',
        'other_cost' => 'setOtherCost',
        'material_cost' => 'setMaterialCost',
        'work_price' => 'setWorkPrice',
        'distributed_amount' => 'setDistributedAmount',
        'appartment' => 'setAppartment',
        'estate' => 'setEstate',
        'organization_nbr' => 'setOrganizationNbr',
        'distribution' => 'setDistribution'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'doc_type' => 'getDocType',
        'ref_nbr' => 'getRefNbr',
        'distributed_automaticaly' => 'getDistributedAutomaticaly',
        'type' => 'getType',
        'total_deductable_amount' => 'getTotalDeductableAmount',
        'other_cost' => 'getOtherCost',
        'material_cost' => 'getMaterialCost',
        'work_price' => 'getWorkPrice',
        'distributed_amount' => 'getDistributedAmount',
        'appartment' => 'getAppartment',
        'estate' => 'getEstate',
        'organization_nbr' => 'getOrganizationNbr',
        'distribution' => 'getDistribution'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DOC_TYPE_INVOICE = 'Invoice';
    const DOC_TYPE_DEBIT_NOTE = 'DebitNote';
    const DOC_TYPE_CREDIT_NOTE = 'CreditNote';
    const DOC_TYPE_PAYMENT = 'Payment';
    const DOC_TYPE_VOID_PAYMENT = 'VoidPayment';
    const DOC_TYPE_PREPAYMENT = 'Prepayment';
    const DOC_TYPE_REFUND = 'Refund';
    const DOC_TYPE_FIN_CHARGE = 'FinCharge';
    const DOC_TYPE_SMALL_BALANCE_WO = 'SmallBalanceWo';
    const DOC_TYPE_SMALL_CREDIT_WO = 'SmallCreditWo';
    const DOC_TYPE_CASH_SALE = 'CashSale';
    const DOC_TYPE_CASH_RETURN = 'CashReturn';
    const DOC_TYPE_UNDEFINED = 'Undefined';
    const DOC_TYPE_NO_UPDATE = 'NoUpdate';
    const TYPE_RUT = 'Rut';
    const TYPE_ROT = 'Rot';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocTypeAllowableValues()
    {
        return [
            self::DOC_TYPE_INVOICE,
            self::DOC_TYPE_DEBIT_NOTE,
            self::DOC_TYPE_CREDIT_NOTE,
            self::DOC_TYPE_PAYMENT,
            self::DOC_TYPE_VOID_PAYMENT,
            self::DOC_TYPE_PREPAYMENT,
            self::DOC_TYPE_REFUND,
            self::DOC_TYPE_FIN_CHARGE,
            self::DOC_TYPE_SMALL_BALANCE_WO,
            self::DOC_TYPE_SMALL_CREDIT_WO,
            self::DOC_TYPE_CASH_SALE,
            self::DOC_TYPE_CASH_RETURN,
            self::DOC_TYPE_UNDEFINED,
            self::DOC_TYPE_NO_UPDATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_RUT,
            self::TYPE_ROT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['doc_type'] = isset($data['doc_type']) ? $data['doc_type'] : null;
        $this->container['ref_nbr'] = isset($data['ref_nbr']) ? $data['ref_nbr'] : null;
        $this->container['distributed_automaticaly'] = isset($data['distributed_automaticaly']) ? $data['distributed_automaticaly'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['total_deductable_amount'] = isset($data['total_deductable_amount']) ? $data['total_deductable_amount'] : null;
        $this->container['other_cost'] = isset($data['other_cost']) ? $data['other_cost'] : null;
        $this->container['material_cost'] = isset($data['material_cost']) ? $data['material_cost'] : null;
        $this->container['work_price'] = isset($data['work_price']) ? $data['work_price'] : null;
        $this->container['distributed_amount'] = isset($data['distributed_amount']) ? $data['distributed_amount'] : null;
        $this->container['appartment'] = isset($data['appartment']) ? $data['appartment'] : null;
        $this->container['estate'] = isset($data['estate']) ? $data['estate'] : null;
        $this->container['organization_nbr'] = isset($data['organization_nbr']) ? $data['organization_nbr'] : null;
        $this->container['distribution'] = isset($data['distribution']) ? $data['distribution'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDocTypeAllowableValues();
        if (!is_null($this->container['doc_type']) && !in_array($this->container['doc_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'doc_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets doc_type
     *
     * @return string
     */
    public function getDocType()
    {
        return $this->container['doc_type'];
    }

    /**
     * Sets doc_type
     *
     * @param string $doc_type doc_type
     *
     * @return $this
     */
    public function setDocType($doc_type)
    {
        $allowedValues = $this->getDocTypeAllowableValues();
        if (!is_null($doc_type) && !in_array($doc_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'doc_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['doc_type'] = $doc_type;

        return $this;
    }

    /**
     * Gets ref_nbr
     *
     * @return string
     */
    public function getRefNbr()
    {
        return $this->container['ref_nbr'];
    }

    /**
     * Sets ref_nbr
     *
     * @param string $ref_nbr ref_nbr
     *
     * @return $this
     */
    public function setRefNbr($ref_nbr)
    {
        $this->container['ref_nbr'] = $ref_nbr;

        return $this;
    }

    /**
     * Gets distributed_automaticaly
     *
     * @return bool
     */
    public function getDistributedAutomaticaly()
    {
        return $this->container['distributed_automaticaly'];
    }

    /**
     * Sets distributed_automaticaly
     *
     * @param bool $distributed_automaticaly distributed_automaticaly
     *
     * @return $this
     */
    public function setDistributedAutomaticaly($distributed_automaticaly)
    {
        $this->container['distributed_automaticaly'] = $distributed_automaticaly;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets total_deductable_amount
     *
     * @return double
     */
    public function getTotalDeductableAmount()
    {
        return $this->container['total_deductable_amount'];
    }

    /**
     * Sets total_deductable_amount
     *
     * @param double $total_deductable_amount total_deductable_amount
     *
     * @return $this
     */
    public function setTotalDeductableAmount($total_deductable_amount)
    {
        $this->container['total_deductable_amount'] = $total_deductable_amount;

        return $this;
    }

    /**
     * Gets other_cost
     *
     * @return double
     */
    public function getOtherCost()
    {
        return $this->container['other_cost'];
    }

    /**
     * Sets other_cost
     *
     * @param double $other_cost other_cost
     *
     * @return $this
     */
    public function setOtherCost($other_cost)
    {
        $this->container['other_cost'] = $other_cost;

        return $this;
    }

    /**
     * Gets material_cost
     *
     * @return double
     */
    public function getMaterialCost()
    {
        return $this->container['material_cost'];
    }

    /**
     * Sets material_cost
     *
     * @param double $material_cost material_cost
     *
     * @return $this
     */
    public function setMaterialCost($material_cost)
    {
        $this->container['material_cost'] = $material_cost;

        return $this;
    }

    /**
     * Gets work_price
     *
     * @return double
     */
    public function getWorkPrice()
    {
        return $this->container['work_price'];
    }

    /**
     * Sets work_price
     *
     * @param double $work_price work_price
     *
     * @return $this
     */
    public function setWorkPrice($work_price)
    {
        $this->container['work_price'] = $work_price;

        return $this;
    }

    /**
     * Gets distributed_amount
     *
     * @return double
     */
    public function getDistributedAmount()
    {
        return $this->container['distributed_amount'];
    }

    /**
     * Sets distributed_amount
     *
     * @param double $distributed_amount distributed_amount
     *
     * @return $this
     */
    public function setDistributedAmount($distributed_amount)
    {
        $this->container['distributed_amount'] = $distributed_amount;

        return $this;
    }

    /**
     * Gets appartment
     *
     * @return string
     */
    public function getAppartment()
    {
        return $this->container['appartment'];
    }

    /**
     * Sets appartment
     *
     * @param string $appartment appartment
     *
     * @return $this
     */
    public function setAppartment($appartment)
    {
        $this->container['appartment'] = $appartment;

        return $this;
    }

    /**
     * Gets estate
     *
     * @return string
     */
    public function getEstate()
    {
        return $this->container['estate'];
    }

    /**
     * Sets estate
     *
     * @param string $estate estate
     *
     * @return $this
     */
    public function setEstate($estate)
    {
        $this->container['estate'] = $estate;

        return $this;
    }

    /**
     * Gets organization_nbr
     *
     * @return string
     */
    public function getOrganizationNbr()
    {
        return $this->container['organization_nbr'];
    }

    /**
     * Sets organization_nbr
     *
     * @param string $organization_nbr organization_nbr
     *
     * @return $this
     */
    public function setOrganizationNbr($organization_nbr)
    {
        $this->container['organization_nbr'] = $organization_nbr;

        return $this;
    }

    /**
     * Gets distribution
     *
     * @return \Ekstralys\VismaNetApi\Model\RotRutDistributionDto[]
     */
    public function getDistribution()
    {
        return $this->container['distribution'];
    }

    /**
     * Sets distribution
     *
     * @param \Ekstralys\VismaNetApi\Model\RotRutDistributionDto[] $distribution distribution
     *
     * @return $this
     */
    public function setDistribution($distribution)
    {
        $this->container['distribution'] = $distribution;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


