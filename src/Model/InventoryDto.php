<?php
/**
 * InventoryDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * InventoryDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inventory_id' => 'int',
        'inventory_number' => 'string',
        'status' => 'string',
        'type' => 'string',
        'description' => 'string',
        'body' => 'string',
        'item_class' => 'object',
        'posting_class' => 'object',
        'vat_code' => 'object',
        'default_price' => 'double',
        'pending_cost' => 'double',
        'pending_cost_date' => '\DateTime',
        'current_cost' => 'double',
        'effective_date' => '\DateTime',
        'last_cost' => 'double',
        'last_modified_date_time' => '\DateTime',
        'base_unit' => 'string',
        'sales_unit' => 'string',
        'purchase_unit' => 'string',
        'stock_item' => 'bool',
        'account_information' => 'object',
        'cost_price_statistics' => 'object',
        'cross_references' => '\Ekstralys\VismaNetApi\Model\InventoryCrossReferenceDto[]',
        'attachments' => '\Ekstralys\VismaNetApi\Model\AttachmentDto[]',
        'attributes' => '\Ekstralys\VismaNetApi\Model\AttributeIdValueDto[]',
        'warehouse_details' => '\Ekstralys\VismaNetApi\Model\WarehouseDetailDto[]',
        'inventory_units' => '\Ekstralys\VismaNetApi\Model\InventoryUnitDto[]',
        'default_warehouse' => 'object',
        'default_issue_from' => 'object',
        'default_receipt_to' => 'object',
        'supplier_details' => '\Ekstralys\VismaNetApi\Model\SupplierDetailsLineDto[]',
        'sales_categories' => '\Ekstralys\VismaNetApi\Model\SalesCategoryLineDto[]',
        'packaging' => 'object',
        'intrastat' => 'object',
        'recommended_price' => 'double',
        'price_manager_id' => 'string',
        'price_manager' => 'object',
        'price_class' => 'object',
        'price_workgroup_id' => 'int',
        'price_class_id' => 'string',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inventory_id' => 'int32',
        'inventory_number' => null,
        'status' => null,
        'type' => null,
        'description' => null,
        'body' => null,
        'item_class' => null,
        'posting_class' => null,
        'vat_code' => null,
        'default_price' => 'double',
        'pending_cost' => 'double',
        'pending_cost_date' => 'date-time',
        'current_cost' => 'double',
        'effective_date' => 'date-time',
        'last_cost' => 'double',
        'last_modified_date_time' => 'date-time',
        'base_unit' => null,
        'sales_unit' => null,
        'purchase_unit' => null,
        'stock_item' => null,
        'account_information' => null,
        'cost_price_statistics' => null,
        'cross_references' => null,
        'attachments' => null,
        'attributes' => null,
        'warehouse_details' => null,
        'inventory_units' => null,
        'default_warehouse' => null,
        'default_issue_from' => null,
        'default_receipt_to' => null,
        'supplier_details' => null,
        'sales_categories' => null,
        'packaging' => null,
        'intrastat' => null,
        'recommended_price' => 'double',
        'price_manager_id' => 'uuid',
        'price_manager' => null,
        'price_class' => null,
        'price_workgroup_id' => 'int32',
        'price_class_id' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inventory_id' => 'inventoryId',
        'inventory_number' => 'inventoryNumber',
        'status' => 'status',
        'type' => 'type',
        'description' => 'description',
        'body' => 'body',
        'item_class' => 'itemClass',
        'posting_class' => 'postingClass',
        'vat_code' => 'vatCode',
        'default_price' => 'defaultPrice',
        'pending_cost' => 'pendingCost',
        'pending_cost_date' => 'pendingCostDate',
        'current_cost' => 'currentCost',
        'effective_date' => 'effectiveDate',
        'last_cost' => 'lastCost',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'base_unit' => 'baseUnit',
        'sales_unit' => 'salesUnit',
        'purchase_unit' => 'purchaseUnit',
        'stock_item' => 'stockItem',
        'account_information' => 'accountInformation',
        'cost_price_statistics' => 'costPriceStatistics',
        'cross_references' => 'crossReferences',
        'attachments' => 'attachments',
        'attributes' => 'attributes',
        'warehouse_details' => 'warehouseDetails',
        'inventory_units' => 'inventoryUnits',
        'default_warehouse' => 'defaultWarehouse',
        'default_issue_from' => 'defaultIssueFrom',
        'default_receipt_to' => 'defaultReceiptTo',
        'supplier_details' => 'supplierDetails',
        'sales_categories' => 'salesCategories',
        'packaging' => 'packaging',
        'intrastat' => 'intrastat',
        'recommended_price' => 'recommendedPrice',
        'price_manager_id' => 'priceManagerID',
        'price_manager' => 'priceManager',
        'price_class' => 'priceClass',
        'price_workgroup_id' => 'priceWorkgroupID',
        'price_class_id' => 'priceClassID',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inventory_id' => 'setInventoryId',
        'inventory_number' => 'setInventoryNumber',
        'status' => 'setStatus',
        'type' => 'setType',
        'description' => 'setDescription',
        'body' => 'setBody',
        'item_class' => 'setItemClass',
        'posting_class' => 'setPostingClass',
        'vat_code' => 'setVatCode',
        'default_price' => 'setDefaultPrice',
        'pending_cost' => 'setPendingCost',
        'pending_cost_date' => 'setPendingCostDate',
        'current_cost' => 'setCurrentCost',
        'effective_date' => 'setEffectiveDate',
        'last_cost' => 'setLastCost',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'base_unit' => 'setBaseUnit',
        'sales_unit' => 'setSalesUnit',
        'purchase_unit' => 'setPurchaseUnit',
        'stock_item' => 'setStockItem',
        'account_information' => 'setAccountInformation',
        'cost_price_statistics' => 'setCostPriceStatistics',
        'cross_references' => 'setCrossReferences',
        'attachments' => 'setAttachments',
        'attributes' => 'setAttributes',
        'warehouse_details' => 'setWarehouseDetails',
        'inventory_units' => 'setInventoryUnits',
        'default_warehouse' => 'setDefaultWarehouse',
        'default_issue_from' => 'setDefaultIssueFrom',
        'default_receipt_to' => 'setDefaultReceiptTo',
        'supplier_details' => 'setSupplierDetails',
        'sales_categories' => 'setSalesCategories',
        'packaging' => 'setPackaging',
        'intrastat' => 'setIntrastat',
        'recommended_price' => 'setRecommendedPrice',
        'price_manager_id' => 'setPriceManagerId',
        'price_manager' => 'setPriceManager',
        'price_class' => 'setPriceClass',
        'price_workgroup_id' => 'setPriceWorkgroupId',
        'price_class_id' => 'setPriceClassId',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inventory_id' => 'getInventoryId',
        'inventory_number' => 'getInventoryNumber',
        'status' => 'getStatus',
        'type' => 'getType',
        'description' => 'getDescription',
        'body' => 'getBody',
        'item_class' => 'getItemClass',
        'posting_class' => 'getPostingClass',
        'vat_code' => 'getVatCode',
        'default_price' => 'getDefaultPrice',
        'pending_cost' => 'getPendingCost',
        'pending_cost_date' => 'getPendingCostDate',
        'current_cost' => 'getCurrentCost',
        'effective_date' => 'getEffectiveDate',
        'last_cost' => 'getLastCost',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'base_unit' => 'getBaseUnit',
        'sales_unit' => 'getSalesUnit',
        'purchase_unit' => 'getPurchaseUnit',
        'stock_item' => 'getStockItem',
        'account_information' => 'getAccountInformation',
        'cost_price_statistics' => 'getCostPriceStatistics',
        'cross_references' => 'getCrossReferences',
        'attachments' => 'getAttachments',
        'attributes' => 'getAttributes',
        'warehouse_details' => 'getWarehouseDetails',
        'inventory_units' => 'getInventoryUnits',
        'default_warehouse' => 'getDefaultWarehouse',
        'default_issue_from' => 'getDefaultIssueFrom',
        'default_receipt_to' => 'getDefaultReceiptTo',
        'supplier_details' => 'getSupplierDetails',
        'sales_categories' => 'getSalesCategories',
        'packaging' => 'getPackaging',
        'intrastat' => 'getIntrastat',
        'recommended_price' => 'getRecommendedPrice',
        'price_manager_id' => 'getPriceManagerId',
        'price_manager' => 'getPriceManager',
        'price_class' => 'getPriceClass',
        'price_workgroup_id' => 'getPriceWorkgroupId',
        'price_class_id' => 'getPriceClassId',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_ACTIVE = 'Active';
    const STATUS_NO_SALES = 'NoSales';
    const STATUS_NO_PURCHASES = 'NoPurchases';
    const STATUS_NO_REQUEST = 'NoRequest';
    const STATUS_INACTIVE = 'Inactive';
    const STATUS_MARKED_FOR_DELETION = 'MarkedForDeletion';
    const STATUS_UNKNOWN = 'Unknown';
    const TYPE_NON_STOCK_ITEM = 'NonStockItem';
    const TYPE_LABOR_ITEM = 'LaborItem';
    const TYPE_SERVICE_ITEM = 'ServiceItem';
    const TYPE_CHARGE_ITEM = 'ChargeItem';
    const TYPE_EXPENSE_ITEM = 'ExpenseItem';
    const TYPE_FINISHED_GOOD_ITEM = 'FinishedGoodItem';
    const TYPE_COMPONENT_PART_ITEM = 'ComponentPartItem';
    const TYPE_SUBASSEMBLY_ITEM = 'SubassemblyItem';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_NO_SALES,
            self::STATUS_NO_PURCHASES,
            self::STATUS_NO_REQUEST,
            self::STATUS_INACTIVE,
            self::STATUS_MARKED_FOR_DELETION,
            self::STATUS_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NON_STOCK_ITEM,
            self::TYPE_LABOR_ITEM,
            self::TYPE_SERVICE_ITEM,
            self::TYPE_CHARGE_ITEM,
            self::TYPE_EXPENSE_ITEM,
            self::TYPE_FINISHED_GOOD_ITEM,
            self::TYPE_COMPONENT_PART_ITEM,
            self::TYPE_SUBASSEMBLY_ITEM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['inventory_number'] = isset($data['inventory_number']) ? $data['inventory_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['item_class'] = isset($data['item_class']) ? $data['item_class'] : null;
        $this->container['posting_class'] = isset($data['posting_class']) ? $data['posting_class'] : null;
        $this->container['vat_code'] = isset($data['vat_code']) ? $data['vat_code'] : null;
        $this->container['default_price'] = isset($data['default_price']) ? $data['default_price'] : null;
        $this->container['pending_cost'] = isset($data['pending_cost']) ? $data['pending_cost'] : null;
        $this->container['pending_cost_date'] = isset($data['pending_cost_date']) ? $data['pending_cost_date'] : null;
        $this->container['current_cost'] = isset($data['current_cost']) ? $data['current_cost'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['last_cost'] = isset($data['last_cost']) ? $data['last_cost'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['base_unit'] = isset($data['base_unit']) ? $data['base_unit'] : null;
        $this->container['sales_unit'] = isset($data['sales_unit']) ? $data['sales_unit'] : null;
        $this->container['purchase_unit'] = isset($data['purchase_unit']) ? $data['purchase_unit'] : null;
        $this->container['stock_item'] = isset($data['stock_item']) ? $data['stock_item'] : null;
        $this->container['account_information'] = isset($data['account_information']) ? $data['account_information'] : null;
        $this->container['cost_price_statistics'] = isset($data['cost_price_statistics']) ? $data['cost_price_statistics'] : null;
        $this->container['cross_references'] = isset($data['cross_references']) ? $data['cross_references'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['warehouse_details'] = isset($data['warehouse_details']) ? $data['warehouse_details'] : null;
        $this->container['inventory_units'] = isset($data['inventory_units']) ? $data['inventory_units'] : null;
        $this->container['default_warehouse'] = isset($data['default_warehouse']) ? $data['default_warehouse'] : null;
        $this->container['default_issue_from'] = isset($data['default_issue_from']) ? $data['default_issue_from'] : null;
        $this->container['default_receipt_to'] = isset($data['default_receipt_to']) ? $data['default_receipt_to'] : null;
        $this->container['supplier_details'] = isset($data['supplier_details']) ? $data['supplier_details'] : null;
        $this->container['sales_categories'] = isset($data['sales_categories']) ? $data['sales_categories'] : null;
        $this->container['packaging'] = isset($data['packaging']) ? $data['packaging'] : null;
        $this->container['intrastat'] = isset($data['intrastat']) ? $data['intrastat'] : null;
        $this->container['recommended_price'] = isset($data['recommended_price']) ? $data['recommended_price'] : null;
        $this->container['price_manager_id'] = isset($data['price_manager_id']) ? $data['price_manager_id'] : null;
        $this->container['price_manager'] = isset($data['price_manager']) ? $data['price_manager'] : null;
        $this->container['price_class'] = isset($data['price_class']) ? $data['price_class'] : null;
        $this->container['price_workgroup_id'] = isset($data['price_workgroup_id']) ? $data['price_workgroup_id'] : null;
        $this->container['price_class_id'] = isset($data['price_class_id']) ? $data['price_class_id'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inventory_id
     *
     * @return int
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param int $inventory_id The unique internal identifier of the  item as is stored in the database. This Id is not visible in the window.
     *
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets inventory_number
     *
     * @return string
     */
    public function getInventoryNumber()
    {
        return $this->container['inventory_number'];
    }

    /**
     * Sets inventory_number
     *
     * @param string $inventory_number Mandatory field: The top part &gt; Item Id* &gt; The unique alphanumeric identifier of the stock item.
     *
     * @return $this
     */
    public function setInventoryNumber($inventory_number)
    {
        $this->container['inventory_number'] = $inventory_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The top part &gt; Item status &gt; The status of the stock item. The alternatives are: Active, No sales, No purchases, No request, Inactive, Marked for deletion.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type General information tab &gt; Item defaults section &gt; Type &gt; The type of stock item.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The top part &gt; Description *&gt; A brief description of the stock item.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body The top part &gt; Body *&gt; A brief description of the stock item.
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets item_class
     *
     * @return object
     */
    public function getItemClass()
    {
        return $this->container['item_class'];
    }

    /**
     * Sets item_class
     *
     * @param object $item_class Mandatory field: General information tab &gt; Item defaults section &gt; Item class* &gt; The item class to which the stock item is assigned.
     *
     * @return $this
     */
    public function setItemClass($item_class)
    {
        $this->container['item_class'] = $item_class;

        return $this;
    }

    /**
     * Gets posting_class
     *
     * @return object
     */
    public function getPostingClass()
    {
        return $this->container['posting_class'];
    }

    /**
     * Sets posting_class
     *
     * @param object $posting_class Mandatory field: General information tab &gt; Item defaults section &gt; Posting class* &gt; The posting class of the stock item, which by default is the posting class assigned to the item class.
     *
     * @return $this
     */
    public function setPostingClass($posting_class)
    {
        $this->container['posting_class'] = $posting_class;

        return $this;
    }

    /**
     * Gets vat_code
     *
     * @return object
     */
    public function getVatCode()
    {
        return $this->container['vat_code'];
    }

    /**
     * Sets vat_code
     *
     * @param object $vat_code Mandatory field: General information tab &gt; Item defaults section &gt; VAT category* &gt; The VAT code of the stock item, which by default is the VAT code associated with the item class.
     *
     * @return $this
     */
    public function setVatCode($vat_code)
    {
        $this->container['vat_code'] = $vat_code;

        return $this;
    }

    /**
     * Gets default_price
     *
     * @return double
     */
    public function getDefaultPrice()
    {
        return $this->container['default_price'];
    }

    /**
     * Sets default_price
     *
     * @param double $default_price Price/cost information tab &gt; Price management section &gt; Default price &gt; The price of the stock item.
     *
     * @return $this
     */
    public function setDefaultPrice($default_price)
    {
        $this->container['default_price'] = $default_price;

        return $this;
    }

    /**
     * Gets pending_cost
     *
     * @return double
     */
    public function getPendingCost()
    {
        return $this->container['pending_cost'];
    }

    /**
     * Sets pending_cost
     *
     * @param double $pending_cost Price/cost information tab &gt; Standard cost section &gt; Pending cost &gt; The pending standard cost for the stock item.
     *
     * @return $this
     */
    public function setPendingCost($pending_cost)
    {
        $this->container['pending_cost'] = $pending_cost;

        return $this;
    }

    /**
     * Gets pending_cost_date
     *
     * @return \DateTime
     */
    public function getPendingCostDate()
    {
        return $this->container['pending_cost_date'];
    }

    /**
     * Sets pending_cost_date
     *
     * @param \DateTime $pending_cost_date Price/cost information tab &gt; Standard cost section &gt; Pending cost date &gt; The date when the pending standard cost becomes effective.
     *
     * @return $this
     */
    public function setPendingCostDate($pending_cost_date)
    {
        $this->container['pending_cost_date'] = $pending_cost_date;

        return $this;
    }

    /**
     * Gets current_cost
     *
     * @return double
     */
    public function getCurrentCost()
    {
        return $this->container['current_cost'];
    }

    /**
     * Sets current_cost
     *
     * @param double $current_cost Price/cost information tab &gt; Standard cost section &gt; Current cost &gt; Read-only. This field displays the current standard cost for the stock item.
     *
     * @return $this
     */
    public function setCurrentCost($current_cost)
    {
        $this->container['current_cost'] = $current_cost;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date Price/cost information tab &gt; Standard cost section &gt; Effective date &gt; Read-only. This field shows the effective date for the current standard cost of the stock item.
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets last_cost
     *
     * @return double
     */
    public function getLastCost()
    {
        return $this->container['last_cost'];
    }

    /**
     * Sets last_cost
     *
     * @param double $last_cost Price/cost information tab &gt; Standard cost section &gt; Last cost &gt; Read-only. This field showing the last standard cost defined for the stock item.
     *
     * @return $this
     */
    public function setLastCost($last_cost)
    {
        $this->container['last_cost'] = $last_cost;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time Information collected from system.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string $base_unit Mandatory field: General information tab &gt; Unit of measurement section &gt; Base unit* &gt; The UoM used as the base unit for this stock item.
     *
     * @return $this
     */
    public function setBaseUnit($base_unit)
    {
        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets sales_unit
     *
     * @return string
     */
    public function getSalesUnit()
    {
        return $this->container['sales_unit'];
    }

    /**
     * Sets sales_unit
     *
     * @param string $sales_unit Mandatory field: General information tab &gt; Unit of measurement section &gt; Sales unit *&gt; The UoM to be used as the sales unit for the stock item.
     *
     * @return $this
     */
    public function setSalesUnit($sales_unit)
    {
        $this->container['sales_unit'] = $sales_unit;

        return $this;
    }

    /**
     * Gets purchase_unit
     *
     * @return string
     */
    public function getPurchaseUnit()
    {
        return $this->container['purchase_unit'];
    }

    /**
     * Sets purchase_unit
     *
     * @param string $purchase_unit Mandatory field: General information tab &gt; Unit of measurement section &gt; Purchase unit *&gt; The UoM to be used as the purchase unit for the stock item.
     *
     * @return $this
     */
    public function setPurchaseUnit($purchase_unit)
    {
        $this->container['purchase_unit'] = $purchase_unit;

        return $this;
    }

    /**
     * Gets stock_item
     *
     * @return bool
     */
    public function getStockItem()
    {
        return $this->container['stock_item'];
    }

    /**
     * Sets stock_item
     *
     * @param bool $stock_item stock_item
     *
     * @return $this
     */
    public function setStockItem($stock_item)
    {
        $this->container['stock_item'] = $stock_item;

        return $this;
    }

    /**
     * Gets account_information
     *
     * @return object
     */
    public function getAccountInformation()
    {
        return $this->container['account_information'];
    }

    /**
     * Sets account_information
     *
     * @param object $account_information General ledger account tab &gt;
     *
     * @return $this
     */
    public function setAccountInformation($account_information)
    {
        $this->container['account_information'] = $account_information;

        return $this;
    }

    /**
     * Gets cost_price_statistics
     *
     * @return object
     */
    public function getCostPriceStatistics()
    {
        return $this->container['cost_price_statistics'];
    }

    /**
     * Sets cost_price_statistics
     *
     * @param object $cost_price_statistics Price/cost information tab &gt;
     *
     * @return $this
     */
    public function setCostPriceStatistics($cost_price_statistics)
    {
        $this->container['cost_price_statistics'] = $cost_price_statistics;

        return $this;
    }

    /**
     * Gets cross_references
     *
     * @return \Ekstralys\VismaNetApi\Model\InventoryCrossReferenceDto[]
     */
    public function getCrossReferences()
    {
        return $this->container['cross_references'];
    }

    /**
     * Sets cross_references
     *
     * @param \Ekstralys\VismaNetApi\Model\InventoryCrossReferenceDto[] $cross_references Cross-reference tab &gt;
     *
     * @return $this
     */
    public function setCrossReferences($cross_references)
    {
        $this->container['cross_references'] = $cross_references;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Ekstralys\VismaNetApi\Model\AttachmentDto[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Ekstralys\VismaNetApi\Model\AttachmentDto[] $attachments Attributes tab &gt;
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \Ekstralys\VismaNetApi\Model\AttributeIdValueDto[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \Ekstralys\VismaNetApi\Model\AttributeIdValueDto[] $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets warehouse_details
     *
     * @return \Ekstralys\VismaNetApi\Model\WarehouseDetailDto[]
     */
    public function getWarehouseDetails()
    {
        return $this->container['warehouse_details'];
    }

    /**
     * Sets warehouse_details
     *
     * @param \Ekstralys\VismaNetApi\Model\WarehouseDetailDto[] $warehouse_details Warehouse details tab &gt;
     *
     * @return $this
     */
    public function setWarehouseDetails($warehouse_details)
    {
        $this->container['warehouse_details'] = $warehouse_details;

        return $this;
    }

    /**
     * Gets inventory_units
     *
     * @return \Ekstralys\VismaNetApi\Model\InventoryUnitDto[]
     */
    public function getInventoryUnits()
    {
        return $this->container['inventory_units'];
    }

    /**
     * Sets inventory_units
     *
     * @param \Ekstralys\VismaNetApi\Model\InventoryUnitDto[] $inventory_units General information tab &gt; The Unit conversion table just below the Unit of measurement section. Several fields collected from different parts of the window.
     *
     * @return $this
     */
    public function setInventoryUnits($inventory_units)
    {
        $this->container['inventory_units'] = $inventory_units;

        return $this;
    }

    /**
     * Gets default_warehouse
     *
     * @return object
     */
    public function getDefaultWarehouse()
    {
        return $this->container['default_warehouse'];
    }

    /**
     * Sets default_warehouse
     *
     * @param object $default_warehouse General information tab &gt; Warehouse defaults section &gt; Default warehouse &gt; The default warehouse used to store the stock item with the specified item ID.
     *
     * @return $this
     */
    public function setDefaultWarehouse($default_warehouse)
    {
        $this->container['default_warehouse'] = $default_warehouse;

        return $this;
    }

    /**
     * Gets default_issue_from
     *
     * @return object
     */
    public function getDefaultIssueFrom()
    {
        return $this->container['default_issue_from'];
    }

    /**
     * Sets default_issue_from
     *
     * @param object $default_issue_from General information tab &gt; Warehouse defaults section &gt; Default issue from &gt; The location of the warehouse to be used by default to issue quantities of the selected stock item.
     *
     * @return $this
     */
    public function setDefaultIssueFrom($default_issue_from)
    {
        $this->container['default_issue_from'] = $default_issue_from;

        return $this;
    }

    /**
     * Gets default_receipt_to
     *
     * @return object
     */
    public function getDefaultReceiptTo()
    {
        return $this->container['default_receipt_to'];
    }

    /**
     * Sets default_receipt_to
     *
     * @param object $default_receipt_to General information tab &gt; Warehouse defaults section &gt; Default receipt to &gt; The location of warehouse to be used by default to receive certain quantities of the specified stock item.
     *
     * @return $this
     */
    public function setDefaultReceiptTo($default_receipt_to)
    {
        $this->container['default_receipt_to'] = $default_receipt_to;

        return $this;
    }

    /**
     * Gets supplier_details
     *
     * @return \Ekstralys\VismaNetApi\Model\SupplierDetailsLineDto[]
     */
    public function getSupplierDetails()
    {
        return $this->container['supplier_details'];
    }

    /**
     * Sets supplier_details
     *
     * @param \Ekstralys\VismaNetApi\Model\SupplierDetailsLineDto[] $supplier_details Supplier details tab
     *
     * @return $this
     */
    public function setSupplierDetails($supplier_details)
    {
        $this->container['supplier_details'] = $supplier_details;

        return $this;
    }

    /**
     * Gets sales_categories
     *
     * @return \Ekstralys\VismaNetApi\Model\SalesCategoryLineDto[]
     */
    public function getSalesCategories()
    {
        return $this->container['sales_categories'];
    }

    /**
     * Sets sales_categories
     *
     * @param \Ekstralys\VismaNetApi\Model\SalesCategoryLineDto[] $sales_categories Attributes tab &gt; Sales categories grid
     *
     * @return $this
     */
    public function setSalesCategories($sales_categories)
    {
        $this->container['sales_categories'] = $sales_categories;

        return $this;
    }

    /**
     * Gets packaging
     *
     * @return object
     */
    public function getPackaging()
    {
        return $this->container['packaging'];
    }

    /**
     * Sets packaging
     *
     * @param object $packaging Packaging tab
     *
     * @return $this
     */
    public function setPackaging($packaging)
    {
        $this->container['packaging'] = $packaging;

        return $this;
    }

    /**
     * Gets intrastat
     *
     * @return object
     */
    public function getIntrastat()
    {
        return $this->container['intrastat'];
    }

    /**
     * Sets intrastat
     *
     * @param object $intrastat General information tab &gt; Intrastat section
     *
     * @return $this
     */
    public function setIntrastat($intrastat)
    {
        $this->container['intrastat'] = $intrastat;

        return $this;
    }

    /**
     * Gets recommended_price
     *
     * @return double
     */
    public function getRecommendedPrice()
    {
        return $this->container['recommended_price'];
    }

    /**
     * Sets recommended_price
     *
     * @param double $recommended_price The Price/cost information tab &gt; Price management section &gt; List price &gt; The manufacturer's suggested retail price (MSRP) of the stock item.
     *
     * @return $this
     */
    public function setRecommendedPrice($recommended_price)
    {
        $this->container['recommended_price'] = $recommended_price;

        return $this;
    }

    /**
     * Gets price_manager_id
     *
     * @return string
     */
    public function getPriceManagerId()
    {
        return $this->container['price_manager_id'];
    }

    /**
     * Sets price_manager_id
     *
     * @param string $price_manager_id The Price/cost information tab &gt; Price management section &gt; Price manager &gt; The ID of the manager responsible for the product pricing.
     *
     * @return $this
     */
    public function setPriceManagerId($price_manager_id)
    {
        $this->container['price_manager_id'] = $price_manager_id;

        return $this;
    }

    /**
     * Gets price_manager
     *
     * @return object
     */
    public function getPriceManager()
    {
        return $this->container['price_manager'];
    }

    /**
     * Sets price_manager
     *
     * @param object $price_manager The Price/cost information tab &gt; Price management section &gt; Price manager &gt; The manager responsible for the product pricing.
     *
     * @return $this
     */
    public function setPriceManager($price_manager)
    {
        $this->container['price_manager'] = $price_manager;

        return $this;
    }

    /**
     * Gets price_class
     *
     * @return object
     */
    public function getPriceClass()
    {
        return $this->container['price_class'];
    }

    /**
     * Sets price_class
     *
     * @param object $price_class The Price/cost information tab &gt; Price management section &gt; Price class &gt; The item price class associated with the non-stock item. Group stock or non-stock items with similar price calculation methods.
     *
     * @return $this
     */
    public function setPriceClass($price_class)
    {
        $this->container['price_class'] = $price_class;

        return $this;
    }

    /**
     * Gets price_workgroup_id
     *
     * @return int
     */
    public function getPriceWorkgroupId()
    {
        return $this->container['price_workgroup_id'];
    }

    /**
     * Sets price_workgroup_id
     *
     * @param int $price_workgroup_id The Price/cost information tab &gt; Price management section &gt; Price work group &gt; The work group responsible for product pricing. Select the pricing work group for the stock item.
     *
     * @return $this
     */
    public function setPriceWorkgroupId($price_workgroup_id)
    {
        $this->container['price_workgroup_id'] = $price_workgroup_id;

        return $this;
    }

    /**
     * Gets price_class_id
     *
     * @return string
     */
    public function getPriceClassId()
    {
        return $this->container['price_class_id'];
    }

    /**
     * Sets price_class_id
     *
     * @param string $price_class_id The Price/cost information tab &gt; Price management section &gt; Price class &gt; The price class of the item.
     *
     * @return $this
     */
    public function setPriceClassId($price_class_id)
    {
        $this->container['price_class_id'] = $price_class_id;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


