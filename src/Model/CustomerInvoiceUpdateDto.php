<?php
/**
 * CustomerInvoiceUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * CustomerInvoiceUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerInvoiceUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerInvoiceUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payment_method_id' => 'object',
        'credit_terms_id' => 'object',
        'currency_id' => 'object',
        'customer_ref_number' => 'object',
        'cash_discount_date' => 'object',
        'document_due_date' => 'object',
        'external_reference' => 'object',
        'customer_project' => 'object',
        'exchange_rate' => 'object',
        'domestic_services_deductible_document' => 'object',
        'rot_rut_details' => 'object',
        'payment_reference' => 'object',
        'contact' => 'object',
        'project' => 'object',
        'tax_detail_lines' => '\Ekstralys\VismaNetApi\Model\TaxDetailUpdateDto[]',
        'invoice_lines' => '\Ekstralys\VismaNetApi\Model\CustomerInvoiceLinesUpdateDto[]',
        'send_to_auto_invoice' => 'object',
        'customer_vat_zone_id' => 'object',
        'billing_address' => 'object',
        'invoice_contact' => 'object',
        'start_date' => 'object',
        'end_date' => 'object',
        'accounting_cost_ref' => 'object',
        'originator_doc_ref' => 'object',
        'contract_doc_ref' => 'object',
        'override_number_series' => 'object',
        'reference_number' => 'object',
        'customer_number' => 'object',
        'document_date' => 'object',
        'orig_invoice_date' => 'object',
        'hold' => 'object',
        'post_period' => 'object',
        'financial_period' => 'object',
        'invoice_text' => 'object',
        'location_id' => 'object',
        'sales_person_id' => 'object',
        'salesperson' => 'object',
        'note' => 'object',
        'branch_number' => 'object',
        'cash_account' => 'object',
        'dont_print' => 'object',
        'dont_email' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payment_method_id' => null,
        'credit_terms_id' => null,
        'currency_id' => null,
        'customer_ref_number' => null,
        'cash_discount_date' => null,
        'document_due_date' => null,
        'external_reference' => null,
        'customer_project' => null,
        'exchange_rate' => null,
        'domestic_services_deductible_document' => null,
        'rot_rut_details' => null,
        'payment_reference' => null,
        'contact' => null,
        'project' => null,
        'tax_detail_lines' => null,
        'invoice_lines' => null,
        'send_to_auto_invoice' => null,
        'customer_vat_zone_id' => null,
        'billing_address' => null,
        'invoice_contact' => null,
        'start_date' => null,
        'end_date' => null,
        'accounting_cost_ref' => null,
        'originator_doc_ref' => null,
        'contract_doc_ref' => null,
        'override_number_series' => null,
        'reference_number' => null,
        'customer_number' => null,
        'document_date' => null,
        'orig_invoice_date' => null,
        'hold' => null,
        'post_period' => null,
        'financial_period' => null,
        'invoice_text' => null,
        'location_id' => null,
        'sales_person_id' => null,
        'salesperson' => null,
        'note' => null,
        'branch_number' => null,
        'cash_account' => null,
        'dont_print' => null,
        'dont_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_method_id' => 'paymentMethodId',
        'credit_terms_id' => 'creditTermsId',
        'currency_id' => 'currencyId',
        'customer_ref_number' => 'customerRefNumber',
        'cash_discount_date' => 'cashDiscountDate',
        'document_due_date' => 'documentDueDate',
        'external_reference' => 'externalReference',
        'customer_project' => 'customerProject',
        'exchange_rate' => 'exchangeRate',
        'domestic_services_deductible_document' => 'domesticServicesDeductibleDocument',
        'rot_rut_details' => 'rotRutDetails',
        'payment_reference' => 'paymentReference',
        'contact' => 'contact',
        'project' => 'project',
        'tax_detail_lines' => 'taxDetailLines',
        'invoice_lines' => 'invoiceLines',
        'send_to_auto_invoice' => 'sendToAutoInvoice',
        'customer_vat_zone_id' => 'customerVatZoneId',
        'billing_address' => 'billingAddress',
        'invoice_contact' => 'invoiceContact',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'accounting_cost_ref' => 'accountingCostRef',
        'originator_doc_ref' => 'originatorDocRef',
        'contract_doc_ref' => 'contractDocRef',
        'override_number_series' => 'overrideNumberSeries',
        'reference_number' => 'referenceNumber',
        'customer_number' => 'customerNumber',
        'document_date' => 'documentDate',
        'orig_invoice_date' => 'origInvoiceDate',
        'hold' => 'hold',
        'post_period' => 'postPeriod',
        'financial_period' => 'financialPeriod',
        'invoice_text' => 'invoiceText',
        'location_id' => 'locationId',
        'sales_person_id' => 'salesPersonID',
        'salesperson' => 'salesperson',
        'note' => 'note',
        'branch_number' => 'branchNumber',
        'cash_account' => 'cashAccount',
        'dont_print' => 'dontPrint',
        'dont_email' => 'dontEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_method_id' => 'setPaymentMethodId',
        'credit_terms_id' => 'setCreditTermsId',
        'currency_id' => 'setCurrencyId',
        'customer_ref_number' => 'setCustomerRefNumber',
        'cash_discount_date' => 'setCashDiscountDate',
        'document_due_date' => 'setDocumentDueDate',
        'external_reference' => 'setExternalReference',
        'customer_project' => 'setCustomerProject',
        'exchange_rate' => 'setExchangeRate',
        'domestic_services_deductible_document' => 'setDomesticServicesDeductibleDocument',
        'rot_rut_details' => 'setRotRutDetails',
        'payment_reference' => 'setPaymentReference',
        'contact' => 'setContact',
        'project' => 'setProject',
        'tax_detail_lines' => 'setTaxDetailLines',
        'invoice_lines' => 'setInvoiceLines',
        'send_to_auto_invoice' => 'setSendToAutoInvoice',
        'customer_vat_zone_id' => 'setCustomerVatZoneId',
        'billing_address' => 'setBillingAddress',
        'invoice_contact' => 'setInvoiceContact',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'accounting_cost_ref' => 'setAccountingCostRef',
        'originator_doc_ref' => 'setOriginatorDocRef',
        'contract_doc_ref' => 'setContractDocRef',
        'override_number_series' => 'setOverrideNumberSeries',
        'reference_number' => 'setReferenceNumber',
        'customer_number' => 'setCustomerNumber',
        'document_date' => 'setDocumentDate',
        'orig_invoice_date' => 'setOrigInvoiceDate',
        'hold' => 'setHold',
        'post_period' => 'setPostPeriod',
        'financial_period' => 'setFinancialPeriod',
        'invoice_text' => 'setInvoiceText',
        'location_id' => 'setLocationId',
        'sales_person_id' => 'setSalesPersonId',
        'salesperson' => 'setSalesperson',
        'note' => 'setNote',
        'branch_number' => 'setBranchNumber',
        'cash_account' => 'setCashAccount',
        'dont_print' => 'setDontPrint',
        'dont_email' => 'setDontEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_method_id' => 'getPaymentMethodId',
        'credit_terms_id' => 'getCreditTermsId',
        'currency_id' => 'getCurrencyId',
        'customer_ref_number' => 'getCustomerRefNumber',
        'cash_discount_date' => 'getCashDiscountDate',
        'document_due_date' => 'getDocumentDueDate',
        'external_reference' => 'getExternalReference',
        'customer_project' => 'getCustomerProject',
        'exchange_rate' => 'getExchangeRate',
        'domestic_services_deductible_document' => 'getDomesticServicesDeductibleDocument',
        'rot_rut_details' => 'getRotRutDetails',
        'payment_reference' => 'getPaymentReference',
        'contact' => 'getContact',
        'project' => 'getProject',
        'tax_detail_lines' => 'getTaxDetailLines',
        'invoice_lines' => 'getInvoiceLines',
        'send_to_auto_invoice' => 'getSendToAutoInvoice',
        'customer_vat_zone_id' => 'getCustomerVatZoneId',
        'billing_address' => 'getBillingAddress',
        'invoice_contact' => 'getInvoiceContact',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'accounting_cost_ref' => 'getAccountingCostRef',
        'originator_doc_ref' => 'getOriginatorDocRef',
        'contract_doc_ref' => 'getContractDocRef',
        'override_number_series' => 'getOverrideNumberSeries',
        'reference_number' => 'getReferenceNumber',
        'customer_number' => 'getCustomerNumber',
        'document_date' => 'getDocumentDate',
        'orig_invoice_date' => 'getOrigInvoiceDate',
        'hold' => 'getHold',
        'post_period' => 'getPostPeriod',
        'financial_period' => 'getFinancialPeriod',
        'invoice_text' => 'getInvoiceText',
        'location_id' => 'getLocationId',
        'sales_person_id' => 'getSalesPersonId',
        'salesperson' => 'getSalesperson',
        'note' => 'getNote',
        'branch_number' => 'getBranchNumber',
        'cash_account' => 'getCashAccount',
        'dont_print' => 'getDontPrint',
        'dont_email' => 'getDontEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_method_id'] = isset($data['payment_method_id']) ? $data['payment_method_id'] : null;
        $this->container['credit_terms_id'] = isset($data['credit_terms_id']) ? $data['credit_terms_id'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['customer_ref_number'] = isset($data['customer_ref_number']) ? $data['customer_ref_number'] : null;
        $this->container['cash_discount_date'] = isset($data['cash_discount_date']) ? $data['cash_discount_date'] : null;
        $this->container['document_due_date'] = isset($data['document_due_date']) ? $data['document_due_date'] : null;
        $this->container['external_reference'] = isset($data['external_reference']) ? $data['external_reference'] : null;
        $this->container['customer_project'] = isset($data['customer_project']) ? $data['customer_project'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['domestic_services_deductible_document'] = isset($data['domestic_services_deductible_document']) ? $data['domestic_services_deductible_document'] : null;
        $this->container['rot_rut_details'] = isset($data['rot_rut_details']) ? $data['rot_rut_details'] : null;
        $this->container['payment_reference'] = isset($data['payment_reference']) ? $data['payment_reference'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['tax_detail_lines'] = isset($data['tax_detail_lines']) ? $data['tax_detail_lines'] : null;
        $this->container['invoice_lines'] = isset($data['invoice_lines']) ? $data['invoice_lines'] : null;
        $this->container['send_to_auto_invoice'] = isset($data['send_to_auto_invoice']) ? $data['send_to_auto_invoice'] : null;
        $this->container['customer_vat_zone_id'] = isset($data['customer_vat_zone_id']) ? $data['customer_vat_zone_id'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['invoice_contact'] = isset($data['invoice_contact']) ? $data['invoice_contact'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['accounting_cost_ref'] = isset($data['accounting_cost_ref']) ? $data['accounting_cost_ref'] : null;
        $this->container['originator_doc_ref'] = isset($data['originator_doc_ref']) ? $data['originator_doc_ref'] : null;
        $this->container['contract_doc_ref'] = isset($data['contract_doc_ref']) ? $data['contract_doc_ref'] : null;
        $this->container['override_number_series'] = isset($data['override_number_series']) ? $data['override_number_series'] : null;
        $this->container['reference_number'] = isset($data['reference_number']) ? $data['reference_number'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['document_date'] = isset($data['document_date']) ? $data['document_date'] : null;
        $this->container['orig_invoice_date'] = isset($data['orig_invoice_date']) ? $data['orig_invoice_date'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['post_period'] = isset($data['post_period']) ? $data['post_period'] : null;
        $this->container['financial_period'] = isset($data['financial_period']) ? $data['financial_period'] : null;
        $this->container['invoice_text'] = isset($data['invoice_text']) ? $data['invoice_text'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['sales_person_id'] = isset($data['sales_person_id']) ? $data['sales_person_id'] : null;
        $this->container['salesperson'] = isset($data['salesperson']) ? $data['salesperson'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['branch_number'] = isset($data['branch_number']) ? $data['branch_number'] : null;
        $this->container['cash_account'] = isset($data['cash_account']) ? $data['cash_account'] : null;
        $this->container['dont_print'] = isset($data['dont_print']) ? $data['dont_print'] : null;
        $this->container['dont_email'] = isset($data['dont_email']) ? $data['dont_email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_method_id
     *
     * @return object
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param object $payment_method_id payment_method_id
     *
     * @return $this
     */
    public function setPaymentMethodId($payment_method_id)
    {
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets credit_terms_id
     *
     * @return object
     */
    public function getCreditTermsId()
    {
        return $this->container['credit_terms_id'];
    }

    /**
     * Sets credit_terms_id
     *
     * @param object $credit_terms_id credit_terms_id
     *
     * @return $this
     */
    public function setCreditTermsId($credit_terms_id)
    {
        $this->container['credit_terms_id'] = $credit_terms_id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return object
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param object $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets customer_ref_number
     *
     * @return object
     */
    public function getCustomerRefNumber()
    {
        return $this->container['customer_ref_number'];
    }

    /**
     * Sets customer_ref_number
     *
     * @param object $customer_ref_number customer_ref_number
     *
     * @return $this
     */
    public function setCustomerRefNumber($customer_ref_number)
    {
        $this->container['customer_ref_number'] = $customer_ref_number;

        return $this;
    }

    /**
     * Gets cash_discount_date
     *
     * @return object
     */
    public function getCashDiscountDate()
    {
        return $this->container['cash_discount_date'];
    }

    /**
     * Sets cash_discount_date
     *
     * @param object $cash_discount_date cash_discount_date
     *
     * @return $this
     */
    public function setCashDiscountDate($cash_discount_date)
    {
        $this->container['cash_discount_date'] = $cash_discount_date;

        return $this;
    }

    /**
     * Gets document_due_date
     *
     * @return object
     */
    public function getDocumentDueDate()
    {
        return $this->container['document_due_date'];
    }

    /**
     * Sets document_due_date
     *
     * @param object $document_due_date document_due_date
     *
     * @return $this
     */
    public function setDocumentDueDate($document_due_date)
    {
        $this->container['document_due_date'] = $document_due_date;

        return $this;
    }

    /**
     * Gets external_reference
     *
     * @return object
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     *
     * @param object $external_reference external_reference
     *
     * @return $this
     */
    public function setExternalReference($external_reference)
    {
        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets customer_project
     *
     * @return object
     */
    public function getCustomerProject()
    {
        return $this->container['customer_project'];
    }

    /**
     * Sets customer_project
     *
     * @param object $customer_project customer_project
     *
     * @return $this
     */
    public function setCustomerProject($customer_project)
    {
        $this->container['customer_project'] = $customer_project;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return object
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param object $exchange_rate exchange_rate
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets domestic_services_deductible_document
     *
     * @return object
     */
    public function getDomesticServicesDeductibleDocument()
    {
        return $this->container['domestic_services_deductible_document'];
    }

    /**
     * Sets domestic_services_deductible_document
     *
     * @param object $domestic_services_deductible_document domestic_services_deductible_document
     *
     * @return $this
     */
    public function setDomesticServicesDeductibleDocument($domestic_services_deductible_document)
    {
        $this->container['domestic_services_deductible_document'] = $domestic_services_deductible_document;

        return $this;
    }

    /**
     * Gets rot_rut_details
     *
     * @return object
     */
    public function getRotRutDetails()
    {
        return $this->container['rot_rut_details'];
    }

    /**
     * Sets rot_rut_details
     *
     * @param object $rot_rut_details rot_rut_details
     *
     * @return $this
     */
    public function setRotRutDetails($rot_rut_details)
    {
        $this->container['rot_rut_details'] = $rot_rut_details;

        return $this;
    }

    /**
     * Gets payment_reference
     *
     * @return object
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     *
     * @param object $payment_reference payment_reference
     *
     * @return $this
     */
    public function setPaymentReference($payment_reference)
    {
        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return object
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param object $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets project
     *
     * @return object
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param object $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets tax_detail_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\TaxDetailUpdateDto[]
     */
    public function getTaxDetailLines()
    {
        return $this->container['tax_detail_lines'];
    }

    /**
     * Sets tax_detail_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\TaxDetailUpdateDto[] $tax_detail_lines tax_detail_lines
     *
     * @return $this
     */
    public function setTaxDetailLines($tax_detail_lines)
    {
        $this->container['tax_detail_lines'] = $tax_detail_lines;

        return $this;
    }

    /**
     * Gets invoice_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\CustomerInvoiceLinesUpdateDto[]
     */
    public function getInvoiceLines()
    {
        return $this->container['invoice_lines'];
    }

    /**
     * Sets invoice_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\CustomerInvoiceLinesUpdateDto[] $invoice_lines invoice_lines
     *
     * @return $this
     */
    public function setInvoiceLines($invoice_lines)
    {
        $this->container['invoice_lines'] = $invoice_lines;

        return $this;
    }

    /**
     * Gets send_to_auto_invoice
     *
     * @return object
     */
    public function getSendToAutoInvoice()
    {
        return $this->container['send_to_auto_invoice'];
    }

    /**
     * Sets send_to_auto_invoice
     *
     * @param object $send_to_auto_invoice send_to_auto_invoice
     *
     * @return $this
     */
    public function setSendToAutoInvoice($send_to_auto_invoice)
    {
        $this->container['send_to_auto_invoice'] = $send_to_auto_invoice;

        return $this;
    }

    /**
     * Gets customer_vat_zone_id
     *
     * @return object
     */
    public function getCustomerVatZoneId()
    {
        return $this->container['customer_vat_zone_id'];
    }

    /**
     * Sets customer_vat_zone_id
     *
     * @param object $customer_vat_zone_id customer_vat_zone_id
     *
     * @return $this
     */
    public function setCustomerVatZoneId($customer_vat_zone_id)
    {
        $this->container['customer_vat_zone_id'] = $customer_vat_zone_id;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return object
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param object $billing_address billing_address
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets invoice_contact
     *
     * @return object
     */
    public function getInvoiceContact()
    {
        return $this->container['invoice_contact'];
    }

    /**
     * Sets invoice_contact
     *
     * @param object $invoice_contact invoice_contact
     *
     * @return $this
     */
    public function setInvoiceContact($invoice_contact)
    {
        $this->container['invoice_contact'] = $invoice_contact;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return object
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param object $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return object
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param object $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets accounting_cost_ref
     *
     * @return object
     */
    public function getAccountingCostRef()
    {
        return $this->container['accounting_cost_ref'];
    }

    /**
     * Sets accounting_cost_ref
     *
     * @param object $accounting_cost_ref accounting_cost_ref
     *
     * @return $this
     */
    public function setAccountingCostRef($accounting_cost_ref)
    {
        $this->container['accounting_cost_ref'] = $accounting_cost_ref;

        return $this;
    }

    /**
     * Gets originator_doc_ref
     *
     * @return object
     */
    public function getOriginatorDocRef()
    {
        return $this->container['originator_doc_ref'];
    }

    /**
     * Sets originator_doc_ref
     *
     * @param object $originator_doc_ref originator_doc_ref
     *
     * @return $this
     */
    public function setOriginatorDocRef($originator_doc_ref)
    {
        $this->container['originator_doc_ref'] = $originator_doc_ref;

        return $this;
    }

    /**
     * Gets contract_doc_ref
     *
     * @return object
     */
    public function getContractDocRef()
    {
        return $this->container['contract_doc_ref'];
    }

    /**
     * Sets contract_doc_ref
     *
     * @param object $contract_doc_ref contract_doc_ref
     *
     * @return $this
     */
    public function setContractDocRef($contract_doc_ref)
    {
        $this->container['contract_doc_ref'] = $contract_doc_ref;

        return $this;
    }

    /**
     * Gets override_number_series
     *
     * @return object
     */
    public function getOverrideNumberSeries()
    {
        return $this->container['override_number_series'];
    }

    /**
     * Sets override_number_series
     *
     * @param object $override_number_series Set this value to true if you need to create a new invoice and use supplied referenceNumber (Invoicenumber)
     *
     * @return $this
     */
    public function setOverrideNumberSeries($override_number_series)
    {
        $this->container['override_number_series'] = $override_number_series;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return object
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param object $reference_number reference_number
     *
     * @return $this
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return object
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param object $customer_number customer_number
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return object
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param object $document_date document_date
     *
     * @return $this
     */
    public function setDocumentDate($document_date)
    {
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets orig_invoice_date
     *
     * @return object
     */
    public function getOrigInvoiceDate()
    {
        return $this->container['orig_invoice_date'];
    }

    /**
     * Sets orig_invoice_date
     *
     * @param object $orig_invoice_date orig_invoice_date
     *
     * @return $this
     */
    public function setOrigInvoiceDate($orig_invoice_date)
    {
        $this->container['orig_invoice_date'] = $orig_invoice_date;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return object
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param object $hold hold
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets post_period
     *
     * @return object
     */
    public function getPostPeriod()
    {
        return $this->container['post_period'];
    }

    /**
     * Sets post_period
     *
     * @param object $post_period The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.
     *
     * @return $this
     */
    public function setPostPeriod($post_period)
    {
        $this->container['post_period'] = $post_period;

        return $this;
    }

    /**
     * Gets financial_period
     *
     * @return object
     */
    public function getFinancialPeriod()
    {
        return $this->container['financial_period'];
    }

    /**
     * Sets financial_period
     *
     * @param object $financial_period The financial period to which the transactions recorded in the document should be posted. Use the format YYYYMM.
     *
     * @return $this
     */
    public function setFinancialPeriod($financial_period)
    {
        $this->container['financial_period'] = $financial_period;

        return $this;
    }

    /**
     * Gets invoice_text
     *
     * @return object
     */
    public function getInvoiceText()
    {
        return $this->container['invoice_text'];
    }

    /**
     * Sets invoice_text
     *
     * @param object $invoice_text invoice_text
     *
     * @return $this
     */
    public function setInvoiceText($invoice_text)
    {
        $this->container['invoice_text'] = $invoice_text;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return object
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param object $location_id location_id
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets sales_person_id
     *
     * @return object
     */
    public function getSalesPersonId()
    {
        return $this->container['sales_person_id'];
    }

    /**
     * Sets sales_person_id
     *
     * @param object $sales_person_id The field is deprecated for customer document endpoints, please use Salesperson instead
     *
     * @return $this
     */
    public function setSalesPersonId($sales_person_id)
    {
        $this->container['sales_person_id'] = $sales_person_id;

        return $this;
    }

    /**
     * Gets salesperson
     *
     * @return object
     */
    public function getSalesperson()
    {
        return $this->container['salesperson'];
    }

    /**
     * Sets salesperson
     *
     * @param object $salesperson The identifier of the salesperson involved.
     *
     * @return $this
     */
    public function setSalesperson($salesperson)
    {
        $this->container['salesperson'] = $salesperson;

        return $this;
    }

    /**
     * Gets note
     *
     * @return object
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param object $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return object
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param object $branch_number branch_number
     *
     * @return $this
     */
    public function setBranchNumber($branch_number)
    {
        $this->container['branch_number'] = $branch_number;

        return $this;
    }

    /**
     * Gets cash_account
     *
     * @return object
     */
    public function getCashAccount()
    {
        return $this->container['cash_account'];
    }

    /**
     * Sets cash_account
     *
     * @param object $cash_account cash_account
     *
     * @return $this
     */
    public function setCashAccount($cash_account)
    {
        $this->container['cash_account'] = $cash_account;

        return $this;
    }

    /**
     * Gets dont_print
     *
     * @return object
     */
    public function getDontPrint()
    {
        return $this->container['dont_print'];
    }

    /**
     * Sets dont_print
     *
     * @param object $dont_print dont_print
     *
     * @return $this
     */
    public function setDontPrint($dont_print)
    {
        $this->container['dont_print'] = $dont_print;

        return $this;
    }

    /**
     * Gets dont_email
     *
     * @return object
     */
    public function getDontEmail()
    {
        return $this->container['dont_email'];
    }

    /**
     * Sets dont_email
     *
     * @param object $dont_email dont_email
     *
     * @return $this
     */
    public function setDontEmail($dont_email)
    {
        $this->container['dont_email'] = $dont_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


