<?php
/**
 * InventoryUnitDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * InventoryUnitDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryUnitDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryUnitDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'unit_type' => 'int',
        'item_class' => 'object',
        'inventory_id' => 'int',
        'to_unit' => 'string',
        'sample_to_unit' => 'string',
        'from_unit' => 'string',
        'unit_mult_div' => 'string',
        'unit_rate' => 'double',
        'price_adjustment_multiplier' => 'double',
        'record_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'unit_type' => 'int32',
        'item_class' => null,
        'inventory_id' => 'int32',
        'to_unit' => null,
        'sample_to_unit' => null,
        'from_unit' => null,
        'unit_mult_div' => null,
        'unit_rate' => 'double',
        'price_adjustment_multiplier' => 'double',
        'record_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_type' => 'unitType',
        'item_class' => 'itemClass',
        'inventory_id' => 'inventoryID',
        'to_unit' => 'toUnit',
        'sample_to_unit' => 'sampleToUnit',
        'from_unit' => 'fromUnit',
        'unit_mult_div' => 'unitMultDiv',
        'unit_rate' => 'unitRate',
        'price_adjustment_multiplier' => 'priceAdjustmentMultiplier',
        'record_id' => 'recordID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_type' => 'setUnitType',
        'item_class' => 'setItemClass',
        'inventory_id' => 'setInventoryId',
        'to_unit' => 'setToUnit',
        'sample_to_unit' => 'setSampleToUnit',
        'from_unit' => 'setFromUnit',
        'unit_mult_div' => 'setUnitMultDiv',
        'unit_rate' => 'setUnitRate',
        'price_adjustment_multiplier' => 'setPriceAdjustmentMultiplier',
        'record_id' => 'setRecordId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_type' => 'getUnitType',
        'item_class' => 'getItemClass',
        'inventory_id' => 'getInventoryId',
        'to_unit' => 'getToUnit',
        'sample_to_unit' => 'getSampleToUnit',
        'from_unit' => 'getFromUnit',
        'unit_mult_div' => 'getUnitMultDiv',
        'unit_rate' => 'getUnitRate',
        'price_adjustment_multiplier' => 'getPriceAdjustmentMultiplier',
        'record_id' => 'getRecordId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unit_type'] = isset($data['unit_type']) ? $data['unit_type'] : null;
        $this->container['item_class'] = isset($data['item_class']) ? $data['item_class'] : null;
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['to_unit'] = isset($data['to_unit']) ? $data['to_unit'] : null;
        $this->container['sample_to_unit'] = isset($data['sample_to_unit']) ? $data['sample_to_unit'] : null;
        $this->container['from_unit'] = isset($data['from_unit']) ? $data['from_unit'] : null;
        $this->container['unit_mult_div'] = isset($data['unit_mult_div']) ? $data['unit_mult_div'] : null;
        $this->container['unit_rate'] = isset($data['unit_rate']) ? $data['unit_rate'] : null;
        $this->container['price_adjustment_multiplier'] = isset($data['price_adjustment_multiplier']) ? $data['price_adjustment_multiplier'] : null;
        $this->container['record_id'] = isset($data['record_id']) ? $data['record_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_type
     *
     * @return int
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param int $unit_type unit_type
     *
     * @return $this
     */
    public function setUnitType($unit_type)
    {
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets item_class
     *
     * @return object
     */
    public function getItemClass()
    {
        return $this->container['item_class'];
    }

    /**
     * Sets item_class
     *
     * @param object $item_class item_class
     *
     * @return $this
     */
    public function setItemClass($item_class)
    {
        $this->container['item_class'] = $item_class;

        return $this;
    }

    /**
     * Gets inventory_id
     *
     * @return int
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param int $inventory_id The top part &gt; Item ID &gt; The unique alphanumeric identifier of the stock item.
     *
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets to_unit
     *
     * @return string
     */
    public function getToUnit()
    {
        return $this->container['to_unit'];
    }

    /**
     * Sets to_unit
     *
     * @param string $to_unit To unit &gt; The unit of measure selected as the base unit for the item.
     *
     * @return $this
     */
    public function setToUnit($to_unit)
    {
        $this->container['to_unit'] = $to_unit;

        return $this;
    }

    /**
     * Gets sample_to_unit
     *
     * @return string
     */
    public function getSampleToUnit()
    {
        return $this->container['sample_to_unit'];
    }

    /**
     * Sets sample_to_unit
     *
     * @param string $sample_to_unit sample_to_unit
     *
     * @return $this
     */
    public function setSampleToUnit($sample_to_unit)
    {
        $this->container['sample_to_unit'] = $sample_to_unit;

        return $this;
    }

    /**
     * Gets from_unit
     *
     * @return string
     */
    public function getFromUnit()
    {
        return $this->container['from_unit'];
    }

    /**
     * Sets from_unit
     *
     * @param string $from_unit Mandatory field: From unit &gt; The unit of measure for which the conversion parameters are specified.
     *
     * @return $this
     */
    public function setFromUnit($from_unit)
    {
        $this->container['from_unit'] = $from_unit;

        return $this;
    }

    /**
     * Gets unit_mult_div
     *
     * @return string
     */
    public function getUnitMultDiv()
    {
        return $this->container['unit_mult_div'];
    }

    /**
     * Sets unit_mult_div
     *
     * @param string $unit_mult_div Multiply/divide &gt; The operation to be performed for unit conversion.
     *
     * @return $this
     */
    public function setUnitMultDiv($unit_mult_div)
    {
        $this->container['unit_mult_div'] = $unit_mult_div;

        return $this;
    }

    /**
     * Gets unit_rate
     *
     * @return double
     */
    public function getUnitRate()
    {
        return $this->container['unit_rate'];
    }

    /**
     * Sets unit_rate
     *
     * @param double $unit_rate unit_rate
     *
     * @return $this
     */
    public function setUnitRate($unit_rate)
    {
        $this->container['unit_rate'] = $unit_rate;

        return $this;
    }

    /**
     * Gets price_adjustment_multiplier
     *
     * @return double
     */
    public function getPriceAdjustmentMultiplier()
    {
        return $this->container['price_adjustment_multiplier'];
    }

    /**
     * Sets price_adjustment_multiplier
     *
     * @param double $price_adjustment_multiplier Price adjustment multiplier &gt; Changes the price automatically if you change the UoM.
     *
     * @return $this
     */
    public function setPriceAdjustmentMultiplier($price_adjustment_multiplier)
    {
        $this->container['price_adjustment_multiplier'] = $price_adjustment_multiplier;

        return $this;
    }

    /**
     * Gets record_id
     *
     * @return int
     */
    public function getRecordId()
    {
        return $this->container['record_id'];
    }

    /**
     * Sets record_id
     *
     * @param int $record_id record_id
     *
     * @return $this
     */
    public function setRecordId($record_id)
    {
        $this->container['record_id'] = $record_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


