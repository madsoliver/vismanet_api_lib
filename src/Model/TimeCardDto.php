<?php
/**
 * TimeCardDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * TimeCardDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimeCardDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TimeCardDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ref_nbr' => 'string',
        'status' => 'string',
        'approval_status' => 'string',
        'week' => 'object',
        'employee' => 'object',
        'type' => 'string',
        'orig_ref_nbr' => 'string',
        'time_spent' => 'int',
        'invoiceable' => 'int',
        'overtime_spent' => 'int',
        'invoiceable_overtime' => 'int',
        'total_time_spent' => 'int',
        'invoiceable_total_time' => 'int',
        'last_modified_date_time' => '\DateTime',
        'summary' => '\Ekstralys\VismaNetApi\Model\TimeCardSummaryDto[]',
        'materials' => '\Ekstralys\VismaNetApi\Model\TimeCardMaterialsDto[]',
        'approval_status_text' => 'string',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ref_nbr' => null,
        'status' => null,
        'approval_status' => null,
        'week' => null,
        'employee' => null,
        'type' => null,
        'orig_ref_nbr' => null,
        'time_spent' => 'int32',
        'invoiceable' => 'int32',
        'overtime_spent' => 'int32',
        'invoiceable_overtime' => 'int32',
        'total_time_spent' => 'int32',
        'invoiceable_total_time' => 'int32',
        'last_modified_date_time' => 'date-time',
        'summary' => null,
        'materials' => null,
        'approval_status_text' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_nbr' => 'refNbr',
        'status' => 'status',
        'approval_status' => 'approvalStatus',
        'week' => 'week',
        'employee' => 'employee',
        'type' => 'type',
        'orig_ref_nbr' => 'origRefNbr',
        'time_spent' => 'timeSpent',
        'invoiceable' => 'invoiceable',
        'overtime_spent' => 'overtimeSpent',
        'invoiceable_overtime' => 'invoiceableOvertime',
        'total_time_spent' => 'totalTimeSpent',
        'invoiceable_total_time' => 'invoiceableTotalTime',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'summary' => 'summary',
        'materials' => 'materials',
        'approval_status_text' => 'approvalStatusText',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ref_nbr' => 'setRefNbr',
        'status' => 'setStatus',
        'approval_status' => 'setApprovalStatus',
        'week' => 'setWeek',
        'employee' => 'setEmployee',
        'type' => 'setType',
        'orig_ref_nbr' => 'setOrigRefNbr',
        'time_spent' => 'setTimeSpent',
        'invoiceable' => 'setInvoiceable',
        'overtime_spent' => 'setOvertimeSpent',
        'invoiceable_overtime' => 'setInvoiceableOvertime',
        'total_time_spent' => 'setTotalTimeSpent',
        'invoiceable_total_time' => 'setInvoiceableTotalTime',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'summary' => 'setSummary',
        'materials' => 'setMaterials',
        'approval_status_text' => 'setApprovalStatusText',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ref_nbr' => 'getRefNbr',
        'status' => 'getStatus',
        'approval_status' => 'getApprovalStatus',
        'week' => 'getWeek',
        'employee' => 'getEmployee',
        'type' => 'getType',
        'orig_ref_nbr' => 'getOrigRefNbr',
        'time_spent' => 'getTimeSpent',
        'invoiceable' => 'getInvoiceable',
        'overtime_spent' => 'getOvertimeSpent',
        'invoiceable_overtime' => 'getInvoiceableOvertime',
        'total_time_spent' => 'getTotalTimeSpent',
        'invoiceable_total_time' => 'getInvoiceableTotalTime',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'summary' => 'getSummary',
        'materials' => 'getMaterials',
        'approval_status_text' => 'getApprovalStatusText',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_HOLD = 'Hold';
    const STATUS_OPEN = 'Open';
    const STATUS_APPROVED = 'Approved';
    const STATUS_REJECTED = 'Rejected';
    const STATUS_RELEASED = 'Released';
    const APPROVAL_STATUS__NEW = 'New';
    const APPROVAL_STATUS_CANCELED = 'Canceled';
    const APPROVAL_STATUS_SENT_TO_APPROVAL = 'SentToApproval';
    const APPROVAL_STATUS_RECEIVED_BY_APPROVAL = 'ReceivedByApproval';
    const APPROVAL_STATUS_IN_PROGRESS_APPROVAL = 'InProgressApproval';
    const APPROVAL_STATUS_REJECTED_IN_APPROVAL = 'RejectedInApproval';
    const APPROVAL_STATUS_APPROVED_IN_APPROVAL = 'ApprovedInApproval';
    const APPROVAL_STATUS_ACTIVE_WORKFLOW_APPROVAL = 'ActiveWorkflowApproval';
    const TYPE_NORMAL = 'Normal';
    const TYPE_CORRECTION = 'Correction';
    const TYPE_NORMAL_CORRECTED = 'NormalCorrected';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_HOLD,
            self::STATUS_OPEN,
            self::STATUS_APPROVED,
            self::STATUS_REJECTED,
            self::STATUS_RELEASED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApprovalStatusAllowableValues()
    {
        return [
            self::APPROVAL_STATUS__NEW,
            self::APPROVAL_STATUS_CANCELED,
            self::APPROVAL_STATUS_SENT_TO_APPROVAL,
            self::APPROVAL_STATUS_RECEIVED_BY_APPROVAL,
            self::APPROVAL_STATUS_IN_PROGRESS_APPROVAL,
            self::APPROVAL_STATUS_REJECTED_IN_APPROVAL,
            self::APPROVAL_STATUS_APPROVED_IN_APPROVAL,
            self::APPROVAL_STATUS_ACTIVE_WORKFLOW_APPROVAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NORMAL,
            self::TYPE_CORRECTION,
            self::TYPE_NORMAL_CORRECTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref_nbr'] = isset($data['ref_nbr']) ? $data['ref_nbr'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['approval_status'] = isset($data['approval_status']) ? $data['approval_status'] : null;
        $this->container['week'] = isset($data['week']) ? $data['week'] : null;
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['orig_ref_nbr'] = isset($data['orig_ref_nbr']) ? $data['orig_ref_nbr'] : null;
        $this->container['time_spent'] = isset($data['time_spent']) ? $data['time_spent'] : null;
        $this->container['invoiceable'] = isset($data['invoiceable']) ? $data['invoiceable'] : null;
        $this->container['overtime_spent'] = isset($data['overtime_spent']) ? $data['overtime_spent'] : null;
        $this->container['invoiceable_overtime'] = isset($data['invoiceable_overtime']) ? $data['invoiceable_overtime'] : null;
        $this->container['total_time_spent'] = isset($data['total_time_spent']) ? $data['total_time_spent'] : null;
        $this->container['invoiceable_total_time'] = isset($data['invoiceable_total_time']) ? $data['invoiceable_total_time'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['materials'] = isset($data['materials']) ? $data['materials'] : null;
        $this->container['approval_status_text'] = isset($data['approval_status_text']) ? $data['approval_status_text'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApprovalStatusAllowableValues();
        if (!is_null($this->container['approval_status']) && !in_array($this->container['approval_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'approval_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ref_nbr
     *
     * @return string
     */
    public function getRefNbr()
    {
        return $this->container['ref_nbr'];
    }

    /**
     * Sets ref_nbr
     *
     * @param string $ref_nbr The top part &gt; Ref. no. &gt; The unique reference number of the time card, which Acumatica ERP automatically assigns according to the numbering sequence specified as the Time Card Numbering Sequence on the Time and Expenses Preferences (EP.10.10.00) form.
     *
     * @return $this
     */
    public function setRefNbr($ref_nbr)
    {
        $this->container['ref_nbr'] = $ref_nbr;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The top part &gt; Status &gt; The status of the time card
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets approval_status
     *
     * @return string
     */
    public function getApprovalStatus()
    {
        return $this->container['approval_status'];
    }

    /**
     * Sets approval_status
     *
     * @param string $approval_status The top part &gt; Approval status &gt; The approval status of the time card
     *
     * @return $this
     */
    public function setApprovalStatus($approval_status)
    {
        $allowedValues = $this->getApprovalStatusAllowableValues();
        if (!is_null($approval_status) && !in_array($approval_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'approval_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['approval_status'] = $approval_status;

        return $this;
    }

    /**
     * Gets week
     *
     * @return object
     */
    public function getWeek()
    {
        return $this->container['week'];
    }

    /**
     * Sets week
     *
     * @param object $week The top part &gt; Week &gt; The week for which the time card has been created.
     *
     * @return $this
     */
    public function setWeek($week)
    {
        $this->container['week'] = $week;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return object
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param object $employee The top part &gt; Employee &gt; The name of the employee whose time card is currently open.
     *
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The top part &gt; Type &gt; The type of the time card. The following options are available:• Normal: Regular time card• Correction: Corrective time card, which is a time card that updates a released time card
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets orig_ref_nbr
     *
     * @return string
     */
    public function getOrigRefNbr()
    {
        return $this->container['orig_ref_nbr'];
    }

    /**
     * Sets orig_ref_nbr
     *
     * @param string $orig_ref_nbr The top part &gt; Orig. ref. no. &gt; The reference number of the time card being corrected. This box is filled in only when Correction is specified in the Type box
     *
     * @return $this
     */
    public function setOrigRefNbr($orig_ref_nbr)
    {
        $this->container['orig_ref_nbr'] = $orig_ref_nbr;

        return $this;
    }

    /**
     * Gets time_spent
     *
     * @return int
     */
    public function getTimeSpent()
    {
        return $this->container['time_spent'];
    }

    /**
     * Sets time_spent
     *
     * @param int $time_spent The top part &gt; Regular column: Time spent &gt; The work hours spent by the employee during the week on activities with the Regular Hours earning type.
     *
     * @return $this
     */
    public function setTimeSpent($time_spent)
    {
        $this->container['time_spent'] = $time_spent;

        return $this;
    }

    /**
     * Gets invoiceable
     *
     * @return int
     */
    public function getInvoiceable()
    {
        return $this->container['invoiceable'];
    }

    /**
     * Sets invoiceable
     *
     * @param int $invoiceable The top part &gt; Regular column: Invoicable &gt; The invoiceable work hours spent by the employee during the week
     *
     * @return $this
     */
    public function setInvoiceable($invoiceable)
    {
        $this->container['invoiceable'] = $invoiceable;

        return $this;
    }

    /**
     * Gets overtime_spent
     *
     * @return int
     */
    public function getOvertimeSpent()
    {
        return $this->container['overtime_spent'];
    }

    /**
     * Sets overtime_spent
     *
     * @param int $overtime_spent The top part &gt; Overtime column: Time spent &gt; The work hours spent by the employee during the week on activities with the Overtime earning type.
     *
     * @return $this
     */
    public function setOvertimeSpent($overtime_spent)
    {
        $this->container['overtime_spent'] = $overtime_spent;

        return $this;
    }

    /**
     * Gets invoiceable_overtime
     *
     * @return int
     */
    public function getInvoiceableOvertime()
    {
        return $this->container['invoiceable_overtime'];
    }

    /**
     * Sets invoiceable_overtime
     *
     * @param int $invoiceable_overtime The top part &gt; Overtime column: Invoicable &gt; The invoiceable overtime spent by the employee during the week
     *
     * @return $this
     */
    public function setInvoiceableOvertime($invoiceable_overtime)
    {
        $this->container['invoiceable_overtime'] = $invoiceable_overtime;

        return $this;
    }

    /**
     * Gets total_time_spent
     *
     * @return int
     */
    public function getTotalTimeSpent()
    {
        return $this->container['total_time_spent'];
    }

    /**
     * Sets total_time_spent
     *
     * @param int $total_time_spent The top part &gt; Total column: Time spent &gt; The total working time (regular and overtime) for the week
     *
     * @return $this
     */
    public function setTotalTimeSpent($total_time_spent)
    {
        $this->container['total_time_spent'] = $total_time_spent;

        return $this;
    }

    /**
     * Gets invoiceable_total_time
     *
     * @return int
     */
    public function getInvoiceableTotalTime()
    {
        return $this->container['invoiceable_total_time'];
    }

    /**
     * Sets invoiceable_total_time
     *
     * @param int $invoiceable_total_time The top part &gt; Total column: Invoicable &gt; The total invoiceable working time (regular and overtime) for the week
     *
     * @return $this
     */
    public function setInvoiceableTotalTime($invoiceable_total_time)
    {
        $this->container['invoiceable_total_time'] = $invoiceable_total_time;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time System generated information: The last time the time card line was modified
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return \Ekstralys\VismaNetApi\Model\TimeCardSummaryDto[]
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \Ekstralys\VismaNetApi\Model\TimeCardSummaryDto[] $summary Summary tab &gt; Time Card summary information
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets materials
     *
     * @return \Ekstralys\VismaNetApi\Model\TimeCardMaterialsDto[]
     */
    public function getMaterials()
    {
        return $this->container['materials'];
    }

    /**
     * Sets materials
     *
     * @param \Ekstralys\VismaNetApi\Model\TimeCardMaterialsDto[] $materials Summary tab &gt; Time Card materials information
     *
     * @return $this
     */
    public function setMaterials($materials)
    {
        $this->container['materials'] = $materials;

        return $this;
    }

    /**
     * Gets approval_status_text
     *
     * @return string
     */
    public function getApprovalStatusText()
    {
        return $this->container['approval_status_text'];
    }

    /**
     * Sets approval_status_text
     *
     * @param string $approval_status_text approval_status_text
     *
     * @return $this
     */
    public function setApprovalStatusText($approval_status_text)
    {
        $this->container['approval_status_text'] = $approval_status_text;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


