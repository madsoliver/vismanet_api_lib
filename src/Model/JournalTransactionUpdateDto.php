<?php
/**
 * JournalTransactionUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * JournalTransactionUpdateDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a journal transaction in JournalTransactionController. Used for creating/updating data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JournalTransactionUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JournalTransactionUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'batch_number' => 'object',
        'hold' => 'object',
        'transaction_date' => 'object',
        'post_period' => 'object',
        'financial_period' => 'object',
        'ledger' => 'object',
        'currency_id' => 'object',
        'exchange_rate' => 'object',
        'auto_reversing' => 'object',
        'description' => 'object',
        'control_total_in_currency' => 'object',
        'create_vat_transaction' => 'object',
        'skip_vat_amount_validation' => 'object',
        'transaction_code' => 'object',
        'branch' => 'object',
        'override_number_series' => 'object',
        'journal_transaction_lines' => '\Ekstralys\VismaNetApi\Model\JournalTransactionLineUpdateDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'batch_number' => null,
        'hold' => null,
        'transaction_date' => null,
        'post_period' => null,
        'financial_period' => null,
        'ledger' => null,
        'currency_id' => null,
        'exchange_rate' => null,
        'auto_reversing' => null,
        'description' => null,
        'control_total_in_currency' => null,
        'create_vat_transaction' => null,
        'skip_vat_amount_validation' => null,
        'transaction_code' => null,
        'branch' => null,
        'override_number_series' => null,
        'journal_transaction_lines' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'batch_number' => 'batchNumber',
        'hold' => 'hold',
        'transaction_date' => 'transactionDate',
        'post_period' => 'postPeriod',
        'financial_period' => 'financialPeriod',
        'ledger' => 'ledger',
        'currency_id' => 'currencyId',
        'exchange_rate' => 'exchangeRate',
        'auto_reversing' => 'autoReversing',
        'description' => 'description',
        'control_total_in_currency' => 'controlTotalInCurrency',
        'create_vat_transaction' => 'createVatTransaction',
        'skip_vat_amount_validation' => 'skipVatAmountValidation',
        'transaction_code' => 'transactionCode',
        'branch' => 'branch',
        'override_number_series' => 'overrideNumberSeries',
        'journal_transaction_lines' => 'journalTransactionLines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'batch_number' => 'setBatchNumber',
        'hold' => 'setHold',
        'transaction_date' => 'setTransactionDate',
        'post_period' => 'setPostPeriod',
        'financial_period' => 'setFinancialPeriod',
        'ledger' => 'setLedger',
        'currency_id' => 'setCurrencyId',
        'exchange_rate' => 'setExchangeRate',
        'auto_reversing' => 'setAutoReversing',
        'description' => 'setDescription',
        'control_total_in_currency' => 'setControlTotalInCurrency',
        'create_vat_transaction' => 'setCreateVatTransaction',
        'skip_vat_amount_validation' => 'setSkipVatAmountValidation',
        'transaction_code' => 'setTransactionCode',
        'branch' => 'setBranch',
        'override_number_series' => 'setOverrideNumberSeries',
        'journal_transaction_lines' => 'setJournalTransactionLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'batch_number' => 'getBatchNumber',
        'hold' => 'getHold',
        'transaction_date' => 'getTransactionDate',
        'post_period' => 'getPostPeriod',
        'financial_period' => 'getFinancialPeriod',
        'ledger' => 'getLedger',
        'currency_id' => 'getCurrencyId',
        'exchange_rate' => 'getExchangeRate',
        'auto_reversing' => 'getAutoReversing',
        'description' => 'getDescription',
        'control_total_in_currency' => 'getControlTotalInCurrency',
        'create_vat_transaction' => 'getCreateVatTransaction',
        'skip_vat_amount_validation' => 'getSkipVatAmountValidation',
        'transaction_code' => 'getTransactionCode',
        'branch' => 'getBranch',
        'override_number_series' => 'getOverrideNumberSeries',
        'journal_transaction_lines' => 'getJournalTransactionLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['batch_number'] = isset($data['batch_number']) ? $data['batch_number'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['transaction_date'] = isset($data['transaction_date']) ? $data['transaction_date'] : null;
        $this->container['post_period'] = isset($data['post_period']) ? $data['post_period'] : null;
        $this->container['financial_period'] = isset($data['financial_period']) ? $data['financial_period'] : null;
        $this->container['ledger'] = isset($data['ledger']) ? $data['ledger'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['auto_reversing'] = isset($data['auto_reversing']) ? $data['auto_reversing'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['control_total_in_currency'] = isset($data['control_total_in_currency']) ? $data['control_total_in_currency'] : null;
        $this->container['create_vat_transaction'] = isset($data['create_vat_transaction']) ? $data['create_vat_transaction'] : null;
        $this->container['skip_vat_amount_validation'] = isset($data['skip_vat_amount_validation']) ? $data['skip_vat_amount_validation'] : null;
        $this->container['transaction_code'] = isset($data['transaction_code']) ? $data['transaction_code'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['override_number_series'] = isset($data['override_number_series']) ? $data['override_number_series'] : null;
        $this->container['journal_transaction_lines'] = isset($data['journal_transaction_lines']) ? $data['journal_transaction_lines'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets batch_number
     *
     * @return object
     */
    public function getBatchNumber()
    {
        return $this->container['batch_number'];
    }

    /**
     * Sets batch_number
     *
     * @param object $batch_number batch_number
     *
     * @return $this
     */
    public function setBatchNumber($batch_number)
    {
        $this->container['batch_number'] = $batch_number;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return object
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param object $hold hold
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return object
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param object $transaction_date transaction_date
     *
     * @return $this
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets post_period
     *
     * @return object
     */
    public function getPostPeriod()
    {
        return $this->container['post_period'];
    }

    /**
     * Sets post_period
     *
     * @param object $post_period The financial period to which the transactions recorded in the document should be posted. Use the format MMYYYY.
     *
     * @return $this
     */
    public function setPostPeriod($post_period)
    {
        $this->container['post_period'] = $post_period;

        return $this;
    }

    /**
     * Gets financial_period
     *
     * @return object
     */
    public function getFinancialPeriod()
    {
        return $this->container['financial_period'];
    }

    /**
     * Sets financial_period
     *
     * @param object $financial_period The financial period to which the transactions recorded in the document should be posted. Use the format YYYYMM.
     *
     * @return $this
     */
    public function setFinancialPeriod($financial_period)
    {
        $this->container['financial_period'] = $financial_period;

        return $this;
    }

    /**
     * Gets ledger
     *
     * @return object
     */
    public function getLedger()
    {
        return $this->container['ledger'];
    }

    /**
     * Sets ledger
     *
     * @param object $ledger ledger
     *
     * @return $this
     */
    public function setLedger($ledger)
    {
        $this->container['ledger'] = $ledger;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return object
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param object $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return object
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param object $exchange_rate exchange_rate
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets auto_reversing
     *
     * @return object
     */
    public function getAutoReversing()
    {
        return $this->container['auto_reversing'];
    }

    /**
     * Sets auto_reversing
     *
     * @param object $auto_reversing auto_reversing
     *
     * @return $this
     */
    public function setAutoReversing($auto_reversing)
    {
        $this->container['auto_reversing'] = $auto_reversing;

        return $this;
    }

    /**
     * Gets description
     *
     * @return object
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param object $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets control_total_in_currency
     *
     * @return object
     */
    public function getControlTotalInCurrency()
    {
        return $this->container['control_total_in_currency'];
    }

    /**
     * Sets control_total_in_currency
     *
     * @param object $control_total_in_currency control_total_in_currency
     *
     * @return $this
     */
    public function setControlTotalInCurrency($control_total_in_currency)
    {
        $this->container['control_total_in_currency'] = $control_total_in_currency;

        return $this;
    }

    /**
     * Gets create_vat_transaction
     *
     * @return object
     */
    public function getCreateVatTransaction()
    {
        return $this->container['create_vat_transaction'];
    }

    /**
     * Sets create_vat_transaction
     *
     * @param object $create_vat_transaction create_vat_transaction
     *
     * @return $this
     */
    public function setCreateVatTransaction($create_vat_transaction)
    {
        $this->container['create_vat_transaction'] = $create_vat_transaction;

        return $this;
    }

    /**
     * Gets skip_vat_amount_validation
     *
     * @return object
     */
    public function getSkipVatAmountValidation()
    {
        return $this->container['skip_vat_amount_validation'];
    }

    /**
     * Sets skip_vat_amount_validation
     *
     * @param object $skip_vat_amount_validation skip_vat_amount_validation
     *
     * @return $this
     */
    public function setSkipVatAmountValidation($skip_vat_amount_validation)
    {
        $this->container['skip_vat_amount_validation'] = $skip_vat_amount_validation;

        return $this;
    }

    /**
     * Gets transaction_code
     *
     * @return object
     */
    public function getTransactionCode()
    {
        return $this->container['transaction_code'];
    }

    /**
     * Sets transaction_code
     *
     * @param object $transaction_code transaction_code
     *
     * @return $this
     */
    public function setTransactionCode($transaction_code)
    {
        $this->container['transaction_code'] = $transaction_code;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return object
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param object $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets override_number_series
     *
     * @return object
     */
    public function getOverrideNumberSeries()
    {
        return $this->container['override_number_series'];
    }

    /**
     * Sets override_number_series
     *
     * @param object $override_number_series override_number_series
     *
     * @return $this
     */
    public function setOverrideNumberSeries($override_number_series)
    {
        $this->container['override_number_series'] = $override_number_series;

        return $this;
    }

    /**
     * Gets journal_transaction_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\JournalTransactionLineUpdateDto[]
     */
    public function getJournalTransactionLines()
    {
        return $this->container['journal_transaction_lines'];
    }

    /**
     * Sets journal_transaction_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\JournalTransactionLineUpdateDto[] $journal_transaction_lines journal_transaction_lines
     *
     * @return $this
     */
    public function setJournalTransactionLines($journal_transaction_lines)
    {
        $this->container['journal_transaction_lines'] = $journal_transaction_lines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


