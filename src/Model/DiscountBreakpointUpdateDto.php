<?php
/**
 * DiscountBreakpointUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * DiscountBreakpointUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiscountBreakpointUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DiscountBreakpointUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'operation' => 'string',
        'line_nbr' => 'object',
        'pending_break_amount' => 'object',
        'pending_date' => 'object',
        'pending_discount_percent' => 'object',
        'pending_discount_amount' => 'object',
        'pending_break_quantity' => 'object',
        'break_amount' => 'object',
        'discount_amount' => 'object',
        'discount_percent' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'operation' => null,
        'line_nbr' => null,
        'pending_break_amount' => null,
        'pending_date' => null,
        'pending_discount_percent' => null,
        'pending_discount_amount' => null,
        'pending_break_quantity' => null,
        'break_amount' => null,
        'discount_amount' => null,
        'discount_percent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'operation' => 'operation',
        'line_nbr' => 'lineNbr',
        'pending_break_amount' => 'pendingBreakAmount',
        'pending_date' => 'pendingDate',
        'pending_discount_percent' => 'pendingDiscountPercent',
        'pending_discount_amount' => 'pendingDiscountAmount',
        'pending_break_quantity' => 'pendingBreakQuantity',
        'break_amount' => 'breakAmount',
        'discount_amount' => 'discountAmount',
        'discount_percent' => 'discountPercent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'operation' => 'setOperation',
        'line_nbr' => 'setLineNbr',
        'pending_break_amount' => 'setPendingBreakAmount',
        'pending_date' => 'setPendingDate',
        'pending_discount_percent' => 'setPendingDiscountPercent',
        'pending_discount_amount' => 'setPendingDiscountAmount',
        'pending_break_quantity' => 'setPendingBreakQuantity',
        'break_amount' => 'setBreakAmount',
        'discount_amount' => 'setDiscountAmount',
        'discount_percent' => 'setDiscountPercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'operation' => 'getOperation',
        'line_nbr' => 'getLineNbr',
        'pending_break_amount' => 'getPendingBreakAmount',
        'pending_date' => 'getPendingDate',
        'pending_discount_percent' => 'getPendingDiscountPercent',
        'pending_discount_amount' => 'getPendingDiscountAmount',
        'pending_break_quantity' => 'getPendingBreakQuantity',
        'break_amount' => 'getBreakAmount',
        'discount_amount' => 'getDiscountAmount',
        'discount_percent' => 'getDiscountPercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OPERATION_INSERT = 'Insert';
    const OPERATION_UPDATE = 'Update';
    const OPERATION_DELETE = 'Delete';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_INSERT,
            self::OPERATION_UPDATE,
            self::OPERATION_DELETE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['line_nbr'] = isset($data['line_nbr']) ? $data['line_nbr'] : null;
        $this->container['pending_break_amount'] = isset($data['pending_break_amount']) ? $data['pending_break_amount'] : null;
        $this->container['pending_date'] = isset($data['pending_date']) ? $data['pending_date'] : null;
        $this->container['pending_discount_percent'] = isset($data['pending_discount_percent']) ? $data['pending_discount_percent'] : null;
        $this->container['pending_discount_amount'] = isset($data['pending_discount_amount']) ? $data['pending_discount_amount'] : null;
        $this->container['pending_break_quantity'] = isset($data['pending_break_quantity']) ? $data['pending_break_quantity'] : null;
        $this->container['break_amount'] = isset($data['break_amount']) ? $data['break_amount'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation operation
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($operation) && !in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets line_nbr
     *
     * @return object
     */
    public function getLineNbr()
    {
        return $this->container['line_nbr'];
    }

    /**
     * Sets line_nbr
     *
     * @param object $line_nbr line_nbr
     *
     * @return $this
     */
    public function setLineNbr($line_nbr)
    {
        $this->container['line_nbr'] = $line_nbr;

        return $this;
    }

    /**
     * Gets pending_break_amount
     *
     * @return object
     */
    public function getPendingBreakAmount()
    {
        return $this->container['pending_break_amount'];
    }

    /**
     * Sets pending_break_amount
     *
     * @param object $pending_break_amount pending_break_amount
     *
     * @return $this
     */
    public function setPendingBreakAmount($pending_break_amount)
    {
        $this->container['pending_break_amount'] = $pending_break_amount;

        return $this;
    }

    /**
     * Gets pending_date
     *
     * @return object
     */
    public function getPendingDate()
    {
        return $this->container['pending_date'];
    }

    /**
     * Sets pending_date
     *
     * @param object $pending_date pending_date
     *
     * @return $this
     */
    public function setPendingDate($pending_date)
    {
        $this->container['pending_date'] = $pending_date;

        return $this;
    }

    /**
     * Gets pending_discount_percent
     *
     * @return object
     */
    public function getPendingDiscountPercent()
    {
        return $this->container['pending_discount_percent'];
    }

    /**
     * Sets pending_discount_percent
     *
     * @param object $pending_discount_percent pending_discount_percent
     *
     * @return $this
     */
    public function setPendingDiscountPercent($pending_discount_percent)
    {
        $this->container['pending_discount_percent'] = $pending_discount_percent;

        return $this;
    }

    /**
     * Gets pending_discount_amount
     *
     * @return object
     */
    public function getPendingDiscountAmount()
    {
        return $this->container['pending_discount_amount'];
    }

    /**
     * Sets pending_discount_amount
     *
     * @param object $pending_discount_amount pending_discount_amount
     *
     * @return $this
     */
    public function setPendingDiscountAmount($pending_discount_amount)
    {
        $this->container['pending_discount_amount'] = $pending_discount_amount;

        return $this;
    }

    /**
     * Gets pending_break_quantity
     *
     * @return object
     */
    public function getPendingBreakQuantity()
    {
        return $this->container['pending_break_quantity'];
    }

    /**
     * Sets pending_break_quantity
     *
     * @param object $pending_break_quantity pending_break_quantity
     *
     * @return $this
     */
    public function setPendingBreakQuantity($pending_break_quantity)
    {
        $this->container['pending_break_quantity'] = $pending_break_quantity;

        return $this;
    }

    /**
     * Gets break_amount
     *
     * @return object
     */
    public function getBreakAmount()
    {
        return $this->container['break_amount'];
    }

    /**
     * Sets break_amount
     *
     * @param object $break_amount break_amount
     *
     * @return $this
     */
    public function setBreakAmount($break_amount)
    {
        $this->container['break_amount'] = $break_amount;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return object
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param object $discount_amount discount_amount
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return object
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param object $discount_percent discount_percent
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


