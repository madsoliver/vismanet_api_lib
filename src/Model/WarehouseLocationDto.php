<?php
/**
 * WarehouseLocationDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * WarehouseLocationDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WarehouseLocationDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WarehouseLocationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'location_id' => 'string',
        'description' => 'string',
        'active' => 'bool',
        'incl_qty_avail' => 'bool',
        'is_costed' => 'bool',
        'sales_valid' => 'bool',
        'receipts_valid' => 'bool',
        'transfers_valid' => 'bool',
        'assembly_valid' => 'bool',
        'primary_item_valid' => 'string',
        'primary_item' => 'object',
        'primary_item_class' => 'object',
        'project' => 'object',
        'project_task' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'location_id' => null,
        'description' => null,
        'active' => null,
        'incl_qty_avail' => null,
        'is_costed' => null,
        'sales_valid' => null,
        'receipts_valid' => null,
        'transfers_valid' => null,
        'assembly_valid' => null,
        'primary_item_valid' => null,
        'primary_item' => null,
        'primary_item_class' => null,
        'project' => null,
        'project_task' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'location_id' => 'locationId',
        'description' => 'description',
        'active' => 'active',
        'incl_qty_avail' => 'inclQtyAvail',
        'is_costed' => 'isCosted',
        'sales_valid' => 'salesValid',
        'receipts_valid' => 'receiptsValid',
        'transfers_valid' => 'transfersValid',
        'assembly_valid' => 'assemblyValid',
        'primary_item_valid' => 'primaryItemValid',
        'primary_item' => 'primaryItem',
        'primary_item_class' => 'primaryItemClass',
        'project' => 'project',
        'project_task' => 'projectTask'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'location_id' => 'setLocationId',
        'description' => 'setDescription',
        'active' => 'setActive',
        'incl_qty_avail' => 'setInclQtyAvail',
        'is_costed' => 'setIsCosted',
        'sales_valid' => 'setSalesValid',
        'receipts_valid' => 'setReceiptsValid',
        'transfers_valid' => 'setTransfersValid',
        'assembly_valid' => 'setAssemblyValid',
        'primary_item_valid' => 'setPrimaryItemValid',
        'primary_item' => 'setPrimaryItem',
        'primary_item_class' => 'setPrimaryItemClass',
        'project' => 'setProject',
        'project_task' => 'setProjectTask'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'location_id' => 'getLocationId',
        'description' => 'getDescription',
        'active' => 'getActive',
        'incl_qty_avail' => 'getInclQtyAvail',
        'is_costed' => 'getIsCosted',
        'sales_valid' => 'getSalesValid',
        'receipts_valid' => 'getReceiptsValid',
        'transfers_valid' => 'getTransfersValid',
        'assembly_valid' => 'getAssemblyValid',
        'primary_item_valid' => 'getPrimaryItemValid',
        'primary_item' => 'getPrimaryItem',
        'primary_item_class' => 'getPrimaryItemClass',
        'project' => 'getProject',
        'project_task' => 'getProjectTask'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRIMARY_ITEM_VALID_PRIMARY_NOTHING = 'PrimaryNothing';
    const PRIMARY_ITEM_VALID_PRIMARY_ITEM_WARNING = 'PrimaryItemWarning';
    const PRIMARY_ITEM_VALID_PRIMARY_ITEM_ERROR = 'PrimaryItemError';
    const PRIMARY_ITEM_VALID_PRIMARY_ITEM_CLASS_WARNING = 'PrimaryItemClassWarning';
    const PRIMARY_ITEM_VALID_PRIMARY_ITEM_CLASS_ERROR = 'PrimaryItemClassError';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrimaryItemValidAllowableValues()
    {
        return [
            self::PRIMARY_ITEM_VALID_PRIMARY_NOTHING,
            self::PRIMARY_ITEM_VALID_PRIMARY_ITEM_WARNING,
            self::PRIMARY_ITEM_VALID_PRIMARY_ITEM_ERROR,
            self::PRIMARY_ITEM_VALID_PRIMARY_ITEM_CLASS_WARNING,
            self::PRIMARY_ITEM_VALID_PRIMARY_ITEM_CLASS_ERROR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['incl_qty_avail'] = isset($data['incl_qty_avail']) ? $data['incl_qty_avail'] : null;
        $this->container['is_costed'] = isset($data['is_costed']) ? $data['is_costed'] : null;
        $this->container['sales_valid'] = isset($data['sales_valid']) ? $data['sales_valid'] : null;
        $this->container['receipts_valid'] = isset($data['receipts_valid']) ? $data['receipts_valid'] : null;
        $this->container['transfers_valid'] = isset($data['transfers_valid']) ? $data['transfers_valid'] : null;
        $this->container['assembly_valid'] = isset($data['assembly_valid']) ? $data['assembly_valid'] : null;
        $this->container['primary_item_valid'] = isset($data['primary_item_valid']) ? $data['primary_item_valid'] : null;
        $this->container['primary_item'] = isset($data['primary_item']) ? $data['primary_item'] : null;
        $this->container['primary_item_class'] = isset($data['primary_item_class']) ? $data['primary_item_class'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['project_task'] = isset($data['project_task']) ? $data['project_task'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPrimaryItemValidAllowableValues();
        if (!is_null($this->container['primary_item_valid']) && !in_array($this->container['primary_item_valid'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'primary_item_valid', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets location_id
     *
     * @return string
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param string $location_id Location ID &gt; The unique ID of the warehouse location.
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description &gt; A brief description of the warehouse location.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Active &gt; This check box indicates whether this location is active.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets incl_qty_avail
     *
     * @return bool
     */
    public function getInclQtyAvail()
    {
        return $this->container['incl_qty_avail'];
    }

    /**
     * Sets incl_qty_avail
     *
     * @param bool $incl_qty_avail Include in qty. available &gt; You select this check box if the quantities of goods available at this location will be included in the quantities of available goods and used in inventory transactions, such as issues and transfers.
     *
     * @return $this
     */
    public function setInclQtyAvail($incl_qty_avail)
    {
        $this->container['incl_qty_avail'] = $incl_qty_avail;

        return $this;
    }

    /**
     * Gets is_costed
     *
     * @return bool
     */
    public function getIsCosted()
    {
        return $this->container['is_costed'];
    }

    /**
     * Sets is_costed
     *
     * @param bool $is_costed Cost separately &gt; You select this check box if the costs for goods available at this location will be calculated separately from costs calculated at the system-level; that is, for FIFO and specific valuation methods, separate cost layers will be created for this location.
     *
     * @return $this
     */
    public function setIsCosted($is_costed)
    {
        $this->container['is_costed'] = $is_costed;

        return $this;
    }

    /**
     * Gets sales_valid
     *
     * @return bool
     */
    public function getSalesValid()
    {
        return $this->container['sales_valid'];
    }

    /**
     * Sets sales_valid
     *
     * @param bool $sales_valid Sales allowed &gt; You select this check box if sales are allowed from this location.
     *
     * @return $this
     */
    public function setSalesValid($sales_valid)
    {
        $this->container['sales_valid'] = $sales_valid;

        return $this;
    }

    /**
     * Gets receipts_valid
     *
     * @return bool
     */
    public function getReceiptsValid()
    {
        return $this->container['receipts_valid'];
    }

    /**
     * Sets receipts_valid
     *
     * @param bool $receipts_valid Receipts allowed &gt; You select this check box if receipts are allowed at this location.
     *
     * @return $this
     */
    public function setReceiptsValid($receipts_valid)
    {
        $this->container['receipts_valid'] = $receipts_valid;

        return $this;
    }

    /**
     * Gets transfers_valid
     *
     * @return bool
     */
    public function getTransfersValid()
    {
        return $this->container['transfers_valid'];
    }

    /**
     * Sets transfers_valid
     *
     * @param bool $transfers_valid Transfers allowed &gt; You select this check box if transfers are allowed for this location.
     *
     * @return $this
     */
    public function setTransfersValid($transfers_valid)
    {
        $this->container['transfers_valid'] = $transfers_valid;

        return $this;
    }

    /**
     * Gets assembly_valid
     *
     * @return bool
     */
    public function getAssemblyValid()
    {
        return $this->container['assembly_valid'];
    }

    /**
     * Sets assembly_valid
     *
     * @param bool $assembly_valid Assembly allowed &gt; You select this check box if assembly operations are allowed at this location.
     *
     * @return $this
     */
    public function setAssemblyValid($assembly_valid)
    {
        $this->container['assembly_valid'] = $assembly_valid;

        return $this;
    }

    /**
     * Gets primary_item_valid
     *
     * @return string
     */
    public function getPrimaryItemValid()
    {
        return $this->container['primary_item_valid'];
    }

    /**
     * Sets primary_item_valid
     *
     * @param string $primary_item_valid Primary item validation &gt; An option indicating whether the operations with the primary item should be validated for this location and how.
     *
     * @return $this
     */
    public function setPrimaryItemValid($primary_item_valid)
    {
        $allowedValues = $this->getPrimaryItemValidAllowableValues();
        if (!is_null($primary_item_valid) && !in_array($primary_item_valid, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'primary_item_valid', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['primary_item_valid'] = $primary_item_valid;

        return $this;
    }

    /**
     * Gets primary_item
     *
     * @return object
     */
    public function getPrimaryItem()
    {
        return $this->container['primary_item'];
    }

    /**
     * Sets primary_item
     *
     * @param object $primary_item Primary item &gt; The primary item for this location, which is the item that is received the most often or stored here in the highest volumes.
     *
     * @return $this
     */
    public function setPrimaryItem($primary_item)
    {
        $this->container['primary_item'] = $primary_item;

        return $this;
    }

    /**
     * Gets primary_item_class
     *
     * @return object
     */
    public function getPrimaryItemClass()
    {
        return $this->container['primary_item_class'];
    }

    /**
     * Sets primary_item_class
     *
     * @param object $primary_item_class Primary item class &gt; The primary item class for this location; items of this class are received the most often or stored here in the highest volumes.
     *
     * @return $this
     */
    public function setPrimaryItemClass($primary_item_class)
    {
        $this->container['primary_item_class'] = $primary_item_class;

        return $this;
    }

    /**
     * Gets project
     *
     * @return object
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param object $project Project &gt; The project to associate with this location by default.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets project_task
     *
     * @return object
     */
    public function getProjectTask()
    {
        return $this->container['project_task'];
    }

    /**
     * Sets project_task
     *
     * @param object $project_task Project task &gt; The project task to associate with this location by default.
     *
     * @return $this
     */
    public function setProjectTask($project_task)
    {
        $this->container['project_task'] = $project_task;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


