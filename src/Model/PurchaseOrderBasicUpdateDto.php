<?php
/**
 * PurchaseOrderBasicUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * PurchaseOrderBasicUpdateDto Class Doc Comment
 *
 * @category Class
 * @description This class represent a Purchase Order in Purchase Order Controller. Used to pass data to server for creating or updating an order  Supplier is mandatory to create Purchase Order, customer can be identified by Supplier, GLN or VatRegistrationId
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseOrderBasicUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseOrderBasicUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_type' => 'object',
        'order_number' => 'object',
        'hold' => 'object',
        'date' => 'object',
        'promised_on' => 'object',
        'description' => 'object',
        'supplier' => 'object',
        'location' => 'object',
        'gln' => 'object',
        'vat_registration_id' => 'object',
        'owner' => 'object',
        'currency' => 'object',
        'exchange_rate' => 'object',
        'supplier_ref' => 'object',
        'control_total' => 'object',
        'branch' => 'object',
        'lines' => '\Ekstralys\VismaNetApi\Model\PurchaseOrderLineUpdateDto[]',
        'change_dates_on_lines' => 'bool',
        'note' => 'object',
        'override_number_series' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_type' => null,
        'order_number' => null,
        'hold' => null,
        'date' => null,
        'promised_on' => null,
        'description' => null,
        'supplier' => null,
        'location' => null,
        'gln' => null,
        'vat_registration_id' => null,
        'owner' => null,
        'currency' => null,
        'exchange_rate' => null,
        'supplier_ref' => null,
        'control_total' => null,
        'branch' => null,
        'lines' => null,
        'change_dates_on_lines' => null,
        'note' => null,
        'override_number_series' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_type' => 'orderType',
        'order_number' => 'orderNumber',
        'hold' => 'hold',
        'date' => 'date',
        'promised_on' => 'promisedOn',
        'description' => 'description',
        'supplier' => 'supplier',
        'location' => 'location',
        'gln' => 'gln',
        'vat_registration_id' => 'vatRegistrationId',
        'owner' => 'owner',
        'currency' => 'currency',
        'exchange_rate' => 'exchangeRate',
        'supplier_ref' => 'supplierRef',
        'control_total' => 'controlTotal',
        'branch' => 'branch',
        'lines' => 'lines',
        'change_dates_on_lines' => 'changeDatesOnLines',
        'note' => 'note',
        'override_number_series' => 'overrideNumberSeries'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_type' => 'setOrderType',
        'order_number' => 'setOrderNumber',
        'hold' => 'setHold',
        'date' => 'setDate',
        'promised_on' => 'setPromisedOn',
        'description' => 'setDescription',
        'supplier' => 'setSupplier',
        'location' => 'setLocation',
        'gln' => 'setGln',
        'vat_registration_id' => 'setVatRegistrationId',
        'owner' => 'setOwner',
        'currency' => 'setCurrency',
        'exchange_rate' => 'setExchangeRate',
        'supplier_ref' => 'setSupplierRef',
        'control_total' => 'setControlTotal',
        'branch' => 'setBranch',
        'lines' => 'setLines',
        'change_dates_on_lines' => 'setChangeDatesOnLines',
        'note' => 'setNote',
        'override_number_series' => 'setOverrideNumberSeries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_type' => 'getOrderType',
        'order_number' => 'getOrderNumber',
        'hold' => 'getHold',
        'date' => 'getDate',
        'promised_on' => 'getPromisedOn',
        'description' => 'getDescription',
        'supplier' => 'getSupplier',
        'location' => 'getLocation',
        'gln' => 'getGln',
        'vat_registration_id' => 'getVatRegistrationId',
        'owner' => 'getOwner',
        'currency' => 'getCurrency',
        'exchange_rate' => 'getExchangeRate',
        'supplier_ref' => 'getSupplierRef',
        'control_total' => 'getControlTotal',
        'branch' => 'getBranch',
        'lines' => 'getLines',
        'change_dates_on_lines' => 'getChangeDatesOnLines',
        'note' => 'getNote',
        'override_number_series' => 'getOverrideNumberSeries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['promised_on'] = isset($data['promised_on']) ? $data['promised_on'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['gln'] = isset($data['gln']) ? $data['gln'] : null;
        $this->container['vat_registration_id'] = isset($data['vat_registration_id']) ? $data['vat_registration_id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['supplier_ref'] = isset($data['supplier_ref']) ? $data['supplier_ref'] : null;
        $this->container['control_total'] = isset($data['control_total']) ? $data['control_total'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['change_dates_on_lines'] = isset($data['change_dates_on_lines']) ? $data['change_dates_on_lines'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['override_number_series'] = isset($data['override_number_series']) ? $data['override_number_series'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_type
     *
     * @return object
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param object $order_type order_type
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return object
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param object $order_number order_number
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return object
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param object $hold hold
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets date
     *
     * @return object
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param object $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets promised_on
     *
     * @return object
     */
    public function getPromisedOn()
    {
        return $this->container['promised_on'];
    }

    /**
     * Sets promised_on
     *
     * @param object $promised_on promised_on
     *
     * @return $this
     */
    public function setPromisedOn($promised_on)
    {
        $this->container['promised_on'] = $promised_on;

        return $this;
    }

    /**
     * Gets description
     *
     * @return object
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param object $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return object
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param object $supplier Mandatory field if GLN or VatRegistrationId is not specified.
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets gln
     *
     * @return object
     */
    public function getGln()
    {
        return $this->container['gln'];
    }

    /**
     * Sets gln
     *
     * @param object $gln Mandatory field if Supplier or VatRegistrationId is not specified.
     *
     * @return $this
     */
    public function setGln($gln)
    {
        $this->container['gln'] = $gln;

        return $this;
    }

    /**
     * Gets vat_registration_id
     *
     * @return object
     */
    public function getVatRegistrationId()
    {
        return $this->container['vat_registration_id'];
    }

    /**
     * Sets vat_registration_id
     *
     * @param object $vat_registration_id Mandatory field if Supplier or GLN is not specified.
     *
     * @return $this
     */
    public function setVatRegistrationId($vat_registration_id)
    {
        $this->container['vat_registration_id'] = $vat_registration_id;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return object
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param object $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return object
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param object $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return object
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param object $exchange_rate exchange_rate
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets supplier_ref
     *
     * @return object
     */
    public function getSupplierRef()
    {
        return $this->container['supplier_ref'];
    }

    /**
     * Sets supplier_ref
     *
     * @param object $supplier_ref supplier_ref
     *
     * @return $this
     */
    public function setSupplierRef($supplier_ref)
    {
        $this->container['supplier_ref'] = $supplier_ref;

        return $this;
    }

    /**
     * Gets control_total
     *
     * @return object
     */
    public function getControlTotal()
    {
        return $this->container['control_total'];
    }

    /**
     * Sets control_total
     *
     * @param object $control_total control_total
     *
     * @return $this
     */
    public function setControlTotal($control_total)
    {
        $this->container['control_total'] = $control_total;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return object
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param object $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Ekstralys\VismaNetApi\Model\PurchaseOrderLineUpdateDto[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Ekstralys\VismaNetApi\Model\PurchaseOrderLineUpdateDto[] $lines lines
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets change_dates_on_lines
     *
     * @return bool
     */
    public function getChangeDatesOnLines()
    {
        return $this->container['change_dates_on_lines'];
    }

    /**
     * Sets change_dates_on_lines
     *
     * @param bool $change_dates_on_lines change_dates_on_lines
     *
     * @return $this
     */
    public function setChangeDatesOnLines($change_dates_on_lines)
    {
        $this->container['change_dates_on_lines'] = $change_dates_on_lines;

        return $this;
    }

    /**
     * Gets note
     *
     * @return object
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param object $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets override_number_series
     *
     * @return object
     */
    public function getOverrideNumberSeries()
    {
        return $this->container['override_number_series'];
    }

    /**
     * Sets override_number_series
     *
     * @param object $override_number_series override_number_series
     *
     * @return $this
     */
    public function setOverrideNumberSeries($override_number_series)
    {
        $this->container['override_number_series'] = $override_number_series;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


