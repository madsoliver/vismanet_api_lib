<?php
/**
 * ARSPCommnHistoryDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * ARSPCommnHistoryDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ARSPCommnHistoryDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ARSPCommnHistoryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'commn_period' => 'string',
        'commn_amt' => 'double',
        'commnbl_amt' => 'double',
        'pr_processed_date' => '\DateTime',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'commn_period' => null,
        'commn_amt' => 'double',
        'commnbl_amt' => 'double',
        'pr_processed_date' => 'date-time',
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'commn_period' => 'commnPeriod',
        'commn_amt' => 'commnAmt',
        'commnbl_amt' => 'commnblAmt',
        'pr_processed_date' => 'prProcessedDate',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'commn_period' => 'setCommnPeriod',
        'commn_amt' => 'setCommnAmt',
        'commnbl_amt' => 'setCommnblAmt',
        'pr_processed_date' => 'setPrProcessedDate',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'commn_period' => 'getCommnPeriod',
        'commn_amt' => 'getCommnAmt',
        'commnbl_amt' => 'getCommnblAmt',
        'pr_processed_date' => 'getPrProcessedDate',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['commn_period'] = isset($data['commn_period']) ? $data['commn_period'] : null;
        $this->container['commn_amt'] = isset($data['commn_amt']) ? $data['commn_amt'] : null;
        $this->container['commnbl_amt'] = isset($data['commnbl_amt']) ? $data['commnbl_amt'] : null;
        $this->container['pr_processed_date'] = isset($data['pr_processed_date']) ? $data['pr_processed_date'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets commn_period
     *
     * @return string
     */
    public function getCommnPeriod()
    {
        return $this->container['commn_period'];
    }

    /**
     * Sets commn_period
     *
     * @param string $commn_period commn_period
     *
     * @return $this
     */
    public function setCommnPeriod($commn_period)
    {
        $this->container['commn_period'] = $commn_period;

        return $this;
    }

    /**
     * Gets commn_amt
     *
     * @return double
     */
    public function getCommnAmt()
    {
        return $this->container['commn_amt'];
    }

    /**
     * Sets commn_amt
     *
     * @param double $commn_amt commn_amt
     *
     * @return $this
     */
    public function setCommnAmt($commn_amt)
    {
        $this->container['commn_amt'] = $commn_amt;

        return $this;
    }

    /**
     * Gets commnbl_amt
     *
     * @return double
     */
    public function getCommnblAmt()
    {
        return $this->container['commnbl_amt'];
    }

    /**
     * Sets commnbl_amt
     *
     * @param double $commnbl_amt commnbl_amt
     *
     * @return $this
     */
    public function setCommnblAmt($commnbl_amt)
    {
        $this->container['commnbl_amt'] = $commnbl_amt;

        return $this;
    }

    /**
     * Gets pr_processed_date
     *
     * @return \DateTime
     */
    public function getPrProcessedDate()
    {
        return $this->container['pr_processed_date'];
    }

    /**
     * Sets pr_processed_date
     *
     * @param \DateTime $pr_processed_date pr_processed_date
     *
     * @return $this
     */
    public function setPrProcessedDate($pr_processed_date)
    {
        $this->container['pr_processed_date'] = $pr_processed_date;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


