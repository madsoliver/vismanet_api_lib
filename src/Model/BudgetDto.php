<?php
/**
 * BudgetDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * BudgetDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BudgetDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BudgetDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'financial_year' => 'string',
        'released' => 'bool',
        'released_amount' => 'double',
        'account' => 'object',
        'subaccount' => 'object',
        'description' => 'string',
        'amount' => 'double',
        'distributed_amount' => 'double',
        'periods' => '\Ekstralys\VismaNetApi\Model\FinancialPeriodAmountDto[]',
        'last_modified_date_time' => '\DateTime',
        'branch_number' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'financial_year' => null,
        'released' => null,
        'released_amount' => 'double',
        'account' => null,
        'subaccount' => null,
        'description' => null,
        'amount' => 'double',
        'distributed_amount' => 'double',
        'periods' => null,
        'last_modified_date_time' => 'date-time',
        'branch_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'financial_year' => 'financialYear',
        'released' => 'released',
        'released_amount' => 'releasedAmount',
        'account' => 'account',
        'subaccount' => 'subaccount',
        'description' => 'description',
        'amount' => 'amount',
        'distributed_amount' => 'distributedAmount',
        'periods' => 'periods',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'branch_number' => 'branchNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'financial_year' => 'setFinancialYear',
        'released' => 'setReleased',
        'released_amount' => 'setReleasedAmount',
        'account' => 'setAccount',
        'subaccount' => 'setSubaccount',
        'description' => 'setDescription',
        'amount' => 'setAmount',
        'distributed_amount' => 'setDistributedAmount',
        'periods' => 'setPeriods',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'branch_number' => 'setBranchNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'financial_year' => 'getFinancialYear',
        'released' => 'getReleased',
        'released_amount' => 'getReleasedAmount',
        'account' => 'getAccount',
        'subaccount' => 'getSubaccount',
        'description' => 'getDescription',
        'amount' => 'getAmount',
        'distributed_amount' => 'getDistributedAmount',
        'periods' => 'getPeriods',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'branch_number' => 'getBranchNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['financial_year'] = isset($data['financial_year']) ? $data['financial_year'] : null;
        $this->container['released'] = isset($data['released']) ? $data['released'] : null;
        $this->container['released_amount'] = isset($data['released_amount']) ? $data['released_amount'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['subaccount'] = isset($data['subaccount']) ? $data['subaccount'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['distributed_amount'] = isset($data['distributed_amount']) ? $data['distributed_amount'] : null;
        $this->container['periods'] = isset($data['periods']) ? $data['periods'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['branch_number'] = isset($data['branch_number']) ? $data['branch_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets financial_year
     *
     * @return string
     */
    public function getFinancialYear()
    {
        return $this->container['financial_year'];
    }

    /**
     * Sets financial_year
     *
     * @param string $financial_year Mandatory field: The top part &gt; Financial year* &gt; The financial year of the budget.
     *
     * @return $this
     */
    public function setFinancialYear($financial_year)
    {
        $this->container['financial_year'] = $financial_year;

        return $this;
    }

    /**
     * Gets released
     *
     * @return bool
     */
    public function getReleased()
    {
        return $this->container['released'];
    }

    /**
     * Sets released
     *
     * @param bool $released The budget area &gt; The budget articles pane &gt; Released &gt; A check box that indicates (if selected) that the budget article has been released.
     *
     * @return $this
     */
    public function setReleased($released)
    {
        $this->container['released'] = $released;

        return $this;
    }

    /**
     * Gets released_amount
     *
     * @return double
     */
    public function getReleasedAmount()
    {
        return $this->container['released_amount'];
    }

    /**
     * Sets released_amount
     *
     * @param double $released_amount The budget area &gt; The budget articles pane &gt; Released amount &gt; The amount that has been released for this article.
     *
     * @return $this
     */
    public function setReleasedAmount($released_amount)
    {
        $this->container['released_amount'] = $released_amount;

        return $this;
    }

    /**
     * Gets account
     *
     * @return object
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param object $account Mandatory field: The budget area &gt; The budget articles pane &gt; Account* &gt; The account of the budget article if the article is a leaf on the budget tree.
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets subaccount
     *
     * @return object
     */
    public function getSubaccount()
    {
        return $this->container['subaccount'];
    }

    /**
     * Sets subaccount
     *
     * @param object $subaccount Mandatory field: The budget area &gt; The budget articles pane &gt; Subaccount* &gt; The subaccount of the budget article if the article is a leaf on the budget tree.
     *
     * @return $this
     */
    public function setSubaccount($subaccount)
    {
        $this->container['subaccount'] = $subaccount;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Mandatory field: The budget area &gt; The budget articles pane &gt; Description* &gt; A description of the budget article.By default, this column displays the account description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount The budget area &gt; The budget articles pane &gt; Amount &gt; The article amount.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets distributed_amount
     *
     * @return double
     */
    public function getDistributedAmount()
    {
        return $this->container['distributed_amount'];
    }

    /**
     * Sets distributed_amount
     *
     * @param double $distributed_amount The budget area  The budget articles pane &gt; Distributed amount &gt; The amount distributed over the periods.
     *
     * @return $this
     */
    public function setDistributedAmount($distributed_amount)
    {
        $this->container['distributed_amount'] = $distributed_amount;

        return $this;
    }

    /**
     * Gets periods
     *
     * @return \Ekstralys\VismaNetApi\Model\FinancialPeriodAmountDto[]
     */
    public function getPeriods()
    {
        return $this->container['periods'];
    }

    /**
     * Sets periods
     *
     * @param \Ekstralys\VismaNetApi\Model\FinancialPeriodAmountDto[] $periods The budget area The budget articles pane &gt; Period XX &gt; Amount per period within the financial year.
     *
     * @return $this
     */
    public function setPeriods($periods)
    {
        $this->container['periods'] = $periods;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time A system generated date/time not visible in the window.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return object
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param object $branch_number The Top part &gt; Branch &gt; Click the magnifier
     *
     * @return $this
     */
    public function setBranchNumber($branch_number)
    {
        $this->container['branch_number'] = $branch_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


