<?php
/**
 * ExpenseClaimDetailUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * ExpenseClaimDetailUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExpenseClaimDetailUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExpenseClaimDetailUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'operation' => 'string',
        'claim_detail_id' => 'object',
        'date' => 'object',
        'expense_item' => 'object',
        'description' => 'object',
        'quantity' => 'object',
        'uom' => 'object',
        'unit_cost' => 'object',
        'invoiceable' => 'object',
        'project' => 'object',
        'project_task' => 'object',
        'expense_account' => 'object',
        'expense_subaccount' => '\Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]',
        'branch' => 'object',
        'tax_category' => 'object',
        'ref_nbr' => 'object',
        'employee_part' => 'object',
        'customer' => 'object',
        'location' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'operation' => null,
        'claim_detail_id' => null,
        'date' => null,
        'expense_item' => null,
        'description' => null,
        'quantity' => null,
        'uom' => null,
        'unit_cost' => null,
        'invoiceable' => null,
        'project' => null,
        'project_task' => null,
        'expense_account' => null,
        'expense_subaccount' => null,
        'branch' => null,
        'tax_category' => null,
        'ref_nbr' => null,
        'employee_part' => null,
        'customer' => null,
        'location' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'operation' => 'operation',
        'claim_detail_id' => 'claimDetailId',
        'date' => 'date',
        'expense_item' => 'expenseItem',
        'description' => 'description',
        'quantity' => 'quantity',
        'uom' => 'uom',
        'unit_cost' => 'unitCost',
        'invoiceable' => 'invoiceable',
        'project' => 'project',
        'project_task' => 'projectTask',
        'expense_account' => 'expenseAccount',
        'expense_subaccount' => 'expenseSubaccount',
        'branch' => 'branch',
        'tax_category' => 'taxCategory',
        'ref_nbr' => 'refNbr',
        'employee_part' => 'employeePart',
        'customer' => 'customer',
        'location' => 'location'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'operation' => 'setOperation',
        'claim_detail_id' => 'setClaimDetailId',
        'date' => 'setDate',
        'expense_item' => 'setExpenseItem',
        'description' => 'setDescription',
        'quantity' => 'setQuantity',
        'uom' => 'setUom',
        'unit_cost' => 'setUnitCost',
        'invoiceable' => 'setInvoiceable',
        'project' => 'setProject',
        'project_task' => 'setProjectTask',
        'expense_account' => 'setExpenseAccount',
        'expense_subaccount' => 'setExpenseSubaccount',
        'branch' => 'setBranch',
        'tax_category' => 'setTaxCategory',
        'ref_nbr' => 'setRefNbr',
        'employee_part' => 'setEmployeePart',
        'customer' => 'setCustomer',
        'location' => 'setLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'operation' => 'getOperation',
        'claim_detail_id' => 'getClaimDetailId',
        'date' => 'getDate',
        'expense_item' => 'getExpenseItem',
        'description' => 'getDescription',
        'quantity' => 'getQuantity',
        'uom' => 'getUom',
        'unit_cost' => 'getUnitCost',
        'invoiceable' => 'getInvoiceable',
        'project' => 'getProject',
        'project_task' => 'getProjectTask',
        'expense_account' => 'getExpenseAccount',
        'expense_subaccount' => 'getExpenseSubaccount',
        'branch' => 'getBranch',
        'tax_category' => 'getTaxCategory',
        'ref_nbr' => 'getRefNbr',
        'employee_part' => 'getEmployeePart',
        'customer' => 'getCustomer',
        'location' => 'getLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OPERATION_INSERT = 'Insert';
    const OPERATION_UPDATE = 'Update';
    const OPERATION_DELETE = 'Delete';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_INSERT,
            self::OPERATION_UPDATE,
            self::OPERATION_DELETE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['claim_detail_id'] = isset($data['claim_detail_id']) ? $data['claim_detail_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['expense_item'] = isset($data['expense_item']) ? $data['expense_item'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['invoiceable'] = isset($data['invoiceable']) ? $data['invoiceable'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['project_task'] = isset($data['project_task']) ? $data['project_task'] : null;
        $this->container['expense_account'] = isset($data['expense_account']) ? $data['expense_account'] : null;
        $this->container['expense_subaccount'] = isset($data['expense_subaccount']) ? $data['expense_subaccount'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['tax_category'] = isset($data['tax_category']) ? $data['tax_category'] : null;
        $this->container['ref_nbr'] = isset($data['ref_nbr']) ? $data['ref_nbr'] : null;
        $this->container['employee_part'] = isset($data['employee_part']) ? $data['employee_part'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation operation
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($operation) && !in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets claim_detail_id
     *
     * @return object
     */
    public function getClaimDetailId()
    {
        return $this->container['claim_detail_id'];
    }

    /**
     * Sets claim_detail_id
     *
     * @param object $claim_detail_id Identifies the expense claim detail line to update
     *
     * @return $this
     */
    public function setClaimDetailId($claim_detail_id)
    {
        $this->container['claim_detail_id'] = $claim_detail_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return object
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param object $date The date when the expense was incurred.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets expense_item
     *
     * @return object
     */
    public function getExpenseItem()
    {
        return $this->container['expense_item'];
    }

    /**
     * Sets expense_item
     *
     * @param object $expense_item The expense identifier, if an expense of this type is listed as an inventory nonstock item.
     *
     * @return $this
     */
    public function setExpenseItem($expense_item)
    {
        $this->container['expense_item'] = $expense_item;

        return $this;
    }

    /**
     * Gets description
     *
     * @return object
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param object $description A description of the transaction.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return object
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param object $quantity The quantity of this expense item.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return object
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param object $uom The unit of measure in which the quantity is shown.
     *
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return object
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param object $unit_cost The cost of a unit of the item.
     *
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets invoiceable
     *
     * @return object
     */
    public function getInvoiceable()
    {
        return $this->container['invoiceable'];
    }

    /**
     * Sets invoiceable
     *
     * @param object $invoiceable The currency of the expense receipt. However, if you enter a claim line directly, the currency value is read-only and matching the claim currency.
     *
     * @return $this
     */
    public function setInvoiceable($invoiceable)
    {
        $this->container['invoiceable'] = $invoiceable;

        return $this;
    }

    /**
     * Gets project
     *
     * @return object
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param object $project The project or customer contract associated with the expense claim, if the work performed was for a project or contract. Project Task The task associated with the contract or project.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets project_task
     *
     * @return object
     */
    public function getProjectTask()
    {
        return $this->container['project_task'];
    }

    /**
     * Sets project_task
     *
     * @param object $project_task The task associated with the contract or project.
     *
     * @return $this
     */
    public function setProjectTask($project_task)
    {
        $this->container['project_task'] = $project_task;

        return $this;
    }

    /**
     * Gets expense_account
     *
     * @return object
     */
    public function getExpenseAccount()
    {
        return $this->container['expense_account'];
    }

    /**
     * Sets expense_account
     *
     * @param object $expense_account The expense account to which the system should record the part of the expense to be paid back to the employee.
     *
     * @return $this
     */
    public function setExpenseAccount($expense_account)
    {
        $this->container['expense_account'] = $expense_account;

        return $this;
    }

    /**
     * Gets expense_subaccount
     *
     * @return \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]
     */
    public function getExpenseSubaccount()
    {
        return $this->container['expense_subaccount'];
    }

    /**
     * Sets expense_subaccount
     *
     * @param \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[] $expense_subaccount The corresponding subaccount the system uses to record the part of the expense to be paid back to the employee.
     *
     * @return $this
     */
    public function setExpenseSubaccount($expense_subaccount)
    {
        $this->container['expense_subaccount'] = $expense_subaccount;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return object
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param object $branch The branch that will reimburse the expenses to the employee.
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets tax_category
     *
     * @return object
     */
    public function getTaxCategory()
    {
        return $this->container['tax_category'];
    }

    /**
     * Sets tax_category
     *
     * @param object $tax_category The tax category associated with the expense item.
     *
     * @return $this
     */
    public function setTaxCategory($tax_category)
    {
        $this->container['tax_category'] = $tax_category;

        return $this;
    }

    /**
     * Gets ref_nbr
     *
     * @return object
     */
    public function getRefNbr()
    {
        return $this->container['ref_nbr'];
    }

    /**
     * Sets ref_nbr
     *
     * @param object $ref_nbr The identifier of the transaction.
     *
     * @return $this
     */
    public function setRefNbr($ref_nbr)
    {
        $this->container['ref_nbr'] = $ref_nbr;

        return $this;
    }

    /**
     * Gets employee_part
     *
     * @return object
     */
    public function getEmployeePart()
    {
        return $this->container['employee_part'];
    }

    /**
     * Sets employee_part
     *
     * @param object $employee_part The part of the total amount that will not be paid back to the employee. The percentage depends on the company policy.
     *
     * @return $this
     */
    public function setEmployeePart($employee_part)
    {
        $this->container['employee_part'] = $employee_part;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return object
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param object $customer The identifier of the customer associated with the expense.
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location The identifier of the customer location associated with the expense.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


