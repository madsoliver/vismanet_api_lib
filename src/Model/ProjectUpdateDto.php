<?php
/**
 * ProjectUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * ProjectUpdateDto Class Doc Comment
 *
 * @category Class
 * @description This class represent a Project in Project Controller. Used to pass data to server for creating or updating an project
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'project_id' => 'object',
        'internal_id' => 'object',
        'customer' => 'object',
        'description' => 'object',
        'hold' => 'object',
        'template' => 'object',
        'status' => 'object',
        'def_account' => 'object',
        'def_sub' => '\Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]',
        'def_accrual_account' => 'object',
        'def_accrual_sub' => '\Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]',
        'start_date' => 'object',
        'end_date' => 'object',
        'billing_period' => 'object',
        'allocation_rule' => 'object',
        'billing_rule' => 'object',
        'rate_table' => 'object',
        'project_manger' => 'object',
        'project_manager_internal_id' => 'object',
        'auto_allocate' => 'object',
        'automatic_release_ar_doc' => 'object',
        'restric_employees' => 'object',
        'restric_equipment' => 'object',
        'customer_location' => 'object',
        'visibility' => 'object',
        'tasks' => '\Ekstralys\VismaNetApi\Model\TaskUpdateDto[]',
        'employees' => '\Ekstralys\VismaNetApi\Model\ProjectEmployeeUpdateDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'project_id' => null,
        'internal_id' => null,
        'customer' => null,
        'description' => null,
        'hold' => null,
        'template' => null,
        'status' => null,
        'def_account' => null,
        'def_sub' => null,
        'def_accrual_account' => null,
        'def_accrual_sub' => null,
        'start_date' => null,
        'end_date' => null,
        'billing_period' => null,
        'allocation_rule' => null,
        'billing_rule' => null,
        'rate_table' => null,
        'project_manger' => null,
        'project_manager_internal_id' => null,
        'auto_allocate' => null,
        'automatic_release_ar_doc' => null,
        'restric_employees' => null,
        'restric_equipment' => null,
        'customer_location' => null,
        'visibility' => null,
        'tasks' => null,
        'employees' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'project_id' => 'projectID',
        'internal_id' => 'internalID',
        'customer' => 'customer',
        'description' => 'description',
        'hold' => 'hold',
        'template' => 'template',
        'status' => 'status',
        'def_account' => 'defAccount',
        'def_sub' => 'defSub',
        'def_accrual_account' => 'defAccrualAccount',
        'def_accrual_sub' => 'defAccrualSub',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'billing_period' => 'billingPeriod',
        'allocation_rule' => 'allocationRule',
        'billing_rule' => 'billingRule',
        'rate_table' => 'rateTable',
        'project_manger' => 'projectManger',
        'project_manager_internal_id' => 'projectManagerInternalId',
        'auto_allocate' => 'autoAllocate',
        'automatic_release_ar_doc' => 'automaticReleaseArDoc',
        'restric_employees' => 'restricEmployees',
        'restric_equipment' => 'restricEquipment',
        'customer_location' => 'customerLocation',
        'visibility' => 'visibility',
        'tasks' => 'tasks',
        'employees' => 'employees'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'project_id' => 'setProjectId',
        'internal_id' => 'setInternalId',
        'customer' => 'setCustomer',
        'description' => 'setDescription',
        'hold' => 'setHold',
        'template' => 'setTemplate',
        'status' => 'setStatus',
        'def_account' => 'setDefAccount',
        'def_sub' => 'setDefSub',
        'def_accrual_account' => 'setDefAccrualAccount',
        'def_accrual_sub' => 'setDefAccrualSub',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'billing_period' => 'setBillingPeriod',
        'allocation_rule' => 'setAllocationRule',
        'billing_rule' => 'setBillingRule',
        'rate_table' => 'setRateTable',
        'project_manger' => 'setProjectManger',
        'project_manager_internal_id' => 'setProjectManagerInternalId',
        'auto_allocate' => 'setAutoAllocate',
        'automatic_release_ar_doc' => 'setAutomaticReleaseArDoc',
        'restric_employees' => 'setRestricEmployees',
        'restric_equipment' => 'setRestricEquipment',
        'customer_location' => 'setCustomerLocation',
        'visibility' => 'setVisibility',
        'tasks' => 'setTasks',
        'employees' => 'setEmployees'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'project_id' => 'getProjectId',
        'internal_id' => 'getInternalId',
        'customer' => 'getCustomer',
        'description' => 'getDescription',
        'hold' => 'getHold',
        'template' => 'getTemplate',
        'status' => 'getStatus',
        'def_account' => 'getDefAccount',
        'def_sub' => 'getDefSub',
        'def_accrual_account' => 'getDefAccrualAccount',
        'def_accrual_sub' => 'getDefAccrualSub',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'billing_period' => 'getBillingPeriod',
        'allocation_rule' => 'getAllocationRule',
        'billing_rule' => 'getBillingRule',
        'rate_table' => 'getRateTable',
        'project_manger' => 'getProjectManger',
        'project_manager_internal_id' => 'getProjectManagerInternalId',
        'auto_allocate' => 'getAutoAllocate',
        'automatic_release_ar_doc' => 'getAutomaticReleaseArDoc',
        'restric_employees' => 'getRestricEmployees',
        'restric_equipment' => 'getRestricEquipment',
        'customer_location' => 'getCustomerLocation',
        'visibility' => 'getVisibility',
        'tasks' => 'getTasks',
        'employees' => 'getEmployees'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['def_account'] = isset($data['def_account']) ? $data['def_account'] : null;
        $this->container['def_sub'] = isset($data['def_sub']) ? $data['def_sub'] : null;
        $this->container['def_accrual_account'] = isset($data['def_accrual_account']) ? $data['def_accrual_account'] : null;
        $this->container['def_accrual_sub'] = isset($data['def_accrual_sub']) ? $data['def_accrual_sub'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['billing_period'] = isset($data['billing_period']) ? $data['billing_period'] : null;
        $this->container['allocation_rule'] = isset($data['allocation_rule']) ? $data['allocation_rule'] : null;
        $this->container['billing_rule'] = isset($data['billing_rule']) ? $data['billing_rule'] : null;
        $this->container['rate_table'] = isset($data['rate_table']) ? $data['rate_table'] : null;
        $this->container['project_manger'] = isset($data['project_manger']) ? $data['project_manger'] : null;
        $this->container['project_manager_internal_id'] = isset($data['project_manager_internal_id']) ? $data['project_manager_internal_id'] : null;
        $this->container['auto_allocate'] = isset($data['auto_allocate']) ? $data['auto_allocate'] : null;
        $this->container['automatic_release_ar_doc'] = isset($data['automatic_release_ar_doc']) ? $data['automatic_release_ar_doc'] : null;
        $this->container['restric_employees'] = isset($data['restric_employees']) ? $data['restric_employees'] : null;
        $this->container['restric_equipment'] = isset($data['restric_equipment']) ? $data['restric_equipment'] : null;
        $this->container['customer_location'] = isset($data['customer_location']) ? $data['customer_location'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['tasks'] = isset($data['tasks']) ? $data['tasks'] : null;
        $this->container['employees'] = isset($data['employees']) ? $data['employees'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets project_id
     *
     * @return object
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param object $project_id project_id
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return object
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param object $internal_id internal_id
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return object
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param object $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets description
     *
     * @return object
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param object $description Mandatory field
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return object
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param object $hold hold
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets template
     *
     * @return object
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param object $template template
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets status
     *
     * @return object
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param object $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets def_account
     *
     * @return object
     */
    public function getDefAccount()
    {
        return $this->container['def_account'];
    }

    /**
     * Sets def_account
     *
     * @param object $def_account def_account
     *
     * @return $this
     */
    public function setDefAccount($def_account)
    {
        $this->container['def_account'] = $def_account;

        return $this;
    }

    /**
     * Gets def_sub
     *
     * @return \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]
     */
    public function getDefSub()
    {
        return $this->container['def_sub'];
    }

    /**
     * Sets def_sub
     *
     * @param \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[] $def_sub Mandatory field when Project Template is not specified.
     *
     * @return $this
     */
    public function setDefSub($def_sub)
    {
        $this->container['def_sub'] = $def_sub;

        return $this;
    }

    /**
     * Gets def_accrual_account
     *
     * @return object
     */
    public function getDefAccrualAccount()
    {
        return $this->container['def_accrual_account'];
    }

    /**
     * Sets def_accrual_account
     *
     * @param object $def_accrual_account def_accrual_account
     *
     * @return $this
     */
    public function setDefAccrualAccount($def_accrual_account)
    {
        $this->container['def_accrual_account'] = $def_accrual_account;

        return $this;
    }

    /**
     * Gets def_accrual_sub
     *
     * @return \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]
     */
    public function getDefAccrualSub()
    {
        return $this->container['def_accrual_sub'];
    }

    /**
     * Sets def_accrual_sub
     *
     * @param \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[] $def_accrual_sub def_accrual_sub
     *
     * @return $this
     */
    public function setDefAccrualSub($def_accrual_sub)
    {
        $this->container['def_accrual_sub'] = $def_accrual_sub;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return object
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param object $start_date Mandatory field
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return object
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param object $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets billing_period
     *
     * @return object
     */
    public function getBillingPeriod()
    {
        return $this->container['billing_period'];
    }

    /**
     * Sets billing_period
     *
     * @param object $billing_period billing_period
     *
     * @return $this
     */
    public function setBillingPeriod($billing_period)
    {
        $this->container['billing_period'] = $billing_period;

        return $this;
    }

    /**
     * Gets allocation_rule
     *
     * @return object
     */
    public function getAllocationRule()
    {
        return $this->container['allocation_rule'];
    }

    /**
     * Sets allocation_rule
     *
     * @param object $allocation_rule allocation_rule
     *
     * @return $this
     */
    public function setAllocationRule($allocation_rule)
    {
        $this->container['allocation_rule'] = $allocation_rule;

        return $this;
    }

    /**
     * Gets billing_rule
     *
     * @return object
     */
    public function getBillingRule()
    {
        return $this->container['billing_rule'];
    }

    /**
     * Sets billing_rule
     *
     * @param object $billing_rule billing_rule
     *
     * @return $this
     */
    public function setBillingRule($billing_rule)
    {
        $this->container['billing_rule'] = $billing_rule;

        return $this;
    }

    /**
     * Gets rate_table
     *
     * @return object
     */
    public function getRateTable()
    {
        return $this->container['rate_table'];
    }

    /**
     * Sets rate_table
     *
     * @param object $rate_table rate_table
     *
     * @return $this
     */
    public function setRateTable($rate_table)
    {
        $this->container['rate_table'] = $rate_table;

        return $this;
    }

    /**
     * Gets project_manger
     *
     * @return object
     */
    public function getProjectManger()
    {
        return $this->container['project_manger'];
    }

    /**
     * Sets project_manger
     *
     * @param object $project_manger project_manger
     *
     * @return $this
     */
    public function setProjectManger($project_manger)
    {
        $this->container['project_manger'] = $project_manger;

        return $this;
    }

    /**
     * Gets project_manager_internal_id
     *
     * @return object
     */
    public function getProjectManagerInternalId()
    {
        return $this->container['project_manager_internal_id'];
    }

    /**
     * Sets project_manager_internal_id
     *
     * @param object $project_manager_internal_id project_manager_internal_id
     *
     * @return $this
     */
    public function setProjectManagerInternalId($project_manager_internal_id)
    {
        $this->container['project_manager_internal_id'] = $project_manager_internal_id;

        return $this;
    }

    /**
     * Gets auto_allocate
     *
     * @return object
     */
    public function getAutoAllocate()
    {
        return $this->container['auto_allocate'];
    }

    /**
     * Sets auto_allocate
     *
     * @param object $auto_allocate auto_allocate
     *
     * @return $this
     */
    public function setAutoAllocate($auto_allocate)
    {
        $this->container['auto_allocate'] = $auto_allocate;

        return $this;
    }

    /**
     * Gets automatic_release_ar_doc
     *
     * @return object
     */
    public function getAutomaticReleaseArDoc()
    {
        return $this->container['automatic_release_ar_doc'];
    }

    /**
     * Sets automatic_release_ar_doc
     *
     * @param object $automatic_release_ar_doc automatic_release_ar_doc
     *
     * @return $this
     */
    public function setAutomaticReleaseArDoc($automatic_release_ar_doc)
    {
        $this->container['automatic_release_ar_doc'] = $automatic_release_ar_doc;

        return $this;
    }

    /**
     * Gets restric_employees
     *
     * @return object
     */
    public function getRestricEmployees()
    {
        return $this->container['restric_employees'];
    }

    /**
     * Sets restric_employees
     *
     * @param object $restric_employees restric_employees
     *
     * @return $this
     */
    public function setRestricEmployees($restric_employees)
    {
        $this->container['restric_employees'] = $restric_employees;

        return $this;
    }

    /**
     * Gets restric_equipment
     *
     * @return object
     */
    public function getRestricEquipment()
    {
        return $this->container['restric_equipment'];
    }

    /**
     * Sets restric_equipment
     *
     * @param object $restric_equipment restric_equipment
     *
     * @return $this
     */
    public function setRestricEquipment($restric_equipment)
    {
        $this->container['restric_equipment'] = $restric_equipment;

        return $this;
    }

    /**
     * Gets customer_location
     *
     * @return object
     */
    public function getCustomerLocation()
    {
        return $this->container['customer_location'];
    }

    /**
     * Sets customer_location
     *
     * @param object $customer_location customer_location
     *
     * @return $this
     */
    public function setCustomerLocation($customer_location)
    {
        $this->container['customer_location'] = $customer_location;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return object
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param object $visibility visibility
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets tasks
     *
     * @return \Ekstralys\VismaNetApi\Model\TaskUpdateDto[]
     */
    public function getTasks()
    {
        return $this->container['tasks'];
    }

    /**
     * Sets tasks
     *
     * @param \Ekstralys\VismaNetApi\Model\TaskUpdateDto[] $tasks tasks
     *
     * @return $this
     */
    public function setTasks($tasks)
    {
        $this->container['tasks'] = $tasks;

        return $this;
    }

    /**
     * Gets employees
     *
     * @return \Ekstralys\VismaNetApi\Model\ProjectEmployeeUpdateDto[]
     */
    public function getEmployees()
    {
        return $this->container['employees'];
    }

    /**
     * Sets employees
     *
     * @param \Ekstralys\VismaNetApi\Model\ProjectEmployeeUpdateDto[] $employees employees
     *
     * @return $this
     */
    public function setEmployees($employees)
    {
        $this->container['employees'] = $employees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


