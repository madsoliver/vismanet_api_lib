<?php
/**
 * VatInformationScheduleDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * VatInformationScheduleDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VatInformationScheduleDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VatInformationScheduleDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_date' => '\DateTime',
        'vat_rate' => 'double',
        'min_taxable_amt' => 'double',
        'max_taxable_amt' => 'double',
        'reporting_group' => 'string',
        'deductible_vat_rate' => 'double',
        'group_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start_date' => 'date-time',
        'vat_rate' => 'double',
        'min_taxable_amt' => 'double',
        'max_taxable_amt' => 'double',
        'reporting_group' => null,
        'deductible_vat_rate' => 'double',
        'group_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'startDate',
        'vat_rate' => 'vatRate',
        'min_taxable_amt' => 'minTaxableAmt',
        'max_taxable_amt' => 'maxTaxableAmt',
        'reporting_group' => 'reportingGroup',
        'deductible_vat_rate' => 'deductibleVatRate',
        'group_type' => 'groupType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
        'vat_rate' => 'setVatRate',
        'min_taxable_amt' => 'setMinTaxableAmt',
        'max_taxable_amt' => 'setMaxTaxableAmt',
        'reporting_group' => 'setReportingGroup',
        'deductible_vat_rate' => 'setDeductibleVatRate',
        'group_type' => 'setGroupType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
        'vat_rate' => 'getVatRate',
        'min_taxable_amt' => 'getMinTaxableAmt',
        'max_taxable_amt' => 'getMaxTaxableAmt',
        'reporting_group' => 'getReportingGroup',
        'deductible_vat_rate' => 'getDeductibleVatRate',
        'group_type' => 'getGroupType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GROUP_TYPE_OUTPUT = 'Output';
    const GROUP_TYPE_INPUT = 'Input';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupTypeAllowableValues()
    {
        return [
            self::GROUP_TYPE_OUTPUT,
            self::GROUP_TYPE_INPUT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['vat_rate'] = isset($data['vat_rate']) ? $data['vat_rate'] : null;
        $this->container['min_taxable_amt'] = isset($data['min_taxable_amt']) ? $data['min_taxable_amt'] : null;
        $this->container['max_taxable_amt'] = isset($data['max_taxable_amt']) ? $data['max_taxable_amt'] : null;
        $this->container['reporting_group'] = isset($data['reporting_group']) ? $data['reporting_group'] : null;
        $this->container['deductible_vat_rate'] = isset($data['deductible_vat_rate']) ? $data['deductible_vat_rate'] : null;
        $this->container['group_type'] = isset($data['group_type']) ? $data['group_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGroupTypeAllowableValues();
        if (!is_null($this->container['group_type']) && !in_array($this->container['group_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'group_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Mandatory field: Start date &gt; The date when the VAT at the rate in the current row becomes effective.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return double
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param double $vat_rate VAT rate &gt; The VAT rate (%) that is used to calculate the VAT amount.
     *
     * @return $this
     */
    public function setVatRate($vat_rate)
    {
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets min_taxable_amt
     *
     * @return double
     */
    public function getMinTaxableAmt()
    {
        return $this->container['min_taxable_amt'];
    }

    /**
     * Sets min_taxable_amt
     *
     * @param double $min_taxable_amt Min. taxable amount &gt; The minimum taxable amount for which this rate is applicable.
     *
     * @return $this
     */
    public function setMinTaxableAmt($min_taxable_amt)
    {
        $this->container['min_taxable_amt'] = $min_taxable_amt;

        return $this;
    }

    /**
     * Gets max_taxable_amt
     *
     * @return double
     */
    public function getMaxTaxableAmt()
    {
        return $this->container['max_taxable_amt'];
    }

    /**
     * Sets max_taxable_amt
     *
     * @param double $max_taxable_amt Max. taxable amount &gt; The maximum taxable amount for which this rate applies.
     *
     * @return $this
     */
    public function setMaxTaxableAmt($max_taxable_amt)
    {
        $this->container['max_taxable_amt'] = $max_taxable_amt;

        return $this;
    }

    /**
     * Gets reporting_group
     *
     * @return string
     */
    public function getReportingGroup()
    {
        return $this->container['reporting_group'];
    }

    /**
     * Sets reporting_group
     *
     * @param string $reporting_group Reporting group &gt; The reporting group for the VAT.
     *
     * @return $this
     */
    public function setReportingGroup($reporting_group)
    {
        $this->container['reporting_group'] = $reporting_group;

        return $this;
    }

    /**
     * Gets deductible_vat_rate
     *
     * @return double
     */
    public function getDeductibleVatRate()
    {
        return $this->container['deductible_vat_rate'];
    }

    /**
     * Sets deductible_vat_rate
     *
     * @param double $deductible_vat_rate Deductible VAT rate &gt; The VAT rate (%) that is used to calculate the amount deductible from the output VAT.
     *
     * @return $this
     */
    public function setDeductibleVatRate($deductible_vat_rate)
    {
        $this->container['deductible_vat_rate'] = $deductible_vat_rate;

        return $this;
    }

    /**
     * Gets group_type
     *
     * @return string
     */
    public function getGroupType()
    {
        return $this->container['group_type'];
    }

    /**
     * Sets group_type
     *
     * @param string $group_type Group type &gt; The type of the reporting group.
     *
     * @return $this
     */
    public function setGroupType($group_type)
    {
        $allowedValues = $this->getGroupTypeAllowableValues();
        if (!is_null($group_type) && !in_array($group_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'group_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['group_type'] = $group_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


