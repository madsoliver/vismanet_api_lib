<?php
/**
 * PurchaseReceiptLineDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * PurchaseReceiptLineDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a Purchase Order Line in PurchaseReceiptContraoller. Used for getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseReceiptLineDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseReceiptLineDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allocations' => '\Ekstralys\VismaNetApi\Model\AllocationsDto[]',
        'line_nbr' => 'int',
        'branch' => 'object',
        'branch_number' => 'object',
        'inventory' => 'object',
        'line_type' => 'string',
        'warehouse' => 'object',
        'location' => 'object',
        'transaction_description' => 'string',
        'uom' => 'string',
        'order_qty' => 'double',
        'open_qty' => 'double',
        'receipt_qty' => 'double',
        'unit_cost' => 'double',
        'ext_cost' => 'double',
        'discount_percent' => 'double',
        'discount_amount' => 'double',
        'manual_discount' => 'bool',
        'discount_code' => 'object',
        'amount' => 'double',
        'tax_category' => 'object',
        'account' => 'object',
        'account_description' => 'string',
        'sub' => 'object',
        'actual_account' => 'object',
        'actual_sub' => 'object',
        'project' => 'object',
        'project_task' => 'object',
        'expiration_date' => '\DateTime',
        'lot_serial_number' => 'string',
        'po_order_type' => 'string',
        'po_order_nbr' => 'string',
        'po_order_line_nbr' => 'int',
        'transfer_order_type' => 'string',
        'transfer_order_nbr' => 'string',
        'transfer_order_line_nbr' => 'int',
        'complete_po_line' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allocations' => null,
        'line_nbr' => 'int32',
        'branch' => null,
        'branch_number' => null,
        'inventory' => null,
        'line_type' => null,
        'warehouse' => null,
        'location' => null,
        'transaction_description' => null,
        'uom' => null,
        'order_qty' => 'double',
        'open_qty' => 'double',
        'receipt_qty' => 'double',
        'unit_cost' => 'double',
        'ext_cost' => 'double',
        'discount_percent' => 'double',
        'discount_amount' => 'double',
        'manual_discount' => null,
        'discount_code' => null,
        'amount' => 'double',
        'tax_category' => null,
        'account' => null,
        'account_description' => null,
        'sub' => null,
        'actual_account' => null,
        'actual_sub' => null,
        'project' => null,
        'project_task' => null,
        'expiration_date' => 'date-time',
        'lot_serial_number' => null,
        'po_order_type' => null,
        'po_order_nbr' => null,
        'po_order_line_nbr' => 'int32',
        'transfer_order_type' => null,
        'transfer_order_nbr' => null,
        'transfer_order_line_nbr' => 'int32',
        'complete_po_line' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allocations' => 'allocations',
        'line_nbr' => 'lineNbr',
        'branch' => 'branch',
        'branch_number' => 'branchNumber',
        'inventory' => 'inventory',
        'line_type' => 'lineType',
        'warehouse' => 'warehouse',
        'location' => 'location',
        'transaction_description' => 'transactionDescription',
        'uom' => 'uom',
        'order_qty' => 'orderQty',
        'open_qty' => 'openQty',
        'receipt_qty' => 'receiptQty',
        'unit_cost' => 'unitCost',
        'ext_cost' => 'extCost',
        'discount_percent' => 'discountPercent',
        'discount_amount' => 'discountAmount',
        'manual_discount' => 'manualDiscount',
        'discount_code' => 'discountCode',
        'amount' => 'amount',
        'tax_category' => 'taxCategory',
        'account' => 'account',
        'account_description' => 'accountDescription',
        'sub' => 'sub',
        'actual_account' => 'actualAccount',
        'actual_sub' => 'actualSub',
        'project' => 'project',
        'project_task' => 'projectTask',
        'expiration_date' => 'expirationDate',
        'lot_serial_number' => 'lotSerialNumber',
        'po_order_type' => 'poOrderType',
        'po_order_nbr' => 'poOrderNbr',
        'po_order_line_nbr' => 'poOrderLineNbr',
        'transfer_order_type' => 'transferOrderType',
        'transfer_order_nbr' => 'transferOrderNbr',
        'transfer_order_line_nbr' => 'transferOrderLineNbr',
        'complete_po_line' => 'completePoLine'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allocations' => 'setAllocations',
        'line_nbr' => 'setLineNbr',
        'branch' => 'setBranch',
        'branch_number' => 'setBranchNumber',
        'inventory' => 'setInventory',
        'line_type' => 'setLineType',
        'warehouse' => 'setWarehouse',
        'location' => 'setLocation',
        'transaction_description' => 'setTransactionDescription',
        'uom' => 'setUom',
        'order_qty' => 'setOrderQty',
        'open_qty' => 'setOpenQty',
        'receipt_qty' => 'setReceiptQty',
        'unit_cost' => 'setUnitCost',
        'ext_cost' => 'setExtCost',
        'discount_percent' => 'setDiscountPercent',
        'discount_amount' => 'setDiscountAmount',
        'manual_discount' => 'setManualDiscount',
        'discount_code' => 'setDiscountCode',
        'amount' => 'setAmount',
        'tax_category' => 'setTaxCategory',
        'account' => 'setAccount',
        'account_description' => 'setAccountDescription',
        'sub' => 'setSub',
        'actual_account' => 'setActualAccount',
        'actual_sub' => 'setActualSub',
        'project' => 'setProject',
        'project_task' => 'setProjectTask',
        'expiration_date' => 'setExpirationDate',
        'lot_serial_number' => 'setLotSerialNumber',
        'po_order_type' => 'setPoOrderType',
        'po_order_nbr' => 'setPoOrderNbr',
        'po_order_line_nbr' => 'setPoOrderLineNbr',
        'transfer_order_type' => 'setTransferOrderType',
        'transfer_order_nbr' => 'setTransferOrderNbr',
        'transfer_order_line_nbr' => 'setTransferOrderLineNbr',
        'complete_po_line' => 'setCompletePoLine'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allocations' => 'getAllocations',
        'line_nbr' => 'getLineNbr',
        'branch' => 'getBranch',
        'branch_number' => 'getBranchNumber',
        'inventory' => 'getInventory',
        'line_type' => 'getLineType',
        'warehouse' => 'getWarehouse',
        'location' => 'getLocation',
        'transaction_description' => 'getTransactionDescription',
        'uom' => 'getUom',
        'order_qty' => 'getOrderQty',
        'open_qty' => 'getOpenQty',
        'receipt_qty' => 'getReceiptQty',
        'unit_cost' => 'getUnitCost',
        'ext_cost' => 'getExtCost',
        'discount_percent' => 'getDiscountPercent',
        'discount_amount' => 'getDiscountAmount',
        'manual_discount' => 'getManualDiscount',
        'discount_code' => 'getDiscountCode',
        'amount' => 'getAmount',
        'tax_category' => 'getTaxCategory',
        'account' => 'getAccount',
        'account_description' => 'getAccountDescription',
        'sub' => 'getSub',
        'actual_account' => 'getActualAccount',
        'actual_sub' => 'getActualSub',
        'project' => 'getProject',
        'project_task' => 'getProjectTask',
        'expiration_date' => 'getExpirationDate',
        'lot_serial_number' => 'getLotSerialNumber',
        'po_order_type' => 'getPoOrderType',
        'po_order_nbr' => 'getPoOrderNbr',
        'po_order_line_nbr' => 'getPoOrderLineNbr',
        'transfer_order_type' => 'getTransferOrderType',
        'transfer_order_nbr' => 'getTransferOrderNbr',
        'transfer_order_line_nbr' => 'getTransferOrderLineNbr',
        'complete_po_line' => 'getCompletePoLine'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LINE_TYPE_GOODS_FOR_INVENTORY = 'GoodsForInventory';
    const LINE_TYPE_GOODS_FOR_SALES_ORDER = 'GoodsForSalesOrder';
    const LINE_TYPE_GOODS_FOR_REPLENISHMENT = 'GoodsForReplenishment';
    const LINE_TYPE_GOODS_FOR_DROP_SHIP = 'GoodsForDropShip';
    const LINE_TYPE_NON_STOCK_FOR_DROP_SHIP = 'NonStockForDropShip';
    const LINE_TYPE_NON_STOCK_FOR_SALES_ORDER = 'NonStockForSalesOrder';
    const LINE_TYPE_NON_STOCK = 'NonStock';
    const LINE_TYPE_SERVICE = 'Service';
    const LINE_TYPE_FREIGHT = 'Freight';
    const LINE_TYPE_DESCRIPTION = 'Description';
    const PO_ORDER_TYPE_REGULAR_ORDER = 'RegularOrder';
    const PO_ORDER_TYPE_DROP_SHIP = 'DropShip';
    const PO_ORDER_TYPE_BLANKET = 'Blanket';
    const PO_ORDER_TYPE_STANDARD_BLANKET = 'StandardBlanket';
    const TRANSFER_ORDER_TYPE_CREDIT_NOTE = 'CreditNote';
    const TRANSFER_ORDER_TYPE_DEBIT_NOTE = 'DebitNote';
    const TRANSFER_ORDER_TYPE_INVOICE = 'Invoice';
    const TRANSFER_ORDER_TYPE_QUOTE_ORDER = 'QuoteOrder';
    const TRANSFER_ORDER_TYPE_RMA_ORDER = 'RMAOrder';
    const TRANSFER_ORDER_TYPE_SALES_ORDER = 'SalesOrder';
    const TRANSFER_ORDER_TYPE_STANDARD_ORDER = 'StandardOrder';
    const TRANSFER_ORDER_TYPE_TRANSFER_ORDER = 'TransferOrder';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLineTypeAllowableValues()
    {
        return [
            self::LINE_TYPE_GOODS_FOR_INVENTORY,
            self::LINE_TYPE_GOODS_FOR_SALES_ORDER,
            self::LINE_TYPE_GOODS_FOR_REPLENISHMENT,
            self::LINE_TYPE_GOODS_FOR_DROP_SHIP,
            self::LINE_TYPE_NON_STOCK_FOR_DROP_SHIP,
            self::LINE_TYPE_NON_STOCK_FOR_SALES_ORDER,
            self::LINE_TYPE_NON_STOCK,
            self::LINE_TYPE_SERVICE,
            self::LINE_TYPE_FREIGHT,
            self::LINE_TYPE_DESCRIPTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPoOrderTypeAllowableValues()
    {
        return [
            self::PO_ORDER_TYPE_REGULAR_ORDER,
            self::PO_ORDER_TYPE_DROP_SHIP,
            self::PO_ORDER_TYPE_BLANKET,
            self::PO_ORDER_TYPE_STANDARD_BLANKET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransferOrderTypeAllowableValues()
    {
        return [
            self::TRANSFER_ORDER_TYPE_CREDIT_NOTE,
            self::TRANSFER_ORDER_TYPE_DEBIT_NOTE,
            self::TRANSFER_ORDER_TYPE_INVOICE,
            self::TRANSFER_ORDER_TYPE_QUOTE_ORDER,
            self::TRANSFER_ORDER_TYPE_RMA_ORDER,
            self::TRANSFER_ORDER_TYPE_SALES_ORDER,
            self::TRANSFER_ORDER_TYPE_STANDARD_ORDER,
            self::TRANSFER_ORDER_TYPE_TRANSFER_ORDER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allocations'] = isset($data['allocations']) ? $data['allocations'] : null;
        $this->container['line_nbr'] = isset($data['line_nbr']) ? $data['line_nbr'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['branch_number'] = isset($data['branch_number']) ? $data['branch_number'] : null;
        $this->container['inventory'] = isset($data['inventory']) ? $data['inventory'] : null;
        $this->container['line_type'] = isset($data['line_type']) ? $data['line_type'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['transaction_description'] = isset($data['transaction_description']) ? $data['transaction_description'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['order_qty'] = isset($data['order_qty']) ? $data['order_qty'] : null;
        $this->container['open_qty'] = isset($data['open_qty']) ? $data['open_qty'] : null;
        $this->container['receipt_qty'] = isset($data['receipt_qty']) ? $data['receipt_qty'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['ext_cost'] = isset($data['ext_cost']) ? $data['ext_cost'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['manual_discount'] = isset($data['manual_discount']) ? $data['manual_discount'] : null;
        $this->container['discount_code'] = isset($data['discount_code']) ? $data['discount_code'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['tax_category'] = isset($data['tax_category']) ? $data['tax_category'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['account_description'] = isset($data['account_description']) ? $data['account_description'] : null;
        $this->container['sub'] = isset($data['sub']) ? $data['sub'] : null;
        $this->container['actual_account'] = isset($data['actual_account']) ? $data['actual_account'] : null;
        $this->container['actual_sub'] = isset($data['actual_sub']) ? $data['actual_sub'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['project_task'] = isset($data['project_task']) ? $data['project_task'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['lot_serial_number'] = isset($data['lot_serial_number']) ? $data['lot_serial_number'] : null;
        $this->container['po_order_type'] = isset($data['po_order_type']) ? $data['po_order_type'] : null;
        $this->container['po_order_nbr'] = isset($data['po_order_nbr']) ? $data['po_order_nbr'] : null;
        $this->container['po_order_line_nbr'] = isset($data['po_order_line_nbr']) ? $data['po_order_line_nbr'] : null;
        $this->container['transfer_order_type'] = isset($data['transfer_order_type']) ? $data['transfer_order_type'] : null;
        $this->container['transfer_order_nbr'] = isset($data['transfer_order_nbr']) ? $data['transfer_order_nbr'] : null;
        $this->container['transfer_order_line_nbr'] = isset($data['transfer_order_line_nbr']) ? $data['transfer_order_line_nbr'] : null;
        $this->container['complete_po_line'] = isset($data['complete_po_line']) ? $data['complete_po_line'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLineTypeAllowableValues();
        if (!is_null($this->container['line_type']) && !in_array($this->container['line_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'line_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPoOrderTypeAllowableValues();
        if (!is_null($this->container['po_order_type']) && !in_array($this->container['po_order_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'po_order_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransferOrderTypeAllowableValues();
        if (!is_null($this->container['transfer_order_type']) && !in_array($this->container['transfer_order_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transfer_order_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allocations
     *
     * @return \Ekstralys\VismaNetApi\Model\AllocationsDto[]
     */
    public function getAllocations()
    {
        return $this->container['allocations'];
    }

    /**
     * Sets allocations
     *
     * @param \Ekstralys\VismaNetApi\Model\AllocationsDto[] $allocations allocations
     *
     * @return $this
     */
    public function setAllocations($allocations)
    {
        $this->container['allocations'] = $allocations;

        return $this;
    }

    /**
     * Gets line_nbr
     *
     * @return int
     */
    public function getLineNbr()
    {
        return $this->container['line_nbr'];
    }

    /**
     * Sets line_nbr
     *
     * @param int $line_nbr The line number
     *
     * @return $this
     */
    public function setLineNbr($line_nbr)
    {
        $this->container['line_nbr'] = $line_nbr;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return object
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param object $branch Branch is deprecated, please use BranchNumber instead.
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return object
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param object $branch_number Mandatory field: Document details tab &gt; Branch* &gt; The branch for which the item is purchased.
     *
     * @return $this
     */
    public function setBranchNumber($branch_number)
    {
        $this->container['branch_number'] = $branch_number;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return object
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param object $inventory inventory
     *
     * @return $this
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets line_type
     *
     * @return string
     */
    public function getLineType()
    {
        return $this->container['line_type'];
    }

    /**
     * Sets line_type
     *
     * @param string $line_type Document details tab &gt; Line type &gt; The type of the purchase order line.
     *
     * @return $this
     */
    public function setLineType($line_type)
    {
        $allowedValues = $this->getLineTypeAllowableValues();
        if (!is_null($line_type) && !in_array($line_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'line_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['line_type'] = $line_type;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return object
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param object $warehouse Mandatory field: Document details tab &gt; Warehouse* &gt; The warehouse where the item has been received.
     *
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location Document details tab &gt; Location &gt; The location where the item has been received.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets transaction_description
     *
     * @return string
     */
    public function getTransactionDescription()
    {
        return $this->container['transaction_description'];
    }

    /**
     * Sets transaction_description
     *
     * @param string $transaction_description Document details tab &gt; Transaction descr. &gt; The description of the receipt or return transaction.
     *
     * @return $this
     */
    public function setTransactionDescription($transaction_description)
    {
        $this->container['transaction_description'] = $transaction_description;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return string
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param string $uom Document details tab &gt; UoM &gt; The unit of measure (UoM) used for the purchased or transferred item.
     *
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets order_qty
     *
     * @return double
     */
    public function getOrderQty()
    {
        return $this->container['order_qty'];
    }

    /**
     * Sets order_qty
     *
     * @param double $order_qty Document details tab &gt; Ordered qty.  &gt; The quantity of the purchased item (in the specified UoM).
     *
     * @return $this
     */
    public function setOrderQty($order_qty)
    {
        $this->container['order_qty'] = $order_qty;

        return $this;
    }

    /**
     * Gets open_qty
     *
     * @return double
     */
    public function getOpenQty()
    {
        return $this->container['open_qty'];
    }

    /**
     * Sets open_qty
     *
     * @param double $open_qty Document details tab &gt; Open qty. &gt; The quantity of the stock item yet to be received on the purchase order.
     *
     * @return $this
     */
    public function setOpenQty($open_qty)
    {
        $this->container['open_qty'] = $open_qty;

        return $this;
    }

    /**
     * Gets receipt_qty
     *
     * @return double
     */
    public function getReceiptQty()
    {
        return $this->container['receipt_qty'];
    }

    /**
     * Sets receipt_qty
     *
     * @param double $receipt_qty Document details tab &gt; Receipts qty. &gt;  The quantity of the item (with the specified subitem code) in the specified UoM that has been received (listed on released receipts).
     *
     * @return $this
     */
    public function setReceiptQty($receipt_qty)
    {
        $this->container['receipt_qty'] = $receipt_qty;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return double
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param double $unit_cost Document details tab &gt; Unit cost &gt; The cost of a unit of the purchased item.
     *
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets ext_cost
     *
     * @return double
     */
    public function getExtCost()
    {
        return $this->container['ext_cost'];
    }

    /**
     * Sets ext_cost
     *
     * @param double $ext_cost Document details tab &gt; Cost &gt; The cost of the item, which is the unit price multiplied by the quantity.
     *
     * @return $this
     */
    public function setExtCost($ext_cost)
    {
        $this->container['ext_cost'] = $ext_cost;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return double
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param double $discount_percent Document details tab &gt; Discount percent &gt; If the Supplier and customer discounts functionality is enabled, the percent of the discount that has been entered manually or calculated based on the discount amount entered manually for this line item.
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return double
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param double $discount_amount Document details tab &gt; Discount amount &gt; If the Supplier and customer discounts functionality is enabled, the amount of the discount that has been specified manually or calculated based on the discount percent entered manually.
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets manual_discount
     *
     * @return bool
     */
    public function getManualDiscount()
    {
        return $this->container['manual_discount'];
    }

    /**
     * Sets manual_discount
     *
     * @param bool $manual_discount Document details tab &gt; Manual discount &gt; A check box that indicates (if selected) that the discount has been applied manually.
     *
     * @return $this
     */
    public function setManualDiscount($manual_discount)
    {
        $this->container['manual_discount'] = $manual_discount;

        return $this;
    }

    /**
     * Gets discount_code
     *
     * @return object
     */
    public function getDiscountCode()
    {
        return $this->container['discount_code'];
    }

    /**
     * Sets discount_code
     *
     * @param object $discount_code Document details tab &gt; Discount code &gt; The code of the line discount that has been applied to this line automatically.
     *
     * @return $this
     */
    public function setDiscountCode($discount_code)
    {
        $this->container['discount_code'] = $discount_code;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount Document details tab &gt; Amount &gt; The amount calculated (after discount has been taken) for the item.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets tax_category
     *
     * @return object
     */
    public function getTaxCategory()
    {
        return $this->container['tax_category'];
    }

    /**
     * Sets tax_category
     *
     * @param object $tax_category Document details tab &gt; VAT category &gt; The VAT category assigned to the stock item.
     *
     * @return $this
     */
    public function setTaxCategory($tax_category)
    {
        $this->container['tax_category'] = $tax_category;

        return $this;
    }

    /**
     * Gets account
     *
     * @return object
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param object $account Document details tab &gt; Account &gt; The account used to record the item amount on the purchase receipt;
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets account_description
     *
     * @return string
     */
    public function getAccountDescription()
    {
        return $this->container['account_description'];
    }

    /**
     * Sets account_description
     *
     * @param string $account_description Document details tab &gt; Description &gt; The description of this account.
     *
     * @return $this
     */
    public function setAccountDescription($account_description)
    {
        $this->container['account_description'] = $account_description;

        return $this;
    }

    /**
     * Gets sub
     *
     * @return object
     */
    public function getSub()
    {
        return $this->container['sub'];
    }

    /**
     * Sets sub
     *
     * @param object $sub Document details tab &gt; Sub ID &gt; The subaccount to be used to record the non-stock item amount on the purchase receipt (for non-stock items for which receipts are not required).
     *
     * @return $this
     */
    public function setSub($sub)
    {
        $this->container['sub'] = $sub;

        return $this;
    }

    /**
     * Gets actual_account
     *
     * @return object
     */
    public function getActualAccount()
    {
        return $this->container['actual_account'];
    }

    /**
     * Sets actual_account
     *
     * @param object $actual_account Document details tab &gt; Accrual account &gt; The accrual account to record the item amount on the purchase receipt; used for stock items and non-stock items for which a receipt is required.
     *
     * @return $this
     */
    public function setActualAccount($actual_account)
    {
        $this->container['actual_account'] = $actual_account;

        return $this;
    }

    /**
     * Gets actual_sub
     *
     * @return object
     */
    public function getActualSub()
    {
        return $this->container['actual_sub'];
    }

    /**
     * Sets actual_sub
     *
     * @param object $actual_sub Document details tab &gt; Accrual sub. &gt; The subaccount used to record the item amount on the purchase receipt, used for stock items and non-stock items for which a receipt is required.
     *
     * @return $this
     */
    public function setActualSub($actual_sub)
    {
        $this->container['actual_sub'] = $actual_sub;

        return $this;
    }

    /**
     * Gets project
     *
     * @return object
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param object $project Document details tab &gt; Project &gt; The project with which the document is associated. If the document is based on a purchase order, the project is automatically copied from the respective purchase order line.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets project_task
     *
     * @return object
     */
    public function getProjectTask()
    {
        return $this->container['project_task'];
    }

    /**
     * Sets project_task
     *
     * @param object $project_task Document details tab &gt; Project task &gt; The project task with which the document is associated.
     *
     * @return $this
     */
    public function setProjectTask($project_task)
    {
        $this->container['project_task'] = $project_task;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date Document details tab &gt; Expiration date &gt; The expiration date of the received item.
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets lot_serial_number
     *
     * @return string
     */
    public function getLotSerialNumber()
    {
        return $this->container['lot_serial_number'];
    }

    /**
     * Sets lot_serial_number
     *
     * @param string $lot_serial_number Document details tab &gt; Lot/serial no. &gt; The lot or serial number assigned to the received quantity of the purchased item.
     *
     * @return $this
     */
    public function setLotSerialNumber($lot_serial_number)
    {
        $this->container['lot_serial_number'] = $lot_serial_number;

        return $this;
    }

    /**
     * Gets po_order_type
     *
     * @return string
     */
    public function getPoOrderType()
    {
        return $this->container['po_order_type'];
    }

    /**
     * Sets po_order_type
     *
     * @param string $po_order_type Document details tab &gt; Purchase order type &gt; The type of the purchase order related to this purchase receipt.
     *
     * @return $this
     */
    public function setPoOrderType($po_order_type)
    {
        $allowedValues = $this->getPoOrderTypeAllowableValues();
        if (!is_null($po_order_type) && !in_array($po_order_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'po_order_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['po_order_type'] = $po_order_type;

        return $this;
    }

    /**
     * Gets po_order_nbr
     *
     * @return string
     */
    public function getPoOrderNbr()
    {
        return $this->container['po_order_nbr'];
    }

    /**
     * Sets po_order_nbr
     *
     * @param string $po_order_nbr Document details tab &gt; Purchase order no. &gt; The reference number of the purchase order related to this purchase receipt.
     *
     * @return $this
     */
    public function setPoOrderNbr($po_order_nbr)
    {
        $this->container['po_order_nbr'] = $po_order_nbr;

        return $this;
    }

    /**
     * Gets po_order_line_nbr
     *
     * @return int
     */
    public function getPoOrderLineNbr()
    {
        return $this->container['po_order_line_nbr'];
    }

    /**
     * Sets po_order_line_nbr
     *
     * @param int $po_order_line_nbr Document details tab &gt; Purchase order line no. &gt; The line number of the purchase order related to this line of the purchase receipt.
     *
     * @return $this
     */
    public function setPoOrderLineNbr($po_order_line_nbr)
    {
        $this->container['po_order_line_nbr'] = $po_order_line_nbr;

        return $this;
    }

    /**
     * Gets transfer_order_type
     *
     * @return string
     */
    public function getTransferOrderType()
    {
        return $this->container['transfer_order_type'];
    }

    /**
     * Sets transfer_order_type
     *
     * @param string $transfer_order_type Document details tab &gt; Transfer order type &gt; The type of the transfer order to which this receipt is linked.
     *
     * @return $this
     */
    public function setTransferOrderType($transfer_order_type)
    {
        $allowedValues = $this->getTransferOrderTypeAllowableValues();
        if (!is_null($transfer_order_type) && !in_array($transfer_order_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transfer_order_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transfer_order_type'] = $transfer_order_type;

        return $this;
    }

    /**
     * Gets transfer_order_nbr
     *
     * @return string
     */
    public function getTransferOrderNbr()
    {
        return $this->container['transfer_order_nbr'];
    }

    /**
     * Sets transfer_order_nbr
     *
     * @param string $transfer_order_nbr Document details tab &gt; Transfer order no. &gt; The reference number of the transfer order to which this receipt is linked.
     *
     * @return $this
     */
    public function setTransferOrderNbr($transfer_order_nbr)
    {
        $this->container['transfer_order_nbr'] = $transfer_order_nbr;

        return $this;
    }

    /**
     * Gets transfer_order_line_nbr
     *
     * @return int
     */
    public function getTransferOrderLineNbr()
    {
        return $this->container['transfer_order_line_nbr'];
    }

    /**
     * Sets transfer_order_line_nbr
     *
     * @param int $transfer_order_line_nbr Document details tab &gt; Transfer line no &gt; The line number in the transfer order to which this receipt is linked.
     *
     * @return $this
     */
    public function setTransferOrderLineNbr($transfer_order_line_nbr)
    {
        $this->container['transfer_order_line_nbr'] = $transfer_order_line_nbr;

        return $this;
    }

    /**
     * Gets complete_po_line
     *
     * @return bool
     */
    public function getCompletePoLine()
    {
        return $this->container['complete_po_line'];
    }

    /**
     * Sets complete_po_line
     *
     * @param bool $complete_po_line Document details tab &gt; Complelete purchase line &gt; A check box that indicates to the system (if selected) that the purchase order line added to this receipt line should be considered completed upon release of this purchase receipt.
     *
     * @return $this
     */
    public function setCompletePoLine($complete_po_line)
    {
        $this->container['complete_po_line'] = $complete_po_line;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


