<?php
/**
 * PurchaseReceiptLineBasicUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * PurchaseReceiptLineBasicUpdateDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a Purchase Receipt Line in PurchaseReceiptBasicContraoller. Used for adding data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseReceiptLineBasicUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseReceiptLineBasicUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'operation' => 'string',
        'line_nbr' => 'object',
        'line_type' => 'object',
        'branch_id' => 'object',
        'branch_number' => 'object',
        'inventory_id' => 'object',
        'warehouse_id' => 'object',
        'location_id' => 'object',
        'transaction_description' => 'object',
        'uom' => 'object',
        'receipt_qty' => 'object',
        'unit_cost' => 'object',
        'ext_cost' => 'object',
        'discount_percent' => 'object',
        'discount_amount' => 'object',
        'manual_discount' => 'object',
        'discount_code_id' => 'object',
        'amount' => 'object',
        'tax_category_id' => 'object',
        'account_id' => 'object',
        'account_description' => 'object',
        'subaccount' => '\Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]',
        'actual_account_id' => 'object',
        'actual_subaccount' => '\Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]',
        'project_id' => 'object',
        'project_task_id' => 'object',
        'expiration_date' => 'object',
        'lot_serial_number' => 'object',
        'po_order_type' => 'object',
        'po_order_nbr' => 'object',
        'po_order_line_nbr' => 'object',
        'transfer_order_type' => 'object',
        'transfer_order_nbr' => 'object',
        'transfer_order_line_nbr' => 'object',
        'complete_po_line' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'operation' => null,
        'line_nbr' => null,
        'line_type' => null,
        'branch_id' => null,
        'branch_number' => null,
        'inventory_id' => null,
        'warehouse_id' => null,
        'location_id' => null,
        'transaction_description' => null,
        'uom' => null,
        'receipt_qty' => null,
        'unit_cost' => null,
        'ext_cost' => null,
        'discount_percent' => null,
        'discount_amount' => null,
        'manual_discount' => null,
        'discount_code_id' => null,
        'amount' => null,
        'tax_category_id' => null,
        'account_id' => null,
        'account_description' => null,
        'subaccount' => null,
        'actual_account_id' => null,
        'actual_subaccount' => null,
        'project_id' => null,
        'project_task_id' => null,
        'expiration_date' => null,
        'lot_serial_number' => null,
        'po_order_type' => null,
        'po_order_nbr' => null,
        'po_order_line_nbr' => null,
        'transfer_order_type' => null,
        'transfer_order_nbr' => null,
        'transfer_order_line_nbr' => null,
        'complete_po_line' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'operation' => 'operation',
        'line_nbr' => 'lineNbr',
        'line_type' => 'lineType',
        'branch_id' => 'branchId',
        'branch_number' => 'branchNumber',
        'inventory_id' => 'inventoryId',
        'warehouse_id' => 'warehouseId',
        'location_id' => 'locationId',
        'transaction_description' => 'transactionDescription',
        'uom' => 'uom',
        'receipt_qty' => 'receiptQty',
        'unit_cost' => 'unitCost',
        'ext_cost' => 'extCost',
        'discount_percent' => 'discountPercent',
        'discount_amount' => 'discountAmount',
        'manual_discount' => 'manualDiscount',
        'discount_code_id' => 'discountCodeId',
        'amount' => 'amount',
        'tax_category_id' => 'taxCategoryId',
        'account_id' => 'accountId',
        'account_description' => 'accountDescription',
        'subaccount' => 'subaccount',
        'actual_account_id' => 'actualAccountId',
        'actual_subaccount' => 'actualSubaccount',
        'project_id' => 'projectId',
        'project_task_id' => 'projectTaskId',
        'expiration_date' => 'expirationDate',
        'lot_serial_number' => 'lotSerialNumber',
        'po_order_type' => 'poOrderType',
        'po_order_nbr' => 'poOrderNbr',
        'po_order_line_nbr' => 'poOrderLineNbr',
        'transfer_order_type' => 'transferOrderType',
        'transfer_order_nbr' => 'transferOrderNbr',
        'transfer_order_line_nbr' => 'transferOrderLineNbr',
        'complete_po_line' => 'completePoLine'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'operation' => 'setOperation',
        'line_nbr' => 'setLineNbr',
        'line_type' => 'setLineType',
        'branch_id' => 'setBranchId',
        'branch_number' => 'setBranchNumber',
        'inventory_id' => 'setInventoryId',
        'warehouse_id' => 'setWarehouseId',
        'location_id' => 'setLocationId',
        'transaction_description' => 'setTransactionDescription',
        'uom' => 'setUom',
        'receipt_qty' => 'setReceiptQty',
        'unit_cost' => 'setUnitCost',
        'ext_cost' => 'setExtCost',
        'discount_percent' => 'setDiscountPercent',
        'discount_amount' => 'setDiscountAmount',
        'manual_discount' => 'setManualDiscount',
        'discount_code_id' => 'setDiscountCodeId',
        'amount' => 'setAmount',
        'tax_category_id' => 'setTaxCategoryId',
        'account_id' => 'setAccountId',
        'account_description' => 'setAccountDescription',
        'subaccount' => 'setSubaccount',
        'actual_account_id' => 'setActualAccountId',
        'actual_subaccount' => 'setActualSubaccount',
        'project_id' => 'setProjectId',
        'project_task_id' => 'setProjectTaskId',
        'expiration_date' => 'setExpirationDate',
        'lot_serial_number' => 'setLotSerialNumber',
        'po_order_type' => 'setPoOrderType',
        'po_order_nbr' => 'setPoOrderNbr',
        'po_order_line_nbr' => 'setPoOrderLineNbr',
        'transfer_order_type' => 'setTransferOrderType',
        'transfer_order_nbr' => 'setTransferOrderNbr',
        'transfer_order_line_nbr' => 'setTransferOrderLineNbr',
        'complete_po_line' => 'setCompletePoLine'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'operation' => 'getOperation',
        'line_nbr' => 'getLineNbr',
        'line_type' => 'getLineType',
        'branch_id' => 'getBranchId',
        'branch_number' => 'getBranchNumber',
        'inventory_id' => 'getInventoryId',
        'warehouse_id' => 'getWarehouseId',
        'location_id' => 'getLocationId',
        'transaction_description' => 'getTransactionDescription',
        'uom' => 'getUom',
        'receipt_qty' => 'getReceiptQty',
        'unit_cost' => 'getUnitCost',
        'ext_cost' => 'getExtCost',
        'discount_percent' => 'getDiscountPercent',
        'discount_amount' => 'getDiscountAmount',
        'manual_discount' => 'getManualDiscount',
        'discount_code_id' => 'getDiscountCodeId',
        'amount' => 'getAmount',
        'tax_category_id' => 'getTaxCategoryId',
        'account_id' => 'getAccountId',
        'account_description' => 'getAccountDescription',
        'subaccount' => 'getSubaccount',
        'actual_account_id' => 'getActualAccountId',
        'actual_subaccount' => 'getActualSubaccount',
        'project_id' => 'getProjectId',
        'project_task_id' => 'getProjectTaskId',
        'expiration_date' => 'getExpirationDate',
        'lot_serial_number' => 'getLotSerialNumber',
        'po_order_type' => 'getPoOrderType',
        'po_order_nbr' => 'getPoOrderNbr',
        'po_order_line_nbr' => 'getPoOrderLineNbr',
        'transfer_order_type' => 'getTransferOrderType',
        'transfer_order_nbr' => 'getTransferOrderNbr',
        'transfer_order_line_nbr' => 'getTransferOrderLineNbr',
        'complete_po_line' => 'getCompletePoLine'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OPERATION_INSERT = 'Insert';
    const OPERATION_UPDATE = 'Update';
    const OPERATION_DELETE = 'Delete';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_INSERT,
            self::OPERATION_UPDATE,
            self::OPERATION_DELETE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['line_nbr'] = isset($data['line_nbr']) ? $data['line_nbr'] : null;
        $this->container['line_type'] = isset($data['line_type']) ? $data['line_type'] : null;
        $this->container['branch_id'] = isset($data['branch_id']) ? $data['branch_id'] : null;
        $this->container['branch_number'] = isset($data['branch_number']) ? $data['branch_number'] : null;
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['transaction_description'] = isset($data['transaction_description']) ? $data['transaction_description'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['receipt_qty'] = isset($data['receipt_qty']) ? $data['receipt_qty'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['ext_cost'] = isset($data['ext_cost']) ? $data['ext_cost'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['manual_discount'] = isset($data['manual_discount']) ? $data['manual_discount'] : null;
        $this->container['discount_code_id'] = isset($data['discount_code_id']) ? $data['discount_code_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['tax_category_id'] = isset($data['tax_category_id']) ? $data['tax_category_id'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['account_description'] = isset($data['account_description']) ? $data['account_description'] : null;
        $this->container['subaccount'] = isset($data['subaccount']) ? $data['subaccount'] : null;
        $this->container['actual_account_id'] = isset($data['actual_account_id']) ? $data['actual_account_id'] : null;
        $this->container['actual_subaccount'] = isset($data['actual_subaccount']) ? $data['actual_subaccount'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['project_task_id'] = isset($data['project_task_id']) ? $data['project_task_id'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['lot_serial_number'] = isset($data['lot_serial_number']) ? $data['lot_serial_number'] : null;
        $this->container['po_order_type'] = isset($data['po_order_type']) ? $data['po_order_type'] : null;
        $this->container['po_order_nbr'] = isset($data['po_order_nbr']) ? $data['po_order_nbr'] : null;
        $this->container['po_order_line_nbr'] = isset($data['po_order_line_nbr']) ? $data['po_order_line_nbr'] : null;
        $this->container['transfer_order_type'] = isset($data['transfer_order_type']) ? $data['transfer_order_type'] : null;
        $this->container['transfer_order_nbr'] = isset($data['transfer_order_nbr']) ? $data['transfer_order_nbr'] : null;
        $this->container['transfer_order_line_nbr'] = isset($data['transfer_order_line_nbr']) ? $data['transfer_order_line_nbr'] : null;
        $this->container['complete_po_line'] = isset($data['complete_po_line']) ? $data['complete_po_line'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation operation
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($operation) && !in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets line_nbr
     *
     * @return object
     */
    public function getLineNbr()
    {
        return $this->container['line_nbr'];
    }

    /**
     * Sets line_nbr
     *
     * @param object $line_nbr The Document details tab &gt; The number of the purchase receipt line.
     *
     * @return $this
     */
    public function setLineNbr($line_nbr)
    {
        $this->container['line_nbr'] = $line_nbr;

        return $this;
    }

    /**
     * Gets line_type
     *
     * @return object
     */
    public function getLineType()
    {
        return $this->container['line_type'];
    }

    /**
     * Sets line_type
     *
     * @param object $line_type The Document details tab &gt; The type of the purchase receipt line.
     *
     * @return $this
     */
    public function setLineType($line_type)
    {
        $this->container['line_type'] = $line_type;

        return $this;
    }

    /**
     * Gets branch_id
     *
     * @return object
     */
    public function getBranchId()
    {
        return $this->container['branch_id'];
    }

    /**
     * Sets branch_id
     *
     * @param object $branch_id BranchId is deprecated, please use BranchNumber instead.
     *
     * @return $this
     */
    public function setBranchId($branch_id)
    {
        $this->container['branch_id'] = $branch_id;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return object
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param object $branch_number The Document details tab &gt; The number of the branch to which the purchase receipt line belongs.
     *
     * @return $this
     */
    public function setBranchNumber($branch_number)
    {
        $this->container['branch_number'] = $branch_number;

        return $this;
    }

    /**
     * Gets inventory_id
     *
     * @return object
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param object $inventory_id The Document details tab &gt; The item ID of the received item.
     *
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return object
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param object $warehouse_id The Document details tab &gt; The warehouse where the item has been received.
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return object
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param object $location_id The Document details tab &gt; The location where the item has been received.
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets transaction_description
     *
     * @return object
     */
    public function getTransactionDescription()
    {
        return $this->container['transaction_description'];
    }

    /**
     * Sets transaction_description
     *
     * @param object $transaction_description The Document details tab &gt; The description of the receipt or return transaction.
     *
     * @return $this
     */
    public function setTransactionDescription($transaction_description)
    {
        $this->container['transaction_description'] = $transaction_description;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return object
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param object $uom The Document details tab &gt; The unit of measure (UoM) used for the purchased or transferred item. By default, it is the purchase unit.
     *
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets receipt_qty
     *
     * @return object
     */
    public function getReceiptQty()
    {
        return $this->container['receipt_qty'];
    }

    /**
     * Sets receipt_qty
     *
     * @param object $receipt_qty The Document details tab &gt; The quantity of the item in the specified UoM that has been received (listed on released receipts).
     *
     * @return $this
     */
    public function setReceiptQty($receipt_qty)
    {
        $this->container['receipt_qty'] = $receipt_qty;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return object
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param object $unit_cost The Document details tab &gt; The cost of a unit of the purchased item.
     *
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets ext_cost
     *
     * @return object
     */
    public function getExtCost()
    {
        return $this->container['ext_cost'];
    }

    /**
     * Sets ext_cost
     *
     * @param object $ext_cost The Document details tab &gt; The extended cost of the item, which is the unit price multiplied by the quantity.
     *
     * @return $this
     */
    public function setExtCost($ext_cost)
    {
        $this->container['ext_cost'] = $ext_cost;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return object
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param object $discount_percent The Document details tab &gt; The automatically calculated or manually entered discount percent on the line.
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return object
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param object $discount_amount The Document details tab &gt; The automatically calculated or manually entered discount amount on the line.
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets manual_discount
     *
     * @return object
     */
    public function getManualDiscount()
    {
        return $this->container['manual_discount'];
    }

    /**
     * Sets manual_discount
     *
     * @param object $manual_discount The Document details tab &gt; A check box that indicates (if selected) that the discount has been applied manually.
     *
     * @return $this
     */
    public function setManualDiscount($manual_discount)
    {
        $this->container['manual_discount'] = $manual_discount;

        return $this;
    }

    /**
     * Gets discount_code_id
     *
     * @return object
     */
    public function getDiscountCodeId()
    {
        return $this->container['discount_code_id'];
    }

    /**
     * Sets discount_code_id
     *
     * @param object $discount_code_id The Document details tab &gt; The code of the line discount that has been applied to this line automatically.
     *
     * @return $this
     */
    public function setDiscountCodeId($discount_code_id)
    {
        $this->container['discount_code_id'] = $discount_code_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return object
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param object $amount The Document details tab &gt; The amount calculated (after discount has been taken) for the item.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets tax_category_id
     *
     * @return object
     */
    public function getTaxCategoryId()
    {
        return $this->container['tax_category_id'];
    }

    /**
     * Sets tax_category_id
     *
     * @param object $tax_category_id The Document details tab &gt; The VAT category assigned to the stock item.
     *
     * @return $this
     */
    public function setTaxCategoryId($tax_category_id)
    {
        $this->container['tax_category_id'] = $tax_category_id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return object
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param object $account_id The Document details tab &gt; The account used to record the item amount on the purchase receipt; used for non-stock items for which receipt is not required.
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_description
     *
     * @return object
     */
    public function getAccountDescription()
    {
        return $this->container['account_description'];
    }

    /**
     * Sets account_description
     *
     * @param object $account_description The Document details tab &gt; The description of this account.
     *
     * @return $this
     */
    public function setAccountDescription($account_description)
    {
        $this->container['account_description'] = $account_description;

        return $this;
    }

    /**
     * Gets subaccount
     *
     * @return \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]
     */
    public function getSubaccount()
    {
        return $this->container['subaccount'];
    }

    /**
     * Sets subaccount
     *
     * @param \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[] $subaccount The Document details tab &gt; The subaccount to be used to record the non-stock item amount on the purchase receipt (for non-stock items for which receipts are not required).
     *
     * @return $this
     */
    public function setSubaccount($subaccount)
    {
        $this->container['subaccount'] = $subaccount;

        return $this;
    }

    /**
     * Gets actual_account_id
     *
     * @return object
     */
    public function getActualAccountId()
    {
        return $this->container['actual_account_id'];
    }

    /**
     * Sets actual_account_id
     *
     * @param object $actual_account_id The Document details tab &gt; The accrual account to record the item amount on the purchase receipt; used for stock items and non-stock items for which a receipt is required.
     *
     * @return $this
     */
    public function setActualAccountId($actual_account_id)
    {
        $this->container['actual_account_id'] = $actual_account_id;

        return $this;
    }

    /**
     * Gets actual_subaccount
     *
     * @return \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[]
     */
    public function getActualSubaccount()
    {
        return $this->container['actual_subaccount'];
    }

    /**
     * Sets actual_subaccount
     *
     * @param \Ekstralys\VismaNetApi\Model\SegmentUpdateDto[] $actual_subaccount The Document details tab &gt; The subaccount used to record the item amount on the purchase receipt, used for stock items and non-stock items for which a receipt is required.
     *
     * @return $this
     */
    public function setActualSubaccount($actual_subaccount)
    {
        $this->container['actual_subaccount'] = $actual_subaccount;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return object
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param object $project_id The Document details tab &gt; The project with which the document is associated.
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets project_task_id
     *
     * @return object
     */
    public function getProjectTaskId()
    {
        return $this->container['project_task_id'];
    }

    /**
     * Sets project_task_id
     *
     * @param object $project_task_id The Document details tab &gt; The project task with which the document is associated.
     *
     * @return $this
     */
    public function setProjectTaskId($project_task_id)
    {
        $this->container['project_task_id'] = $project_task_id;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return object
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param object $expiration_date The Document details tab &gt; The expiration date of the received item.
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets lot_serial_number
     *
     * @return object
     */
    public function getLotSerialNumber()
    {
        return $this->container['lot_serial_number'];
    }

    /**
     * Sets lot_serial_number
     *
     * @param object $lot_serial_number lot_serial_number
     *
     * @return $this
     */
    public function setLotSerialNumber($lot_serial_number)
    {
        $this->container['lot_serial_number'] = $lot_serial_number;

        return $this;
    }

    /**
     * Gets po_order_type
     *
     * @return object
     */
    public function getPoOrderType()
    {
        return $this->container['po_order_type'];
    }

    /**
     * Sets po_order_type
     *
     * @param object $po_order_type The Document details tab &gt; The type of the purchase order related to this purchase receipt.
     *
     * @return $this
     */
    public function setPoOrderType($po_order_type)
    {
        $this->container['po_order_type'] = $po_order_type;

        return $this;
    }

    /**
     * Gets po_order_nbr
     *
     * @return object
     */
    public function getPoOrderNbr()
    {
        return $this->container['po_order_nbr'];
    }

    /**
     * Sets po_order_nbr
     *
     * @param object $po_order_nbr This property replaced by an action, please use the following sub-endpoint:/controller/api/v1/PurchaseReceipt/{receiptNumber}/action/addpurchaseorder.
     *
     * @return $this
     */
    public function setPoOrderNbr($po_order_nbr)
    {
        $this->container['po_order_nbr'] = $po_order_nbr;

        return $this;
    }

    /**
     * Gets po_order_line_nbr
     *
     * @return object
     */
    public function getPoOrderLineNbr()
    {
        return $this->container['po_order_line_nbr'];
    }

    /**
     * Sets po_order_line_nbr
     *
     * @param object $po_order_line_nbr This property replaced by an action please use the following sub-endpoint:/controller/api/v1/PurchaseReceipt/{receiptNumber}/action/addpurchaseorderlines
     *
     * @return $this
     */
    public function setPoOrderLineNbr($po_order_line_nbr)
    {
        $this->container['po_order_line_nbr'] = $po_order_line_nbr;

        return $this;
    }

    /**
     * Gets transfer_order_type
     *
     * @return object
     */
    public function getTransferOrderType()
    {
        return $this->container['transfer_order_type'];
    }

    /**
     * Sets transfer_order_type
     *
     * @param object $transfer_order_type The Document details tab &gt; The type of the transfer order to which this receipt is linked.
     *
     * @return $this
     */
    public function setTransferOrderType($transfer_order_type)
    {
        $this->container['transfer_order_type'] = $transfer_order_type;

        return $this;
    }

    /**
     * Gets transfer_order_nbr
     *
     * @return object
     */
    public function getTransferOrderNbr()
    {
        return $this->container['transfer_order_nbr'];
    }

    /**
     * Sets transfer_order_nbr
     *
     * @param object $transfer_order_nbr The Document details tab &gt; The reference number of the transfer order to which this receipt is linked.
     *
     * @return $this
     */
    public function setTransferOrderNbr($transfer_order_nbr)
    {
        $this->container['transfer_order_nbr'] = $transfer_order_nbr;

        return $this;
    }

    /**
     * Gets transfer_order_line_nbr
     *
     * @return object
     */
    public function getTransferOrderLineNbr()
    {
        return $this->container['transfer_order_line_nbr'];
    }

    /**
     * Sets transfer_order_line_nbr
     *
     * @param object $transfer_order_line_nbr The Document details tab &gt; The line number in the transfer order to which this receipt is linked.
     *
     * @return $this
     */
    public function setTransferOrderLineNbr($transfer_order_line_nbr)
    {
        $this->container['transfer_order_line_nbr'] = $transfer_order_line_nbr;

        return $this;
    }

    /**
     * Gets complete_po_line
     *
     * @return object
     */
    public function getCompletePoLine()
    {
        return $this->container['complete_po_line'];
    }

    /**
     * Sets complete_po_line
     *
     * @param object $complete_po_line The Document details tab &gt; A check box that indicates to the system (if selected) that the purchase order line added to this receipt line should be considered completed upon release of this purchase receipt.
     *
     * @return $this
     */
    public function setCompletePoLine($complete_po_line)
    {
        $this->container['complete_po_line'] = $complete_po_line;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


