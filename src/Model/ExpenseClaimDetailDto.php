<?php
/**
 * ExpenseClaimDetailDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * ExpenseClaimDetailDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExpenseClaimDetailDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExpenseClaimDetailDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'claim_detail_id' => 'int',
        'line_id' => 'string',
        'date' => '\DateTime',
        'expense_item' => 'object',
        'description' => 'string',
        'quantity' => 'double',
        'uom' => 'string',
        'unit_cost' => 'double',
        'currency' => 'string',
        'total_amount' => 'double',
        'invoiceable' => 'bool',
        'claim_amount' => 'double',
        'amount_in_claim_curr' => 'double',
        'project' => 'object',
        'project_task' => 'object',
        'expense_account' => 'object',
        'expense_subaccount' => 'object',
        'branch' => 'object',
        'tax_category' => 'object',
        'ref_nbr' => 'string',
        'sales_account' => 'object',
        'sales_subaccount' => 'object',
        'employee_part' => 'double',
        'customer' => 'object',
        'location' => 'object',
        'ar_reference_nbr' => 'string',
        'approval_status' => 'string',
        'approval_status_text' => 'string',
        'approver' => 'string',
        'attachments' => '\Ekstralys\VismaNetApi\Model\AttachmentDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'claim_detail_id' => 'int32',
        'line_id' => 'uuid',
        'date' => 'date-time',
        'expense_item' => null,
        'description' => null,
        'quantity' => 'double',
        'uom' => null,
        'unit_cost' => 'double',
        'currency' => null,
        'total_amount' => 'double',
        'invoiceable' => null,
        'claim_amount' => 'double',
        'amount_in_claim_curr' => 'double',
        'project' => null,
        'project_task' => null,
        'expense_account' => null,
        'expense_subaccount' => null,
        'branch' => null,
        'tax_category' => null,
        'ref_nbr' => null,
        'sales_account' => null,
        'sales_subaccount' => null,
        'employee_part' => 'double',
        'customer' => null,
        'location' => null,
        'ar_reference_nbr' => null,
        'approval_status' => null,
        'approval_status_text' => null,
        'approver' => null,
        'attachments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'claim_detail_id' => 'claimDetailId',
        'line_id' => 'lineId',
        'date' => 'date',
        'expense_item' => 'expenseItem',
        'description' => 'description',
        'quantity' => 'quantity',
        'uom' => 'uom',
        'unit_cost' => 'unitCost',
        'currency' => 'currency',
        'total_amount' => 'totalAmount',
        'invoiceable' => 'invoiceable',
        'claim_amount' => 'claimAmount',
        'amount_in_claim_curr' => 'amountInClaimCurr',
        'project' => 'project',
        'project_task' => 'projectTask',
        'expense_account' => 'expenseAccount',
        'expense_subaccount' => 'expenseSubaccount',
        'branch' => 'branch',
        'tax_category' => 'taxCategory',
        'ref_nbr' => 'refNbr',
        'sales_account' => 'salesAccount',
        'sales_subaccount' => 'salesSubaccount',
        'employee_part' => 'employeePart',
        'customer' => 'customer',
        'location' => 'location',
        'ar_reference_nbr' => 'arReferenceNbr',
        'approval_status' => 'approvalStatus',
        'approval_status_text' => 'approvalStatusText',
        'approver' => 'approver',
        'attachments' => 'attachments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'claim_detail_id' => 'setClaimDetailId',
        'line_id' => 'setLineId',
        'date' => 'setDate',
        'expense_item' => 'setExpenseItem',
        'description' => 'setDescription',
        'quantity' => 'setQuantity',
        'uom' => 'setUom',
        'unit_cost' => 'setUnitCost',
        'currency' => 'setCurrency',
        'total_amount' => 'setTotalAmount',
        'invoiceable' => 'setInvoiceable',
        'claim_amount' => 'setClaimAmount',
        'amount_in_claim_curr' => 'setAmountInClaimCurr',
        'project' => 'setProject',
        'project_task' => 'setProjectTask',
        'expense_account' => 'setExpenseAccount',
        'expense_subaccount' => 'setExpenseSubaccount',
        'branch' => 'setBranch',
        'tax_category' => 'setTaxCategory',
        'ref_nbr' => 'setRefNbr',
        'sales_account' => 'setSalesAccount',
        'sales_subaccount' => 'setSalesSubaccount',
        'employee_part' => 'setEmployeePart',
        'customer' => 'setCustomer',
        'location' => 'setLocation',
        'ar_reference_nbr' => 'setArReferenceNbr',
        'approval_status' => 'setApprovalStatus',
        'approval_status_text' => 'setApprovalStatusText',
        'approver' => 'setApprover',
        'attachments' => 'setAttachments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'claim_detail_id' => 'getClaimDetailId',
        'line_id' => 'getLineId',
        'date' => 'getDate',
        'expense_item' => 'getExpenseItem',
        'description' => 'getDescription',
        'quantity' => 'getQuantity',
        'uom' => 'getUom',
        'unit_cost' => 'getUnitCost',
        'currency' => 'getCurrency',
        'total_amount' => 'getTotalAmount',
        'invoiceable' => 'getInvoiceable',
        'claim_amount' => 'getClaimAmount',
        'amount_in_claim_curr' => 'getAmountInClaimCurr',
        'project' => 'getProject',
        'project_task' => 'getProjectTask',
        'expense_account' => 'getExpenseAccount',
        'expense_subaccount' => 'getExpenseSubaccount',
        'branch' => 'getBranch',
        'tax_category' => 'getTaxCategory',
        'ref_nbr' => 'getRefNbr',
        'sales_account' => 'getSalesAccount',
        'sales_subaccount' => 'getSalesSubaccount',
        'employee_part' => 'getEmployeePart',
        'customer' => 'getCustomer',
        'location' => 'getLocation',
        'ar_reference_nbr' => 'getArReferenceNbr',
        'approval_status' => 'getApprovalStatus',
        'approval_status_text' => 'getApprovalStatusText',
        'approver' => 'getApprover',
        'attachments' => 'getAttachments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const APPROVAL_STATUS__NEW = 'New';
    const APPROVAL_STATUS_CANCELED = 'Canceled';
    const APPROVAL_STATUS_SENT_TO_APPROVAL = 'SentToApproval';
    const APPROVAL_STATUS_RECEIVED_BY_APPROVAL = 'ReceivedByApproval';
    const APPROVAL_STATUS_IN_PROGRESS_APPROVAL = 'InProgressApproval';
    const APPROVAL_STATUS_REJECTED_IN_APPROVAL = 'RejectedInApproval';
    const APPROVAL_STATUS_APPROVED_IN_APPROVAL = 'ApprovedInApproval';
    const APPROVAL_STATUS_ACTIVE_WORKFLOW_APPROVAL = 'ActiveWorkflowApproval';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApprovalStatusAllowableValues()
    {
        return [
            self::APPROVAL_STATUS__NEW,
            self::APPROVAL_STATUS_CANCELED,
            self::APPROVAL_STATUS_SENT_TO_APPROVAL,
            self::APPROVAL_STATUS_RECEIVED_BY_APPROVAL,
            self::APPROVAL_STATUS_IN_PROGRESS_APPROVAL,
            self::APPROVAL_STATUS_REJECTED_IN_APPROVAL,
            self::APPROVAL_STATUS_APPROVED_IN_APPROVAL,
            self::APPROVAL_STATUS_ACTIVE_WORKFLOW_APPROVAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['claim_detail_id'] = isset($data['claim_detail_id']) ? $data['claim_detail_id'] : null;
        $this->container['line_id'] = isset($data['line_id']) ? $data['line_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['expense_item'] = isset($data['expense_item']) ? $data['expense_item'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['invoiceable'] = isset($data['invoiceable']) ? $data['invoiceable'] : null;
        $this->container['claim_amount'] = isset($data['claim_amount']) ? $data['claim_amount'] : null;
        $this->container['amount_in_claim_curr'] = isset($data['amount_in_claim_curr']) ? $data['amount_in_claim_curr'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['project_task'] = isset($data['project_task']) ? $data['project_task'] : null;
        $this->container['expense_account'] = isset($data['expense_account']) ? $data['expense_account'] : null;
        $this->container['expense_subaccount'] = isset($data['expense_subaccount']) ? $data['expense_subaccount'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['tax_category'] = isset($data['tax_category']) ? $data['tax_category'] : null;
        $this->container['ref_nbr'] = isset($data['ref_nbr']) ? $data['ref_nbr'] : null;
        $this->container['sales_account'] = isset($data['sales_account']) ? $data['sales_account'] : null;
        $this->container['sales_subaccount'] = isset($data['sales_subaccount']) ? $data['sales_subaccount'] : null;
        $this->container['employee_part'] = isset($data['employee_part']) ? $data['employee_part'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['ar_reference_nbr'] = isset($data['ar_reference_nbr']) ? $data['ar_reference_nbr'] : null;
        $this->container['approval_status'] = isset($data['approval_status']) ? $data['approval_status'] : null;
        $this->container['approval_status_text'] = isset($data['approval_status_text']) ? $data['approval_status_text'] : null;
        $this->container['approver'] = isset($data['approver']) ? $data['approver'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getApprovalStatusAllowableValues();
        if (!is_null($this->container['approval_status']) && !in_array($this->container['approval_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'approval_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets claim_detail_id
     *
     * @return int
     */
    public function getClaimDetailId()
    {
        return $this->container['claim_detail_id'];
    }

    /**
     * Sets claim_detail_id
     *
     * @param int $claim_detail_id Identifies the expense claim detail id, necessary when updating detail information
     *
     * @return $this
     */
    public function setClaimDetailId($claim_detail_id)
    {
        $this->container['claim_detail_id'] = $claim_detail_id;

        return $this;
    }

    /**
     * Gets line_id
     *
     * @return string
     */
    public function getLineId()
    {
        return $this->container['line_id'];
    }

    /**
     * Sets line_id
     *
     * @param string $line_id The expense claim line id
     *
     * @return $this
     */
    public function setLineId($line_id)
    {
        $this->container['line_id'] = $line_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Mandatory field: Date &gt; The date when the expense was incurred.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets expense_item
     *
     * @return object
     */
    public function getExpenseItem()
    {
        return $this->container['expense_item'];
    }

    /**
     * Sets expense_item
     *
     * @param object $expense_item Mandatory field: Expense item* &gt; The expense identifier, if an expense of this type is listed as an inventory nonstock item.
     *
     * @return $this
     */
    public function setExpenseItem($expense_item)
    {
        $this->container['expense_item'] = $expense_item;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Mandatory field: Description* &gt; A description of the transaction.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity Quantity &gt; The quantity of this expense item.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return string
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param string $uom Mandatory field: UoM &gt; The unit of measure in which the quantity is shown.
     *
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return double
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param double $unit_cost Unit cost &gt; The cost of a unit of the item.
     *
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency &gt; The currency of the expense receipt. However, if you enter a claim line directly, the currency value is read-only and matching the claim currency.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount Amount &gt; The total amount paid for the expense item in the specified quantity.
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets invoiceable
     *
     * @return bool
     */
    public function getInvoiceable()
    {
        return $this->container['invoiceable'];
    }

    /**
     * Sets invoiceable
     *
     * @param bool $invoiceable Invoicable &gt; A check box that, if selected, indicates that the claim amount is invoiceable to the customer (the total amount minus the employee's part).
     *
     * @return $this
     */
    public function setInvoiceable($invoiceable)
    {
        $this->container['invoiceable'] = $invoiceable;

        return $this;
    }

    /**
     * Gets claim_amount
     *
     * @return double
     */
    public function getClaimAmount()
    {
        return $this->container['claim_amount'];
    }

    /**
     * Sets claim_amount
     *
     * @param double $claim_amount Claim amount &gt; The amount claimed by the employee, which is calculated as the total claim amount minus the employee part.
     *
     * @return $this
     */
    public function setClaimAmount($claim_amount)
    {
        $this->container['claim_amount'] = $claim_amount;

        return $this;
    }

    /**
     * Gets amount_in_claim_curr
     *
     * @return double
     */
    public function getAmountInClaimCurr()
    {
        return $this->container['amount_in_claim_curr'];
    }

    /**
     * Sets amount_in_claim_curr
     *
     * @param double $amount_in_claim_curr Amount in claim currency &gt; The amount claimed by the employee, which is expressed in the currency of the expense claim.
     *
     * @return $this
     */
    public function setAmountInClaimCurr($amount_in_claim_curr)
    {
        $this->container['amount_in_claim_curr'] = $amount_in_claim_curr;

        return $this;
    }

    /**
     * Gets project
     *
     * @return object
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param object $project Mandatory field: Project &gt; The project or customer contract associated with the expense claim, if the work performed was for a project or contract. Project Task The task associated with the contract or project.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets project_task
     *
     * @return object
     */
    public function getProjectTask()
    {
        return $this->container['project_task'];
    }

    /**
     * Sets project_task
     *
     * @param object $project_task Project task &gt; The task associated with the contract or project.
     *
     * @return $this
     */
    public function setProjectTask($project_task)
    {
        $this->container['project_task'] = $project_task;

        return $this;
    }

    /**
     * Gets expense_account
     *
     * @return object
     */
    public function getExpenseAccount()
    {
        return $this->container['expense_account'];
    }

    /**
     * Sets expense_account
     *
     * @param object $expense_account Mandatory field: Expense account &gt; The expense account to which the system should record the part of the expense to be paid back to the employee.
     *
     * @return $this
     */
    public function setExpenseAccount($expense_account)
    {
        $this->container['expense_account'] = $expense_account;

        return $this;
    }

    /**
     * Gets expense_subaccount
     *
     * @return object
     */
    public function getExpenseSubaccount()
    {
        return $this->container['expense_subaccount'];
    }

    /**
     * Sets expense_subaccount
     *
     * @param object $expense_subaccount MAndatory field: Expense sub. &gt; The corresponding subaccount the system uses to record the part of the expense to be paid back to the employee.
     *
     * @return $this
     */
    public function setExpenseSubaccount($expense_subaccount)
    {
        $this->container['expense_subaccount'] = $expense_subaccount;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return object
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param object $branch Mandatory field: Branch &gt; The branch that will reimburse the expenses to the employee.
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets tax_category
     *
     * @return object
     */
    public function getTaxCategory()
    {
        return $this->container['tax_category'];
    }

    /**
     * Sets tax_category
     *
     * @param object $tax_category VAT category &gt; The VAT category associated with the expense item.
     *
     * @return $this
     */
    public function setTaxCategory($tax_category)
    {
        $this->container['tax_category'] = $tax_category;

        return $this;
    }

    /**
     * Gets ref_nbr
     *
     * @return string
     */
    public function getRefNbr()
    {
        return $this->container['ref_nbr'];
    }

    /**
     * Sets ref_nbr
     *
     * @param string $ref_nbr Ref. no. &gt; The identifier of the transaction.
     *
     * @return $this
     */
    public function setRefNbr($ref_nbr)
    {
        $this->container['ref_nbr'] = $ref_nbr;

        return $this;
    }

    /**
     * Gets sales_account
     *
     * @return object
     */
    public function getSalesAccount()
    {
        return $this->container['sales_account'];
    }

    /**
     * Sets sales_account
     *
     * @param object $sales_account Sales account &gt; The sales account to which the system should record the part of the amount to charge the customer for. This is applicable only when a customer has been specified.
     *
     * @return $this
     */
    public function setSalesAccount($sales_account)
    {
        $this->container['sales_account'] = $sales_account;

        return $this;
    }

    /**
     * Gets sales_subaccount
     *
     * @return object
     */
    public function getSalesSubaccount()
    {
        return $this->container['sales_subaccount'];
    }

    /**
     * Sets sales_subaccount
     *
     * @param object $sales_subaccount Sales sub. &gt; The corresponding subaccount the system uses to record the amount to charge the customer for. This is applicable only when a customer has been specified.
     *
     * @return $this
     */
    public function setSalesSubaccount($sales_subaccount)
    {
        $this->container['sales_subaccount'] = $sales_subaccount;

        return $this;
    }

    /**
     * Gets employee_part
     *
     * @return double
     */
    public function getEmployeePart()
    {
        return $this->container['employee_part'];
    }

    /**
     * Sets employee_part
     *
     * @param double $employee_part Employee part &gt; The part of the total amount that will not be paid back to the employee. The percentage depends on the company policy.
     *
     * @return $this
     */
    public function setEmployeePart($employee_part)
    {
        $this->container['employee_part'] = $employee_part;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return object
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param object $customer Customer &gt; The identifier of the customer associated with the expense.
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location Location &gt; The identifier of the customer location associated with the expense.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets ar_reference_nbr
     *
     * @return string
     */
    public function getArReferenceNbr()
    {
        return $this->container['ar_reference_nbr'];
    }

    /**
     * Sets ar_reference_nbr
     *
     * @param string $ar_reference_nbr REef.no. customer &gt; The reference number of the customer ledger document.
     *
     * @return $this
     */
    public function setArReferenceNbr($ar_reference_nbr)
    {
        $this->container['ar_reference_nbr'] = $ar_reference_nbr;

        return $this;
    }

    /**
     * Gets approval_status
     *
     * @return string
     */
    public function getApprovalStatus()
    {
        return $this->container['approval_status'];
    }

    /**
     * Sets approval_status
     *
     * @param string $approval_status Approval status &gt; The approval status, which indicates whether the detail row requires approval and, if it does, what the current state of approval is.
     *
     * @return $this
     */
    public function setApprovalStatus($approval_status)
    {
        $allowedValues = $this->getApprovalStatusAllowableValues();
        if (!is_null($approval_status) && !in_array($approval_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'approval_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['approval_status'] = $approval_status;

        return $this;
    }

    /**
     * Gets approval_status_text
     *
     * @return string
     */
    public function getApprovalStatusText()
    {
        return $this->container['approval_status_text'];
    }

    /**
     * Sets approval_status_text
     *
     * @param string $approval_status_text Last approval comment &gt; The approval status text suitable for display
     *
     * @return $this
     */
    public function setApprovalStatusText($approval_status_text)
    {
        $this->container['approval_status_text'] = $approval_status_text;

        return $this;
    }

    /**
     * Gets approver
     *
     * @return string
     */
    public function getApprover()
    {
        return $this->container['approver'];
    }

    /**
     * Sets approver
     *
     * @param string $approver Pending approver &gt; The identifier of the person authorized to approve the activity, if approval is required. This is either the approver of the project task or, if no approver is assigned to the project task, the project manager.
     *
     * @return $this
     */
    public function setApprover($approver)
    {
        $this->container['approver'] = $approver;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Ekstralys\VismaNetApi\Model\AttachmentDto[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Ekstralys\VismaNetApi\Model\AttachmentDto[] $attachments Expense claim detail line attachtments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


