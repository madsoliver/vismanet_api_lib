<?php
/**
 * PurchaseOrderDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * PurchaseOrderDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a Purchase Order in PurchaseOrderController. Used for getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseOrderDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseOrderDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipping_destination_type' => 'string',
        'ship_to' => 'object',
        'shipping_location' => 'object',
        'warehouse' => 'object',
        'shipping_contact' => 'object',
        'shipping_address' => 'object',
        'fob_point' => 'string',
        'ship_via' => 'string',
        'ship_terms' => 'string',
        'remit_contact' => 'object',
        'remit_address' => 'object',
        'terms' => 'object',
        'supplier_vat_zone' => 'object',
        'discount_details' => '\Ekstralys\VismaNetApi\Model\DiscountDetailDto[]',
        'sales_order_type' => 'string',
        'sales_order_nbr' => 'string',
        'requisition_ref_nbr' => 'string',
        'payment_ref_nbr' => 'string',
        'workgroup_id' => 'int',
        'dont_print' => 'bool',
        'printed' => 'bool',
        'dont_email' => 'bool',
        'emailed' => 'bool',
        'open_quantity' => 'double',
        'open_balance' => 'double',
        'order_type' => 'string',
        'order_nbr' => 'string',
        'hold' => 'bool',
        'status' => 'string',
        'date' => '\DateTime',
        'promised_on' => '\DateTime',
        'description' => 'string',
        'supplier' => 'object',
        'location' => 'object',
        'owner' => 'object',
        'currency' => 'string',
        'supplier_ref' => 'string',
        'exchange_rate' => 'double',
        'line_total' => 'double',
        'line_total_in_base_currency' => 'double',
        'vat_exempt_total' => 'double',
        'vat_exempt_total_in_base_currency' => 'double',
        'tax_total' => 'double',
        'tax_total_in_base_currency' => 'double',
        'order_total' => 'double',
        'order_total_in_base_currency' => 'double',
        'control_total' => 'double',
        'control_total_in_base_currency' => 'double',
        'branch' => 'object',
        'lines' => '\Ekstralys\VismaNetApi\Model\PurchaseOrderLineDto[]',
        'tax_details' => '\Ekstralys\VismaNetApi\Model\TaxDetailDto[]',
        'purchase_receipts' => '\Ekstralys\VismaNetApi\Model\PurchaseReceiptsDto[]',
        'last_modified_date_time' => '\DateTime',
        'note' => 'string',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipping_destination_type' => null,
        'ship_to' => null,
        'shipping_location' => null,
        'warehouse' => null,
        'shipping_contact' => null,
        'shipping_address' => null,
        'fob_point' => null,
        'ship_via' => null,
        'ship_terms' => null,
        'remit_contact' => null,
        'remit_address' => null,
        'terms' => null,
        'supplier_vat_zone' => null,
        'discount_details' => null,
        'sales_order_type' => null,
        'sales_order_nbr' => null,
        'requisition_ref_nbr' => null,
        'payment_ref_nbr' => null,
        'workgroup_id' => 'int32',
        'dont_print' => null,
        'printed' => null,
        'dont_email' => null,
        'emailed' => null,
        'open_quantity' => 'double',
        'open_balance' => 'double',
        'order_type' => null,
        'order_nbr' => null,
        'hold' => null,
        'status' => null,
        'date' => 'date-time',
        'promised_on' => 'date-time',
        'description' => null,
        'supplier' => null,
        'location' => null,
        'owner' => null,
        'currency' => null,
        'supplier_ref' => null,
        'exchange_rate' => 'double',
        'line_total' => 'double',
        'line_total_in_base_currency' => 'double',
        'vat_exempt_total' => 'double',
        'vat_exempt_total_in_base_currency' => 'double',
        'tax_total' => 'double',
        'tax_total_in_base_currency' => 'double',
        'order_total' => 'double',
        'order_total_in_base_currency' => 'double',
        'control_total' => 'double',
        'control_total_in_base_currency' => 'double',
        'branch' => null,
        'lines' => null,
        'tax_details' => null,
        'purchase_receipts' => null,
        'last_modified_date_time' => 'date-time',
        'note' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipping_destination_type' => 'shippingDestinationType',
        'ship_to' => 'shipTo',
        'shipping_location' => 'shippingLocation',
        'warehouse' => 'warehouse',
        'shipping_contact' => 'shippingContact',
        'shipping_address' => 'shippingAddress',
        'fob_point' => 'fobPoint',
        'ship_via' => 'shipVia',
        'ship_terms' => 'shipTerms',
        'remit_contact' => 'remitContact',
        'remit_address' => 'remitAddress',
        'terms' => 'terms',
        'supplier_vat_zone' => 'supplierVatZone',
        'discount_details' => 'discountDetails',
        'sales_order_type' => 'salesOrderType',
        'sales_order_nbr' => 'salesOrderNbr',
        'requisition_ref_nbr' => 'requisitionRefNbr',
        'payment_ref_nbr' => 'paymentRefNbr',
        'workgroup_id' => 'workgroupID',
        'dont_print' => 'dontPrint',
        'printed' => 'printed',
        'dont_email' => 'dontEmail',
        'emailed' => 'emailed',
        'open_quantity' => 'openQuantity',
        'open_balance' => 'openBalance',
        'order_type' => 'orderType',
        'order_nbr' => 'orderNbr',
        'hold' => 'hold',
        'status' => 'status',
        'date' => 'date',
        'promised_on' => 'promisedOn',
        'description' => 'description',
        'supplier' => 'supplier',
        'location' => 'location',
        'owner' => 'owner',
        'currency' => 'currency',
        'supplier_ref' => 'supplierRef',
        'exchange_rate' => 'exchangeRate',
        'line_total' => 'lineTotal',
        'line_total_in_base_currency' => 'lineTotalInBaseCurrency',
        'vat_exempt_total' => 'vatExemptTotal',
        'vat_exempt_total_in_base_currency' => 'vatExemptTotalInBaseCurrency',
        'tax_total' => 'taxTotal',
        'tax_total_in_base_currency' => 'taxTotalInBaseCurrency',
        'order_total' => 'orderTotal',
        'order_total_in_base_currency' => 'orderTotalInBaseCurrency',
        'control_total' => 'controlTotal',
        'control_total_in_base_currency' => 'controlTotalInBaseCurrency',
        'branch' => 'branch',
        'lines' => 'lines',
        'tax_details' => 'taxDetails',
        'purchase_receipts' => 'purchaseReceipts',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'note' => 'note',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipping_destination_type' => 'setShippingDestinationType',
        'ship_to' => 'setShipTo',
        'shipping_location' => 'setShippingLocation',
        'warehouse' => 'setWarehouse',
        'shipping_contact' => 'setShippingContact',
        'shipping_address' => 'setShippingAddress',
        'fob_point' => 'setFobPoint',
        'ship_via' => 'setShipVia',
        'ship_terms' => 'setShipTerms',
        'remit_contact' => 'setRemitContact',
        'remit_address' => 'setRemitAddress',
        'terms' => 'setTerms',
        'supplier_vat_zone' => 'setSupplierVatZone',
        'discount_details' => 'setDiscountDetails',
        'sales_order_type' => 'setSalesOrderType',
        'sales_order_nbr' => 'setSalesOrderNbr',
        'requisition_ref_nbr' => 'setRequisitionRefNbr',
        'payment_ref_nbr' => 'setPaymentRefNbr',
        'workgroup_id' => 'setWorkgroupId',
        'dont_print' => 'setDontPrint',
        'printed' => 'setPrinted',
        'dont_email' => 'setDontEmail',
        'emailed' => 'setEmailed',
        'open_quantity' => 'setOpenQuantity',
        'open_balance' => 'setOpenBalance',
        'order_type' => 'setOrderType',
        'order_nbr' => 'setOrderNbr',
        'hold' => 'setHold',
        'status' => 'setStatus',
        'date' => 'setDate',
        'promised_on' => 'setPromisedOn',
        'description' => 'setDescription',
        'supplier' => 'setSupplier',
        'location' => 'setLocation',
        'owner' => 'setOwner',
        'currency' => 'setCurrency',
        'supplier_ref' => 'setSupplierRef',
        'exchange_rate' => 'setExchangeRate',
        'line_total' => 'setLineTotal',
        'line_total_in_base_currency' => 'setLineTotalInBaseCurrency',
        'vat_exempt_total' => 'setVatExemptTotal',
        'vat_exempt_total_in_base_currency' => 'setVatExemptTotalInBaseCurrency',
        'tax_total' => 'setTaxTotal',
        'tax_total_in_base_currency' => 'setTaxTotalInBaseCurrency',
        'order_total' => 'setOrderTotal',
        'order_total_in_base_currency' => 'setOrderTotalInBaseCurrency',
        'control_total' => 'setControlTotal',
        'control_total_in_base_currency' => 'setControlTotalInBaseCurrency',
        'branch' => 'setBranch',
        'lines' => 'setLines',
        'tax_details' => 'setTaxDetails',
        'purchase_receipts' => 'setPurchaseReceipts',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'note' => 'setNote',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipping_destination_type' => 'getShippingDestinationType',
        'ship_to' => 'getShipTo',
        'shipping_location' => 'getShippingLocation',
        'warehouse' => 'getWarehouse',
        'shipping_contact' => 'getShippingContact',
        'shipping_address' => 'getShippingAddress',
        'fob_point' => 'getFobPoint',
        'ship_via' => 'getShipVia',
        'ship_terms' => 'getShipTerms',
        'remit_contact' => 'getRemitContact',
        'remit_address' => 'getRemitAddress',
        'terms' => 'getTerms',
        'supplier_vat_zone' => 'getSupplierVatZone',
        'discount_details' => 'getDiscountDetails',
        'sales_order_type' => 'getSalesOrderType',
        'sales_order_nbr' => 'getSalesOrderNbr',
        'requisition_ref_nbr' => 'getRequisitionRefNbr',
        'payment_ref_nbr' => 'getPaymentRefNbr',
        'workgroup_id' => 'getWorkgroupId',
        'dont_print' => 'getDontPrint',
        'printed' => 'getPrinted',
        'dont_email' => 'getDontEmail',
        'emailed' => 'getEmailed',
        'open_quantity' => 'getOpenQuantity',
        'open_balance' => 'getOpenBalance',
        'order_type' => 'getOrderType',
        'order_nbr' => 'getOrderNbr',
        'hold' => 'getHold',
        'status' => 'getStatus',
        'date' => 'getDate',
        'promised_on' => 'getPromisedOn',
        'description' => 'getDescription',
        'supplier' => 'getSupplier',
        'location' => 'getLocation',
        'owner' => 'getOwner',
        'currency' => 'getCurrency',
        'supplier_ref' => 'getSupplierRef',
        'exchange_rate' => 'getExchangeRate',
        'line_total' => 'getLineTotal',
        'line_total_in_base_currency' => 'getLineTotalInBaseCurrency',
        'vat_exempt_total' => 'getVatExemptTotal',
        'vat_exempt_total_in_base_currency' => 'getVatExemptTotalInBaseCurrency',
        'tax_total' => 'getTaxTotal',
        'tax_total_in_base_currency' => 'getTaxTotalInBaseCurrency',
        'order_total' => 'getOrderTotal',
        'order_total_in_base_currency' => 'getOrderTotalInBaseCurrency',
        'control_total' => 'getControlTotal',
        'control_total_in_base_currency' => 'getControlTotalInBaseCurrency',
        'branch' => 'getBranch',
        'lines' => 'getLines',
        'tax_details' => 'getTaxDetails',
        'purchase_receipts' => 'getPurchaseReceipts',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'note' => 'getNote',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SHIPPING_DESTINATION_TYPE_COMPANY_LOCATION = 'CompanyLocation';
    const SHIPPING_DESTINATION_TYPE_CUSTOMER = 'Customer';
    const SHIPPING_DESTINATION_TYPE_VENDOR = 'Vendor';
    const SHIPPING_DESTINATION_TYPE_SITE = 'Site';
    const ORDER_TYPE_REGULAR_ORDER = 'RegularOrder';
    const ORDER_TYPE_DROP_SHIP = 'DropShip';
    const ORDER_TYPE_BLANKET = 'Blanket';
    const ORDER_TYPE_STANDARD_BLANKET = 'StandardBlanket';
    const STATUS_BALANCED = 'Balanced';
    const STATUS_CANCELLED = 'Cancelled';
    const STATUS_CLOSED = 'Closed';
    const STATUS_HOLD = 'Hold';
    const STATUS_OPEN = 'Open';
    const STATUS_PENDING_EMAIL = 'PendingEmail';
    const STATUS_PENDING_PRINT = 'PendingPrint';
    const STATUS_PRINTED = 'Printed';
    const STATUS_VOIDED = 'Voided';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingDestinationTypeAllowableValues()
    {
        return [
            self::SHIPPING_DESTINATION_TYPE_COMPANY_LOCATION,
            self::SHIPPING_DESTINATION_TYPE_CUSTOMER,
            self::SHIPPING_DESTINATION_TYPE_VENDOR,
            self::SHIPPING_DESTINATION_TYPE_SITE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderTypeAllowableValues()
    {
        return [
            self::ORDER_TYPE_REGULAR_ORDER,
            self::ORDER_TYPE_DROP_SHIP,
            self::ORDER_TYPE_BLANKET,
            self::ORDER_TYPE_STANDARD_BLANKET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_BALANCED,
            self::STATUS_CANCELLED,
            self::STATUS_CLOSED,
            self::STATUS_HOLD,
            self::STATUS_OPEN,
            self::STATUS_PENDING_EMAIL,
            self::STATUS_PENDING_PRINT,
            self::STATUS_PRINTED,
            self::STATUS_VOIDED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipping_destination_type'] = isset($data['shipping_destination_type']) ? $data['shipping_destination_type'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['shipping_location'] = isset($data['shipping_location']) ? $data['shipping_location'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['shipping_contact'] = isset($data['shipping_contact']) ? $data['shipping_contact'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['fob_point'] = isset($data['fob_point']) ? $data['fob_point'] : null;
        $this->container['ship_via'] = isset($data['ship_via']) ? $data['ship_via'] : null;
        $this->container['ship_terms'] = isset($data['ship_terms']) ? $data['ship_terms'] : null;
        $this->container['remit_contact'] = isset($data['remit_contact']) ? $data['remit_contact'] : null;
        $this->container['remit_address'] = isset($data['remit_address']) ? $data['remit_address'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
        $this->container['supplier_vat_zone'] = isset($data['supplier_vat_zone']) ? $data['supplier_vat_zone'] : null;
        $this->container['discount_details'] = isset($data['discount_details']) ? $data['discount_details'] : null;
        $this->container['sales_order_type'] = isset($data['sales_order_type']) ? $data['sales_order_type'] : null;
        $this->container['sales_order_nbr'] = isset($data['sales_order_nbr']) ? $data['sales_order_nbr'] : null;
        $this->container['requisition_ref_nbr'] = isset($data['requisition_ref_nbr']) ? $data['requisition_ref_nbr'] : null;
        $this->container['payment_ref_nbr'] = isset($data['payment_ref_nbr']) ? $data['payment_ref_nbr'] : null;
        $this->container['workgroup_id'] = isset($data['workgroup_id']) ? $data['workgroup_id'] : null;
        $this->container['dont_print'] = isset($data['dont_print']) ? $data['dont_print'] : null;
        $this->container['printed'] = isset($data['printed']) ? $data['printed'] : null;
        $this->container['dont_email'] = isset($data['dont_email']) ? $data['dont_email'] : null;
        $this->container['emailed'] = isset($data['emailed']) ? $data['emailed'] : null;
        $this->container['open_quantity'] = isset($data['open_quantity']) ? $data['open_quantity'] : null;
        $this->container['open_balance'] = isset($data['open_balance']) ? $data['open_balance'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['order_nbr'] = isset($data['order_nbr']) ? $data['order_nbr'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['promised_on'] = isset($data['promised_on']) ? $data['promised_on'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['supplier_ref'] = isset($data['supplier_ref']) ? $data['supplier_ref'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['line_total'] = isset($data['line_total']) ? $data['line_total'] : null;
        $this->container['line_total_in_base_currency'] = isset($data['line_total_in_base_currency']) ? $data['line_total_in_base_currency'] : null;
        $this->container['vat_exempt_total'] = isset($data['vat_exempt_total']) ? $data['vat_exempt_total'] : null;
        $this->container['vat_exempt_total_in_base_currency'] = isset($data['vat_exempt_total_in_base_currency']) ? $data['vat_exempt_total_in_base_currency'] : null;
        $this->container['tax_total'] = isset($data['tax_total']) ? $data['tax_total'] : null;
        $this->container['tax_total_in_base_currency'] = isset($data['tax_total_in_base_currency']) ? $data['tax_total_in_base_currency'] : null;
        $this->container['order_total'] = isset($data['order_total']) ? $data['order_total'] : null;
        $this->container['order_total_in_base_currency'] = isset($data['order_total_in_base_currency']) ? $data['order_total_in_base_currency'] : null;
        $this->container['control_total'] = isset($data['control_total']) ? $data['control_total'] : null;
        $this->container['control_total_in_base_currency'] = isset($data['control_total_in_base_currency']) ? $data['control_total_in_base_currency'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['tax_details'] = isset($data['tax_details']) ? $data['tax_details'] : null;
        $this->container['purchase_receipts'] = isset($data['purchase_receipts']) ? $data['purchase_receipts'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getShippingDestinationTypeAllowableValues();
        if (!is_null($this->container['shipping_destination_type']) && !in_array($this->container['shipping_destination_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shipping_destination_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($this->container['order_type']) && !in_array($this->container['order_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipping_destination_type
     *
     * @return string
     */
    public function getShippingDestinationType()
    {
        return $this->container['shipping_destination_type'];
    }

    /**
     * Sets shipping_destination_type
     *
     * @param string $shipping_destination_type Shipping instructions tab &gt; The Delivery address section &gt; Shipping destination type &gt; The type of the shipping destination, which is one of the following options: Branch location (meaning a branch of your company), Customer, Supplier, and Warehouse.
     *
     * @return $this
     */
    public function setShippingDestinationType($shipping_destination_type)
    {
        $allowedValues = $this->getShippingDestinationTypeAllowableValues();
        if (!is_null($shipping_destination_type) && !in_array($shipping_destination_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shipping_destination_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipping_destination_type'] = $shipping_destination_type;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return object
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param object $ship_to Shipping instructions tab &gt; The Delivery address section &gt; Ship to &gt; The particular destination of the selected type.
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets shipping_location
     *
     * @return object
     */
    public function getShippingLocation()
    {
        return $this->container['shipping_location'];
    }

    /**
     * Sets shipping_location
     *
     * @param object $shipping_location Mandatory field: The Shipping instructions tab &gt; The Delivery address section &gt; Shipping location* &gt; The location from which the order is to be shipped.
     *
     * @return $this
     */
    public function setShippingLocation($shipping_location)
    {
        $this->container['shipping_location'] = $shipping_location;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return object
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param object $warehouse Document details tab &gt; Warehouse &gt; The warehouse to receive the item listed on the order.
     *
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets shipping_contact
     *
     * @return object
     */
    public function getShippingContact()
    {
        return $this->container['shipping_contact'];
    }

    /**
     * Sets shipping_contact
     *
     * @param object $shipping_contact Supplier information tab &gt; The Supplier contact section &gt; The supplier contact for matters related to this purchase order.
     *
     * @return $this
     */
    public function setShippingContact($shipping_contact)
    {
        $this->container['shipping_contact'] = $shipping_contact;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return object
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param object $shipping_address Supplier info tab &gt; The Supplier address section &gt; The default shipping address for the supplier.
     *
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets fob_point
     *
     * @return string
     */
    public function getFobPoint()
    {
        return $this->container['fob_point'];
    }

    /**
     * Sets fob_point
     *
     * @param string $fob_point Delivery instructions tab &gt; The Delivery instructions section &gt; FOB point &gt; The FOB point where the title of goods (listed on this purchase order) is transferred from the supplier to the company.
     *
     * @return $this
     */
    public function setFobPoint($fob_point)
    {
        $this->container['fob_point'] = $fob_point;

        return $this;
    }

    /**
     * Gets ship_via
     *
     * @return string
     */
    public function getShipVia()
    {
        return $this->container['ship_via'];
    }

    /**
     * Sets ship_via
     *
     * @param string $ship_via Delivery instructions tab &gt; The Delivery instructions section &gt; Ship via &gt; The carrier selected to ship the goods for the purchase order.
     *
     * @return $this
     */
    public function setShipVia($ship_via)
    {
        $this->container['ship_via'] = $ship_via;

        return $this;
    }

    /**
     * Gets ship_terms
     *
     * @return string
     */
    public function getShipTerms()
    {
        return $this->container['ship_terms'];
    }

    /**
     * Sets ship_terms
     *
     * @param string $ship_terms Delivery instructions tab &gt; The Delivery instructions section &gt; Shipping terms &gt; The shipping terms for the purchase order.
     *
     * @return $this
     */
    public function setShipTerms($ship_terms)
    {
        $this->container['ship_terms'] = $ship_terms;

        return $this;
    }

    /**
     * Gets remit_contact
     *
     * @return object
     */
    public function getRemitContact()
    {
        return $this->container['remit_contact'];
    }

    /**
     * Sets remit_contact
     *
     * @param object $remit_contact Supplier info tab &gt; The Supplier contact section &gt; The default contact settings for the supplier.
     *
     * @return $this
     */
    public function setRemitContact($remit_contact)
    {
        $this->container['remit_contact'] = $remit_contact;

        return $this;
    }

    /**
     * Gets remit_address
     *
     * @return object
     */
    public function getRemitAddress()
    {
        return $this->container['remit_address'];
    }

    /**
     * Sets remit_address
     *
     * @param object $remit_address Supplier info tab &gt; The Supplier address section &gt; The default contact setting for the supplier.
     *
     * @return $this
     */
    public function setRemitAddress($remit_address)
    {
        $this->container['remit_address'] = $remit_address;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return object
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param object $terms Mandatory field: The Supplier info tab &gt; The Info section &gt; Terms* &gt; The specific credit terms to be used for the purchase order.
     *
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets supplier_vat_zone
     *
     * @return object
     */
    public function getSupplierVatZone()
    {
        return $this->container['supplier_vat_zone'];
    }

    /**
     * Sets supplier_vat_zone
     *
     * @param object $supplier_vat_zone Supplier info tab &gt; The Info section &gt; Supplier VAT zone &gt; The VAT zone of the supplier's location.
     *
     * @return $this
     */
    public function setSupplierVatZone($supplier_vat_zone)
    {
        $this->container['supplier_vat_zone'] = $supplier_vat_zone;

        return $this;
    }

    /**
     * Gets discount_details
     *
     * @return \Ekstralys\VismaNetApi\Model\DiscountDetailDto[]
     */
    public function getDiscountDetails()
    {
        return $this->container['discount_details'];
    }

    /**
     * Sets discount_details
     *
     * @param \Ekstralys\VismaNetApi\Model\DiscountDetailDto[] $discount_details Discount details tab &gt;
     *
     * @return $this
     */
    public function setDiscountDetails($discount_details)
    {
        $this->container['discount_details'] = $discount_details;

        return $this;
    }

    /**
     * Gets sales_order_type
     *
     * @return string
     */
    public function getSalesOrderType()
    {
        return $this->container['sales_order_type'];
    }

    /**
     * Sets sales_order_type
     *
     * @param string $sales_order_type Other information tab &gt; Sales order type &gt; The type of the sales order associated with the purchase order.
     *
     * @return $this
     */
    public function setSalesOrderType($sales_order_type)
    {
        $this->container['sales_order_type'] = $sales_order_type;

        return $this;
    }

    /**
     * Gets sales_order_nbr
     *
     * @return string
     */
    public function getSalesOrderNbr()
    {
        return $this->container['sales_order_nbr'];
    }

    /**
     * Sets sales_order_nbr
     *
     * @param string $sales_order_nbr Other information tab &gt; Sales order no. &gt; The ID of the sales order associated with the purchase order.
     *
     * @return $this
     */
    public function setSalesOrderNbr($sales_order_nbr)
    {
        $this->container['sales_order_nbr'] = $sales_order_nbr;

        return $this;
    }

    /**
     * Gets requisition_ref_nbr
     *
     * @return string
     */
    public function getRequisitionRefNbr()
    {
        return $this->container['requisition_ref_nbr'];
    }

    /**
     * Sets requisition_ref_nbr
     *
     * @param string $requisition_ref_nbr Other information tab &gt; Requisition ref. no. &gt; The reference number of the requisition document associated with the purchase order, if any.
     *
     * @return $this
     */
    public function setRequisitionRefNbr($requisition_ref_nbr)
    {
        $this->container['requisition_ref_nbr'] = $requisition_ref_nbr;

        return $this;
    }

    /**
     * Gets payment_ref_nbr
     *
     * @return string
     */
    public function getPaymentRefNbr()
    {
        return $this->container['payment_ref_nbr'];
    }

    /**
     * Sets payment_ref_nbr
     *
     * @param string $payment_ref_nbr Other information tab &gt; Prepayment ref. no. &gt; The reference number of the prepayment request linked to this purchase order, if any.
     *
     * @return $this
     */
    public function setPaymentRefNbr($payment_ref_nbr)
    {
        $this->container['payment_ref_nbr'] = $payment_ref_nbr;

        return $this;
    }

    /**
     * Gets workgroup_id
     *
     * @return int
     */
    public function getWorkgroupId()
    {
        return $this->container['workgroup_id'];
    }

    /**
     * Sets workgroup_id
     *
     * @param int $workgroup_id Other information tab &gt; Work group ID &gt; The work group to which the purchase order was assigned for processing.
     *
     * @return $this
     */
    public function setWorkgroupId($workgroup_id)
    {
        $this->container['workgroup_id'] = $workgroup_id;

        return $this;
    }

    /**
     * Gets dont_print
     *
     * @return bool
     */
    public function getDontPrint()
    {
        return $this->container['dont_print'];
    }

    /**
     * Sets dont_print
     *
     * @param bool $dont_print Other information &gt; Do not print &gt; A check box that indicates (if selected) that the current purchase order should not be printed.
     *
     * @return $this
     */
    public function setDontPrint($dont_print)
    {
        $this->container['dont_print'] = $dont_print;

        return $this;
    }

    /**
     * Gets printed
     *
     * @return bool
     */
    public function getPrinted()
    {
        return $this->container['printed'];
    }

    /**
     * Sets printed
     *
     * @param bool $printed Other information &gt; Printed &gt; A check box that indicates (if selected) that the current purchase order was printed.
     *
     * @return $this
     */
    public function setPrinted($printed)
    {
        $this->container['printed'] = $printed;

        return $this;
    }

    /**
     * Gets dont_email
     *
     * @return bool
     */
    public function getDontEmail()
    {
        return $this->container['dont_email'];
    }

    /**
     * Sets dont_email
     *
     * @param bool $dont_email Other information &gt; Do not email &gt; A check box that indicates (if selected) indicates that the purchase order should not be emailed.
     *
     * @return $this
     */
    public function setDontEmail($dont_email)
    {
        $this->container['dont_email'] = $dont_email;

        return $this;
    }

    /**
     * Gets emailed
     *
     * @return bool
     */
    public function getEmailed()
    {
        return $this->container['emailed'];
    }

    /**
     * Sets emailed
     *
     * @param bool $emailed Other information &gt; Emailed &gt; A check box that indicates (if selected) indicates that the current purchase order was emailed.
     *
     * @return $this
     */
    public function setEmailed($emailed)
    {
        $this->container['emailed'] = $emailed;

        return $this;
    }

    /**
     * Gets open_quantity
     *
     * @return double
     */
    public function getOpenQuantity()
    {
        return $this->container['open_quantity'];
    }

    /**
     * Sets open_quantity
     *
     * @param double $open_quantity Other information &gt; Open Quantity &gt; The difference between the quantities of ordered and received items.
     *
     * @return $this
     */
    public function setOpenQuantity($open_quantity)
    {
        $this->container['open_quantity'] = $open_quantity;

        return $this;
    }

    /**
     * Gets open_balance
     *
     * @return double
     */
    public function getOpenBalance()
    {
        return $this->container['open_balance'];
    }

    /**
     * Sets open_balance
     *
     * @param double $open_balance Other information &gt; Open amount &gt; The amount of these items that are ordered but not received.
     *
     * @return $this
     */
    public function setOpenBalance($open_balance)
    {
        $this->container['open_balance'] = $open_balance;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string $order_type The top part &gt; Type &gt; The type of the purchase order, which can be one of these options: Normal, Drop-ship, Blanket, Default
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($order_type) && !in_array($order_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets order_nbr
     *
     * @return string
     */
    public function getOrderNbr()
    {
        return $this->container['order_nbr'];
    }

    /**
     * Sets order_nbr
     *
     * @param string $order_nbr The top part &gt; Order no. &gt; The unique reference number of the purchase order, which the system assigns based on the number series assigned to purchase orders of this type, as specified in the PO101000 window.
     *
     * @return $this
     */
    public function setOrderNbr($order_nbr)
    {
        $this->container['order_nbr'] = $order_nbr;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return bool
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param bool $hold The top part &gt; Hold &gt; A check box that you select to give the purchase order the On hold status.
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The top part &gt; Status &gt; The system-generated status of the purchase order, which can be one of the following options: On hold, Open, Pending approval, Rejected, Pending printing, Pending e-mail, Closed, Cancelled.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Mandatory field: The top part &gt; Date* &gt; The date when the purchase order was created.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets promised_on
     *
     * @return \DateTime
     */
    public function getPromisedOn()
    {
        return $this->container['promised_on'];
    }

    /**
     * Sets promised_on
     *
     * @param \DateTime $promised_on The top part &gt; Delivery date &gt; The date when the supplier promised that the items listed in the order will be received at their destination location.
     *
     * @return $this
     */
    public function setPromisedOn($promised_on)
    {
        $this->container['promised_on'] = $promised_on;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The top part &gt; Description &gt; A brief description of the purchase order.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return object
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param object $supplier Mandatory field: The top part &gt; Supplier* &gt; The supplier from which the items will be purchased.
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location Mandatory field: The top part &gt; Location* &gt; Click the magnifier. The supplier location from which the items will be received.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return object
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param object $owner The top part &gt; Owner &gt; The employee who is responsible for the purchase order.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The top part &gt; Currency &gt; The currency the purchase order will be paid in.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets supplier_ref
     *
     * @return string
     */
    public function getSupplierRef()
    {
        return $this->container['supplier_ref'];
    }

    /**
     * Sets supplier_ref
     *
     * @param string $supplier_ref The top part &gt; Supplier ref. &gt; The reference number of the supplier document related to this purchase order.
     *
     * @return $this
     */
    public function setSupplierRef($supplier_ref)
    {
        $this->container['supplier_ref'] = $supplier_ref;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return double
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param double $exchange_rate exchange_rate
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets line_total
     *
     * @return double
     */
    public function getLineTotal()
    {
        return $this->container['line_total'];
    }

    /**
     * Sets line_total
     *
     * @param double $line_total The top part &gt; Line total &gt; The total sum of the Extended amount entries for all lines in the current purchase order. This value is calculated by the system and users cannot manually change it.
     *
     * @return $this
     */
    public function setLineTotal($line_total)
    {
        $this->container['line_total'] = $line_total;

        return $this;
    }

    /**
     * Gets line_total_in_base_currency
     *
     * @return double
     */
    public function getLineTotalInBaseCurrency()
    {
        return $this->container['line_total_in_base_currency'];
    }

    /**
     * Sets line_total_in_base_currency
     *
     * @param double $line_total_in_base_currency The top part &gt; View base &gt; A button that recalculates the Line total to your base currency if the amount on the purchase order is in another currency then base currency. When you click the button, the button toggles to View currency.
     *
     * @return $this
     */
    public function setLineTotalInBaseCurrency($line_total_in_base_currency)
    {
        $this->container['line_total_in_base_currency'] = $line_total_in_base_currency;

        return $this;
    }

    /**
     * Gets vat_exempt_total
     *
     * @return double
     */
    public function getVatExemptTotal()
    {
        return $this->container['vat_exempt_total'];
    }

    /**
     * Sets vat_exempt_total
     *
     * @param double $vat_exempt_total The Top part &gt; VAT exempt total &gt; The document total that is exempt from VAT. This total is calculated as the taxable amount for the VAT with the Include in VAT exempt total check box selected in the TX205000 window.
     *
     * @return $this
     */
    public function setVatExemptTotal($vat_exempt_total)
    {
        $this->container['vat_exempt_total'] = $vat_exempt_total;

        return $this;
    }

    /**
     * Gets vat_exempt_total_in_base_currency
     *
     * @return double
     */
    public function getVatExemptTotalInBaseCurrency()
    {
        return $this->container['vat_exempt_total_in_base_currency'];
    }

    /**
     * Sets vat_exempt_total_in_base_currency
     *
     * @param double $vat_exempt_total_in_base_currency The top part &gt; View base &gt; A button that recalculates the VAT exempt total to your base currency if the amount on the purchase order is in another currency then base currency. When you click the button, the button toggles to View currency.
     *
     * @return $this
     */
    public function setVatExemptTotalInBaseCurrency($vat_exempt_total_in_base_currency)
    {
        $this->container['vat_exempt_total_in_base_currency'] = $vat_exempt_total_in_base_currency;

        return $this;
    }

    /**
     * Gets tax_total
     *
     * @return double
     */
    public function getTaxTotal()
    {
        return $this->container['tax_total'];
    }

    /**
     * Sets tax_total
     *
     * @param double $tax_total The Top part &gt; VAT total &gt; The total VAT amount for all lines added to the current purchase order. This value, also calculated by the system, is the sum of the VAT amounts for each line.
     *
     * @return $this
     */
    public function setTaxTotal($tax_total)
    {
        $this->container['tax_total'] = $tax_total;

        return $this;
    }

    /**
     * Gets tax_total_in_base_currency
     *
     * @return double
     */
    public function getTaxTotalInBaseCurrency()
    {
        return $this->container['tax_total_in_base_currency'];
    }

    /**
     * Sets tax_total_in_base_currency
     *
     * @param double $tax_total_in_base_currency The top part &gt; View base &gt; A button that recalculates the VAT total to your base currency if the amount on the purchase order is in another currency then base currency. When you click the button, the button toggles to View currency.
     *
     * @return $this
     */
    public function setTaxTotalInBaseCurrency($tax_total_in_base_currency)
    {
        $this->container['tax_total_in_base_currency'] = $tax_total_in_base_currency;

        return $this;
    }

    /**
     * Gets order_total
     *
     * @return double
     */
    public function getOrderTotal()
    {
        return $this->container['order_total'];
    }

    /**
     * Sets order_total
     *
     * @param double $order_total The Top part &gt; Order total &gt; The total sum for the purchase order, including VAT. This read-only value is the sum of the Line total and VAT total values.
     *
     * @return $this
     */
    public function setOrderTotal($order_total)
    {
        $this->container['order_total'] = $order_total;

        return $this;
    }

    /**
     * Gets order_total_in_base_currency
     *
     * @return double
     */
    public function getOrderTotalInBaseCurrency()
    {
        return $this->container['order_total_in_base_currency'];
    }

    /**
     * Sets order_total_in_base_currency
     *
     * @param double $order_total_in_base_currency The top part &gt; View base &gt; A button that recalculates the Order total to your base currency if the amount on the purchase order is in another currency then base currency. When you click the button, the button toggles to View currency.
     *
     * @return $this
     */
    public function setOrderTotalInBaseCurrency($order_total_in_base_currency)
    {
        $this->container['order_total_in_base_currency'] = $order_total_in_base_currency;

        return $this;
    }

    /**
     * Gets control_total
     *
     * @return double
     */
    public function getControlTotal()
    {
        return $this->container['control_total'];
    }

    /**
     * Sets control_total
     *
     * @param double $control_total The top part &gt; Control total &gt; The order's total amount (including VAT), which you must enter manually when you attempt to save the order with the Balanced status.
     *
     * @return $this
     */
    public function setControlTotal($control_total)
    {
        $this->container['control_total'] = $control_total;

        return $this;
    }

    /**
     * Gets control_total_in_base_currency
     *
     * @return double
     */
    public function getControlTotalInBaseCurrency()
    {
        return $this->container['control_total_in_base_currency'];
    }

    /**
     * Sets control_total_in_base_currency
     *
     * @param double $control_total_in_base_currency The top part &gt; View base &gt; A button that recalculates the Control total to your base currency if the amount on the purchase order is in another currency then base currency. When you click the button, the button toggles to View currency.
     *
     * @return $this
     */
    public function setControlTotalInBaseCurrency($control_total_in_base_currency)
    {
        $this->container['control_total_in_base_currency'] = $control_total_in_base_currency;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return object
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param object $branch Document details tab &gt; Branch &gt; The branch to receive the item.
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Ekstralys\VismaNetApi\Model\PurchaseOrderLineDto[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Ekstralys\VismaNetApi\Model\PurchaseOrderLineDto[] $lines Document details tab &gt; The table &gt;
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets tax_details
     *
     * @return \Ekstralys\VismaNetApi\Model\TaxDetailDto[]
     */
    public function getTaxDetails()
    {
        return $this->container['tax_details'];
    }

    /**
     * Sets tax_details
     *
     * @param \Ekstralys\VismaNetApi\Model\TaxDetailDto[] $tax_details VAT details tab &gt;
     *
     * @return $this
     */
    public function setTaxDetails($tax_details)
    {
        $this->container['tax_details'] = $tax_details;

        return $this;
    }

    /**
     * Gets purchase_receipts
     *
     * @return \Ekstralys\VismaNetApi\Model\PurchaseReceiptsDto[]
     */
    public function getPurchaseReceipts()
    {
        return $this->container['purchase_receipts'];
    }

    /**
     * Sets purchase_receipts
     *
     * @param \Ekstralys\VismaNetApi\Model\PurchaseReceiptsDto[] $purchase_receipts Purchase receipts tab &gt;
     *
     * @return $this
     */
    public function setPurchaseReceipts($purchase_receipts)
    {
        $this->container['purchase_receipts'] = $purchase_receipts;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time System generated information.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Icon Notes on top of the window &gt; Pop-up window for providing any user-defined text connected to the document.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


