<?php
/**
 * PurchaseReceiptBasicDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * PurchaseReceiptBasicDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a Purchase Receipt in PurchaseReceiptController. Used for getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseReceiptBasicDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseReceiptBasicDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'receipt_type' => 'string',
        'receipt_nbr' => 'string',
        'hold' => 'bool',
        'status' => 'string',
        'date' => '\DateTime',
        'post_period' => 'string',
        'warehouse' => 'object',
        'supplier' => 'object',
        'location' => 'object',
        'currency' => 'string',
        'exchange_rate' => 'double',
        'create_bill' => 'bool',
        'supplier_ref' => 'string',
        'total_qty' => 'double',
        'control_qty' => 'double',
        'vat_exempt_total' => 'double',
        'vat_taxable_total' => 'double',
        'total_amt' => 'double',
        'control_total' => 'double',
        'last_modified_date_time' => '\DateTime',
        'branch_number' => 'object',
        'lines' => '\Ekstralys\VismaNetApi\Model\PurchaseReceiptLineDto[]',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'receipt_type' => null,
        'receipt_nbr' => null,
        'hold' => null,
        'status' => null,
        'date' => 'date-time',
        'post_period' => null,
        'warehouse' => null,
        'supplier' => null,
        'location' => null,
        'currency' => null,
        'exchange_rate' => 'double',
        'create_bill' => null,
        'supplier_ref' => null,
        'total_qty' => 'double',
        'control_qty' => 'double',
        'vat_exempt_total' => 'double',
        'vat_taxable_total' => 'double',
        'total_amt' => 'double',
        'control_total' => 'double',
        'last_modified_date_time' => 'date-time',
        'branch_number' => null,
        'lines' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'receipt_type' => 'receiptType',
        'receipt_nbr' => 'receiptNbr',
        'hold' => 'hold',
        'status' => 'status',
        'date' => 'date',
        'post_period' => 'postPeriod',
        'warehouse' => 'warehouse',
        'supplier' => 'supplier',
        'location' => 'location',
        'currency' => 'currency',
        'exchange_rate' => 'exchangeRate',
        'create_bill' => 'createBill',
        'supplier_ref' => 'supplierRef',
        'total_qty' => 'totalQty',
        'control_qty' => 'controlQty',
        'vat_exempt_total' => 'vatExemptTotal',
        'vat_taxable_total' => 'vatTaxableTotal',
        'total_amt' => 'totalAmt',
        'control_total' => 'controlTotal',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'branch_number' => 'branchNumber',
        'lines' => 'lines',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'receipt_type' => 'setReceiptType',
        'receipt_nbr' => 'setReceiptNbr',
        'hold' => 'setHold',
        'status' => 'setStatus',
        'date' => 'setDate',
        'post_period' => 'setPostPeriod',
        'warehouse' => 'setWarehouse',
        'supplier' => 'setSupplier',
        'location' => 'setLocation',
        'currency' => 'setCurrency',
        'exchange_rate' => 'setExchangeRate',
        'create_bill' => 'setCreateBill',
        'supplier_ref' => 'setSupplierRef',
        'total_qty' => 'setTotalQty',
        'control_qty' => 'setControlQty',
        'vat_exempt_total' => 'setVatExemptTotal',
        'vat_taxable_total' => 'setVatTaxableTotal',
        'total_amt' => 'setTotalAmt',
        'control_total' => 'setControlTotal',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'branch_number' => 'setBranchNumber',
        'lines' => 'setLines',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'receipt_type' => 'getReceiptType',
        'receipt_nbr' => 'getReceiptNbr',
        'hold' => 'getHold',
        'status' => 'getStatus',
        'date' => 'getDate',
        'post_period' => 'getPostPeriod',
        'warehouse' => 'getWarehouse',
        'supplier' => 'getSupplier',
        'location' => 'getLocation',
        'currency' => 'getCurrency',
        'exchange_rate' => 'getExchangeRate',
        'create_bill' => 'getCreateBill',
        'supplier_ref' => 'getSupplierRef',
        'total_qty' => 'getTotalQty',
        'control_qty' => 'getControlQty',
        'vat_exempt_total' => 'getVatExemptTotal',
        'vat_taxable_total' => 'getVatTaxableTotal',
        'total_amt' => 'getTotalAmt',
        'control_total' => 'getControlTotal',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'branch_number' => 'getBranchNumber',
        'lines' => 'getLines',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RECEIPT_TYPE_PO_RECEIPT = 'PoReceipt';
    const RECEIPT_TYPE_PO_RETURN = 'PoReturn';
    const RECEIPT_TYPE_TRANSFER_RECEIPT = 'TransferReceipt';
    const STATUS_HOLD = 'Hold';
    const STATUS_BALANCED = 'Balanced';
    const STATUS_RELEASED = 'Released';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReceiptTypeAllowableValues()
    {
        return [
            self::RECEIPT_TYPE_PO_RECEIPT,
            self::RECEIPT_TYPE_PO_RETURN,
            self::RECEIPT_TYPE_TRANSFER_RECEIPT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_HOLD,
            self::STATUS_BALANCED,
            self::STATUS_RELEASED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['receipt_type'] = isset($data['receipt_type']) ? $data['receipt_type'] : null;
        $this->container['receipt_nbr'] = isset($data['receipt_nbr']) ? $data['receipt_nbr'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['post_period'] = isset($data['post_period']) ? $data['post_period'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['create_bill'] = isset($data['create_bill']) ? $data['create_bill'] : null;
        $this->container['supplier_ref'] = isset($data['supplier_ref']) ? $data['supplier_ref'] : null;
        $this->container['total_qty'] = isset($data['total_qty']) ? $data['total_qty'] : null;
        $this->container['control_qty'] = isset($data['control_qty']) ? $data['control_qty'] : null;
        $this->container['vat_exempt_total'] = isset($data['vat_exempt_total']) ? $data['vat_exempt_total'] : null;
        $this->container['vat_taxable_total'] = isset($data['vat_taxable_total']) ? $data['vat_taxable_total'] : null;
        $this->container['total_amt'] = isset($data['total_amt']) ? $data['total_amt'] : null;
        $this->container['control_total'] = isset($data['control_total']) ? $data['control_total'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['branch_number'] = isset($data['branch_number']) ? $data['branch_number'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReceiptTypeAllowableValues();
        if (!is_null($this->container['receipt_type']) && !in_array($this->container['receipt_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'receipt_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets receipt_type
     *
     * @return string
     */
    public function getReceiptType()
    {
        return $this->container['receipt_type'];
    }

    /**
     * Sets receipt_type
     *
     * @param string $receipt_type The top part &gt; Type &gt; The type of the document, which can be one of the following options: Receipt, Return, Transfer receipt.
     *
     * @return $this
     */
    public function setReceiptType($receipt_type)
    {
        $allowedValues = $this->getReceiptTypeAllowableValues();
        if (!is_null($receipt_type) && !in_array($receipt_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'receipt_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['receipt_type'] = $receipt_type;

        return $this;
    }

    /**
     * Gets receipt_nbr
     *
     * @return string
     */
    public function getReceiptNbr()
    {
        return $this->container['receipt_nbr'];
    }

    /**
     * Sets receipt_nbr
     *
     * @param string $receipt_nbr The top part &gt; Receipt no. &gt; The unique reference number of the purchase receipt.
     *
     * @return $this
     */
    public function setReceiptNbr($receipt_nbr)
    {
        $this->container['receipt_nbr'] = $receipt_nbr;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return bool
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param bool $hold The top part &gt; Hold &gt; A check box that indicates (if selected) that the document has the On hold status.
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The top part &gt; Status &gt; The current status of the purchase or transfer receipt, or return, which the system assigns automatically. On hold, Balanced, Released.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Mandatory field: The top part &gt; Date* &gt; The date when the receipt document was created.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets post_period
     *
     * @return string
     */
    public function getPostPeriod()
    {
        return $this->container['post_period'];
    }

    /**
     * Sets post_period
     *
     * @param string $post_period Mandatory field: The top part &gt; Post period* &gt; The financial period to which the transactions recorded in the document should be posted. Format MMYYYY.
     *
     * @return $this
     */
    public function setPostPeriod($post_period)
    {
        $this->container['post_period'] = $post_period;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return object
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param object $warehouse Mandatory field: The top part or the Documents details tab &gt; Warehouse* &gt; The warehouse from which the items have been received for transfer orders.
     *
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return object
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param object $supplier Mandatory field: The top part &gt; Supplier* &gt; The supplier from which the items have been received or to which they will be returned.
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location Mandatory field: The top part Location* &gt; The supplier location from which the items should be received or to which they should be returned.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The top part &gt; Currency &gt; The currency the supplier uses for invoicing.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return double
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param double $exchange_rate exchange_rate
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets create_bill
     *
     * @return bool
     */
    public function getCreateBill()
    {
        return $this->container['create_bill'];
    }

    /**
     * Sets create_bill
     *
     * @param bool $create_bill The top part &gt; Create invoice &gt; A check box that you select if the system must create an appropriate invoice (or adjustment) automatically when the purchase receipt is released.
     *
     * @return $this
     */
    public function setCreateBill($create_bill)
    {
        $this->container['create_bill'] = $create_bill;

        return $this;
    }

    /**
     * Gets supplier_ref
     *
     * @return string
     */
    public function getSupplierRef()
    {
        return $this->container['supplier_ref'];
    }

    /**
     * Sets supplier_ref
     *
     * @param string $supplier_ref The top part &gt; Supplier ref. &gt; The reference number of the supplier document this receipt or return is based on.
     *
     * @return $this
     */
    public function setSupplierRef($supplier_ref)
    {
        $this->container['supplier_ref'] = $supplier_ref;

        return $this;
    }

    /**
     * Gets total_qty
     *
     * @return double
     */
    public function getTotalQty()
    {
        return $this->container['total_qty'];
    }

    /**
     * Sets total_qty
     *
     * @param double $total_qty The top part &gt; Total qty. &gt; The total quantity of items received from or returned to the supplier.
     *
     * @return $this
     */
    public function setTotalQty($total_qty)
    {
        $this->container['total_qty'] = $total_qty;

        return $this;
    }

    /**
     * Gets control_qty
     *
     * @return double
     */
    public function getControlQty()
    {
        return $this->container['control_qty'];
    }

    /**
     * Sets control_qty
     *
     * @param double $control_qty The top part &gt; Control qty. &gt; The total quantity of goods on the receipt or return
     *
     * @return $this
     */
    public function setControlQty($control_qty)
    {
        $this->container['control_qty'] = $control_qty;

        return $this;
    }

    /**
     * Gets vat_exempt_total
     *
     * @return double
     */
    public function getVatExemptTotal()
    {
        return $this->container['vat_exempt_total'];
    }

    /**
     * Sets vat_exempt_total
     *
     * @param double $vat_exempt_total The top part &gt; VAT exempt total &gt; The document total that is exempt from VAT.
     *
     * @return $this
     */
    public function setVatExemptTotal($vat_exempt_total)
    {
        $this->container['vat_exempt_total'] = $vat_exempt_total;

        return $this;
    }

    /**
     * Gets vat_taxable_total
     *
     * @return double
     */
    public function getVatTaxableTotal()
    {
        return $this->container['vat_taxable_total'];
    }

    /**
     * Sets vat_taxable_total
     *
     * @param double $vat_taxable_total The top part &gt; VAT taxable total &gt; The document total that is subjected to VAT.
     *
     * @return $this
     */
    public function setVatTaxableTotal($vat_taxable_total)
    {
        $this->container['vat_taxable_total'] = $vat_taxable_total;

        return $this;
    }

    /**
     * Gets total_amt
     *
     * @return double
     */
    public function getTotalAmt()
    {
        return $this->container['total_amt'];
    }

    /**
     * Sets total_amt
     *
     * @param double $total_amt The top part &gt; Total amt. &gt; The total amount calculated for items received from or returned to the supplier.
     *
     * @return $this
     */
    public function setTotalAmt($total_amt)
    {
        $this->container['total_amt'] = $total_amt;

        return $this;
    }

    /**
     * Gets control_total
     *
     * @return double
     */
    public function getControlTotal()
    {
        return $this->container['control_total'];
    }

    /**
     * Sets control_total
     *
     * @param double $control_total The top part &gt; Control amt. &gt; The total amount of the receipt or return, which you manually enter.
     *
     * @return $this
     */
    public function setControlTotal($control_total)
    {
        $this->container['control_total'] = $control_total;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time System generated information.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return object
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param object $branch_number Mandatory field: Document details tab &gt; Branch* &gt; The branch to which the document belongs.
     *
     * @return $this
     */
    public function setBranchNumber($branch_number)
    {
        $this->container['branch_number'] = $branch_number;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Ekstralys\VismaNetApi\Model\PurchaseReceiptLineDto[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Ekstralys\VismaNetApi\Model\PurchaseReceiptLineDto[] $lines Document details tab &gt; Line no &gt; The number of the purchase receipt line on the document.
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


