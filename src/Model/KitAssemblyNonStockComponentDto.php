<?php
/**
 * KitAssemblyNonStockComponentDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * KitAssemblyNonStockComponentDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class KitAssemblyNonStockComponentDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'KitAssemblyNonStockComponentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_nbr' => 'int',
        'item_id' => 'string',
        'description' => 'string',
        'uo_m' => 'string',
        'quantity' => 'double',
        'unit_cost' => 'double',
        'reason_code' => 'string',
        'component_qty' => 'double',
        'allow_component_qty_variance' => 'bool',
        'min_component_qty' => 'double',
        'max_component_qty' => 'double',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_nbr' => 'int32',
        'item_id' => null,
        'description' => null,
        'uo_m' => null,
        'quantity' => 'double',
        'unit_cost' => 'double',
        'reason_code' => null,
        'component_qty' => 'double',
        'allow_component_qty_variance' => null,
        'min_component_qty' => 'double',
        'max_component_qty' => 'double',
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_nbr' => 'lineNbr',
        'item_id' => 'itemId',
        'description' => 'description',
        'uo_m' => 'uoM',
        'quantity' => 'quantity',
        'unit_cost' => 'unitCost',
        'reason_code' => 'reasonCode',
        'component_qty' => 'componentQty',
        'allow_component_qty_variance' => 'allowComponentQtyVariance',
        'min_component_qty' => 'minComponentQty',
        'max_component_qty' => 'maxComponentQty',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_nbr' => 'setLineNbr',
        'item_id' => 'setItemId',
        'description' => 'setDescription',
        'uo_m' => 'setUoM',
        'quantity' => 'setQuantity',
        'unit_cost' => 'setUnitCost',
        'reason_code' => 'setReasonCode',
        'component_qty' => 'setComponentQty',
        'allow_component_qty_variance' => 'setAllowComponentQtyVariance',
        'min_component_qty' => 'setMinComponentQty',
        'max_component_qty' => 'setMaxComponentQty',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_nbr' => 'getLineNbr',
        'item_id' => 'getItemId',
        'description' => 'getDescription',
        'uo_m' => 'getUoM',
        'quantity' => 'getQuantity',
        'unit_cost' => 'getUnitCost',
        'reason_code' => 'getReasonCode',
        'component_qty' => 'getComponentQty',
        'allow_component_qty_variance' => 'getAllowComponentQtyVariance',
        'min_component_qty' => 'getMinComponentQty',
        'max_component_qty' => 'getMaxComponentQty',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_nbr'] = isset($data['line_nbr']) ? $data['line_nbr'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['uo_m'] = isset($data['uo_m']) ? $data['uo_m'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['component_qty'] = isset($data['component_qty']) ? $data['component_qty'] : null;
        $this->container['allow_component_qty_variance'] = isset($data['allow_component_qty_variance']) ? $data['allow_component_qty_variance'] : null;
        $this->container['min_component_qty'] = isset($data['min_component_qty']) ? $data['min_component_qty'] : null;
        $this->container['max_component_qty'] = isset($data['max_component_qty']) ? $data['max_component_qty'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_nbr
     *
     * @return int
     */
    public function getLineNbr()
    {
        return $this->container['line_nbr'];
    }

    /**
     * Sets line_nbr
     *
     * @param int $line_nbr line_nbr
     *
     * @return $this
     */
    public function setLineNbr($line_nbr)
    {
        $this->container['line_nbr'] = $line_nbr;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string $item_id item_id
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets uo_m
     *
     * @return string
     */
    public function getUoM()
    {
        return $this->container['uo_m'];
    }

    /**
     * Sets uo_m
     *
     * @param string $uo_m uo_m
     *
     * @return $this
     */
    public function setUoM($uo_m)
    {
        $this->container['uo_m'] = $uo_m;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return double
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param double $unit_cost unit_cost
     *
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code reason_code
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets component_qty
     *
     * @return double
     */
    public function getComponentQty()
    {
        return $this->container['component_qty'];
    }

    /**
     * Sets component_qty
     *
     * @param double $component_qty component_qty
     *
     * @return $this
     */
    public function setComponentQty($component_qty)
    {
        $this->container['component_qty'] = $component_qty;

        return $this;
    }

    /**
     * Gets allow_component_qty_variance
     *
     * @return bool
     */
    public function getAllowComponentQtyVariance()
    {
        return $this->container['allow_component_qty_variance'];
    }

    /**
     * Sets allow_component_qty_variance
     *
     * @param bool $allow_component_qty_variance allow_component_qty_variance
     *
     * @return $this
     */
    public function setAllowComponentQtyVariance($allow_component_qty_variance)
    {
        $this->container['allow_component_qty_variance'] = $allow_component_qty_variance;

        return $this;
    }

    /**
     * Gets min_component_qty
     *
     * @return double
     */
    public function getMinComponentQty()
    {
        return $this->container['min_component_qty'];
    }

    /**
     * Sets min_component_qty
     *
     * @param double $min_component_qty min_component_qty
     *
     * @return $this
     */
    public function setMinComponentQty($min_component_qty)
    {
        $this->container['min_component_qty'] = $min_component_qty;

        return $this;
    }

    /**
     * Gets max_component_qty
     *
     * @return double
     */
    public function getMaxComponentQty()
    {
        return $this->container['max_component_qty'];
    }

    /**
     * Sets max_component_qty
     *
     * @param double $max_component_qty max_component_qty
     *
     * @return $this
     */
    public function setMaxComponentQty($max_component_qty)
    {
        $this->container['max_component_qty'] = $max_component_qty;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


