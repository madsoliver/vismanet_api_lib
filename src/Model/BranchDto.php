<?php
/**
 * BranchDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * BranchDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BranchDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BranchDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'number' => 'string',
        'name' => 'string',
        'organization_id' => 'int',
        'is_main_branch' => 'bool',
        'main_address' => 'object',
        'main_contact' => 'object',
        'delivery_address' => 'object',
        'delivery_contact' => 'object',
        'corporate_id' => 'string',
        'vat_registration_id' => 'string',
        'default_country' => 'object',
        'industry_code' => 'object',
        'currency' => 'object',
        'vat_zone' => 'object',
        'last_modified_date_time' => '\DateTime',
        'ledger' => 'object',
        'bank_settings' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'number' => null,
        'name' => null,
        'organization_id' => 'int32',
        'is_main_branch' => null,
        'main_address' => null,
        'main_contact' => null,
        'delivery_address' => null,
        'delivery_contact' => null,
        'corporate_id' => null,
        'vat_registration_id' => null,
        'default_country' => null,
        'industry_code' => null,
        'currency' => null,
        'vat_zone' => null,
        'last_modified_date_time' => 'date-time',
        'ledger' => null,
        'bank_settings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'name' => 'name',
        'organization_id' => 'organizationId',
        'is_main_branch' => 'isMainBranch',
        'main_address' => 'mainAddress',
        'main_contact' => 'mainContact',
        'delivery_address' => 'deliveryAddress',
        'delivery_contact' => 'deliveryContact',
        'corporate_id' => 'corporateId',
        'vat_registration_id' => 'vatRegistrationId',
        'default_country' => 'defaultCountry',
        'industry_code' => 'industryCode',
        'currency' => 'currency',
        'vat_zone' => 'vatZone',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'ledger' => 'ledger',
        'bank_settings' => 'bankSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'name' => 'setName',
        'organization_id' => 'setOrganizationId',
        'is_main_branch' => 'setIsMainBranch',
        'main_address' => 'setMainAddress',
        'main_contact' => 'setMainContact',
        'delivery_address' => 'setDeliveryAddress',
        'delivery_contact' => 'setDeliveryContact',
        'corporate_id' => 'setCorporateId',
        'vat_registration_id' => 'setVatRegistrationId',
        'default_country' => 'setDefaultCountry',
        'industry_code' => 'setIndustryCode',
        'currency' => 'setCurrency',
        'vat_zone' => 'setVatZone',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'ledger' => 'setLedger',
        'bank_settings' => 'setBankSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'name' => 'getName',
        'organization_id' => 'getOrganizationId',
        'is_main_branch' => 'getIsMainBranch',
        'main_address' => 'getMainAddress',
        'main_contact' => 'getMainContact',
        'delivery_address' => 'getDeliveryAddress',
        'delivery_contact' => 'getDeliveryContact',
        'corporate_id' => 'getCorporateId',
        'vat_registration_id' => 'getVatRegistrationId',
        'default_country' => 'getDefaultCountry',
        'industry_code' => 'getIndustryCode',
        'currency' => 'getCurrency',
        'vat_zone' => 'getVatZone',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'ledger' => 'getLedger',
        'bank_settings' => 'getBankSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['organization_id'] = isset($data['organization_id']) ? $data['organization_id'] : null;
        $this->container['is_main_branch'] = isset($data['is_main_branch']) ? $data['is_main_branch'] : null;
        $this->container['main_address'] = isset($data['main_address']) ? $data['main_address'] : null;
        $this->container['main_contact'] = isset($data['main_contact']) ? $data['main_contact'] : null;
        $this->container['delivery_address'] = isset($data['delivery_address']) ? $data['delivery_address'] : null;
        $this->container['delivery_contact'] = isset($data['delivery_contact']) ? $data['delivery_contact'] : null;
        $this->container['corporate_id'] = isset($data['corporate_id']) ? $data['corporate_id'] : null;
        $this->container['vat_registration_id'] = isset($data['vat_registration_id']) ? $data['vat_registration_id'] : null;
        $this->container['default_country'] = isset($data['default_country']) ? $data['default_country'] : null;
        $this->container['industry_code'] = isset($data['industry_code']) ? $data['industry_code'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['vat_zone'] = isset($data['vat_zone']) ? $data['vat_zone'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['ledger'] = isset($data['ledger']) ? $data['ledger'] : null;
        $this->container['bank_settings'] = isset($data['bank_settings']) ? $data['bank_settings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Mandatory field: The top part &gt; Organisation ID* &gt; The unique identifier of the company, which you compose according to the rules defined by the BIZACCT segmented key.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The top part &gt; Company name &gt; The name of the company.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return int
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param int $organization_id organization_id
     *
     * @return $this
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets is_main_branch
     *
     * @return bool
     */
    public function getIsMainBranch()
    {
        return $this->container['is_main_branch'];
    }

    /**
     * Sets is_main_branch
     *
     * @param bool $is_main_branch The top part &gt; Is main organisation &gt; If you want this company to be the main company of your branches, select this check box.
     *
     * @return $this
     */
    public function setIsMainBranch($is_main_branch)
    {
        $this->container['is_main_branch'] = $is_main_branch;

        return $this;
    }

    /**
     * Gets main_address
     *
     * @return object
     */
    public function getMainAddress()
    {
        return $this->container['main_address'];
    }

    /**
     * Sets main_address
     *
     * @param object $main_address The Organisation details tab &gt; The Main address section &gt;
     *
     * @return $this
     */
    public function setMainAddress($main_address)
    {
        $this->container['main_address'] = $main_address;

        return $this;
    }

    /**
     * Gets main_contact
     *
     * @return object
     */
    public function getMainContact()
    {
        return $this->container['main_contact'];
    }

    /**
     * Sets main_contact
     *
     * @param object $main_contact The Organisation details tab &gt;  The Main contact section &gt;
     *
     * @return $this
     */
    public function setMainContact($main_contact)
    {
        $this->container['main_contact'] = $main_contact;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return object
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param object $delivery_address The Delivery settings tab &gt; Delivery address section &gt;
     *
     * @return $this
     */
    public function setDeliveryAddress($delivery_address)
    {
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets delivery_contact
     *
     * @return object
     */
    public function getDeliveryContact()
    {
        return $this->container['delivery_contact'];
    }

    /**
     * Sets delivery_contact
     *
     * @param object $delivery_contact The Delivery settings tab &gt; Delivery contact section &gt;
     *
     * @return $this
     */
    public function setDeliveryContact($delivery_contact)
    {
        $this->container['delivery_contact'] = $delivery_contact;

        return $this;
    }

    /**
     * Gets corporate_id
     *
     * @return string
     */
    public function getCorporateId()
    {
        return $this->container['corporate_id'];
    }

    /**
     * Sets corporate_id
     *
     * @param string $corporate_id The Organisation details tab &gt; VAT registration info section &gt; Corporate ID &gt; The corporate ID of the company.
     *
     * @return $this
     */
    public function setCorporateId($corporate_id)
    {
        $this->container['corporate_id'] = $corporate_id;

        return $this;
    }

    /**
     * Gets vat_registration_id
     *
     * @return string
     */
    public function getVatRegistrationId()
    {
        return $this->container['vat_registration_id'];
    }

    /**
     * Sets vat_registration_id
     *
     * @param string $vat_registration_id The Organisation details tab &gt; VAT registration info section &gt; VAT registration ID &gt; The company registration ID for the country’s tax authority.
     *
     * @return $this
     */
    public function setVatRegistrationId($vat_registration_id)
    {
        $this->container['vat_registration_id'] = $vat_registration_id;

        return $this;
    }

    /**
     * Gets default_country
     *
     * @return object
     */
    public function getDefaultCountry()
    {
        return $this->container['default_country'];
    }

    /**
     * Sets default_country
     *
     * @param object $default_country Mandatory field: The organisation details tab &gt; Configuration settings section &gt; Default country* &gt; The default country, which is the country of most of the company's customers and suppliers.
     *
     * @return $this
     */
    public function setDefaultCountry($default_country)
    {
        $this->container['default_country'] = $default_country;

        return $this;
    }

    /**
     * Gets industry_code
     *
     * @return object
     */
    public function getIndustryCode()
    {
        return $this->container['industry_code'];
    }

    /**
     * Sets industry_code
     *
     * @param object $industry_code The Organisation details tab &gt; Configuration settings section &gt; Industry code &gt; The branch's industry code ID.
     *
     * @return $this
     */
    public function setIndustryCode($industry_code)
    {
        $this->container['industry_code'] = $industry_code;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return object
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param object $currency The Organisation details tab &gt; Base currency settings (shared) section &gt; This group of elements holds information that is shared among all branches of the company.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets vat_zone
     *
     * @return object
     */
    public function getVatZone()
    {
        return $this->container['vat_zone'];
    }

    /**
     * Sets vat_zone
     *
     * @param object $vat_zone The Delivery settings tab &gt; Delivery instruction section &gt; VAT zone ID &gt; The VAT zone of the delivery location.
     *
     * @return $this
     */
    public function setVatZone($vat_zone)
    {
        $this->container['vat_zone'] = $vat_zone;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time System generated information. This information is not visible in the window.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets ledger
     *
     * @return object
     */
    public function getLedger()
    {
        return $this->container['ledger'];
    }

    /**
     * Sets ledger
     *
     * @param object $ledger The ledgers tab &gt; The ledger column and the Description column.
     *
     * @return $this
     */
    public function setLedger($ledger)
    {
        $this->container['ledger'] = $ledger;

        return $this;
    }

    /**
     * Gets bank_settings
     *
     * @return object
     */
    public function getBankSettings()
    {
        return $this->container['bank_settings'];
    }

    /**
     * Sets bank_settings
     *
     * @param object $bank_settings The payment settings tab.
     *
     * @return $this
     */
    public function setBankSettings($bank_settings)
    {
        $this->container['bank_settings'] = $bank_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


