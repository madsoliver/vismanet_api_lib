<?php
/**
 * CustomerInvoiceDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * CustomerInvoiceDto Class Doc Comment
 *
 * @category Class
 * @description This class represents an invoice in InvoiceController. Used by getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerInvoiceDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerInvoiceDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'credit_terms' => 'object',
        'document_due_date' => '\DateTime',
        'cash_discount_date' => '\DateTime',
        'external_reference' => 'string',
        'is_rot_rut_deductible' => 'bool',
        'exchange_rate' => 'double',
        'dunning_letter_date' => '\DateTime',
        'dunning_letter_level' => 'int',
        'contact' => 'object',
        'attachments' => '\Ekstralys\VismaNetApi\Model\AttachmentDto[]',
        'tax_details' => '\Ekstralys\VismaNetApi\Model\TaxDetailDto[]',
        'invoice_lines' => '\Ekstralys\VismaNetApi\Model\CustomerInvoiceLineDto[]',
        'send_to_auto_invoice' => 'bool',
        'rounding_diff' => 'double',
        'customer_vat_zone' => 'object',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'accounting_cost_ref' => 'string',
        'originator_doc_ref' => 'string',
        'contract_doc_ref' => 'string',
        'hold' => 'bool',
        'discount_total' => 'double',
        'discount_total_in_currency' => 'double',
        'detail_total' => 'double',
        'detail_total_in_currency' => 'double',
        'vat_taxable_total' => 'double',
        'vat_taxable_total_in_currency' => 'double',
        'vat_exempt_total' => 'double',
        'vat_exempt_total_in_currency' => 'double',
        'sales_person_id' => 'int',
        'sales_person_descr' => 'string',
        'sales_person' => 'object',
        'payment_reference' => 'string',
        'invoice_address' => 'object',
        'invoice_contact' => 'object',
        'applications' => '\Ekstralys\VismaNetApi\Model\ArAdjustDto[]',
        'dont_print' => 'bool',
        'dont_email' => 'bool',
        'customer' => 'object',
        'document_type' => 'string',
        'reference_number' => 'string',
        'post_period' => 'string',
        'financial_period' => 'string',
        'closed_financial_period' => 'string',
        'document_date' => '\DateTime',
        'orig_invoice_date' => '\DateTime',
        'status' => 'string',
        'currency_id' => 'string',
        'amount' => 'double',
        'amount_in_currency' => 'double',
        'balance' => 'double',
        'balance_in_currency' => 'double',
        'cash_discount' => 'double',
        'cash_discount_in_currency' => 'double',
        'payment_method' => 'object',
        'customer_ref_number' => 'string',
        'invoice_text' => 'string',
        'last_modified_date_time' => '\DateTime',
        'created_date_time' => '\DateTime',
        'note' => 'string',
        'vat_total' => 'double',
        'vat_total_in_currency' => 'double',
        'location' => 'object',
        'branch_number' => 'object',
        'cash_account' => 'string',
        'project' => 'object',
        'account' => 'object',
        'subaccount' => 'object',
        'customer_project' => 'string',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'credit_terms' => null,
        'document_due_date' => 'date-time',
        'cash_discount_date' => 'date-time',
        'external_reference' => null,
        'is_rot_rut_deductible' => null,
        'exchange_rate' => 'double',
        'dunning_letter_date' => 'date-time',
        'dunning_letter_level' => 'int32',
        'contact' => null,
        'attachments' => null,
        'tax_details' => null,
        'invoice_lines' => null,
        'send_to_auto_invoice' => null,
        'rounding_diff' => 'double',
        'customer_vat_zone' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'accounting_cost_ref' => null,
        'originator_doc_ref' => null,
        'contract_doc_ref' => null,
        'hold' => null,
        'discount_total' => 'double',
        'discount_total_in_currency' => 'double',
        'detail_total' => 'double',
        'detail_total_in_currency' => 'double',
        'vat_taxable_total' => 'double',
        'vat_taxable_total_in_currency' => 'double',
        'vat_exempt_total' => 'double',
        'vat_exempt_total_in_currency' => 'double',
        'sales_person_id' => 'int32',
        'sales_person_descr' => null,
        'sales_person' => null,
        'payment_reference' => null,
        'invoice_address' => null,
        'invoice_contact' => null,
        'applications' => null,
        'dont_print' => null,
        'dont_email' => null,
        'customer' => null,
        'document_type' => null,
        'reference_number' => null,
        'post_period' => null,
        'financial_period' => null,
        'closed_financial_period' => null,
        'document_date' => 'date-time',
        'orig_invoice_date' => 'date-time',
        'status' => null,
        'currency_id' => null,
        'amount' => 'double',
        'amount_in_currency' => 'double',
        'balance' => 'double',
        'balance_in_currency' => 'double',
        'cash_discount' => 'double',
        'cash_discount_in_currency' => 'double',
        'payment_method' => null,
        'customer_ref_number' => null,
        'invoice_text' => null,
        'last_modified_date_time' => 'date-time',
        'created_date_time' => 'date-time',
        'note' => null,
        'vat_total' => 'double',
        'vat_total_in_currency' => 'double',
        'location' => null,
        'branch_number' => null,
        'cash_account' => null,
        'project' => null,
        'account' => null,
        'subaccount' => null,
        'customer_project' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'credit_terms' => 'creditTerms',
        'document_due_date' => 'documentDueDate',
        'cash_discount_date' => 'cashDiscountDate',
        'external_reference' => 'externalReference',
        'is_rot_rut_deductible' => 'isRotRutDeductible',
        'exchange_rate' => 'exchangeRate',
        'dunning_letter_date' => 'dunningLetterDate',
        'dunning_letter_level' => 'dunningLetterLevel',
        'contact' => 'contact',
        'attachments' => 'attachments',
        'tax_details' => 'taxDetails',
        'invoice_lines' => 'invoiceLines',
        'send_to_auto_invoice' => 'sendToAutoInvoice',
        'rounding_diff' => 'roundingDiff',
        'customer_vat_zone' => 'customerVatZone',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'accounting_cost_ref' => 'accountingCostRef',
        'originator_doc_ref' => 'originatorDocRef',
        'contract_doc_ref' => 'contractDocRef',
        'hold' => 'hold',
        'discount_total' => 'discountTotal',
        'discount_total_in_currency' => 'discountTotalInCurrency',
        'detail_total' => 'detailTotal',
        'detail_total_in_currency' => 'detailTotalInCurrency',
        'vat_taxable_total' => 'vatTaxableTotal',
        'vat_taxable_total_in_currency' => 'vatTaxableTotalInCurrency',
        'vat_exempt_total' => 'vatExemptTotal',
        'vat_exempt_total_in_currency' => 'vatExemptTotalInCurrency',
        'sales_person_id' => 'salesPersonID',
        'sales_person_descr' => 'salesPersonDescr',
        'sales_person' => 'salesPerson',
        'payment_reference' => 'paymentReference',
        'invoice_address' => 'invoiceAddress',
        'invoice_contact' => 'invoiceContact',
        'applications' => 'applications',
        'dont_print' => 'dontPrint',
        'dont_email' => 'dontEmail',
        'customer' => 'customer',
        'document_type' => 'documentType',
        'reference_number' => 'referenceNumber',
        'post_period' => 'postPeriod',
        'financial_period' => 'financialPeriod',
        'closed_financial_period' => 'closedFinancialPeriod',
        'document_date' => 'documentDate',
        'orig_invoice_date' => 'origInvoiceDate',
        'status' => 'status',
        'currency_id' => 'currencyId',
        'amount' => 'amount',
        'amount_in_currency' => 'amountInCurrency',
        'balance' => 'balance',
        'balance_in_currency' => 'balanceInCurrency',
        'cash_discount' => 'cashDiscount',
        'cash_discount_in_currency' => 'cashDiscountInCurrency',
        'payment_method' => 'paymentMethod',
        'customer_ref_number' => 'customerRefNumber',
        'invoice_text' => 'invoiceText',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'created_date_time' => 'createdDateTime',
        'note' => 'note',
        'vat_total' => 'vatTotal',
        'vat_total_in_currency' => 'vatTotalInCurrency',
        'location' => 'location',
        'branch_number' => 'branchNumber',
        'cash_account' => 'cashAccount',
        'project' => 'project',
        'account' => 'account',
        'subaccount' => 'subaccount',
        'customer_project' => 'customerProject',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'credit_terms' => 'setCreditTerms',
        'document_due_date' => 'setDocumentDueDate',
        'cash_discount_date' => 'setCashDiscountDate',
        'external_reference' => 'setExternalReference',
        'is_rot_rut_deductible' => 'setIsRotRutDeductible',
        'exchange_rate' => 'setExchangeRate',
        'dunning_letter_date' => 'setDunningLetterDate',
        'dunning_letter_level' => 'setDunningLetterLevel',
        'contact' => 'setContact',
        'attachments' => 'setAttachments',
        'tax_details' => 'setTaxDetails',
        'invoice_lines' => 'setInvoiceLines',
        'send_to_auto_invoice' => 'setSendToAutoInvoice',
        'rounding_diff' => 'setRoundingDiff',
        'customer_vat_zone' => 'setCustomerVatZone',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'accounting_cost_ref' => 'setAccountingCostRef',
        'originator_doc_ref' => 'setOriginatorDocRef',
        'contract_doc_ref' => 'setContractDocRef',
        'hold' => 'setHold',
        'discount_total' => 'setDiscountTotal',
        'discount_total_in_currency' => 'setDiscountTotalInCurrency',
        'detail_total' => 'setDetailTotal',
        'detail_total_in_currency' => 'setDetailTotalInCurrency',
        'vat_taxable_total' => 'setVatTaxableTotal',
        'vat_taxable_total_in_currency' => 'setVatTaxableTotalInCurrency',
        'vat_exempt_total' => 'setVatExemptTotal',
        'vat_exempt_total_in_currency' => 'setVatExemptTotalInCurrency',
        'sales_person_id' => 'setSalesPersonId',
        'sales_person_descr' => 'setSalesPersonDescr',
        'sales_person' => 'setSalesPerson',
        'payment_reference' => 'setPaymentReference',
        'invoice_address' => 'setInvoiceAddress',
        'invoice_contact' => 'setInvoiceContact',
        'applications' => 'setApplications',
        'dont_print' => 'setDontPrint',
        'dont_email' => 'setDontEmail',
        'customer' => 'setCustomer',
        'document_type' => 'setDocumentType',
        'reference_number' => 'setReferenceNumber',
        'post_period' => 'setPostPeriod',
        'financial_period' => 'setFinancialPeriod',
        'closed_financial_period' => 'setClosedFinancialPeriod',
        'document_date' => 'setDocumentDate',
        'orig_invoice_date' => 'setOrigInvoiceDate',
        'status' => 'setStatus',
        'currency_id' => 'setCurrencyId',
        'amount' => 'setAmount',
        'amount_in_currency' => 'setAmountInCurrency',
        'balance' => 'setBalance',
        'balance_in_currency' => 'setBalanceInCurrency',
        'cash_discount' => 'setCashDiscount',
        'cash_discount_in_currency' => 'setCashDiscountInCurrency',
        'payment_method' => 'setPaymentMethod',
        'customer_ref_number' => 'setCustomerRefNumber',
        'invoice_text' => 'setInvoiceText',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'created_date_time' => 'setCreatedDateTime',
        'note' => 'setNote',
        'vat_total' => 'setVatTotal',
        'vat_total_in_currency' => 'setVatTotalInCurrency',
        'location' => 'setLocation',
        'branch_number' => 'setBranchNumber',
        'cash_account' => 'setCashAccount',
        'project' => 'setProject',
        'account' => 'setAccount',
        'subaccount' => 'setSubaccount',
        'customer_project' => 'setCustomerProject',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'credit_terms' => 'getCreditTerms',
        'document_due_date' => 'getDocumentDueDate',
        'cash_discount_date' => 'getCashDiscountDate',
        'external_reference' => 'getExternalReference',
        'is_rot_rut_deductible' => 'getIsRotRutDeductible',
        'exchange_rate' => 'getExchangeRate',
        'dunning_letter_date' => 'getDunningLetterDate',
        'dunning_letter_level' => 'getDunningLetterLevel',
        'contact' => 'getContact',
        'attachments' => 'getAttachments',
        'tax_details' => 'getTaxDetails',
        'invoice_lines' => 'getInvoiceLines',
        'send_to_auto_invoice' => 'getSendToAutoInvoice',
        'rounding_diff' => 'getRoundingDiff',
        'customer_vat_zone' => 'getCustomerVatZone',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'accounting_cost_ref' => 'getAccountingCostRef',
        'originator_doc_ref' => 'getOriginatorDocRef',
        'contract_doc_ref' => 'getContractDocRef',
        'hold' => 'getHold',
        'discount_total' => 'getDiscountTotal',
        'discount_total_in_currency' => 'getDiscountTotalInCurrency',
        'detail_total' => 'getDetailTotal',
        'detail_total_in_currency' => 'getDetailTotalInCurrency',
        'vat_taxable_total' => 'getVatTaxableTotal',
        'vat_taxable_total_in_currency' => 'getVatTaxableTotalInCurrency',
        'vat_exempt_total' => 'getVatExemptTotal',
        'vat_exempt_total_in_currency' => 'getVatExemptTotalInCurrency',
        'sales_person_id' => 'getSalesPersonId',
        'sales_person_descr' => 'getSalesPersonDescr',
        'sales_person' => 'getSalesPerson',
        'payment_reference' => 'getPaymentReference',
        'invoice_address' => 'getInvoiceAddress',
        'invoice_contact' => 'getInvoiceContact',
        'applications' => 'getApplications',
        'dont_print' => 'getDontPrint',
        'dont_email' => 'getDontEmail',
        'customer' => 'getCustomer',
        'document_type' => 'getDocumentType',
        'reference_number' => 'getReferenceNumber',
        'post_period' => 'getPostPeriod',
        'financial_period' => 'getFinancialPeriod',
        'closed_financial_period' => 'getClosedFinancialPeriod',
        'document_date' => 'getDocumentDate',
        'orig_invoice_date' => 'getOrigInvoiceDate',
        'status' => 'getStatus',
        'currency_id' => 'getCurrencyId',
        'amount' => 'getAmount',
        'amount_in_currency' => 'getAmountInCurrency',
        'balance' => 'getBalance',
        'balance_in_currency' => 'getBalanceInCurrency',
        'cash_discount' => 'getCashDiscount',
        'cash_discount_in_currency' => 'getCashDiscountInCurrency',
        'payment_method' => 'getPaymentMethod',
        'customer_ref_number' => 'getCustomerRefNumber',
        'invoice_text' => 'getInvoiceText',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'created_date_time' => 'getCreatedDateTime',
        'note' => 'getNote',
        'vat_total' => 'getVatTotal',
        'vat_total_in_currency' => 'getVatTotalInCurrency',
        'location' => 'getLocation',
        'branch_number' => 'getBranchNumber',
        'cash_account' => 'getCashAccount',
        'project' => 'getProject',
        'account' => 'getAccount',
        'subaccount' => 'getSubaccount',
        'customer_project' => 'getCustomerProject',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DOCUMENT_TYPE_INVOICE = 'Invoice';
    const DOCUMENT_TYPE_DEBIT_NOTE = 'DebitNote';
    const DOCUMENT_TYPE_CREDIT_NOTE = 'CreditNote';
    const DOCUMENT_TYPE_PAYMENT = 'Payment';
    const DOCUMENT_TYPE_VOID_PAYMENT = 'VoidPayment';
    const DOCUMENT_TYPE_PREPAYMENT = 'Prepayment';
    const DOCUMENT_TYPE_REFUND = 'Refund';
    const DOCUMENT_TYPE_FIN_CHARGE = 'FinCharge';
    const DOCUMENT_TYPE_SMALL_BALANCE_WO = 'SmallBalanceWo';
    const DOCUMENT_TYPE_SMALL_CREDIT_WO = 'SmallCreditWo';
    const DOCUMENT_TYPE_CASH_SALE = 'CashSale';
    const DOCUMENT_TYPE_CASH_RETURN = 'CashReturn';
    const DOCUMENT_TYPE_UNDEFINED = 'Undefined';
    const DOCUMENT_TYPE_NO_UPDATE = 'NoUpdate';
    const STATUS_HOLD = 'Hold';
    const STATUS_BALANCED = 'Balanced';
    const STATUS_VOIDED = 'Voided';
    const STATUS_SCHEDULED = 'Scheduled';
    const STATUS_OPEN = 'Open';
    const STATUS_CLOSED = 'Closed';
    const STATUS_PENDING_PRINT = 'PendingPrint';
    const STATUS_PENDING_EMAIL = 'PendingEmail';
    const STATUS_CREDIT_HOLD = 'CreditHold';
    const STATUS_CC_HOLD = 'CcHold';
    const STATUS_RESERVED = 'Reserved';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_INVOICE,
            self::DOCUMENT_TYPE_DEBIT_NOTE,
            self::DOCUMENT_TYPE_CREDIT_NOTE,
            self::DOCUMENT_TYPE_PAYMENT,
            self::DOCUMENT_TYPE_VOID_PAYMENT,
            self::DOCUMENT_TYPE_PREPAYMENT,
            self::DOCUMENT_TYPE_REFUND,
            self::DOCUMENT_TYPE_FIN_CHARGE,
            self::DOCUMENT_TYPE_SMALL_BALANCE_WO,
            self::DOCUMENT_TYPE_SMALL_CREDIT_WO,
            self::DOCUMENT_TYPE_CASH_SALE,
            self::DOCUMENT_TYPE_CASH_RETURN,
            self::DOCUMENT_TYPE_UNDEFINED,
            self::DOCUMENT_TYPE_NO_UPDATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_HOLD,
            self::STATUS_BALANCED,
            self::STATUS_VOIDED,
            self::STATUS_SCHEDULED,
            self::STATUS_OPEN,
            self::STATUS_CLOSED,
            self::STATUS_PENDING_PRINT,
            self::STATUS_PENDING_EMAIL,
            self::STATUS_CREDIT_HOLD,
            self::STATUS_CC_HOLD,
            self::STATUS_RESERVED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['credit_terms'] = isset($data['credit_terms']) ? $data['credit_terms'] : null;
        $this->container['document_due_date'] = isset($data['document_due_date']) ? $data['document_due_date'] : null;
        $this->container['cash_discount_date'] = isset($data['cash_discount_date']) ? $data['cash_discount_date'] : null;
        $this->container['external_reference'] = isset($data['external_reference']) ? $data['external_reference'] : null;
        $this->container['is_rot_rut_deductible'] = isset($data['is_rot_rut_deductible']) ? $data['is_rot_rut_deductible'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['dunning_letter_date'] = isset($data['dunning_letter_date']) ? $data['dunning_letter_date'] : null;
        $this->container['dunning_letter_level'] = isset($data['dunning_letter_level']) ? $data['dunning_letter_level'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['tax_details'] = isset($data['tax_details']) ? $data['tax_details'] : null;
        $this->container['invoice_lines'] = isset($data['invoice_lines']) ? $data['invoice_lines'] : null;
        $this->container['send_to_auto_invoice'] = isset($data['send_to_auto_invoice']) ? $data['send_to_auto_invoice'] : null;
        $this->container['rounding_diff'] = isset($data['rounding_diff']) ? $data['rounding_diff'] : null;
        $this->container['customer_vat_zone'] = isset($data['customer_vat_zone']) ? $data['customer_vat_zone'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['accounting_cost_ref'] = isset($data['accounting_cost_ref']) ? $data['accounting_cost_ref'] : null;
        $this->container['originator_doc_ref'] = isset($data['originator_doc_ref']) ? $data['originator_doc_ref'] : null;
        $this->container['contract_doc_ref'] = isset($data['contract_doc_ref']) ? $data['contract_doc_ref'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['discount_total'] = isset($data['discount_total']) ? $data['discount_total'] : null;
        $this->container['discount_total_in_currency'] = isset($data['discount_total_in_currency']) ? $data['discount_total_in_currency'] : null;
        $this->container['detail_total'] = isset($data['detail_total']) ? $data['detail_total'] : null;
        $this->container['detail_total_in_currency'] = isset($data['detail_total_in_currency']) ? $data['detail_total_in_currency'] : null;
        $this->container['vat_taxable_total'] = isset($data['vat_taxable_total']) ? $data['vat_taxable_total'] : null;
        $this->container['vat_taxable_total_in_currency'] = isset($data['vat_taxable_total_in_currency']) ? $data['vat_taxable_total_in_currency'] : null;
        $this->container['vat_exempt_total'] = isset($data['vat_exempt_total']) ? $data['vat_exempt_total'] : null;
        $this->container['vat_exempt_total_in_currency'] = isset($data['vat_exempt_total_in_currency']) ? $data['vat_exempt_total_in_currency'] : null;
        $this->container['sales_person_id'] = isset($data['sales_person_id']) ? $data['sales_person_id'] : null;
        $this->container['sales_person_descr'] = isset($data['sales_person_descr']) ? $data['sales_person_descr'] : null;
        $this->container['sales_person'] = isset($data['sales_person']) ? $data['sales_person'] : null;
        $this->container['payment_reference'] = isset($data['payment_reference']) ? $data['payment_reference'] : null;
        $this->container['invoice_address'] = isset($data['invoice_address']) ? $data['invoice_address'] : null;
        $this->container['invoice_contact'] = isset($data['invoice_contact']) ? $data['invoice_contact'] : null;
        $this->container['applications'] = isset($data['applications']) ? $data['applications'] : null;
        $this->container['dont_print'] = isset($data['dont_print']) ? $data['dont_print'] : null;
        $this->container['dont_email'] = isset($data['dont_email']) ? $data['dont_email'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['reference_number'] = isset($data['reference_number']) ? $data['reference_number'] : null;
        $this->container['post_period'] = isset($data['post_period']) ? $data['post_period'] : null;
        $this->container['financial_period'] = isset($data['financial_period']) ? $data['financial_period'] : null;
        $this->container['closed_financial_period'] = isset($data['closed_financial_period']) ? $data['closed_financial_period'] : null;
        $this->container['document_date'] = isset($data['document_date']) ? $data['document_date'] : null;
        $this->container['orig_invoice_date'] = isset($data['orig_invoice_date']) ? $data['orig_invoice_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_in_currency'] = isset($data['amount_in_currency']) ? $data['amount_in_currency'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['balance_in_currency'] = isset($data['balance_in_currency']) ? $data['balance_in_currency'] : null;
        $this->container['cash_discount'] = isset($data['cash_discount']) ? $data['cash_discount'] : null;
        $this->container['cash_discount_in_currency'] = isset($data['cash_discount_in_currency']) ? $data['cash_discount_in_currency'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['customer_ref_number'] = isset($data['customer_ref_number']) ? $data['customer_ref_number'] : null;
        $this->container['invoice_text'] = isset($data['invoice_text']) ? $data['invoice_text'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['created_date_time'] = isset($data['created_date_time']) ? $data['created_date_time'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['vat_total'] = isset($data['vat_total']) ? $data['vat_total'] : null;
        $this->container['vat_total_in_currency'] = isset($data['vat_total_in_currency']) ? $data['vat_total_in_currency'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['branch_number'] = isset($data['branch_number']) ? $data['branch_number'] : null;
        $this->container['cash_account'] = isset($data['cash_account']) ? $data['cash_account'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['subaccount'] = isset($data['subaccount']) ? $data['subaccount'] : null;
        $this->container['customer_project'] = isset($data['customer_project']) ? $data['customer_project'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['document_type']) && !in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'document_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets credit_terms
     *
     * @return object
     */
    public function getCreditTerms()
    {
        return $this->container['credit_terms'];
    }

    /**
     * Sets credit_terms
     *
     * @param object $credit_terms Mandatory field: The top part &gt; Terms* &gt; The credit terms used in relations with the customer.
     *
     * @return $this
     */
    public function setCreditTerms($credit_terms)
    {
        $this->container['credit_terms'] = $credit_terms;

        return $this;
    }

    /**
     * Gets document_due_date
     *
     * @return \DateTime
     */
    public function getDocumentDueDate()
    {
        return $this->container['document_due_date'];
    }

    /**
     * Sets document_due_date
     *
     * @param \DateTime $document_due_date Mandatory field: The top part &gt; Due date* &gt; The date when payment for the document is due, in accordance with the credit terms.
     *
     * @return $this
     */
    public function setDocumentDueDate($document_due_date)
    {
        $this->container['document_due_date'] = $document_due_date;

        return $this;
    }

    /**
     * Gets cash_discount_date
     *
     * @return \DateTime
     */
    public function getCashDiscountDate()
    {
        return $this->container['cash_discount_date'];
    }

    /**
     * Sets cash_discount_date
     *
     * @param \DateTime $cash_discount_date Mandatory field: The top part &gt; Cash discount date * &gt; The end date of the cash discount period, which the system calculates by using the credit terms.
     *
     * @return $this
     */
    public function setCashDiscountDate($cash_discount_date)
    {
        $this->container['cash_discount_date'] = $cash_discount_date;

        return $this;
    }

    /**
     * Gets external_reference
     *
     * @return string
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     *
     * @param string $external_reference The top part &gt; External reference &gt; The external reference used in AutoInvoice.
     *
     * @return $this
     */
    public function setExternalReference($external_reference)
    {
        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets is_rot_rut_deductible
     *
     * @return bool
     */
    public function getIsRotRutDeductible()
    {
        return $this->container['is_rot_rut_deductible'];
    }

    /**
     * Sets is_rot_rut_deductible
     *
     * @param bool $is_rot_rut_deductible The top part &gt; Domestic services deductible document &gt; A check box indicating if the document is Rot/rut deductible (applicable for the Swedish markets)
     *
     * @return $this
     */
    public function setIsRotRutDeductible($is_rot_rut_deductible)
    {
        $this->container['is_rot_rut_deductible'] = $is_rot_rut_deductible;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return double
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param double $exchange_rate exchange_rate
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets dunning_letter_date
     *
     * @return \DateTime
     */
    public function getDunningLetterDate()
    {
        return $this->container['dunning_letter_date'];
    }

    /**
     * Sets dunning_letter_date
     *
     * @param \DateTime $dunning_letter_date The Financial details tab &gt; The dunning info section &gt; Dunning letter date &gt; The date of the last released dunning letter in which the document was listed.
     *
     * @return $this
     */
    public function setDunningLetterDate($dunning_letter_date)
    {
        $this->container['dunning_letter_date'] = $dunning_letter_date;

        return $this;
    }

    /**
     * Gets dunning_letter_level
     *
     * @return int
     */
    public function getDunningLetterLevel()
    {
        return $this->container['dunning_letter_level'];
    }

    /**
     * Sets dunning_letter_level
     *
     * @param int $dunning_letter_level The Financial details tab &gt; The dunning info section &gt; Dunning level &gt; The dunning level of the document.
     *
     * @return $this
     */
    public function setDunningLetterLevel($dunning_letter_level)
    {
        $this->container['dunning_letter_level'] = $dunning_letter_level;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return object
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param object $contact The top part &gt; Contact &gt; The contact associated with the customer.
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Ekstralys\VismaNetApi\Model\AttachmentDto[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Ekstralys\VismaNetApi\Model\AttachmentDto[] $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets tax_details
     *
     * @return \Ekstralys\VismaNetApi\Model\TaxDetailDto[]
     */
    public function getTaxDetails()
    {
        return $this->container['tax_details'];
    }

    /**
     * Sets tax_details
     *
     * @param \Ekstralys\VismaNetApi\Model\TaxDetailDto[] $tax_details VAT details tab
     *
     * @return $this
     */
    public function setTaxDetails($tax_details)
    {
        $this->container['tax_details'] = $tax_details;

        return $this;
    }

    /**
     * Gets invoice_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\CustomerInvoiceLineDto[]
     */
    public function getInvoiceLines()
    {
        return $this->container['invoice_lines'];
    }

    /**
     * Sets invoice_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\CustomerInvoiceLineDto[] $invoice_lines Documents details tab
     *
     * @return $this
     */
    public function setInvoiceLines($invoice_lines)
    {
        $this->container['invoice_lines'] = $invoice_lines;

        return $this;
    }

    /**
     * Gets send_to_auto_invoice
     *
     * @return bool
     */
    public function getSendToAutoInvoice()
    {
        return $this->container['send_to_auto_invoice'];
    }

    /**
     * Sets send_to_auto_invoice
     *
     * @param bool $send_to_auto_invoice The Attachment tab &gt; Send the file to AutoInvoice &gt; The selected files will be attached to the invoice.
     *
     * @return $this
     */
    public function setSendToAutoInvoice($send_to_auto_invoice)
    {
        $this->container['send_to_auto_invoice'] = $send_to_auto_invoice;

        return $this;
    }

    /**
     * Gets rounding_diff
     *
     * @return double
     */
    public function getRoundingDiff()
    {
        return $this->container['rounding_diff'];
    }

    /**
     * Sets rounding_diff
     *
     * @param double $rounding_diff The top part &gt; Rounding diff. &gt; The difference between the original amount and the rounded amount.
     *
     * @return $this
     */
    public function setRoundingDiff($rounding_diff)
    {
        $this->container['rounding_diff'] = $rounding_diff;

        return $this;
    }

    /**
     * Gets customer_vat_zone
     *
     * @return object
     */
    public function getCustomerVatZone()
    {
        return $this->container['customer_vat_zone'];
    }

    /**
     * Sets customer_vat_zone
     *
     * @param object $customer_vat_zone The Financial details tab &gt; The VAT info section &gt; Dunning letter date &gt;
     *
     * @return $this
     */
    public function setCustomerVatZone($customer_vat_zone)
    {
        $this->container['customer_vat_zone'] = $customer_vat_zone;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets accounting_cost_ref
     *
     * @return string
     */
    public function getAccountingCostRef()
    {
        return $this->container['accounting_cost_ref'];
    }

    /**
     * Sets accounting_cost_ref
     *
     * @param string $accounting_cost_ref accounting_cost_ref
     *
     * @return $this
     */
    public function setAccountingCostRef($accounting_cost_ref)
    {
        $this->container['accounting_cost_ref'] = $accounting_cost_ref;

        return $this;
    }

    /**
     * Gets originator_doc_ref
     *
     * @return string
     */
    public function getOriginatorDocRef()
    {
        return $this->container['originator_doc_ref'];
    }

    /**
     * Sets originator_doc_ref
     *
     * @param string $originator_doc_ref originator_doc_ref
     *
     * @return $this
     */
    public function setOriginatorDocRef($originator_doc_ref)
    {
        $this->container['originator_doc_ref'] = $originator_doc_ref;

        return $this;
    }

    /**
     * Gets contract_doc_ref
     *
     * @return string
     */
    public function getContractDocRef()
    {
        return $this->container['contract_doc_ref'];
    }

    /**
     * Sets contract_doc_ref
     *
     * @param string $contract_doc_ref contract_doc_ref
     *
     * @return $this
     */
    public function setContractDocRef($contract_doc_ref)
    {
        $this->container['contract_doc_ref'] = $contract_doc_ref;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return bool
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param bool $hold The top part &gt; Hold &gt; A check box that indicates (if selected) that the document is a draft. A document with the On Hold status may be edited and cannot be released.
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets discount_total
     *
     * @return double
     */
    public function getDiscountTotal()
    {
        return $this->container['discount_total'];
    }

    /**
     * Sets discount_total
     *
     * @param double $discount_total The top part &gt; Discount total &gt; The document discount total.
     *
     * @return $this
     */
    public function setDiscountTotal($discount_total)
    {
        $this->container['discount_total'] = $discount_total;

        return $this;
    }

    /**
     * Gets discount_total_in_currency
     *
     * @return double
     */
    public function getDiscountTotalInCurrency()
    {
        return $this->container['discount_total_in_currency'];
    }

    /**
     * Sets discount_total_in_currency
     *
     * @param double $discount_total_in_currency The top part &gt; Discount total &gt; The document discount total in your default currency. This field is applicable if the amount is given in a another currency than your default.
     *
     * @return $this
     */
    public function setDiscountTotalInCurrency($discount_total_in_currency)
    {
        $this->container['discount_total_in_currency'] = $discount_total_in_currency;

        return $this;
    }

    /**
     * Gets detail_total
     *
     * @return double
     */
    public function getDetailTotal()
    {
        return $this->container['detail_total'];
    }

    /**
     * Sets detail_total
     *
     * @param double $detail_total The top part &gt; Detail total &gt; The document total, which the system calculates for all line items in the Document details tab.
     *
     * @return $this
     */
    public function setDetailTotal($detail_total)
    {
        $this->container['detail_total'] = $detail_total;

        return $this;
    }

    /**
     * Gets detail_total_in_currency
     *
     * @return double
     */
    public function getDetailTotalInCurrency()
    {
        return $this->container['detail_total_in_currency'];
    }

    /**
     * Sets detail_total_in_currency
     *
     * @param double $detail_total_in_currency Background calculation giving you the Detail total in your default currency. This field is applicable if the amount is given in a another currency than your default.
     *
     * @return $this
     */
    public function setDetailTotalInCurrency($detail_total_in_currency)
    {
        $this->container['detail_total_in_currency'] = $detail_total_in_currency;

        return $this;
    }

    /**
     * Gets vat_taxable_total
     *
     * @return double
     */
    public function getVatTaxableTotal()
    {
        return $this->container['vat_taxable_total'];
    }

    /**
     * Sets vat_taxable_total
     *
     * @param double $vat_taxable_total The top part &gt; VAT taxable total &gt; The document total that is subjected to VAT.
     *
     * @return $this
     */
    public function setVatTaxableTotal($vat_taxable_total)
    {
        $this->container['vat_taxable_total'] = $vat_taxable_total;

        return $this;
    }

    /**
     * Gets vat_taxable_total_in_currency
     *
     * @return double
     */
    public function getVatTaxableTotalInCurrency()
    {
        return $this->container['vat_taxable_total_in_currency'];
    }

    /**
     * Sets vat_taxable_total_in_currency
     *
     * @param double $vat_taxable_total_in_currency Background calculation giving you the VAT taxable total in your default currency. This field is applicable if the amount is given in a another currency than your default.
     *
     * @return $this
     */
    public function setVatTaxableTotalInCurrency($vat_taxable_total_in_currency)
    {
        $this->container['vat_taxable_total_in_currency'] = $vat_taxable_total_in_currency;

        return $this;
    }

    /**
     * Gets vat_exempt_total
     *
     * @return double
     */
    public function getVatExemptTotal()
    {
        return $this->container['vat_exempt_total'];
    }

    /**
     * Sets vat_exempt_total
     *
     * @param double $vat_exempt_total The top part &gt; VAT exempt. total &gt; The document total that is exempt from VAT. This total is calculated as the taxable amount for the tax with the Include in VAT Exempt Total check box selected on the Taxes form.This box is available only if the VAT Reporting feature is enabled in your system.
     *
     * @return $this
     */
    public function setVatExemptTotal($vat_exempt_total)
    {
        $this->container['vat_exempt_total'] = $vat_exempt_total;

        return $this;
    }

    /**
     * Gets vat_exempt_total_in_currency
     *
     * @return double
     */
    public function getVatExemptTotalInCurrency()
    {
        return $this->container['vat_exempt_total_in_currency'];
    }

    /**
     * Sets vat_exempt_total_in_currency
     *
     * @param double $vat_exempt_total_in_currency Background calculation giving you the VAT exempt. total in your default currency. This field is applicable if the amount is given in a another currency than your default.
     *
     * @return $this
     */
    public function setVatExemptTotalInCurrency($vat_exempt_total_in_currency)
    {
        $this->container['vat_exempt_total_in_currency'] = $vat_exempt_total_in_currency;

        return $this;
    }

    /**
     * Gets sales_person_id
     *
     * @return int
     */
    public function getSalesPersonId()
    {
        return $this->container['sales_person_id'];
    }

    /**
     * Sets sales_person_id
     *
     * @param int $sales_person_id The field is deprecated for customer document endpoints, please use SalesPerson instead
     *
     * @return $this
     */
    public function setSalesPersonId($sales_person_id)
    {
        $this->container['sales_person_id'] = $sales_person_id;

        return $this;
    }

    /**
     * Gets sales_person_descr
     *
     * @return string
     */
    public function getSalesPersonDescr()
    {
        return $this->container['sales_person_descr'];
    }

    /**
     * Sets sales_person_descr
     *
     * @param string $sales_person_descr The field is deprecated for customer document endpoints, please use SalesPerson instead
     *
     * @return $this
     */
    public function setSalesPersonDescr($sales_person_descr)
    {
        $this->container['sales_person_descr'] = $sales_person_descr;

        return $this;
    }

    /**
     * Gets sales_person
     *
     * @return object
     */
    public function getSalesPerson()
    {
        return $this->container['sales_person'];
    }

    /**
     * Sets sales_person
     *
     * @param object $sales_person The document details tab &gt; Salesperson ID &gt; The salesperson involved.
     *
     * @return $this
     */
    public function setSalesPerson($sales_person)
    {
        $this->container['sales_person'] = $sales_person;

        return $this;
    }

    /**
     * Gets payment_reference
     *
     * @return string
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     *
     * @param string $payment_reference ///The top part &gt; Payment ref. &gt; The reference number of the document, as automatically generated by the system in accordance with the number series assigned to cash sales in the Customer ledger preferences window..
     *
     * @return $this
     */
    public function setPaymentReference($payment_reference)
    {
        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }

    /**
     * Gets invoice_address
     *
     * @return object
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoice_address'];
    }

    /**
     * Sets invoice_address
     *
     * @param object $invoice_address The Invoice address tab &gt; The Invoice address section.
     *
     * @return $this
     */
    public function setInvoiceAddress($invoice_address)
    {
        $this->container['invoice_address'] = $invoice_address;

        return $this;
    }

    /**
     * Gets invoice_contact
     *
     * @return object
     */
    public function getInvoiceContact()
    {
        return $this->container['invoice_contact'];
    }

    /**
     * Sets invoice_contact
     *
     * @param object $invoice_contact The Invoice address tab &gt; The Invoice contact section.
     *
     * @return $this
     */
    public function setInvoiceContact($invoice_contact)
    {
        $this->container['invoice_contact'] = $invoice_contact;

        return $this;
    }

    /**
     * Gets applications
     *
     * @return \Ekstralys\VismaNetApi\Model\ArAdjustDto[]
     */
    public function getApplications()
    {
        return $this->container['applications'];
    }

    /**
     * Sets applications
     *
     * @param \Ekstralys\VismaNetApi\Model\ArAdjustDto[] $applications applications
     *
     * @return $this
     */
    public function setApplications($applications)
    {
        $this->container['applications'] = $applications;

        return $this;
    }

    /**
     * Gets dont_print
     *
     * @return bool
     */
    public function getDontPrint()
    {
        return $this->container['dont_print'];
    }

    /**
     * Sets dont_print
     *
     * @param bool $dont_print dont_print
     *
     * @return $this
     */
    public function setDontPrint($dont_print)
    {
        $this->container['dont_print'] = $dont_print;

        return $this;
    }

    /**
     * Gets dont_email
     *
     * @return bool
     */
    public function getDontEmail()
    {
        return $this->container['dont_email'];
    }

    /**
     * Sets dont_email
     *
     * @param bool $dont_email dont_email
     *
     * @return $this
     */
    public function setDontEmail($dont_email)
    {
        $this->container['dont_email'] = $dont_email;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return object
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param object $customer The top part &gt; Customer &gt; The customer associated with the document.
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type The top part &gt; Type &gt; The document type. The following types are available: invoice, debit note, credit note, overdue charge, credit write-off
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($document_type) && !in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string $reference_number The Top part &gt; Ref. no. &gt; The reference number of the customer ledger document in the system.
     *
     * @return $this
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets post_period
     *
     * @return string
     */
    public function getPostPeriod()
    {
        return $this->container['post_period'];
    }

    /**
     * Sets post_period
     *
     * @param string $post_period The top part &gt; Post period &gt; The period to which the document should be posted. Format YYYYMM.
     *
     * @return $this
     */
    public function setPostPeriod($post_period)
    {
        $this->container['post_period'] = $post_period;

        return $this;
    }

    /**
     * Gets financial_period
     *
     * @return string
     */
    public function getFinancialPeriod()
    {
        return $this->container['financial_period'];
    }

    /**
     * Sets financial_period
     *
     * @param string $financial_period The financial period to which the transactions recorded in the document should be posted. Format YYYYMM.
     *
     * @return $this
     */
    public function setFinancialPeriod($financial_period)
    {
        $this->container['financial_period'] = $financial_period;

        return $this;
    }

    /**
     * Gets closed_financial_period
     *
     * @return string
     */
    public function getClosedFinancialPeriod()
    {
        return $this->container['closed_financial_period'];
    }

    /**
     * Sets closed_financial_period
     *
     * @param string $closed_financial_period Format YYYYMM.
     *
     * @return $this
     */
    public function setClosedFinancialPeriod($closed_financial_period)
    {
        $this->container['closed_financial_period'] = $closed_financial_period;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return \DateTime
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime $document_date The top part &gt; Date* &gt; The date when the customer ledger document was created.  By default, for a new document, it is the current business date, but you can change the date.
     *
     * @return $this
     */
    public function setDocumentDate($document_date)
    {
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets orig_invoice_date
     *
     * @return \DateTime
     */
    public function getOrigInvoiceDate()
    {
        return $this->container['orig_invoice_date'];
    }

    /**
     * Sets orig_invoice_date
     *
     * @param \DateTime $orig_invoice_date The top part &gt; Orig invoice date &gt; The date based on which the Due date and Cash discount date is calculated. Only used if setting \"Use Orig Invoice Date\" is active in AR Preferences.  By default, for a new document, it is the current business date, but you can change the date.
     *
     * @return $this
     */
    public function setOrigInvoiceDate($orig_invoice_date)
    {
        $this->container['orig_invoice_date'] = $orig_invoice_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The top part &gt; Status &gt; The status of the document, which can be one of the following: Hold, Balanced, Voided, Scheduled, Open, Closed, Pending print, Pending email.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id The top part &gt; Currency &gt; The currency of the document. By default, it is the customer’s default currency,but it can be changed if the Allow Currency Override check box is selected in the AR303000 window.
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount The top part &gt; Amount &gt; The amount paid by the document. The value appears for new documents if the Validate document totals on entry check box is selected on the AR101000 window.  If the check box is cleared, then the value appears when the document status is Open.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_in_currency
     *
     * @return double
     */
    public function getAmountInCurrency()
    {
        return $this->container['amount_in_currency'];
    }

    /**
     * Sets amount_in_currency
     *
     * @param double $amount_in_currency Background calculation giving you the Amount in your default currency. This field is applicable if the amount is given in a another currency than your default.
     *
     * @return $this
     */
    public function setAmountInCurrency($amount_in_currency)
    {
        $this->container['amount_in_currency'] = $amount_in_currency;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return double
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param double $balance The top part &gt; Balance &gt; For an open customer ledger document, the balance after any cash discount was taken.   For a document used in the application process, this is the balance after the payments were applied.
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets balance_in_currency
     *
     * @return double
     */
    public function getBalanceInCurrency()
    {
        return $this->container['balance_in_currency'];
    }

    /**
     * Sets balance_in_currency
     *
     * @param double $balance_in_currency Background calculation giving you the Balance in your default currency. This field is applicable if the amount is given in a another currency than your default.
     *
     * @return $this
     */
    public function setBalanceInCurrency($balance_in_currency)
    {
        $this->container['balance_in_currency'] = $balance_in_currency;

        return $this;
    }

    /**
     * Gets cash_discount
     *
     * @return double
     */
    public function getCashDiscount()
    {
        return $this->container['cash_discount'];
    }

    /**
     * Sets cash_discount
     *
     * @param double $cash_discount The top part &gt; Cash discount &gt; The cash discount amount that has been or will be taken on the document, which the system calculates based on the specified credit terms.
     *
     * @return $this
     */
    public function setCashDiscount($cash_discount)
    {
        $this->container['cash_discount'] = $cash_discount;

        return $this;
    }

    /**
     * Gets cash_discount_in_currency
     *
     * @return double
     */
    public function getCashDiscountInCurrency()
    {
        return $this->container['cash_discount_in_currency'];
    }

    /**
     * Sets cash_discount_in_currency
     *
     * @param double $cash_discount_in_currency Background calculation giving you the Cash discount in your default currency. This field is applicable if the amount is given in another currency than your default.
     *
     * @return $this
     */
    public function setCashDiscountInCurrency($cash_discount_in_currency)
    {
        $this->container['cash_discount_in_currency'] = $cash_discount_in_currency;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return object
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param object $payment_method The Financial details tab &gt; The Payment information section &gt; Payment method &gt; The identifier for the payment method that the customer will use to pay the document.
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets customer_ref_number
     *
     * @return string
     */
    public function getCustomerRefNumber()
    {
        return $this->container['customer_ref_number'];
    }

    /**
     * Sets customer_ref_number
     *
     * @param string $customer_ref_number The top part &gt; External reference &gt; The external reference used in AutoInvoice.
     *
     * @return $this
     */
    public function setCustomerRefNumber($customer_ref_number)
    {
        $this->container['customer_ref_number'] = $customer_ref_number;

        return $this;
    }

    /**
     * Gets invoice_text
     *
     * @return string
     */
    public function getInvoiceText()
    {
        return $this->container['invoice_text'];
    }

    /**
     * Sets invoice_text
     *
     * @param string $invoice_text The top part &gt; Invoice text &gt; Any user-provided description of the customer ledger document.
     *
     * @return $this
     */
    public function setInvoiceText($invoice_text)
    {
        $this->container['invoice_text'] = $invoice_text;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time System generated field for last modification date/time of document.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return \DateTime
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param \DateTime $created_date_time The Attachments tab &gt; Creation time &gt; The date the attachment was created.
     *
     * @return $this
     */
    public function setCreatedDateTime($created_date_time)
    {
        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Icon Notes on top of the window &gt; Pop-up window for providing any user-defined text connected to the document.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets vat_total
     *
     * @return double
     */
    public function getVatTotal()
    {
        return $this->container['vat_total'];
    }

    /**
     * Sets vat_total
     *
     * @param double $vat_total The top part &gt; VAT total &gt; The VAT amount of the document, as defined on the VAT details tab.
     *
     * @return $this
     */
    public function setVatTotal($vat_total)
    {
        $this->container['vat_total'] = $vat_total;

        return $this;
    }

    /**
     * Gets vat_total_in_currency
     *
     * @return double
     */
    public function getVatTotalInCurrency()
    {
        return $this->container['vat_total_in_currency'];
    }

    /**
     * Sets vat_total_in_currency
     *
     * @param double $vat_total_in_currency Background calculation giving you the VAT total in your default currency. This field is applicable if the amount is given in a another currency than your default.
     *
     * @return $this
     */
    public function setVatTotalInCurrency($vat_total_in_currency)
    {
        $this->container['vat_total_in_currency'] = $vat_total_in_currency;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location The top part &gt; Location &gt; The location of the customer related to the document. By default, it is the default  location of the selected customer or, if the invoice is created from an opportunity,  it is the customer location specified for the opportunity.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return object
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param object $branch_number The Financial details tab &gt; Branch &gt; The branch with which this invoice or memo is associated. The field is available if your company is set up with branches.
     *
     * @return $this
     */
    public function setBranchNumber($branch_number)
    {
        $this->container['branch_number'] = $branch_number;

        return $this;
    }

    /**
     * Gets cash_account
     *
     * @return string
     */
    public function getCashAccount()
    {
        return $this->container['cash_account'];
    }

    /**
     * Sets cash_account
     *
     * @param string $cash_account Financial details tab &gt; The payment information section &gt; Cash account &gt; The cash account associated with the payment method.
     *
     * @return $this
     */
    public function setCashAccount($cash_account)
    {
        $this->container['cash_account'] = $cash_account;

        return $this;
    }

    /**
     * Gets project
     *
     * @return object
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param object $project The top part &gt; Project* &gt; The identifier and description of the project with which this document is associated, or the code indicating that this document is not associated with any project; the non-project code is specified in the Project accounting preferences (PM101000) window.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets account
     *
     * @return object
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param object $account The Document details tab &gt;  Account * &gt; The sales account used for the transaction.
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets subaccount
     *
     * @return object
     */
    public function getSubaccount()
    {
        return $this->container['subaccount'];
    }

    /**
     * Sets subaccount
     *
     * @param object $subaccount The Document details tab &gt; Subaccount* &gt; The corresponding subaccount used for this transaction.
     *
     * @return $this
     */
    public function setSubaccount($subaccount)
    {
        $this->container['subaccount'] = $subaccount;

        return $this;
    }

    /**
     * Gets customer_project
     *
     * @return string
     */
    public function getCustomerProject()
    {
        return $this->container['customer_project'];
    }

    /**
     * Sets customer_project
     *
     * @param string $customer_project The top part &gt; Customer project no. &gt; The customer project no. used in AutoInvoice.
     *
     * @return $this
     */
    public function setCustomerProject($customer_project)
    {
        $this->container['customer_project'] = $customer_project;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


