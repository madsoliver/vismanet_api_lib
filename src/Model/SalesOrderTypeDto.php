<?php
/**
 * SalesOrderTypeDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * SalesOrderTypeDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a SOOrderType in SalesOrderTypeController. Used to get data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesOrderTypeDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesOrderTypeDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_type' => 'string',
        'active' => 'bool',
        'description' => 'string',
        'behavior' => 'string',
        'default_operation' => 'string',
        'customer_document_type' => 'string',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_type' => null,
        'active' => null,
        'description' => null,
        'behavior' => null,
        'default_operation' => null,
        'customer_document_type' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_type' => 'orderType',
        'active' => 'active',
        'description' => 'description',
        'behavior' => 'behavior',
        'default_operation' => 'defaultOperation',
        'customer_document_type' => 'customerDocumentType',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_type' => 'setOrderType',
        'active' => 'setActive',
        'description' => 'setDescription',
        'behavior' => 'setBehavior',
        'default_operation' => 'setDefaultOperation',
        'customer_document_type' => 'setCustomerDocumentType',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_type' => 'getOrderType',
        'active' => 'getActive',
        'description' => 'getDescription',
        'behavior' => 'getBehavior',
        'default_operation' => 'getDefaultOperation',
        'customer_document_type' => 'getCustomerDocumentType',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BEHAVIOR_SALES_ORDER = 'SalesOrder';
    const BEHAVIOR_INVOICE = 'Invoice';
    const BEHAVIOR_QUOTE = 'Quote';
    const BEHAVIOR_RMA_ORDER = 'RMAOrder';
    const BEHAVIOR_CREDIT_MEMO = 'CreditMemo';
    const DEFAULT_OPERATION_ISSUE = 'Issue';
    const DEFAULT_OPERATION_RECEIPT = 'Receipt';
    const CUSTOMER_DOCUMENT_TYPE_INVOICE = 'Invoice';
    const CUSTOMER_DOCUMENT_TYPE_DEBIT_MEMO = 'DebitMemo';
    const CUSTOMER_DOCUMENT_TYPE_CREDIT_MEMO = 'CreditMemo';
    const CUSTOMER_DOCUMENT_TYPE_CASH_SALE = 'CashSale';
    const CUSTOMER_DOCUMENT_TYPE_CASH_RETURN = 'CashReturn';
    const CUSTOMER_DOCUMENT_TYPE_NO_UPDATE = 'NoUpdate';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBehaviorAllowableValues()
    {
        return [
            self::BEHAVIOR_SALES_ORDER,
            self::BEHAVIOR_INVOICE,
            self::BEHAVIOR_QUOTE,
            self::BEHAVIOR_RMA_ORDER,
            self::BEHAVIOR_CREDIT_MEMO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultOperationAllowableValues()
    {
        return [
            self::DEFAULT_OPERATION_ISSUE,
            self::DEFAULT_OPERATION_RECEIPT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomerDocumentTypeAllowableValues()
    {
        return [
            self::CUSTOMER_DOCUMENT_TYPE_INVOICE,
            self::CUSTOMER_DOCUMENT_TYPE_DEBIT_MEMO,
            self::CUSTOMER_DOCUMENT_TYPE_CREDIT_MEMO,
            self::CUSTOMER_DOCUMENT_TYPE_CASH_SALE,
            self::CUSTOMER_DOCUMENT_TYPE_CASH_RETURN,
            self::CUSTOMER_DOCUMENT_TYPE_NO_UPDATE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['behavior'] = isset($data['behavior']) ? $data['behavior'] : null;
        $this->container['default_operation'] = isset($data['default_operation']) ? $data['default_operation'] : null;
        $this->container['customer_document_type'] = isset($data['customer_document_type']) ? $data['customer_document_type'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBehaviorAllowableValues();
        if (!is_null($this->container['behavior']) && !in_array($this->container['behavior'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'behavior', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultOperationAllowableValues();
        if (!is_null($this->container['default_operation']) && !in_array($this->container['default_operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'default_operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCustomerDocumentTypeAllowableValues();
        if (!is_null($this->container['customer_document_type']) && !in_array($this->container['customer_document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'customer_document_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string $order_type Mandatory field: The top part &gt; Order type* &gt; The ID of the order type, which is a two-character alphanumeric string.
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active The top part &gt; Active &gt; A check box that indicates (if selected) that the order type is active,
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The top part &gt; Description &gt; The brief description of the order type.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets behavior
     *
     * @return string
     */
    public function getBehavior()
    {
        return $this->container['behavior'];
    }

    /**
     * Sets behavior
     *
     * @param string $behavior Template settings tab &gt; Automation behaviour &gt; An automation behaviour is a set of automation steps. The type of automation behaviour used for the template, which can be Sales order, Invoice, Quote, Credit note, or RMA order.
     *
     * @return $this
     */
    public function setBehavior($behavior)
    {
        $allowedValues = $this->getBehaviorAllowableValues();
        if (!is_null($behavior) && !in_array($behavior, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'behavior', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['behavior'] = $behavior;

        return $this;
    }

    /**
     * Gets default_operation
     *
     * @return string
     */
    public function getDefaultOperation()
    {
        return $this->container['default_operation'];
    }

    /**
     * Sets default_operation
     *
     * @param string $default_operation Template settings tab &gt; Default operation &gt; The default inventory operation for the order type, which can be Receipt or Issue.
     *
     * @return $this
     */
    public function setDefaultOperation($default_operation)
    {
        $allowedValues = $this->getDefaultOperationAllowableValues();
        if (!is_null($default_operation) && !in_array($default_operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'default_operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_operation'] = $default_operation;

        return $this;
    }

    /**
     * Gets customer_document_type
     *
     * @return string
     */
    public function getCustomerDocumentType()
    {
        return $this->container['customer_document_type'];
    }

    /**
     * Sets customer_document_type
     *
     * @param string $customer_document_type Template settings tab &gt; Customer document type &gt; The type of customer ledger document to be generated on release of a document of this type.
     *
     * @return $this
     */
    public function setCustomerDocumentType($customer_document_type)
    {
        $allowedValues = $this->getCustomerDocumentTypeAllowableValues();
        if (!is_null($customer_document_type) && !in_array($customer_document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'customer_document_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customer_document_type'] = $customer_document_type;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


