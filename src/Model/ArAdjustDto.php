<?php
/**
 * ArAdjustDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * ArAdjustDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArAdjustDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArAdjustDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'doc_type' => 'string',
        'customer_cd' => 'string',
        'ref_nbr' => 'string',
        'amount_paid' => 'double',
        'cash_discount_taken' => 'double',
        'balance' => 'double',
        'pending_ppd' => 'bool',
        'released' => 'bool',
        'hold' => 'bool',
        'voided' => 'bool',
        'ppd_cr_memo_ref_nbr' => 'string',
        'payment_ref' => 'string',
        'status' => 'string',
        'application_date' => '\DateTime',
        'application_period' => 'string',
        'invoice_text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'doc_type' => null,
        'customer_cd' => null,
        'ref_nbr' => null,
        'amount_paid' => 'double',
        'cash_discount_taken' => 'double',
        'balance' => 'double',
        'pending_ppd' => null,
        'released' => null,
        'hold' => null,
        'voided' => null,
        'ppd_cr_memo_ref_nbr' => null,
        'payment_ref' => null,
        'status' => null,
        'application_date' => 'date-time',
        'application_period' => null,
        'invoice_text' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'doc_type' => 'docType',
        'customer_cd' => 'customerCD',
        'ref_nbr' => 'refNbr',
        'amount_paid' => 'amountPaid',
        'cash_discount_taken' => 'cashDiscountTaken',
        'balance' => 'balance',
        'pending_ppd' => 'pendingPPD',
        'released' => 'released',
        'hold' => 'hold',
        'voided' => 'voided',
        'ppd_cr_memo_ref_nbr' => 'ppdCrMemoRefNbr',
        'payment_ref' => 'paymentRef',
        'status' => 'status',
        'application_date' => 'applicationDate',
        'application_period' => 'applicationPeriod',
        'invoice_text' => 'invoiceText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'doc_type' => 'setDocType',
        'customer_cd' => 'setCustomerCd',
        'ref_nbr' => 'setRefNbr',
        'amount_paid' => 'setAmountPaid',
        'cash_discount_taken' => 'setCashDiscountTaken',
        'balance' => 'setBalance',
        'pending_ppd' => 'setPendingPpd',
        'released' => 'setReleased',
        'hold' => 'setHold',
        'voided' => 'setVoided',
        'ppd_cr_memo_ref_nbr' => 'setPpdCrMemoRefNbr',
        'payment_ref' => 'setPaymentRef',
        'status' => 'setStatus',
        'application_date' => 'setApplicationDate',
        'application_period' => 'setApplicationPeriod',
        'invoice_text' => 'setInvoiceText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'doc_type' => 'getDocType',
        'customer_cd' => 'getCustomerCd',
        'ref_nbr' => 'getRefNbr',
        'amount_paid' => 'getAmountPaid',
        'cash_discount_taken' => 'getCashDiscountTaken',
        'balance' => 'getBalance',
        'pending_ppd' => 'getPendingPpd',
        'released' => 'getReleased',
        'hold' => 'getHold',
        'voided' => 'getVoided',
        'ppd_cr_memo_ref_nbr' => 'getPpdCrMemoRefNbr',
        'payment_ref' => 'getPaymentRef',
        'status' => 'getStatus',
        'application_date' => 'getApplicationDate',
        'application_period' => 'getApplicationPeriod',
        'invoice_text' => 'getInvoiceText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['doc_type'] = isset($data['doc_type']) ? $data['doc_type'] : null;
        $this->container['customer_cd'] = isset($data['customer_cd']) ? $data['customer_cd'] : null;
        $this->container['ref_nbr'] = isset($data['ref_nbr']) ? $data['ref_nbr'] : null;
        $this->container['amount_paid'] = isset($data['amount_paid']) ? $data['amount_paid'] : null;
        $this->container['cash_discount_taken'] = isset($data['cash_discount_taken']) ? $data['cash_discount_taken'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['pending_ppd'] = isset($data['pending_ppd']) ? $data['pending_ppd'] : null;
        $this->container['released'] = isset($data['released']) ? $data['released'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['voided'] = isset($data['voided']) ? $data['voided'] : null;
        $this->container['ppd_cr_memo_ref_nbr'] = isset($data['ppd_cr_memo_ref_nbr']) ? $data['ppd_cr_memo_ref_nbr'] : null;
        $this->container['payment_ref'] = isset($data['payment_ref']) ? $data['payment_ref'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['application_date'] = isset($data['application_date']) ? $data['application_date'] : null;
        $this->container['application_period'] = isset($data['application_period']) ? $data['application_period'] : null;
        $this->container['invoice_text'] = isset($data['invoice_text']) ? $data['invoice_text'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets doc_type
     *
     * @return string
     */
    public function getDocType()
    {
        return $this->container['doc_type'];
    }

    /**
     * Sets doc_type
     *
     * @param string $doc_type doc_type
     *
     * @return $this
     */
    public function setDocType($doc_type)
    {
        $this->container['doc_type'] = $doc_type;

        return $this;
    }

    /**
     * Gets customer_cd
     *
     * @return string
     */
    public function getCustomerCd()
    {
        return $this->container['customer_cd'];
    }

    /**
     * Sets customer_cd
     *
     * @param string $customer_cd customer_cd
     *
     * @return $this
     */
    public function setCustomerCd($customer_cd)
    {
        $this->container['customer_cd'] = $customer_cd;

        return $this;
    }

    /**
     * Gets ref_nbr
     *
     * @return string
     */
    public function getRefNbr()
    {
        return $this->container['ref_nbr'];
    }

    /**
     * Sets ref_nbr
     *
     * @param string $ref_nbr ref_nbr
     *
     * @return $this
     */
    public function setRefNbr($ref_nbr)
    {
        $this->container['ref_nbr'] = $ref_nbr;

        return $this;
    }

    /**
     * Gets amount_paid
     *
     * @return double
     */
    public function getAmountPaid()
    {
        return $this->container['amount_paid'];
    }

    /**
     * Sets amount_paid
     *
     * @param double $amount_paid amount_paid
     *
     * @return $this
     */
    public function setAmountPaid($amount_paid)
    {
        $this->container['amount_paid'] = $amount_paid;

        return $this;
    }

    /**
     * Gets cash_discount_taken
     *
     * @return double
     */
    public function getCashDiscountTaken()
    {
        return $this->container['cash_discount_taken'];
    }

    /**
     * Sets cash_discount_taken
     *
     * @param double $cash_discount_taken cash_discount_taken
     *
     * @return $this
     */
    public function setCashDiscountTaken($cash_discount_taken)
    {
        $this->container['cash_discount_taken'] = $cash_discount_taken;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return double
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param double $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets pending_ppd
     *
     * @return bool
     */
    public function getPendingPpd()
    {
        return $this->container['pending_ppd'];
    }

    /**
     * Sets pending_ppd
     *
     * @param bool $pending_ppd pending_ppd
     *
     * @return $this
     */
    public function setPendingPpd($pending_ppd)
    {
        $this->container['pending_ppd'] = $pending_ppd;

        return $this;
    }

    /**
     * Gets released
     *
     * @return bool
     */
    public function getReleased()
    {
        return $this->container['released'];
    }

    /**
     * Sets released
     *
     * @param bool $released released
     *
     * @return $this
     */
    public function setReleased($released)
    {
        $this->container['released'] = $released;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return bool
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param bool $hold hold
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets voided
     *
     * @return bool
     */
    public function getVoided()
    {
        return $this->container['voided'];
    }

    /**
     * Sets voided
     *
     * @param bool $voided voided
     *
     * @return $this
     */
    public function setVoided($voided)
    {
        $this->container['voided'] = $voided;

        return $this;
    }

    /**
     * Gets ppd_cr_memo_ref_nbr
     *
     * @return string
     */
    public function getPpdCrMemoRefNbr()
    {
        return $this->container['ppd_cr_memo_ref_nbr'];
    }

    /**
     * Sets ppd_cr_memo_ref_nbr
     *
     * @param string $ppd_cr_memo_ref_nbr ppd_cr_memo_ref_nbr
     *
     * @return $this
     */
    public function setPpdCrMemoRefNbr($ppd_cr_memo_ref_nbr)
    {
        $this->container['ppd_cr_memo_ref_nbr'] = $ppd_cr_memo_ref_nbr;

        return $this;
    }

    /**
     * Gets payment_ref
     *
     * @return string
     */
    public function getPaymentRef()
    {
        return $this->container['payment_ref'];
    }

    /**
     * Sets payment_ref
     *
     * @param string $payment_ref payment_ref
     *
     * @return $this
     */
    public function setPaymentRef($payment_ref)
    {
        $this->container['payment_ref'] = $payment_ref;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets application_date
     *
     * @return \DateTime
     */
    public function getApplicationDate()
    {
        return $this->container['application_date'];
    }

    /**
     * Sets application_date
     *
     * @param \DateTime $application_date application_date
     *
     * @return $this
     */
    public function setApplicationDate($application_date)
    {
        $this->container['application_date'] = $application_date;

        return $this;
    }

    /**
     * Gets application_period
     *
     * @return string
     */
    public function getApplicationPeriod()
    {
        return $this->container['application_period'];
    }

    /**
     * Sets application_period
     *
     * @param string $application_period application_period
     *
     * @return $this
     */
    public function setApplicationPeriod($application_period)
    {
        $this->container['application_period'] = $application_period;

        return $this;
    }

    /**
     * Gets invoice_text
     *
     * @return string
     */
    public function getInvoiceText()
    {
        return $this->container['invoice_text'];
    }

    /**
     * Sets invoice_text
     *
     * @param string $invoice_text invoice_text
     *
     * @return $this
     */
    public function setInvoiceText($invoice_text)
    {
        $this->container['invoice_text'] = $invoice_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


