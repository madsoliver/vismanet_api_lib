<?php
/**
 * AttributeDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * AttributeDto Class Doc Comment
 *
 * @category Class
 * @description This class represents an attribute in AttributeController. Used for getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AttributeDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AttributeDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attribute_id' => 'string',
        'description' => 'string',
        'control_type' => 'string',
        'internal' => 'bool',
        'entry_mask' => 'string',
        'reg_exp' => 'string',
        'details' => '\Ekstralys\VismaNetApi\Model\AttributeDetailDto[]',
        'created_date_time' => '\DateTime',
        'last_modified_date_time' => '\DateTime',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attribute_id' => null,
        'description' => null,
        'control_type' => null,
        'internal' => null,
        'entry_mask' => null,
        'reg_exp' => null,
        'details' => null,
        'created_date_time' => 'date-time',
        'last_modified_date_time' => 'date-time',
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attribute_id' => 'attributeID',
        'description' => 'description',
        'control_type' => 'controlType',
        'internal' => 'internal',
        'entry_mask' => 'entryMask',
        'reg_exp' => 'regExp',
        'details' => 'details',
        'created_date_time' => 'createdDateTime',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attribute_id' => 'setAttributeId',
        'description' => 'setDescription',
        'control_type' => 'setControlType',
        'internal' => 'setInternal',
        'entry_mask' => 'setEntryMask',
        'reg_exp' => 'setRegExp',
        'details' => 'setDetails',
        'created_date_time' => 'setCreatedDateTime',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attribute_id' => 'getAttributeId',
        'description' => 'getDescription',
        'control_type' => 'getControlType',
        'internal' => 'getInternal',
        'entry_mask' => 'getEntryMask',
        'reg_exp' => 'getRegExp',
        'details' => 'getDetails',
        'created_date_time' => 'getCreatedDateTime',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONTROL_TYPE_TEXT = 'Text';
    const CONTROL_TYPE_COMBO = 'Combo';
    const CONTROL_TYPE_MULTI_SELECT_COMBO = 'MultiSelectCombo';
    const CONTROL_TYPE_LOOKUP = 'Lookup';
    const CONTROL_TYPE_CHECKBOX = 'Checkbox';
    const CONTROL_TYPE_DATETIME = 'Datetime';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getControlTypeAllowableValues()
    {
        return [
            self::CONTROL_TYPE_TEXT,
            self::CONTROL_TYPE_COMBO,
            self::CONTROL_TYPE_MULTI_SELECT_COMBO,
            self::CONTROL_TYPE_LOOKUP,
            self::CONTROL_TYPE_CHECKBOX,
            self::CONTROL_TYPE_DATETIME,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attribute_id'] = isset($data['attribute_id']) ? $data['attribute_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['control_type'] = isset($data['control_type']) ? $data['control_type'] : null;
        $this->container['internal'] = isset($data['internal']) ? $data['internal'] : null;
        $this->container['entry_mask'] = isset($data['entry_mask']) ? $data['entry_mask'] : null;
        $this->container['reg_exp'] = isset($data['reg_exp']) ? $data['reg_exp'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['created_date_time'] = isset($data['created_date_time']) ? $data['created_date_time'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getControlTypeAllowableValues();
        if (!is_null($this->container['control_type']) && !in_array($this->container['control_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'control_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attribute_id
     *
     * @return string
     */
    public function getAttributeId()
    {
        return $this->container['attribute_id'];
    }

    /**
     * Sets attribute_id
     *
     * @param string $attribute_id attribute_id
     *
     * @return $this
     */
    public function setAttributeId($attribute_id)
    {
        $this->container['attribute_id'] = $attribute_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets control_type
     *
     * @return string
     */
    public function getControlType()
    {
        return $this->container['control_type'];
    }

    /**
     * Sets control_type
     *
     * @param string $control_type control_type
     *
     * @return $this
     */
    public function setControlType($control_type)
    {
        $allowedValues = $this->getControlTypeAllowableValues();
        if (!is_null($control_type) && !in_array($control_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'control_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['control_type'] = $control_type;

        return $this;
    }

    /**
     * Gets internal
     *
     * @return bool
     */
    public function getInternal()
    {
        return $this->container['internal'];
    }

    /**
     * Sets internal
     *
     * @param bool $internal internal
     *
     * @return $this
     */
    public function setInternal($internal)
    {
        $this->container['internal'] = $internal;

        return $this;
    }

    /**
     * Gets entry_mask
     *
     * @return string
     */
    public function getEntryMask()
    {
        return $this->container['entry_mask'];
    }

    /**
     * Sets entry_mask
     *
     * @param string $entry_mask entry_mask
     *
     * @return $this
     */
    public function setEntryMask($entry_mask)
    {
        $this->container['entry_mask'] = $entry_mask;

        return $this;
    }

    /**
     * Gets reg_exp
     *
     * @return string
     */
    public function getRegExp()
    {
        return $this->container['reg_exp'];
    }

    /**
     * Sets reg_exp
     *
     * @param string $reg_exp reg_exp
     *
     * @return $this
     */
    public function setRegExp($reg_exp)
    {
        $this->container['reg_exp'] = $reg_exp;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Ekstralys\VismaNetApi\Model\AttributeDetailDto[]
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Ekstralys\VismaNetApi\Model\AttributeDetailDto[] $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return \DateTime
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param \DateTime $created_date_time created_date_time
     *
     * @return $this
     */
    public function setCreatedDateTime($created_date_time)
    {
        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time last_modified_date_time
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


