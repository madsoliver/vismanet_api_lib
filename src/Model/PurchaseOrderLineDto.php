<?php
/**
 * PurchaseOrderLineDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * PurchaseOrderLineDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a Purchase Order Line in PurchaseOrderController. Used for getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseOrderLineDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseOrderLineDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_nbr' => 'int',
        'branch' => 'object',
        'inventory' => 'object',
        'line_type' => 'string',
        'warehouse' => 'object',
        'line_description' => 'string',
        'uom' => 'string',
        'order_qty' => 'double',
        'qty_on_receipts' => 'double',
        'unit_cost' => 'double',
        'unit_cost_in_base_currency' => 'double',
        'ext_cost' => 'double',
        'discount_percent' => 'double',
        'discount_amount' => 'double',
        'manual_discount' => 'bool',
        'discount_code' => 'object',
        'amount' => 'double',
        'received_amt' => 'double',
        'alternate_id' => 'string',
        'min_receipt' => 'double',
        'max_receipt' => 'double',
        'complete_on' => 'double',
        'receipt_action' => 'string',
        'tax_category' => 'object',
        'account' => 'object',
        'sub' => 'object',
        'project' => 'object',
        'project_task' => 'object',
        'requested' => '\DateTime',
        'promised' => '\DateTime',
        'completed' => 'bool',
        'canceled' => 'bool',
        'order_type' => 'string',
        'order_number' => 'string',
        'note' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_nbr' => 'int32',
        'branch' => null,
        'inventory' => null,
        'line_type' => null,
        'warehouse' => null,
        'line_description' => null,
        'uom' => null,
        'order_qty' => 'double',
        'qty_on_receipts' => 'double',
        'unit_cost' => 'double',
        'unit_cost_in_base_currency' => 'double',
        'ext_cost' => 'double',
        'discount_percent' => 'double',
        'discount_amount' => 'double',
        'manual_discount' => null,
        'discount_code' => null,
        'amount' => 'double',
        'received_amt' => 'double',
        'alternate_id' => null,
        'min_receipt' => 'double',
        'max_receipt' => 'double',
        'complete_on' => 'double',
        'receipt_action' => null,
        'tax_category' => null,
        'account' => null,
        'sub' => null,
        'project' => null,
        'project_task' => null,
        'requested' => 'date-time',
        'promised' => 'date-time',
        'completed' => null,
        'canceled' => null,
        'order_type' => null,
        'order_number' => null,
        'note' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_nbr' => 'lineNbr',
        'branch' => 'branch',
        'inventory' => 'inventory',
        'line_type' => 'lineType',
        'warehouse' => 'warehouse',
        'line_description' => 'lineDescription',
        'uom' => 'uom',
        'order_qty' => 'orderQty',
        'qty_on_receipts' => 'qtyOnReceipts',
        'unit_cost' => 'unitCost',
        'unit_cost_in_base_currency' => 'unitCostInBaseCurrency',
        'ext_cost' => 'extCost',
        'discount_percent' => 'discountPercent',
        'discount_amount' => 'discountAmount',
        'manual_discount' => 'manualDiscount',
        'discount_code' => 'discountCode',
        'amount' => 'amount',
        'received_amt' => 'receivedAmt',
        'alternate_id' => 'alternateId',
        'min_receipt' => 'minReceipt',
        'max_receipt' => 'maxReceipt',
        'complete_on' => 'completeOn',
        'receipt_action' => 'receiptAction',
        'tax_category' => 'taxCategory',
        'account' => 'account',
        'sub' => 'sub',
        'project' => 'project',
        'project_task' => 'projectTask',
        'requested' => 'requested',
        'promised' => 'promised',
        'completed' => 'completed',
        'canceled' => 'canceled',
        'order_type' => 'orderType',
        'order_number' => 'orderNumber',
        'note' => 'note'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_nbr' => 'setLineNbr',
        'branch' => 'setBranch',
        'inventory' => 'setInventory',
        'line_type' => 'setLineType',
        'warehouse' => 'setWarehouse',
        'line_description' => 'setLineDescription',
        'uom' => 'setUom',
        'order_qty' => 'setOrderQty',
        'qty_on_receipts' => 'setQtyOnReceipts',
        'unit_cost' => 'setUnitCost',
        'unit_cost_in_base_currency' => 'setUnitCostInBaseCurrency',
        'ext_cost' => 'setExtCost',
        'discount_percent' => 'setDiscountPercent',
        'discount_amount' => 'setDiscountAmount',
        'manual_discount' => 'setManualDiscount',
        'discount_code' => 'setDiscountCode',
        'amount' => 'setAmount',
        'received_amt' => 'setReceivedAmt',
        'alternate_id' => 'setAlternateId',
        'min_receipt' => 'setMinReceipt',
        'max_receipt' => 'setMaxReceipt',
        'complete_on' => 'setCompleteOn',
        'receipt_action' => 'setReceiptAction',
        'tax_category' => 'setTaxCategory',
        'account' => 'setAccount',
        'sub' => 'setSub',
        'project' => 'setProject',
        'project_task' => 'setProjectTask',
        'requested' => 'setRequested',
        'promised' => 'setPromised',
        'completed' => 'setCompleted',
        'canceled' => 'setCanceled',
        'order_type' => 'setOrderType',
        'order_number' => 'setOrderNumber',
        'note' => 'setNote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_nbr' => 'getLineNbr',
        'branch' => 'getBranch',
        'inventory' => 'getInventory',
        'line_type' => 'getLineType',
        'warehouse' => 'getWarehouse',
        'line_description' => 'getLineDescription',
        'uom' => 'getUom',
        'order_qty' => 'getOrderQty',
        'qty_on_receipts' => 'getQtyOnReceipts',
        'unit_cost' => 'getUnitCost',
        'unit_cost_in_base_currency' => 'getUnitCostInBaseCurrency',
        'ext_cost' => 'getExtCost',
        'discount_percent' => 'getDiscountPercent',
        'discount_amount' => 'getDiscountAmount',
        'manual_discount' => 'getManualDiscount',
        'discount_code' => 'getDiscountCode',
        'amount' => 'getAmount',
        'received_amt' => 'getReceivedAmt',
        'alternate_id' => 'getAlternateId',
        'min_receipt' => 'getMinReceipt',
        'max_receipt' => 'getMaxReceipt',
        'complete_on' => 'getCompleteOn',
        'receipt_action' => 'getReceiptAction',
        'tax_category' => 'getTaxCategory',
        'account' => 'getAccount',
        'sub' => 'getSub',
        'project' => 'getProject',
        'project_task' => 'getProjectTask',
        'requested' => 'getRequested',
        'promised' => 'getPromised',
        'completed' => 'getCompleted',
        'canceled' => 'getCanceled',
        'order_type' => 'getOrderType',
        'order_number' => 'getOrderNumber',
        'note' => 'getNote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LINE_TYPE_GOODS_FOR_INVENTORY = 'GoodsForInventory';
    const LINE_TYPE_GOODS_FOR_SALES_ORDER = 'GoodsForSalesOrder';
    const LINE_TYPE_GOODS_FOR_REPLENISHMENT = 'GoodsForReplenishment';
    const LINE_TYPE_GOODS_FOR_DROP_SHIP = 'GoodsForDropShip';
    const LINE_TYPE_NON_STOCK_FOR_DROP_SHIP = 'NonStockForDropShip';
    const LINE_TYPE_NON_STOCK_FOR_SALES_ORDER = 'NonStockForSalesOrder';
    const LINE_TYPE_NON_STOCK = 'NonStock';
    const LINE_TYPE_SERVICE = 'Service';
    const LINE_TYPE_FREIGHT = 'Freight';
    const LINE_TYPE_DESCRIPTION = 'Description';
    const RECEIPT_ACTION_REJECT = 'Reject';
    const RECEIPT_ACTION_ACCEPT_BUT_WARN = 'AcceptButWarn';
    const RECEIPT_ACTION_ACCEPT = 'Accept';
    const ORDER_TYPE_REGULAR_ORDER = 'RegularOrder';
    const ORDER_TYPE_DROP_SHIP = 'DropShip';
    const ORDER_TYPE_BLANKET = 'Blanket';
    const ORDER_TYPE_STANDARD_BLANKET = 'StandardBlanket';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLineTypeAllowableValues()
    {
        return [
            self::LINE_TYPE_GOODS_FOR_INVENTORY,
            self::LINE_TYPE_GOODS_FOR_SALES_ORDER,
            self::LINE_TYPE_GOODS_FOR_REPLENISHMENT,
            self::LINE_TYPE_GOODS_FOR_DROP_SHIP,
            self::LINE_TYPE_NON_STOCK_FOR_DROP_SHIP,
            self::LINE_TYPE_NON_STOCK_FOR_SALES_ORDER,
            self::LINE_TYPE_NON_STOCK,
            self::LINE_TYPE_SERVICE,
            self::LINE_TYPE_FREIGHT,
            self::LINE_TYPE_DESCRIPTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReceiptActionAllowableValues()
    {
        return [
            self::RECEIPT_ACTION_REJECT,
            self::RECEIPT_ACTION_ACCEPT_BUT_WARN,
            self::RECEIPT_ACTION_ACCEPT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderTypeAllowableValues()
    {
        return [
            self::ORDER_TYPE_REGULAR_ORDER,
            self::ORDER_TYPE_DROP_SHIP,
            self::ORDER_TYPE_BLANKET,
            self::ORDER_TYPE_STANDARD_BLANKET,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_nbr'] = isset($data['line_nbr']) ? $data['line_nbr'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['inventory'] = isset($data['inventory']) ? $data['inventory'] : null;
        $this->container['line_type'] = isset($data['line_type']) ? $data['line_type'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['line_description'] = isset($data['line_description']) ? $data['line_description'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['order_qty'] = isset($data['order_qty']) ? $data['order_qty'] : null;
        $this->container['qty_on_receipts'] = isset($data['qty_on_receipts']) ? $data['qty_on_receipts'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['unit_cost_in_base_currency'] = isset($data['unit_cost_in_base_currency']) ? $data['unit_cost_in_base_currency'] : null;
        $this->container['ext_cost'] = isset($data['ext_cost']) ? $data['ext_cost'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['manual_discount'] = isset($data['manual_discount']) ? $data['manual_discount'] : null;
        $this->container['discount_code'] = isset($data['discount_code']) ? $data['discount_code'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['received_amt'] = isset($data['received_amt']) ? $data['received_amt'] : null;
        $this->container['alternate_id'] = isset($data['alternate_id']) ? $data['alternate_id'] : null;
        $this->container['min_receipt'] = isset($data['min_receipt']) ? $data['min_receipt'] : null;
        $this->container['max_receipt'] = isset($data['max_receipt']) ? $data['max_receipt'] : null;
        $this->container['complete_on'] = isset($data['complete_on']) ? $data['complete_on'] : null;
        $this->container['receipt_action'] = isset($data['receipt_action']) ? $data['receipt_action'] : null;
        $this->container['tax_category'] = isset($data['tax_category']) ? $data['tax_category'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['sub'] = isset($data['sub']) ? $data['sub'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['project_task'] = isset($data['project_task']) ? $data['project_task'] : null;
        $this->container['requested'] = isset($data['requested']) ? $data['requested'] : null;
        $this->container['promised'] = isset($data['promised']) ? $data['promised'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['canceled'] = isset($data['canceled']) ? $data['canceled'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLineTypeAllowableValues();
        if (!is_null($this->container['line_type']) && !in_array($this->container['line_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'line_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReceiptActionAllowableValues();
        if (!is_null($this->container['receipt_action']) && !in_array($this->container['receipt_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'receipt_action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($this->container['order_type']) && !in_array($this->container['order_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_nbr
     *
     * @return int
     */
    public function getLineNbr()
    {
        return $this->container['line_nbr'];
    }

    /**
     * Sets line_nbr
     *
     * @param int $line_nbr The line number
     *
     * @return $this
     */
    public function setLineNbr($line_nbr)
    {
        $this->container['line_nbr'] = $line_nbr;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return object
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param object $branch Branch &gt; The branch associated with the purchase order.
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return object
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param object $inventory Item ID &gt; The ID of the item.
     *
     * @return $this
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets line_type
     *
     * @return string
     */
    public function getLineType()
    {
        return $this->container['line_type'];
    }

    /**
     * Sets line_type
     *
     * @param string $line_type Line type &gt;  The type of the order line, which can be one of the following options: Goods for inventory, Non-stock, Service, Freight, Good for sales order, Non-stock for drop-ship, Drop-ship, Goods for RP, Description.
     *
     * @return $this
     */
    public function setLineType($line_type)
    {
        $allowedValues = $this->getLineTypeAllowableValues();
        if (!is_null($line_type) && !in_array($line_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'line_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['line_type'] = $line_type;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return object
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param object $warehouse Warehouse &gt; The warehouse to receive the item listed on the order.
     *
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets line_description
     *
     * @return string
     */
    public function getLineDescription()
    {
        return $this->container['line_description'];
    }

    /**
     * Sets line_description
     *
     * @param string $line_description A description of the order line, which is copied from the item's description.
     *
     * @return $this
     */
    public function setLineDescription($line_description)
    {
        $this->container['line_description'] = $line_description;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return string
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param string $uom UoM &gt; The unit of measure (UoM) in which the quantity of the item is specified.
     *
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets order_qty
     *
     * @return double
     */
    public function getOrderQty()
    {
        return $this->container['order_qty'];
    }

    /**
     * Sets order_qty
     *
     * @param double $order_qty Order qty. &gt; The quantity of the item that has been ordered.
     *
     * @return $this
     */
    public function setOrderQty($order_qty)
    {
        $this->container['order_qty'] = $order_qty;

        return $this;
    }

    /**
     * Gets qty_on_receipts
     *
     * @return double
     */
    public function getQtyOnReceipts()
    {
        return $this->container['qty_on_receipts'];
    }

    /**
     * Sets qty_on_receipts
     *
     * @param double $qty_on_receipts Qty. on receipts &gt; The quantity of the item that has been received according to all receipts, including the unreleased ones.
     *
     * @return $this
     */
    public function setQtyOnReceipts($qty_on_receipts)
    {
        $this->container['qty_on_receipts'] = $qty_on_receipts;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return double
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param double $unit_cost Unit cost &gt; The cost per UoM of the stock item.
     *
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets unit_cost_in_base_currency
     *
     * @return double
     */
    public function getUnitCostInBaseCurrency()
    {
        return $this->container['unit_cost_in_base_currency'];
    }

    /**
     * Sets unit_cost_in_base_currency
     *
     * @param double $unit_cost_in_base_currency Background calculation connected with the View base/View currency function in the top part. Changes the values in Unit cost, Amount, Disc. unit cost and Cost fields.
     *
     * @return $this
     */
    public function setUnitCostInBaseCurrency($unit_cost_in_base_currency)
    {
        $this->container['unit_cost_in_base_currency'] = $unit_cost_in_base_currency;

        return $this;
    }

    /**
     * Gets ext_cost
     *
     * @return double
     */
    public function getExtCost()
    {
        return $this->container['ext_cost'];
    }

    /**
     * Sets ext_cost
     *
     * @param double $ext_cost Ext. cost &gt; The extended cost of the item, which is the unit cost multiplied by the quantity.
     *
     * @return $this
     */
    public function setExtCost($ext_cost)
    {
        $this->container['ext_cost'] = $ext_cost;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return double
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param double $discount_percent Discount percent &gt; If the Supplier customer discounts functionality is enabled in the Enable/disable functionalities (CS100000) window, the percent of the discount that has been entered manually or calculated based on the discount amount entered manually for this line item.
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return double
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param double $discount_amount Discount amount &gt; If the Supplier customer discounts functionality is enabled in the Enable/disable functionalities (CS100000) window, the amount of the discount that has been specified manually or calculated based on the discount percent entered manually.
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets manual_discount
     *
     * @return bool
     */
    public function getManualDiscount()
    {
        return $this->container['manual_discount'];
    }

    /**
     * Sets manual_discount
     *
     * @param bool $manual_discount Manual discount &gt; A check box that indicates (if selected) that the discount has been applied manually.
     *
     * @return $this
     */
    public function setManualDiscount($manual_discount)
    {
        $this->container['manual_discount'] = $manual_discount;

        return $this;
    }

    /**
     * Gets discount_code
     *
     * @return object
     */
    public function getDiscountCode()
    {
        return $this->container['discount_code'];
    }

    /**
     * Sets discount_code
     *
     * @param object $discount_code Discount code &gt; The code of the line discount that has been applied to this line automatically.
     *
     * @return $this
     */
    public function setDiscountCode($discount_code)
    {
        $this->container['discount_code'] = $discount_code;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount Amount &gt; The amount calculated (after the discount has been taken) for the item.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets received_amt
     *
     * @return double
     */
    public function getReceivedAmt()
    {
        return $this->container['received_amt'];
    }

    /**
     * Sets received_amt
     *
     * @param double $received_amt Received amt. &gt; The amount received on this purchase order for this item.
     *
     * @return $this
     */
    public function setReceivedAmt($received_amt)
    {
        $this->container['received_amt'] = $received_amt;

        return $this;
    }

    /**
     * Gets alternate_id
     *
     * @return string
     */
    public function getAlternateId()
    {
        return $this->container['alternate_id'];
    }

    /**
     * Sets alternate_id
     *
     * @param string $alternate_id Alternate ID &gt; The alternate ID used for this stock item-subitem pair by the supplier.
     *
     * @return $this
     */
    public function setAlternateId($alternate_id)
    {
        $this->container['alternate_id'] = $alternate_id;

        return $this;
    }

    /**
     * Gets min_receipt
     *
     * @return double
     */
    public function getMinReceipt()
    {
        return $this->container['min_receipt'];
    }

    /**
     * Sets min_receipt
     *
     * @param double $min_receipt Min. receipt (%) &gt; The minimum quantity of the item, expressed as a percentage of the ordered quantity, that is required for the item to be accepted at the warehouse if the Receipt action is Rejected.
     *
     * @return $this
     */
    public function setMinReceipt($min_receipt)
    {
        $this->container['min_receipt'] = $min_receipt;

        return $this;
    }

    /**
     * Gets max_receipt
     *
     * @return double
     */
    public function getMaxReceipt()
    {
        return $this->container['max_receipt'];
    }

    /**
     * Sets max_receipt
     *
     * @param double $max_receipt Max. receipt (%) &gt; The maximum quantity of the item, expressed as a percentage of the ordered quantity, that is required for the item to be accepted at the warehouse if the Receipt action is Rejected.
     *
     * @return $this
     */
    public function setMaxReceipt($max_receipt)
    {
        $this->container['max_receipt'] = $max_receipt;

        return $this;
    }

    /**
     * Gets complete_on
     *
     * @return double
     */
    public function getCompleteOn()
    {
        return $this->container['complete_on'];
    }

    /**
     * Sets complete_on
     *
     * @param double $complete_on Complete on (%) &gt; The minimum percentage of the ordered quantity for the stock item that must be received to complete the purchase order line (gets the default value from the Threshold receipt (%) setting of the supplier in the (AP303000) window).
     *
     * @return $this
     */
    public function setCompleteOn($complete_on)
    {
        $this->container['complete_on'] = $complete_on;

        return $this;
    }

    /**
     * Gets receipt_action
     *
     * @return string
     */
    public function getReceiptAction()
    {
        return $this->container['receipt_action'];
    }

    /**
     * Sets receipt_action
     *
     * @param string $receipt_action Receipt action &gt; The action that should be perform when the ordered item is received if its quantity is greater than the Max. receipt value or less than the Min. receipt value calculated based on the line's ordered quantity. Values: Reject, Accept but warn, Accept.
     *
     * @return $this
     */
    public function setReceiptAction($receipt_action)
    {
        $allowedValues = $this->getReceiptActionAllowableValues();
        if (!is_null($receipt_action) && !in_array($receipt_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'receipt_action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['receipt_action'] = $receipt_action;

        return $this;
    }

    /**
     * Gets tax_category
     *
     * @return object
     */
    public function getTaxCategory()
    {
        return $this->container['tax_category'];
    }

    /**
     * Sets tax_category
     *
     * @param object $tax_category VAT category &gt; The VAT category assigned to the ordered stock item.
     *
     * @return $this
     */
    public function setTaxCategory($tax_category)
    {
        $this->container['tax_category'] = $tax_category;

        return $this;
    }

    /**
     * Gets account
     *
     * @return object
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param object $account Account &gt; The expense account used to record the purchased non-stock item that does not require receipt (by default, the account specified for the item in the Combine COGS/expense sub. from field in the Posting classes (IN206000) window).
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets sub
     *
     * @return object
     */
    public function getSub()
    {
        return $this->container['sub'];
    }

    /**
     * Sets sub
     *
     * @param object $sub Sub. ID &gt; The subaccount used to record the purchased non-stock item that does not require receipt (by default, the subaccount generated in accordance with the rule defined in the Combine COGS/expense sub. from field in the Posting classes (IN206000) window).
     *
     * @return $this
     */
    public function setSub($sub)
    {
        $this->container['sub'] = $sub;

        return $this;
    }

    /**
     * Gets project
     *
     * @return object
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param object $project Project &gt; The project with which this purchase order line is associated.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets project_task
     *
     * @return object
     */
    public function getProjectTask()
    {
        return $this->container['project_task'];
    }

    /**
     * Sets project_task
     *
     * @param object $project_task Project task &gt; The project task with which this purchase order is associated.
     *
     * @return $this
     */
    public function setProjectTask($project_task)
    {
        $this->container['project_task'] = $project_task;

        return $this;
    }

    /**
     * Gets requested
     *
     * @return \DateTime
     */
    public function getRequested()
    {
        return $this->container['requested'];
    }

    /**
     * Sets requested
     *
     * @param \DateTime $requested Requested &gt; The date when the item was requested.
     *
     * @return $this
     */
    public function setRequested($requested)
    {
        $this->container['requested'] = $requested;

        return $this;
    }

    /**
     * Gets promised
     *
     * @return \DateTime
     */
    public function getPromised()
    {
        return $this->container['promised'];
    }

    /**
     * Sets promised
     *
     * @param \DateTime $promised Promised &gt; The date when the item's deliver was promised.
     *
     * @return $this
     */
    public function setPromised($promised)
    {
        $this->container['promised'] = $promised;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed Completed &gt; A check box that indicates (if selected) that the purchasing of the item requested by this line of the purchase order has been completed.
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets canceled
     *
     * @return bool
     */
    public function getCanceled()
    {
        return $this->container['canceled'];
    }

    /**
     * Sets canceled
     *
     * @param bool $canceled Cancelled &gt; A check box that indicates (if selected) that this line of the purchase order has been cancelled.
     *
     * @return $this
     */
    public function setCanceled($canceled)
    {
        $this->container['canceled'] = $canceled;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string $order_type Order type &gt; The order type this order is related to (for normal orders based on blanket or standard orders).
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($order_type) && !in_array($order_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number Order no. &gt;  The reference number of the blanket or standard order (for normal orders based on blanket or standard orders).
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Table &gt; Icon Notes &gt; Pop-up window for providing any user-defined text connected to the order.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


