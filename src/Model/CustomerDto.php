<?php
/**
 * CustomerDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * CustomerDto Class Doc Comment
 *
 * @category Class
 * @description This class represents a customer in CustomerController. Used by getting data.
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'internal_id' => 'int',
        'number' => 'string',
        'name' => 'string',
        'status' => 'string',
        'main_address' => 'object',
        'main_contact' => 'object',
        'account_reference' => 'string',
        'parent_record' => 'object',
        'customer_class' => 'object',
        'credit_terms' => 'object',
        'currency_id' => 'string',
        'credit_verification' => 'string',
        'credit_limit' => 'double',
        'credit_days_past_due' => 'int',
        'invoice_address' => 'object',
        'invoice_contact' => 'object',
        'print_invoices' => 'bool',
        'accept_auto_invoices' => 'bool',
        'send_invoices_by_email' => 'bool',
        'print_statements' => 'bool',
        'send_statements_by_email' => 'bool',
        'print_multi_currency_statements' => 'bool',
        'statement_type' => 'string',
        'delivery_address' => 'object',
        'delivery_contact' => 'object',
        'vat_registration_id' => 'string',
        'corporate_id' => 'string',
        'gln' => 'string',
        'vat_zone' => 'object',
        'location' => 'object',
        'attributes' => '\Ekstralys\VismaNetApi\Model\AttributeIdValueDto[]',
        'last_modified_date_time' => '\DateTime',
        'created_date_time' => '\DateTime',
        'direct_debit_lines' => '\Ekstralys\VismaNetApi\Model\CustomerDirectDebitDto[]',
        'price_class' => 'object',
        'gl_accounts' => 'object',
        'invoice_to_default_location' => 'bool',
        'e_invoice_contract' => 'object',
        'payment_methods' => '\Ekstralys\VismaNetApi\Model\CustomerPaymentMethodInfoDto[]',
        'default_payment_method_id' => 'string',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'internal_id' => 'int32',
        'number' => null,
        'name' => null,
        'status' => null,
        'main_address' => null,
        'main_contact' => null,
        'account_reference' => null,
        'parent_record' => null,
        'customer_class' => null,
        'credit_terms' => null,
        'currency_id' => null,
        'credit_verification' => null,
        'credit_limit' => 'double',
        'credit_days_past_due' => 'int32',
        'invoice_address' => null,
        'invoice_contact' => null,
        'print_invoices' => null,
        'accept_auto_invoices' => null,
        'send_invoices_by_email' => null,
        'print_statements' => null,
        'send_statements_by_email' => null,
        'print_multi_currency_statements' => null,
        'statement_type' => null,
        'delivery_address' => null,
        'delivery_contact' => null,
        'vat_registration_id' => null,
        'corporate_id' => null,
        'gln' => null,
        'vat_zone' => null,
        'location' => null,
        'attributes' => null,
        'last_modified_date_time' => 'date-time',
        'created_date_time' => 'date-time',
        'direct_debit_lines' => null,
        'price_class' => null,
        'gl_accounts' => null,
        'invoice_to_default_location' => null,
        'e_invoice_contract' => null,
        'payment_methods' => null,
        'default_payment_method_id' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'internal_id' => 'internalId',
        'number' => 'number',
        'name' => 'name',
        'status' => 'status',
        'main_address' => 'mainAddress',
        'main_contact' => 'mainContact',
        'account_reference' => 'accountReference',
        'parent_record' => 'parentRecord',
        'customer_class' => 'customerClass',
        'credit_terms' => 'creditTerms',
        'currency_id' => 'currencyId',
        'credit_verification' => 'creditVerification',
        'credit_limit' => 'creditLimit',
        'credit_days_past_due' => 'creditDaysPastDue',
        'invoice_address' => 'invoiceAddress',
        'invoice_contact' => 'invoiceContact',
        'print_invoices' => 'printInvoices',
        'accept_auto_invoices' => 'acceptAutoInvoices',
        'send_invoices_by_email' => 'sendInvoicesByEmail',
        'print_statements' => 'printStatements',
        'send_statements_by_email' => 'sendStatementsByEmail',
        'print_multi_currency_statements' => 'printMultiCurrencyStatements',
        'statement_type' => 'statementType',
        'delivery_address' => 'deliveryAddress',
        'delivery_contact' => 'deliveryContact',
        'vat_registration_id' => 'vatRegistrationId',
        'corporate_id' => 'corporateId',
        'gln' => 'gln',
        'vat_zone' => 'vatZone',
        'location' => 'location',
        'attributes' => 'attributes',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'created_date_time' => 'createdDateTime',
        'direct_debit_lines' => 'directDebitLines',
        'price_class' => 'priceClass',
        'gl_accounts' => 'glAccounts',
        'invoice_to_default_location' => 'invoiceToDefaultLocation',
        'e_invoice_contract' => 'eInvoiceContract',
        'payment_methods' => 'paymentMethods',
        'default_payment_method_id' => 'defaultPaymentMethodId',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'internal_id' => 'setInternalId',
        'number' => 'setNumber',
        'name' => 'setName',
        'status' => 'setStatus',
        'main_address' => 'setMainAddress',
        'main_contact' => 'setMainContact',
        'account_reference' => 'setAccountReference',
        'parent_record' => 'setParentRecord',
        'customer_class' => 'setCustomerClass',
        'credit_terms' => 'setCreditTerms',
        'currency_id' => 'setCurrencyId',
        'credit_verification' => 'setCreditVerification',
        'credit_limit' => 'setCreditLimit',
        'credit_days_past_due' => 'setCreditDaysPastDue',
        'invoice_address' => 'setInvoiceAddress',
        'invoice_contact' => 'setInvoiceContact',
        'print_invoices' => 'setPrintInvoices',
        'accept_auto_invoices' => 'setAcceptAutoInvoices',
        'send_invoices_by_email' => 'setSendInvoicesByEmail',
        'print_statements' => 'setPrintStatements',
        'send_statements_by_email' => 'setSendStatementsByEmail',
        'print_multi_currency_statements' => 'setPrintMultiCurrencyStatements',
        'statement_type' => 'setStatementType',
        'delivery_address' => 'setDeliveryAddress',
        'delivery_contact' => 'setDeliveryContact',
        'vat_registration_id' => 'setVatRegistrationId',
        'corporate_id' => 'setCorporateId',
        'gln' => 'setGln',
        'vat_zone' => 'setVatZone',
        'location' => 'setLocation',
        'attributes' => 'setAttributes',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'created_date_time' => 'setCreatedDateTime',
        'direct_debit_lines' => 'setDirectDebitLines',
        'price_class' => 'setPriceClass',
        'gl_accounts' => 'setGlAccounts',
        'invoice_to_default_location' => 'setInvoiceToDefaultLocation',
        'e_invoice_contract' => 'setEInvoiceContract',
        'payment_methods' => 'setPaymentMethods',
        'default_payment_method_id' => 'setDefaultPaymentMethodId',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'internal_id' => 'getInternalId',
        'number' => 'getNumber',
        'name' => 'getName',
        'status' => 'getStatus',
        'main_address' => 'getMainAddress',
        'main_contact' => 'getMainContact',
        'account_reference' => 'getAccountReference',
        'parent_record' => 'getParentRecord',
        'customer_class' => 'getCustomerClass',
        'credit_terms' => 'getCreditTerms',
        'currency_id' => 'getCurrencyId',
        'credit_verification' => 'getCreditVerification',
        'credit_limit' => 'getCreditLimit',
        'credit_days_past_due' => 'getCreditDaysPastDue',
        'invoice_address' => 'getInvoiceAddress',
        'invoice_contact' => 'getInvoiceContact',
        'print_invoices' => 'getPrintInvoices',
        'accept_auto_invoices' => 'getAcceptAutoInvoices',
        'send_invoices_by_email' => 'getSendInvoicesByEmail',
        'print_statements' => 'getPrintStatements',
        'send_statements_by_email' => 'getSendStatementsByEmail',
        'print_multi_currency_statements' => 'getPrintMultiCurrencyStatements',
        'statement_type' => 'getStatementType',
        'delivery_address' => 'getDeliveryAddress',
        'delivery_contact' => 'getDeliveryContact',
        'vat_registration_id' => 'getVatRegistrationId',
        'corporate_id' => 'getCorporateId',
        'gln' => 'getGln',
        'vat_zone' => 'getVatZone',
        'location' => 'getLocation',
        'attributes' => 'getAttributes',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'created_date_time' => 'getCreatedDateTime',
        'direct_debit_lines' => 'getDirectDebitLines',
        'price_class' => 'getPriceClass',
        'gl_accounts' => 'getGlAccounts',
        'invoice_to_default_location' => 'getInvoiceToDefaultLocation',
        'e_invoice_contract' => 'getEInvoiceContract',
        'payment_methods' => 'getPaymentMethods',
        'default_payment_method_id' => 'getDefaultPaymentMethodId',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_ACTIVE = 'Active';
    const STATUS_ON_HOLD = 'OnHold';
    const STATUS_CREDIT_HOLD = 'CreditHold';
    const STATUS_INACTIVE = 'Inactive';
    const STATUS_ONE_TIME = 'OneTime';
    const CREDIT_VERIFICATION_DISABLED = 'Disabled';
    const CREDIT_VERIFICATION_DAYS_PAST_DUE = 'DaysPastDue';
    const CREDIT_VERIFICATION_CREDIT_LIMIT = 'CreditLimit';
    const CREDIT_VERIFICATION_LIMIT_AND_DAYS_PAST_DUE = 'LimitAndDaysPastDue';
    const STATEMENT_TYPE_OPEN_ITEM = 'OpenItem';
    const STATEMENT_TYPE_BALANCE_BROUGHT_FORWARD = 'BalanceBroughtForward';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_ON_HOLD,
            self::STATUS_CREDIT_HOLD,
            self::STATUS_INACTIVE,
            self::STATUS_ONE_TIME,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCreditVerificationAllowableValues()
    {
        return [
            self::CREDIT_VERIFICATION_DISABLED,
            self::CREDIT_VERIFICATION_DAYS_PAST_DUE,
            self::CREDIT_VERIFICATION_CREDIT_LIMIT,
            self::CREDIT_VERIFICATION_LIMIT_AND_DAYS_PAST_DUE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatementTypeAllowableValues()
    {
        return [
            self::STATEMENT_TYPE_OPEN_ITEM,
            self::STATEMENT_TYPE_BALANCE_BROUGHT_FORWARD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['main_address'] = isset($data['main_address']) ? $data['main_address'] : null;
        $this->container['main_contact'] = isset($data['main_contact']) ? $data['main_contact'] : null;
        $this->container['account_reference'] = isset($data['account_reference']) ? $data['account_reference'] : null;
        $this->container['parent_record'] = isset($data['parent_record']) ? $data['parent_record'] : null;
        $this->container['customer_class'] = isset($data['customer_class']) ? $data['customer_class'] : null;
        $this->container['credit_terms'] = isset($data['credit_terms']) ? $data['credit_terms'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['credit_verification'] = isset($data['credit_verification']) ? $data['credit_verification'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['credit_days_past_due'] = isset($data['credit_days_past_due']) ? $data['credit_days_past_due'] : null;
        $this->container['invoice_address'] = isset($data['invoice_address']) ? $data['invoice_address'] : null;
        $this->container['invoice_contact'] = isset($data['invoice_contact']) ? $data['invoice_contact'] : null;
        $this->container['print_invoices'] = isset($data['print_invoices']) ? $data['print_invoices'] : null;
        $this->container['accept_auto_invoices'] = isset($data['accept_auto_invoices']) ? $data['accept_auto_invoices'] : null;
        $this->container['send_invoices_by_email'] = isset($data['send_invoices_by_email']) ? $data['send_invoices_by_email'] : null;
        $this->container['print_statements'] = isset($data['print_statements']) ? $data['print_statements'] : null;
        $this->container['send_statements_by_email'] = isset($data['send_statements_by_email']) ? $data['send_statements_by_email'] : null;
        $this->container['print_multi_currency_statements'] = isset($data['print_multi_currency_statements']) ? $data['print_multi_currency_statements'] : null;
        $this->container['statement_type'] = isset($data['statement_type']) ? $data['statement_type'] : null;
        $this->container['delivery_address'] = isset($data['delivery_address']) ? $data['delivery_address'] : null;
        $this->container['delivery_contact'] = isset($data['delivery_contact']) ? $data['delivery_contact'] : null;
        $this->container['vat_registration_id'] = isset($data['vat_registration_id']) ? $data['vat_registration_id'] : null;
        $this->container['corporate_id'] = isset($data['corporate_id']) ? $data['corporate_id'] : null;
        $this->container['gln'] = isset($data['gln']) ? $data['gln'] : null;
        $this->container['vat_zone'] = isset($data['vat_zone']) ? $data['vat_zone'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['created_date_time'] = isset($data['created_date_time']) ? $data['created_date_time'] : null;
        $this->container['direct_debit_lines'] = isset($data['direct_debit_lines']) ? $data['direct_debit_lines'] : null;
        $this->container['price_class'] = isset($data['price_class']) ? $data['price_class'] : null;
        $this->container['gl_accounts'] = isset($data['gl_accounts']) ? $data['gl_accounts'] : null;
        $this->container['invoice_to_default_location'] = isset($data['invoice_to_default_location']) ? $data['invoice_to_default_location'] : null;
        $this->container['e_invoice_contract'] = isset($data['e_invoice_contract']) ? $data['e_invoice_contract'] : null;
        $this->container['payment_methods'] = isset($data['payment_methods']) ? $data['payment_methods'] : null;
        $this->container['default_payment_method_id'] = isset($data['default_payment_method_id']) ? $data['default_payment_method_id'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCreditVerificationAllowableValues();
        if (!is_null($this->container['credit_verification']) && !in_array($this->container['credit_verification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'credit_verification', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatementTypeAllowableValues();
        if (!is_null($this->container['statement_type']) && !in_array($this->container['statement_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'statement_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets internal_id
     *
     * @return int
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param int $internal_id internal_id
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Mandatory field: The top part &gt; Customer ID* &gt; The ID of the customer account, which is defined by the BIZACCT segmented key or by the CUSTOMER segmented key. When you are creating a new customer, you must specify an ID.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Mandatory field: The top part &gt; Customer name* &gt; The name of the customer to appear in the system, which may be a trade name or a doing-business-as (DBA) name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Mandatory field: The top part &gt; Status* &gt; The status of the customer account. You can select one of the following options: Active, On hold, Credit hold, Inactive, One time.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets main_address
     *
     * @return object
     */
    public function getMainAddress()
    {
        return $this->container['main_address'];
    }

    /**
     * Sets main_address
     *
     * @param object $main_address General information tab &gt; Main address section &gt;
     *
     * @return $this
     */
    public function setMainAddress($main_address)
    {
        $this->container['main_address'] = $main_address;

        return $this;
    }

    /**
     * Gets main_contact
     *
     * @return object
     */
    public function getMainContact()
    {
        return $this->container['main_contact'];
    }

    /**
     * Sets main_contact
     *
     * @param object $main_contact General information tab &gt; Main contact section &gt;
     *
     * @return $this
     */
    public function setMainContact($main_contact)
    {
        $this->container['main_contact'] = $main_contact;

        return $this;
    }

    /**
     * Gets account_reference
     *
     * @return string
     */
    public function getAccountReference()
    {
        return $this->container['account_reference'];
    }

    /**
     * Sets account_reference
     *
     * @param string $account_reference General information tab &gt; Main contact section &gt; Account ref. &gt; Your company's account number in the customer's system.
     *
     * @return $this
     */
    public function setAccountReference($account_reference)
    {
        $this->container['account_reference'] = $account_reference;

        return $this;
    }

    /**
     * Gets parent_record
     *
     * @return object
     */
    public function getParentRecord()
    {
        return $this->container['parent_record'];
    }

    /**
     * Sets parent_record
     *
     * @param object $parent_record parent_record
     *
     * @return $this
     */
    public function setParentRecord($parent_record)
    {
        $this->container['parent_record'] = $parent_record;

        return $this;
    }

    /**
     * Gets customer_class
     *
     * @return object
     */
    public function getCustomerClass()
    {
        return $this->container['customer_class'];
    }

    /**
     * Sets customer_class
     *
     * @param object $customer_class Mandatory field: General information tab &gt; Financial settings section &gt; Customer class* &gt; The class to which the customer is assigned.
     *
     * @return $this
     */
    public function setCustomerClass($customer_class)
    {
        $this->container['customer_class'] = $customer_class;

        return $this;
    }

    /**
     * Gets credit_terms
     *
     * @return object
     */
    public function getCreditTerms()
    {
        return $this->container['credit_terms'];
    }

    /**
     * Sets credit_terms
     *
     * @param object $credit_terms General information tab &gt; Financial settings section &gt; Terms &gt; The type of credit terms used in operations with the customer.
     *
     * @return $this
     */
    public function setCreditTerms($credit_terms)
    {
        $this->container['credit_terms'] = $credit_terms;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id The General information tab &gt; Financial settings section &gt; Currency ID &gt; The currency used in operations with the customer, which you can select from the list of currencies defined in the system.
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets credit_verification
     *
     * @return string
     */
    public function getCreditVerification()
    {
        return $this->container['credit_verification'];
    }

    /**
     * Sets credit_verification
     *
     * @param string $credit_verification The General information tab &gt; Credit verification rules &gt; Credit verification &gt; The credit rule applied to this customer. The following options are available: Days past due, Credit limit, Limit and days past due, disabled.
     *
     * @return $this
     */
    public function setCreditVerification($credit_verification)
    {
        $allowedValues = $this->getCreditVerificationAllowableValues();
        if (!is_null($credit_verification) && !in_array($credit_verification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'credit_verification', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['credit_verification'] = $credit_verification;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return double
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param double $credit_limit The General information tab &gt; Credit verification rules section &gt; Credit limit &gt; The amount, if applicable, that serves as a credit limit for the customer.
     *
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets credit_days_past_due
     *
     * @return int
     */
    public function getCreditDaysPastDue()
    {
        return $this->container['credit_days_past_due'];
    }

    /**
     * Sets credit_days_past_due
     *
     * @param int $credit_days_past_due General information tab &gt; Credit verification rules section &gt; Credit days past due &gt; The maximum number of days by which the customer payment may exceed the invoice date.
     *
     * @return $this
     */
    public function setCreditDaysPastDue($credit_days_past_due)
    {
        $this->container['credit_days_past_due'] = $credit_days_past_due;

        return $this;
    }

    /**
     * Gets invoice_address
     *
     * @return object
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoice_address'];
    }

    /**
     * Sets invoice_address
     *
     * @param object $invoice_address Invoicing settings tab &gt; Invoice address section &gt;
     *
     * @return $this
     */
    public function setInvoiceAddress($invoice_address)
    {
        $this->container['invoice_address'] = $invoice_address;

        return $this;
    }

    /**
     * Gets invoice_contact
     *
     * @return object
     */
    public function getInvoiceContact()
    {
        return $this->container['invoice_contact'];
    }

    /**
     * Sets invoice_contact
     *
     * @param object $invoice_contact Invoicing setting tab &gt; Invoice contact section &gt;
     *
     * @return $this
     */
    public function setInvoiceContact($invoice_contact)
    {
        $this->container['invoice_contact'] = $invoice_contact;

        return $this;
    }

    /**
     * Gets print_invoices
     *
     * @return bool
     */
    public function getPrintInvoices()
    {
        return $this->container['print_invoices'];
    }

    /**
     * Sets print_invoices
     *
     * @param bool $print_invoices Invoicing settings &gt; Print and email settings section &gt; Print invoices &gt; A check box that, if selected, indicates that invoices can be printed in the Print invoice (AR508000) window.
     *
     * @return $this
     */
    public function setPrintInvoices($print_invoices)
    {
        $this->container['print_invoices'] = $print_invoices;

        return $this;
    }

    /**
     * Gets accept_auto_invoices
     *
     * @return bool
     */
    public function getAcceptAutoInvoices()
    {
        return $this->container['accept_auto_invoices'];
    }

    /**
     * Sets accept_auto_invoices
     *
     * @param bool $accept_auto_invoices Invoicing settings &gt; Print and email settings section &gt; Send invoices to AutoInvoice &gt; Select this check box if you are using AutoInvoice and want to send invoices directly to this service.
     *
     * @return $this
     */
    public function setAcceptAutoInvoices($accept_auto_invoices)
    {
        $this->container['accept_auto_invoices'] = $accept_auto_invoices;

        return $this;
    }

    /**
     * Gets send_invoices_by_email
     *
     * @return bool
     */
    public function getSendInvoicesByEmail()
    {
        return $this->container['send_invoices_by_email'];
    }

    /**
     * Sets send_invoices_by_email
     *
     * @param bool $send_invoices_by_email Invoicing settings &gt; Print and email settings section &gt; Send invoices by email &gt; A check box that, if selected, indicates that you can send invoices by email by using the Print invoices (AR508000) window.
     *
     * @return $this
     */
    public function setSendInvoicesByEmail($send_invoices_by_email)
    {
        $this->container['send_invoices_by_email'] = $send_invoices_by_email;

        return $this;
    }

    /**
     * Gets print_statements
     *
     * @return bool
     */
    public function getPrintStatements()
    {
        return $this->container['print_statements'];
    }

    /**
     * Sets print_statements
     *
     * @param bool $print_statements Invoicing settings &gt; Print and email settings section &gt; Print statements &gt; A check box that, if selected, indicates that statements can be printed in the Print statements (AR503500) window.
     *
     * @return $this
     */
    public function setPrintStatements($print_statements)
    {
        $this->container['print_statements'] = $print_statements;

        return $this;
    }

    /**
     * Gets send_statements_by_email
     *
     * @return bool
     */
    public function getSendStatementsByEmail()
    {
        return $this->container['send_statements_by_email'];
    }

    /**
     * Sets send_statements_by_email
     *
     * @param bool $send_statements_by_email Invoicing settings &gt; Print and email settings section &gt; Send statement by email &gt; A check box that, if selected, indicates that statements can be sent by email to customers of the class in the Print statements  (AR503500) window.
     *
     * @return $this
     */
    public function setSendStatementsByEmail($send_statements_by_email)
    {
        $this->container['send_statements_by_email'] = $send_statements_by_email;

        return $this;
    }

    /**
     * Gets print_multi_currency_statements
     *
     * @return bool
     */
    public function getPrintMultiCurrencyStatements()
    {
        return $this->container['print_multi_currency_statements'];
    }

    /**
     * Sets print_multi_currency_statements
     *
     * @param bool $print_multi_currency_statements Invoicing settings &gt; Print and email settings section &gt; Multi-currency statements &gt; A check box that indicates (if selected) that this customer's statements must be printed in multi-currency format.
     *
     * @return $this
     */
    public function setPrintMultiCurrencyStatements($print_multi_currency_statements)
    {
        $this->container['print_multi_currency_statements'] = $print_multi_currency_statements;

        return $this;
    }

    /**
     * Gets statement_type
     *
     * @return string
     */
    public function getStatementType()
    {
        return $this->container['statement_type'];
    }

    /**
     * Sets statement_type
     *
     * @param string $statement_type Invoicing settings &gt; Print and email settings section &gt; Statement type &gt; The statement type used by default in relations with the customer, which can be one of the following: Open item, Balance brought forward.
     *
     * @return $this
     */
    public function setStatementType($statement_type)
    {
        $allowedValues = $this->getStatementTypeAllowableValues();
        if (!is_null($statement_type) && !in_array($statement_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'statement_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['statement_type'] = $statement_type;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return object
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param object $delivery_address Delivery settings tab &gt; Shipping address section &gt;
     *
     * @return $this
     */
    public function setDeliveryAddress($delivery_address)
    {
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets delivery_contact
     *
     * @return object
     */
    public function getDeliveryContact()
    {
        return $this->container['delivery_contact'];
    }

    /**
     * Sets delivery_contact
     *
     * @param object $delivery_contact Delivery settings tab &gt; Shipping contact section &gt;
     *
     * @return $this
     */
    public function setDeliveryContact($delivery_contact)
    {
        $this->container['delivery_contact'] = $delivery_contact;

        return $this;
    }

    /**
     * Gets vat_registration_id
     *
     * @return string
     */
    public function getVatRegistrationId()
    {
        return $this->container['vat_registration_id'];
    }

    /**
     * Sets vat_registration_id
     *
     * @param string $vat_registration_id Deliver settings tab &gt; Default location settings section &gt; VAT registration ID &gt; The customer's taxpayer ID associated with the location.
     *
     * @return $this
     */
    public function setVatRegistrationId($vat_registration_id)
    {
        $this->container['vat_registration_id'] = $vat_registration_id;

        return $this;
    }

    /**
     * Gets corporate_id
     *
     * @return string
     */
    public function getCorporateId()
    {
        return $this->container['corporate_id'];
    }

    /**
     * Sets corporate_id
     *
     * @param string $corporate_id Delivery settings tab &gt; Default location settings section &gt; Corporate ID &gt; The customers company ID, associated with the location.
     *
     * @return $this
     */
    public function setCorporateId($corporate_id)
    {
        $this->container['corporate_id'] = $corporate_id;

        return $this;
    }

    /**
     * Gets gln
     *
     * @return string
     */
    public function getGln()
    {
        return $this->container['gln'];
    }

    /**
     * Sets gln
     *
     * @param string $gln Delivery settings tab &gt; Default location settings section &gt; GLN &gt; The Global Location Number, associated with the location.
     *
     * @return $this
     */
    public function setGln($gln)
    {
        $this->container['gln'] = $gln;

        return $this;
    }

    /**
     * Gets vat_zone
     *
     * @return object
     */
    public function getVatZone()
    {
        return $this->container['vat_zone'];
    }

    /**
     * Sets vat_zone
     *
     * @param object $vat_zone Mandatory field: Delivery settings tab &gt; Default location settings section &gt; VAT Zone* &gt; The VAT zone of the customer's default location.
     *
     * @return $this
     */
    public function setVatZone($vat_zone)
    {
        $this->container['vat_zone'] = $vat_zone;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location Delivery settings tab &gt; Default location settings section &gt; Location name &gt; A description of the customer location.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \Ekstralys\VismaNetApi\Model\AttributeIdValueDto[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \Ekstralys\VismaNetApi\Model\AttributeIdValueDto[] $attributes Information collected from the system. Not visible on the screen.
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time Information collected from the system. Not visible on the screen.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return \DateTime
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param \DateTime $created_date_time Information collected from the system. Not visible on the screen.
     *
     * @return $this
     */
    public function setCreatedDateTime($created_date_time)
    {
        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets direct_debit_lines
     *
     * @return \Ekstralys\VismaNetApi\Model\CustomerDirectDebitDto[]
     */
    public function getDirectDebitLines()
    {
        return $this->container['direct_debit_lines'];
    }

    /**
     * Sets direct_debit_lines
     *
     * @param \Ekstralys\VismaNetApi\Model\CustomerDirectDebitDto[] $direct_debit_lines Information collected from the system. Not visible on the screen.
     *
     * @return $this
     */
    public function setDirectDebitLines($direct_debit_lines)
    {
        $this->container['direct_debit_lines'] = $direct_debit_lines;

        return $this;
    }

    /**
     * Gets price_class
     *
     * @return object
     */
    public function getPriceClass()
    {
        return $this->container['price_class'];
    }

    /**
     * Sets price_class
     *
     * @param object $price_class Deliver settings tab &gt; Default location settings section &gt; Price class &gt; The price class assigned to the customer.
     *
     * @return $this
     */
    public function setPriceClass($price_class)
    {
        $this->container['price_class'] = $price_class;

        return $this;
    }

    /**
     * Gets gl_accounts
     *
     * @return object
     */
    public function getGlAccounts()
    {
        return $this->container['gl_accounts'];
    }

    /**
     * Sets gl_accounts
     *
     * @param object $gl_accounts Information collected from the system. Some accounts visible in window, some not.
     *
     * @return $this
     */
    public function setGlAccounts($gl_accounts)
    {
        $this->container['gl_accounts'] = $gl_accounts;

        return $this;
    }

    /**
     * Gets invoice_to_default_location
     *
     * @return bool
     */
    public function getInvoiceToDefaultLocation()
    {
        return $this->container['invoice_to_default_location'];
    }

    /**
     * Sets invoice_to_default_location
     *
     * @param bool $invoice_to_default_location Delivery settings tab &gt; Default location settings &gt; Invoice to default location &gt; A check box indicating that the default location is to be used.
     *
     * @return $this
     */
    public function setInvoiceToDefaultLocation($invoice_to_default_location)
    {
        $this->container['invoice_to_default_location'] = $invoice_to_default_location;

        return $this;
    }

    /**
     * Gets e_invoice_contract
     *
     * @return object
     */
    public function getEInvoiceContract()
    {
        return $this->container['e_invoice_contract'];
    }

    /**
     * Sets e_invoice_contract
     *
     * @param object $e_invoice_contract Other invoice settings tab.
     *
     * @return $this
     */
    public function setEInvoiceContract($e_invoice_contract)
    {
        $this->container['e_invoice_contract'] = $e_invoice_contract;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return \Ekstralys\VismaNetApi\Model\CustomerPaymentMethodInfoDto[]
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param \Ekstralys\VismaNetApi\Model\CustomerPaymentMethodInfoDto[] $payment_methods Payment methods tab.
     *
     * @return $this
     */
    public function setPaymentMethods($payment_methods)
    {
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets default_payment_method_id
     *
     * @return string
     */
    public function getDefaultPaymentMethodId()
    {
        return $this->container['default_payment_method_id'];
    }

    /**
     * Sets default_payment_method_id
     *
     * @param string $default_payment_method_id Invoicing settings tab &gt; Default payment method section &gt; The default payment method.
     *
     * @return $this
     */
    public function setDefaultPaymentMethodId($default_payment_method_id)
    {
        $this->container['default_payment_method_id'] = $default_payment_method_id;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


