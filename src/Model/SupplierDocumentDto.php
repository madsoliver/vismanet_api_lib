<?php
/**
 * SupplierDocumentDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * SupplierDocumentDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupplierDocumentDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SupplierDocumentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account' => 'object',
        'subaccount' => 'object',
        'amount' => 'double',
        'amount_in_currency' => 'double',
        'branch' => 'object',
        'supplier' => 'object',
        'document_type' => 'string',
        'reference_number' => 'string',
        'post_period' => 'string',
        'financial_period' => 'string',
        'date' => '\DateTime',
        'orig_invoice_date' => '\DateTime',
        'due_date' => '\DateTime',
        'approval_status' => 'string',
        'status' => 'string',
        'currency_id' => 'string',
        'balance' => 'double',
        'balance_in_currency' => 'double',
        'cash_discount' => 'double',
        'cash_discount_in_currency' => 'double',
        'payment_method' => 'object',
        'supplier_reference' => 'string',
        'description' => 'string',
        'created_date_time' => '\DateTime',
        'last_modified_date_time' => '\DateTime',
        'note' => 'string',
        'closed_financial_period' => 'string',
        'location' => 'object',
        'vat_total' => 'double',
        'vat_total_in_currency' => 'double',
        'branch_number' => 'object',
        'pay_date' => '\DateTime',
        'payment_message' => 'string',
        'cash_account' => 'string',
        'error_info' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account' => null,
        'subaccount' => null,
        'amount' => 'double',
        'amount_in_currency' => 'double',
        'branch' => null,
        'supplier' => null,
        'document_type' => null,
        'reference_number' => null,
        'post_period' => null,
        'financial_period' => null,
        'date' => 'date-time',
        'orig_invoice_date' => 'date-time',
        'due_date' => 'date-time',
        'approval_status' => null,
        'status' => null,
        'currency_id' => null,
        'balance' => 'double',
        'balance_in_currency' => 'double',
        'cash_discount' => 'double',
        'cash_discount_in_currency' => 'double',
        'payment_method' => null,
        'supplier_reference' => null,
        'description' => null,
        'created_date_time' => 'date-time',
        'last_modified_date_time' => 'date-time',
        'note' => null,
        'closed_financial_period' => null,
        'location' => null,
        'vat_total' => 'double',
        'vat_total_in_currency' => 'double',
        'branch_number' => null,
        'pay_date' => 'date-time',
        'payment_message' => null,
        'cash_account' => null,
        'error_info' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
        'subaccount' => 'subaccount',
        'amount' => 'amount',
        'amount_in_currency' => 'amountInCurrency',
        'branch' => 'branch',
        'supplier' => 'supplier',
        'document_type' => 'documentType',
        'reference_number' => 'referenceNumber',
        'post_period' => 'postPeriod',
        'financial_period' => 'financialPeriod',
        'date' => 'date',
        'orig_invoice_date' => 'origInvoiceDate',
        'due_date' => 'dueDate',
        'approval_status' => 'approvalStatus',
        'status' => 'status',
        'currency_id' => 'currencyId',
        'balance' => 'balance',
        'balance_in_currency' => 'balanceInCurrency',
        'cash_discount' => 'cashDiscount',
        'cash_discount_in_currency' => 'cashDiscountInCurrency',
        'payment_method' => 'paymentMethod',
        'supplier_reference' => 'supplierReference',
        'description' => 'description',
        'created_date_time' => 'createdDateTime',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'note' => 'note',
        'closed_financial_period' => 'closedFinancialPeriod',
        'location' => 'location',
        'vat_total' => 'vatTotal',
        'vat_total_in_currency' => 'vatTotalInCurrency',
        'branch_number' => 'branchNumber',
        'pay_date' => 'payDate',
        'payment_message' => 'paymentMessage',
        'cash_account' => 'cashAccount',
        'error_info' => 'errorInfo',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
        'subaccount' => 'setSubaccount',
        'amount' => 'setAmount',
        'amount_in_currency' => 'setAmountInCurrency',
        'branch' => 'setBranch',
        'supplier' => 'setSupplier',
        'document_type' => 'setDocumentType',
        'reference_number' => 'setReferenceNumber',
        'post_period' => 'setPostPeriod',
        'financial_period' => 'setFinancialPeriod',
        'date' => 'setDate',
        'orig_invoice_date' => 'setOrigInvoiceDate',
        'due_date' => 'setDueDate',
        'approval_status' => 'setApprovalStatus',
        'status' => 'setStatus',
        'currency_id' => 'setCurrencyId',
        'balance' => 'setBalance',
        'balance_in_currency' => 'setBalanceInCurrency',
        'cash_discount' => 'setCashDiscount',
        'cash_discount_in_currency' => 'setCashDiscountInCurrency',
        'payment_method' => 'setPaymentMethod',
        'supplier_reference' => 'setSupplierReference',
        'description' => 'setDescription',
        'created_date_time' => 'setCreatedDateTime',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'note' => 'setNote',
        'closed_financial_period' => 'setClosedFinancialPeriod',
        'location' => 'setLocation',
        'vat_total' => 'setVatTotal',
        'vat_total_in_currency' => 'setVatTotalInCurrency',
        'branch_number' => 'setBranchNumber',
        'pay_date' => 'setPayDate',
        'payment_message' => 'setPaymentMessage',
        'cash_account' => 'setCashAccount',
        'error_info' => 'setErrorInfo',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
        'subaccount' => 'getSubaccount',
        'amount' => 'getAmount',
        'amount_in_currency' => 'getAmountInCurrency',
        'branch' => 'getBranch',
        'supplier' => 'getSupplier',
        'document_type' => 'getDocumentType',
        'reference_number' => 'getReferenceNumber',
        'post_period' => 'getPostPeriod',
        'financial_period' => 'getFinancialPeriod',
        'date' => 'getDate',
        'orig_invoice_date' => 'getOrigInvoiceDate',
        'due_date' => 'getDueDate',
        'approval_status' => 'getApprovalStatus',
        'status' => 'getStatus',
        'currency_id' => 'getCurrencyId',
        'balance' => 'getBalance',
        'balance_in_currency' => 'getBalanceInCurrency',
        'cash_discount' => 'getCashDiscount',
        'cash_discount_in_currency' => 'getCashDiscountInCurrency',
        'payment_method' => 'getPaymentMethod',
        'supplier_reference' => 'getSupplierReference',
        'description' => 'getDescription',
        'created_date_time' => 'getCreatedDateTime',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'note' => 'getNote',
        'closed_financial_period' => 'getClosedFinancialPeriod',
        'location' => 'getLocation',
        'vat_total' => 'getVatTotal',
        'vat_total_in_currency' => 'getVatTotalInCurrency',
        'branch_number' => 'getBranchNumber',
        'pay_date' => 'getPayDate',
        'payment_message' => 'getPaymentMessage',
        'cash_account' => 'getCashAccount',
        'error_info' => 'getErrorInfo',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DOCUMENT_TYPE_CHECK = 'Check';
    const DOCUMENT_TYPE_CREDIT_ADJ = 'CreditAdj';
    const DOCUMENT_TYPE_DEBIT_ADJ = 'DebitAdj';
    const DOCUMENT_TYPE_INVOICE = 'Invoice';
    const DOCUMENT_TYPE_PREPAYMENT = 'Prepayment';
    const DOCUMENT_TYPE_QUICK_CHECK = 'QuickCheck';
    const DOCUMENT_TYPE_REFUND = 'Refund';
    const DOCUMENT_TYPE_VOID_CHECK = 'VoidCheck';
    const DOCUMENT_TYPE_VOID_QUICK_CHECK = 'VoidQuickCheck';
    const APPROVAL_STATUS__NEW = 'New';
    const APPROVAL_STATUS_CANCELED = 'Canceled';
    const APPROVAL_STATUS_SENT_TO_APPROVAL = 'SentToApproval';
    const APPROVAL_STATUS_RECEIVED_BY_APPROVAL = 'ReceivedByApproval';
    const APPROVAL_STATUS_IN_PROGRESS_APPROVAL = 'InProgressApproval';
    const APPROVAL_STATUS_REJECTED_IN_APPROVAL = 'RejectedInApproval';
    const APPROVAL_STATUS_APPROVED_IN_APPROVAL = 'ApprovedInApproval';
    const APPROVAL_STATUS_ACTIVE_WORKFLOW_APPROVAL = 'ActiveWorkflowApproval';
    const STATUS_HOLD = 'Hold';
    const STATUS_BALANCED = 'Balanced';
    const STATUS_VOIDED = 'Voided';
    const STATUS_SCHEDULED = 'Scheduled';
    const STATUS_OPEN = 'Open';
    const STATUS_CLOSED = 'Closed';
    const STATUS_PRINTED = 'Printed';
    const STATUS_PREBOOKED = 'Prebooked';
    const STATUS_RESERVED = 'Reserved';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_CHECK,
            self::DOCUMENT_TYPE_CREDIT_ADJ,
            self::DOCUMENT_TYPE_DEBIT_ADJ,
            self::DOCUMENT_TYPE_INVOICE,
            self::DOCUMENT_TYPE_PREPAYMENT,
            self::DOCUMENT_TYPE_QUICK_CHECK,
            self::DOCUMENT_TYPE_REFUND,
            self::DOCUMENT_TYPE_VOID_CHECK,
            self::DOCUMENT_TYPE_VOID_QUICK_CHECK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApprovalStatusAllowableValues()
    {
        return [
            self::APPROVAL_STATUS__NEW,
            self::APPROVAL_STATUS_CANCELED,
            self::APPROVAL_STATUS_SENT_TO_APPROVAL,
            self::APPROVAL_STATUS_RECEIVED_BY_APPROVAL,
            self::APPROVAL_STATUS_IN_PROGRESS_APPROVAL,
            self::APPROVAL_STATUS_REJECTED_IN_APPROVAL,
            self::APPROVAL_STATUS_APPROVED_IN_APPROVAL,
            self::APPROVAL_STATUS_ACTIVE_WORKFLOW_APPROVAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_HOLD,
            self::STATUS_BALANCED,
            self::STATUS_VOIDED,
            self::STATUS_SCHEDULED,
            self::STATUS_OPEN,
            self::STATUS_CLOSED,
            self::STATUS_PRINTED,
            self::STATUS_PREBOOKED,
            self::STATUS_RESERVED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['subaccount'] = isset($data['subaccount']) ? $data['subaccount'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_in_currency'] = isset($data['amount_in_currency']) ? $data['amount_in_currency'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['reference_number'] = isset($data['reference_number']) ? $data['reference_number'] : null;
        $this->container['post_period'] = isset($data['post_period']) ? $data['post_period'] : null;
        $this->container['financial_period'] = isset($data['financial_period']) ? $data['financial_period'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['orig_invoice_date'] = isset($data['orig_invoice_date']) ? $data['orig_invoice_date'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['approval_status'] = isset($data['approval_status']) ? $data['approval_status'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['balance_in_currency'] = isset($data['balance_in_currency']) ? $data['balance_in_currency'] : null;
        $this->container['cash_discount'] = isset($data['cash_discount']) ? $data['cash_discount'] : null;
        $this->container['cash_discount_in_currency'] = isset($data['cash_discount_in_currency']) ? $data['cash_discount_in_currency'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['supplier_reference'] = isset($data['supplier_reference']) ? $data['supplier_reference'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['created_date_time'] = isset($data['created_date_time']) ? $data['created_date_time'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['closed_financial_period'] = isset($data['closed_financial_period']) ? $data['closed_financial_period'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['vat_total'] = isset($data['vat_total']) ? $data['vat_total'] : null;
        $this->container['vat_total_in_currency'] = isset($data['vat_total_in_currency']) ? $data['vat_total_in_currency'] : null;
        $this->container['branch_number'] = isset($data['branch_number']) ? $data['branch_number'] : null;
        $this->container['pay_date'] = isset($data['pay_date']) ? $data['pay_date'] : null;
        $this->container['payment_message'] = isset($data['payment_message']) ? $data['payment_message'] : null;
        $this->container['cash_account'] = isset($data['cash_account']) ? $data['cash_account'] : null;
        $this->container['error_info'] = isset($data['error_info']) ? $data['error_info'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['document_type']) && !in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'document_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApprovalStatusAllowableValues();
        if (!is_null($this->container['approval_status']) && !in_array($this->container['approval_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'approval_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return object
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param object $account Mandatory field: Document details tab &gt; Account* &gt; The expense account to be updated by this transaction.
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets subaccount
     *
     * @return object
     */
    public function getSubaccount()
    {
        return $this->container['subaccount'];
    }

    /**
     * Sets subaccount
     *
     * @param object $subaccount Mandatory field: Document details tab &gt; Subaccount* &gt; The corresponding subaccount to be used for invoices and adjustments.
     *
     * @return $this
     */
    public function setSubaccount($subaccount)
    {
        $this->container['subaccount'] = $subaccount;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount Document details tab &gt; Amount &gt; Read-only. The total amount for the specified quantity of items or services of this type (after the discount has been taken).
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_in_currency
     *
     * @return double
     */
    public function getAmountInCurrency()
    {
        return $this->container['amount_in_currency'];
    }

    /**
     * Sets amount_in_currency
     *
     * @param double $amount_in_currency An automatic calculation of the amount with the currency set as default for supplier.
     *
     * @return $this
     */
    public function setAmountInCurrency($amount_in_currency)
    {
        $this->container['amount_in_currency'] = $amount_in_currency;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return object
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param object $branch Branch is deprecated, please use BranchNumber instead.
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return object
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param object $supplier The Top part &gt; Supplier* &gt; The identifier of the supplier referred to in the document.
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type The top part &gt; Top part &gt; Type &gt; The type of the document. The following types are available: Purchase invoice, credit adjustment, purchase credit note, prepayment.
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($document_type) && !in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string $reference_number reference_number
     *
     * @return $this
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets post_period
     *
     * @return string
     */
    public function getPostPeriod()
    {
        return $this->container['post_period'];
    }

    /**
     * Sets post_period
     *
     * @param string $post_period The Top part &gt; Post period* &gt; The post period of the payment document. Format MMYYYY.
     *
     * @return $this
     */
    public function setPostPeriod($post_period)
    {
        $this->container['post_period'] = $post_period;

        return $this;
    }

    /**
     * Gets financial_period
     *
     * @return string
     */
    public function getFinancialPeriod()
    {
        return $this->container['financial_period'];
    }

    /**
     * Sets financial_period
     *
     * @param string $financial_period The financial period to which the transactions recorded in the document should be posted. Format YYYYMM.
     *
     * @return $this
     */
    public function setFinancialPeriod($financial_period)
    {
        $this->container['financial_period'] = $financial_period;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The Top part &gt; Date* &gt; The date of the original supplier ledger document; by default, it is the current date, which can be changed.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets orig_invoice_date
     *
     * @return \DateTime
     */
    public function getOrigInvoiceDate()
    {
        return $this->container['orig_invoice_date'];
    }

    /**
     * Sets orig_invoice_date
     *
     * @param \DateTime $orig_invoice_date The Top part &gt; OrigInvoiceDate* &gt; The original invoice date of the original supplier ledger document; by default, it is the current date, which can be changed.
     *
     * @return $this
     */
    public function setOrigInvoiceDate($orig_invoice_date)
    {
        $this->container['orig_invoice_date'] = $orig_invoice_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date The Top part &gt; Due date* &gt; The date when payment for the document is due in accordance with the supplier's credit terms.
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets approval_status
     *
     * @return string
     */
    public function getApprovalStatus()
    {
        return $this->container['approval_status'];
    }

    /**
     * Sets approval_status
     *
     * @param string $approval_status The Top part &gt; Approval status &gt; The status of the document in Visma.net Approval. [New, Canceled, SentToApproval, ReceivedByApproval, InProgressApproval, RejectedInApproval, ApprovedInApproval, ActiveWorkflowApproval.
     *
     * @return $this
     */
    public function setApprovalStatus($approval_status)
    {
        $allowedValues = $this->getApprovalStatusAllowableValues();
        if (!is_null($approval_status) && !in_array($approval_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'approval_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['approval_status'] = $approval_status;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The Top part &gt; Document status &gt; A read-only field that shows the status of the supplier ledger document:[Hold, Balanced, Voided, Scheduled, Open, Closed, Printed, Prebooked, Reserved]
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id The Top part &gt; Currency &gt; The currency of the document.
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return double
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param double $balance The Top part &gt; Balance &gt; The balance of the supplier ledger document after VAT (if inclusive) and the discount as specified in the tabs below.
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets balance_in_currency
     *
     * @return double
     */
    public function getBalanceInCurrency()
    {
        return $this->container['balance_in_currency'];
    }

    /**
     * Sets balance_in_currency
     *
     * @param double $balance_in_currency Background calculation giving you the Balance in your default currency. This field is applicable if the amount is given in another currency than your default.
     *
     * @return $this
     */
    public function setBalanceInCurrency($balance_in_currency)
    {
        $this->container['balance_in_currency'] = $balance_in_currency;

        return $this;
    }

    /**
     * Gets cash_discount
     *
     * @return double
     */
    public function getCashDiscount()
    {
        return $this->container['cash_discount'];
    }

    /**
     * Sets cash_discount
     *
     * @param double $cash_discount The Top part &gt; Cash discount &gt; The cash discount amount that has been or will be taken in the document, which the system calculates based in the specified credit terms.
     *
     * @return $this
     */
    public function setCashDiscount($cash_discount)
    {
        $this->container['cash_discount'] = $cash_discount;

        return $this;
    }

    /**
     * Gets cash_discount_in_currency
     *
     * @return double
     */
    public function getCashDiscountInCurrency()
    {
        return $this->container['cash_discount_in_currency'];
    }

    /**
     * Sets cash_discount_in_currency
     *
     * @param double $cash_discount_in_currency Background calculation giving you the Cash discount in your default currency. This field is applicable if the amount is given in another currency than your default.
     *
     * @return $this
     */
    public function setCashDiscountInCurrency($cash_discount_in_currency)
    {
        $this->container['cash_discount_in_currency'] = $cash_discount_in_currency;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return object
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param object $payment_method The Financial details tab &gt; Payment method &gt; The payment method used for the payment.
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets supplier_reference
     *
     * @return string
     */
    public function getSupplierReference()
    {
        return $this->container['supplier_reference'];
    }

    /**
     * Sets supplier_reference
     *
     * @param string $supplier_reference The Top part &gt; Supplier ref. &gt; The document's original reference number as assigned by the supplier (for informational purposes).
     *
     * @return $this
     */
    public function setSupplierReference($supplier_reference)
    {
        $this->container['supplier_reference'] = $supplier_reference;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The Top part &gt; Description &gt; A user-provided description for this supplier ledger document.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return \DateTime
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param \DateTime $created_date_time created_date_time
     *
     * @return $this
     */
    public function setCreatedDateTime($created_date_time)
    {
        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time last_modified_date_time
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note The table &gt; Document details tab and Applications tab &gt; Icon Notes &gt; Pop-up window for providing any user-defined text connected with to invoice.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets closed_financial_period
     *
     * @return string
     */
    public function getClosedFinancialPeriod()
    {
        return $this->container['closed_financial_period'];
    }

    /**
     * Sets closed_financial_period
     *
     * @param string $closed_financial_period Format YYYYMM.
     *
     * @return $this
     */
    public function setClosedFinancialPeriod($closed_financial_period)
    {
        $this->container['closed_financial_period'] = $closed_financial_period;

        return $this;
    }

    /**
     * Gets location
     *
     * @return object
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param object $location The Top part &gt; Location* &gt; The supplier location associated with the purchase.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets vat_total
     *
     * @return double
     */
    public function getVatTotal()
    {
        return $this->container['vat_total'];
    }

    /**
     * Sets vat_total
     *
     * @param double $vat_total The Top part &gt; VAT total &gt; The total amount of tax paid in the document.
     *
     * @return $this
     */
    public function setVatTotal($vat_total)
    {
        $this->container['vat_total'] = $vat_total;

        return $this;
    }

    /**
     * Gets vat_total_in_currency
     *
     * @return double
     */
    public function getVatTotalInCurrency()
    {
        return $this->container['vat_total_in_currency'];
    }

    /**
     * Sets vat_total_in_currency
     *
     * @param double $vat_total_in_currency Background calculation giving you the VAT total in your default currency. This field is applicable if the amount is given in another currency than your default.
     *
     * @return $this
     */
    public function setVatTotalInCurrency($vat_total_in_currency)
    {
        $this->container['vat_total_in_currency'] = $vat_total_in_currency;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return object
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param object $branch_number branch_number
     *
     * @return $this
     */
    public function setBranchNumber($branch_number)
    {
        $this->container['branch_number'] = $branch_number;

        return $this;
    }

    /**
     * Gets pay_date
     *
     * @return \DateTime
     */
    public function getPayDate()
    {
        return $this->container['pay_date'];
    }

    /**
     * Sets pay_date
     *
     * @param \DateTime $pay_date The Financial details tab &gt; The Payment information section &gt; Pay date* &gt; The date when the invoice should be paid. The date is the difference between the document due date or discount date and the number of days specified in the Payment lead time field in AP303000.
     *
     * @return $this
     */
    public function setPayDate($pay_date)
    {
        $this->container['pay_date'] = $pay_date;

        return $this;
    }

    /**
     * Gets payment_message
     *
     * @return string
     */
    public function getPaymentMessage()
    {
        return $this->container['payment_message'];
    }

    /**
     * Sets payment_message
     *
     * @param string $payment_message The Financial details tab &gt; The Payment information section &gt; Payment message &gt; The message connected with the payment.
     *
     * @return $this
     */
    public function setPaymentMessage($payment_message)
    {
        $this->container['payment_message'] = $payment_message;

        return $this;
    }

    /**
     * Gets cash_account
     *
     * @return string
     */
    public function getCashAccount()
    {
        return $this->container['cash_account'];
    }

    /**
     * Sets cash_account
     *
     * @param string $cash_account Financial details tab &gt; The payment information section &gt; Cash account &gt; The cash account associated with the payment method.
     *
     * @return $this
     */
    public function setCashAccount($cash_account)
    {
        $this->container['cash_account'] = $cash_account;

        return $this;
    }

    /**
     * Gets error_info
     *
     * @return string
     */
    public function getErrorInfo()
    {
        return $this->container['error_info'];
    }

    /**
     * Sets error_info
     *
     * @param string $error_info error_info
     *
     * @return $this
     */
    public function setErrorInfo($error_info)
    {
        $this->container['error_info'] = $error_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


