<?php
/**
 * PackageDetailLineDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * PackageDetailLineDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PackageDetailLineDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PackageDetailLineDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_number' => 'int',
        'confirmed' => 'bool',
        'box_id' => 'string',
        'type' => 'string',
        'description' => 'string',
        'weight' => 'double',
        'uom' => 'string',
        'declared_value' => 'double',
        'co_d_amount' => 'double',
        'tracking_number' => 'string',
        'custom_ref_nbr1' => 'string',
        'custom_ref_nbr2' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_number' => 'int32',
        'confirmed' => null,
        'box_id' => null,
        'type' => null,
        'description' => null,
        'weight' => 'double',
        'uom' => null,
        'declared_value' => 'double',
        'co_d_amount' => 'double',
        'tracking_number' => null,
        'custom_ref_nbr1' => null,
        'custom_ref_nbr2' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_number' => 'lineNumber',
        'confirmed' => 'confirmed',
        'box_id' => 'boxId',
        'type' => 'type',
        'description' => 'description',
        'weight' => 'weight',
        'uom' => 'uom',
        'declared_value' => 'declaredValue',
        'co_d_amount' => 'coDAmount',
        'tracking_number' => 'trackingNumber',
        'custom_ref_nbr1' => 'customRefNbr1',
        'custom_ref_nbr2' => 'customRefNbr2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_number' => 'setLineNumber',
        'confirmed' => 'setConfirmed',
        'box_id' => 'setBoxId',
        'type' => 'setType',
        'description' => 'setDescription',
        'weight' => 'setWeight',
        'uom' => 'setUom',
        'declared_value' => 'setDeclaredValue',
        'co_d_amount' => 'setCoDAmount',
        'tracking_number' => 'setTrackingNumber',
        'custom_ref_nbr1' => 'setCustomRefNbr1',
        'custom_ref_nbr2' => 'setCustomRefNbr2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_number' => 'getLineNumber',
        'confirmed' => 'getConfirmed',
        'box_id' => 'getBoxId',
        'type' => 'getType',
        'description' => 'getDescription',
        'weight' => 'getWeight',
        'uom' => 'getUom',
        'declared_value' => 'getDeclaredValue',
        'co_d_amount' => 'getCoDAmount',
        'tracking_number' => 'getTrackingNumber',
        'custom_ref_nbr1' => 'getCustomRefNbr1',
        'custom_ref_nbr2' => 'getCustomRefNbr2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['confirmed'] = isset($data['confirmed']) ? $data['confirmed'] : null;
        $this->container['box_id'] = isset($data['box_id']) ? $data['box_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['declared_value'] = isset($data['declared_value']) ? $data['declared_value'] : null;
        $this->container['co_d_amount'] = isset($data['co_d_amount']) ? $data['co_d_amount'] : null;
        $this->container['tracking_number'] = isset($data['tracking_number']) ? $data['tracking_number'] : null;
        $this->container['custom_ref_nbr1'] = isset($data['custom_ref_nbr1']) ? $data['custom_ref_nbr1'] : null;
        $this->container['custom_ref_nbr2'] = isset($data['custom_ref_nbr2']) ? $data['custom_ref_nbr2'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_number
     *
     * @return int
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int $line_number Packages tab &gt; Line number. The sequence of the lines.
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets confirmed
     *
     * @return bool
     */
    public function getConfirmed()
    {
        return $this->container['confirmed'];
    }

    /**
     * Sets confirmed
     *
     * @param bool $confirmed Packages tab &gt; Confirmed &gt; This check box indicates (if selected) that shipping of the package specified on the line has been confirmed.
     *
     * @return $this
     */
    public function setConfirmed($confirmed)
    {
        $this->container['confirmed'] = $confirmed;

        return $this;
    }

    /**
     * Gets box_id
     *
     * @return string
     */
    public function getBoxId()
    {
        return $this->container['box_id'];
    }

    /**
     * Sets box_id
     *
     * @param string $box_id Mandatory field: Packages tab &gt; Box ID* &gt; The box used for the package.
     *
     * @return $this
     */
    public function setBoxId($box_id)
    {
        $this->container['box_id'] = $box_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Packages tab &gt; Type &gt; The type of package: Auto or Manual.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Packages tab &gt; Description &gt; The description of the item or description of the box contents.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight Packages tab &gt; Weight &gt; The gross weight of the package.
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return string
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param string $uom Packages tab &gt; UoM &gt; The unit of measure in which the weight of the package is specified.
     *
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets declared_value
     *
     * @return double
     */
    public function getDeclaredValue()
    {
        return $this->container['declared_value'];
    }

    /**
     * Sets declared_value
     *
     * @param double $declared_value Packages tab &gt; Declared value &gt; The amount of the package specified for insurance, you can edit the value if needed.
     *
     * @return $this
     */
    public function setDeclaredValue($declared_value)
    {
        $this->container['declared_value'] = $declared_value;

        return $this;
    }

    /**
     * Gets co_d_amount
     *
     * @return double
     */
    public function getCoDAmount()
    {
        return $this->container['co_d_amount'];
    }

    /**
     * Sets co_d_amount
     *
     * @param double $co_d_amount Packages tab &gt; Cost of delivery amount &gt; The amount to be charged on delivery of the package, you can edit the value if needed.
     *
     * @return $this
     */
    public function setCoDAmount($co_d_amount)
    {
        $this->container['co_d_amount'] = $co_d_amount;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string $tracking_number Packages tab &gt; Tracking number &gt; The tracking number provided for the package by the carrier if integration with carrier is configured.
     *
     * @return $this
     */
    public function setTrackingNumber($tracking_number)
    {
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets custom_ref_nbr1
     *
     * @return string
     */
    public function getCustomRefNbr1()
    {
        return $this->container['custom_ref_nbr1'];
    }

    /**
     * Sets custom_ref_nbr1
     *
     * @param string $custom_ref_nbr1 Packages tab &gt; Customer ref. no. 1 &gt; An auxiliary reference number to appear on the carrier label for the box.
     *
     * @return $this
     */
    public function setCustomRefNbr1($custom_ref_nbr1)
    {
        $this->container['custom_ref_nbr1'] = $custom_ref_nbr1;

        return $this;
    }

    /**
     * Gets custom_ref_nbr2
     *
     * @return string
     */
    public function getCustomRefNbr2()
    {
        return $this->container['custom_ref_nbr2'];
    }

    /**
     * Sets custom_ref_nbr2
     *
     * @param string $custom_ref_nbr2 Packages tab &gt; Customer ref. no. 2 &gt; An additional auxiliary reference number to appear on the carrier label for the box.
     *
     * @return $this
     */
    public function setCustomRefNbr2($custom_ref_nbr2)
    {
        $this->container['custom_ref_nbr2'] = $custom_ref_nbr2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


