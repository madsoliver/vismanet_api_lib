<?php
/**
 * JournalTransactionLineDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma Net API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.43.00.1002
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ekstralys\VismaNetApi\Model;

use \ArrayAccess;
use \Ekstralys\VismaNetApi\ObjectSerializer;

/**
 * JournalTransactionLineDto Class Doc Comment
 *
 * @category Class
 * @package  Ekstralys\VismaNetApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JournalTransactionLineDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JournalTransactionLineDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_number' => 'int',
        'account_number' => 'string',
        'description' => 'string',
        'subaccount' => 'object',
        'reference_number' => 'string',
        'debit_amount' => 'double',
        'debit_amount_in_currency' => 'double',
        'credit_amount' => 'double',
        'credit_amount_in_currency' => 'double',
        'transaction_description' => 'string',
        'vat_code' => 'object',
        'vat' => 'object',
        'branch' => 'string',
        'customer_supplier' => 'string',
        'transaction_type' => 'string',
        'module' => 'string',
        'uom' => 'string',
        'project' => 'object',
        'project_task' => 'object',
        'attachments' => '\Ekstralys\VismaNetApi\Model\AttachmentDto[]',
        'quantity' => 'double',
        'inventory_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_number' => 'int32',
        'account_number' => null,
        'description' => null,
        'subaccount' => null,
        'reference_number' => null,
        'debit_amount' => 'double',
        'debit_amount_in_currency' => 'double',
        'credit_amount' => 'double',
        'credit_amount_in_currency' => 'double',
        'transaction_description' => null,
        'vat_code' => null,
        'vat' => null,
        'branch' => null,
        'customer_supplier' => null,
        'transaction_type' => null,
        'module' => null,
        'uom' => null,
        'project' => null,
        'project_task' => null,
        'attachments' => null,
        'quantity' => 'double',
        'inventory_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_number' => 'lineNumber',
        'account_number' => 'accountNumber',
        'description' => 'description',
        'subaccount' => 'subaccount',
        'reference_number' => 'referenceNumber',
        'debit_amount' => 'debitAmount',
        'debit_amount_in_currency' => 'debitAmountInCurrency',
        'credit_amount' => 'creditAmount',
        'credit_amount_in_currency' => 'creditAmountInCurrency',
        'transaction_description' => 'transactionDescription',
        'vat_code' => 'vatCode',
        'vat' => 'vat',
        'branch' => 'branch',
        'customer_supplier' => 'customerSupplier',
        'transaction_type' => 'transactionType',
        'module' => 'module',
        'uom' => 'uom',
        'project' => 'project',
        'project_task' => 'projectTask',
        'attachments' => 'attachments',
        'quantity' => 'quantity',
        'inventory_number' => 'inventoryNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_number' => 'setLineNumber',
        'account_number' => 'setAccountNumber',
        'description' => 'setDescription',
        'subaccount' => 'setSubaccount',
        'reference_number' => 'setReferenceNumber',
        'debit_amount' => 'setDebitAmount',
        'debit_amount_in_currency' => 'setDebitAmountInCurrency',
        'credit_amount' => 'setCreditAmount',
        'credit_amount_in_currency' => 'setCreditAmountInCurrency',
        'transaction_description' => 'setTransactionDescription',
        'vat_code' => 'setVatCode',
        'vat' => 'setVat',
        'branch' => 'setBranch',
        'customer_supplier' => 'setCustomerSupplier',
        'transaction_type' => 'setTransactionType',
        'module' => 'setModule',
        'uom' => 'setUom',
        'project' => 'setProject',
        'project_task' => 'setProjectTask',
        'attachments' => 'setAttachments',
        'quantity' => 'setQuantity',
        'inventory_number' => 'setInventoryNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_number' => 'getLineNumber',
        'account_number' => 'getAccountNumber',
        'description' => 'getDescription',
        'subaccount' => 'getSubaccount',
        'reference_number' => 'getReferenceNumber',
        'debit_amount' => 'getDebitAmount',
        'debit_amount_in_currency' => 'getDebitAmountInCurrency',
        'credit_amount' => 'getCreditAmount',
        'credit_amount_in_currency' => 'getCreditAmountInCurrency',
        'transaction_description' => 'getTransactionDescription',
        'vat_code' => 'getVatCode',
        'vat' => 'getVat',
        'branch' => 'getBranch',
        'customer_supplier' => 'getCustomerSupplier',
        'transaction_type' => 'getTransactionType',
        'module' => 'getModule',
        'uom' => 'getUom',
        'project' => 'getProject',
        'project_task' => 'getProjectTask',
        'attachments' => 'getAttachments',
        'quantity' => 'getQuantity',
        'inventory_number' => 'getInventoryNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MODULE_MODULE_GL = 'ModuleGL';
    const MODULE_MODULE_AP = 'ModuleAP';
    const MODULE_MODULE_AR = 'ModuleAR';
    const MODULE_MODULE_CA = 'ModuleCA';
    const MODULE_MODULE_CM = 'ModuleCM';
    const MODULE_MODULE_IN = 'ModuleIN';
    const MODULE_MODULE_SO = 'ModuleSO';
    const MODULE_MODULE_PO = 'ModulePO';
    const MODULE_MODULE_DR = 'ModuleDR';
    const MODULE_MODULE_FA = 'ModuleFA';
    const MODULE_MODULE_EP = 'ModuleEP';
    const MODULE_MODULE_PM = 'ModulePM';
    const MODULE_MODULE_TX = 'ModuleTX';
    const MODULE_MODULE_CR = 'ModuleCR';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModuleAllowableValues()
    {
        return [
            self::MODULE_MODULE_GL,
            self::MODULE_MODULE_AP,
            self::MODULE_MODULE_AR,
            self::MODULE_MODULE_CA,
            self::MODULE_MODULE_CM,
            self::MODULE_MODULE_IN,
            self::MODULE_MODULE_SO,
            self::MODULE_MODULE_PO,
            self::MODULE_MODULE_DR,
            self::MODULE_MODULE_FA,
            self::MODULE_MODULE_EP,
            self::MODULE_MODULE_PM,
            self::MODULE_MODULE_TX,
            self::MODULE_MODULE_CR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['subaccount'] = isset($data['subaccount']) ? $data['subaccount'] : null;
        $this->container['reference_number'] = isset($data['reference_number']) ? $data['reference_number'] : null;
        $this->container['debit_amount'] = isset($data['debit_amount']) ? $data['debit_amount'] : null;
        $this->container['debit_amount_in_currency'] = isset($data['debit_amount_in_currency']) ? $data['debit_amount_in_currency'] : null;
        $this->container['credit_amount'] = isset($data['credit_amount']) ? $data['credit_amount'] : null;
        $this->container['credit_amount_in_currency'] = isset($data['credit_amount_in_currency']) ? $data['credit_amount_in_currency'] : null;
        $this->container['transaction_description'] = isset($data['transaction_description']) ? $data['transaction_description'] : null;
        $this->container['vat_code'] = isset($data['vat_code']) ? $data['vat_code'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['customer_supplier'] = isset($data['customer_supplier']) ? $data['customer_supplier'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['module'] = isset($data['module']) ? $data['module'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['project_task'] = isset($data['project_task']) ? $data['project_task'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['inventory_number'] = isset($data['inventory_number']) ? $data['inventory_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModuleAllowableValues();
        if (!is_null($this->container['module']) && !in_array($this->container['module'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'module', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_number
     *
     * @return int
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int $line_number The table &gt; Number at the left indicating the line number of the table.
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number Mandatory field: The table &gt; Account* &gt; The account (associated with the specified branch) whose balance will be updated by the journal entry.
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The table &gt; Description &gt; A detailed description provided by a user or generated by the system.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets subaccount
     *
     * @return object
     */
    public function getSubaccount()
    {
        return $this->container['subaccount'];
    }

    /**
     * Sets subaccount
     *
     * @param object $subaccount Mandatory field: The table &gt; Subaccount &gt; The subaccount used with the account to detail a journal entry.
     *
     * @return $this
     */
    public function setSubaccount($subaccount)
    {
        $this->container['subaccount'] = $subaccount;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string $reference_number The table &gt; Ref. no. &gt; The reference number of the external or internal document associated with the journal transaction.
     *
     * @return $this
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets debit_amount
     *
     * @return double
     */
    public function getDebitAmount()
    {
        return $this->container['debit_amount'];
    }

    /**
     * Sets debit_amount
     *
     * @param double $debit_amount The table &gt; Debit amount &gt; The debit amount of the journal entry.
     *
     * @return $this
     */
    public function setDebitAmount($debit_amount)
    {
        $this->container['debit_amount'] = $debit_amount;

        return $this;
    }

    /**
     * Gets debit_amount_in_currency
     *
     * @return double
     */
    public function getDebitAmountInCurrency()
    {
        return $this->container['debit_amount_in_currency'];
    }

    /**
     * Sets debit_amount_in_currency
     *
     * @param double $debit_amount_in_currency Background calculation giving you the debit amount in your default currency. This field is applicable if the amount is given in another currency than your default.
     *
     * @return $this
     */
    public function setDebitAmountInCurrency($debit_amount_in_currency)
    {
        $this->container['debit_amount_in_currency'] = $debit_amount_in_currency;

        return $this;
    }

    /**
     * Gets credit_amount
     *
     * @return double
     */
    public function getCreditAmount()
    {
        return $this->container['credit_amount'];
    }

    /**
     * Sets credit_amount
     *
     * @param double $credit_amount The table &gt; Credit amount &gt; The credit amount of the journal entry.
     *
     * @return $this
     */
    public function setCreditAmount($credit_amount)
    {
        $this->container['credit_amount'] = $credit_amount;

        return $this;
    }

    /**
     * Gets credit_amount_in_currency
     *
     * @return double
     */
    public function getCreditAmountInCurrency()
    {
        return $this->container['credit_amount_in_currency'];
    }

    /**
     * Sets credit_amount_in_currency
     *
     * @param double $credit_amount_in_currency Background calculation giving you the Credit amount in your default currency. This field is applicable if the amount is given in another currency than your default.
     *
     * @return $this
     */
    public function setCreditAmountInCurrency($credit_amount_in_currency)
    {
        $this->container['credit_amount_in_currency'] = $credit_amount_in_currency;

        return $this;
    }

    /**
     * Gets transaction_description
     *
     * @return string
     */
    public function getTransactionDescription()
    {
        return $this->container['transaction_description'];
    }

    /**
     * Sets transaction_description
     *
     * @param string $transaction_description The table &gt; Transaction Description &gt; A description of the transaction or any comments relevant to the transaction.
     *
     * @return $this
     */
    public function setTransactionDescription($transaction_description)
    {
        $this->container['transaction_description'] = $transaction_description;

        return $this;
    }

    /**
     * Gets vat_code
     *
     * @return object
     */
    public function getVatCode()
    {
        return $this->container['vat_code'];
    }

    /**
     * Sets vat_code
     *
     * @param object $vat_code The table &gt; VAT code &gt; The VAT code based on which the taxable amount is calculated.
     *
     * @return $this
     */
    public function setVatCode($vat_code)
    {
        $this->container['vat_code'] = $vat_code;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return object
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param object $vat The table &gt; VAT ID &gt; The VAT used to calculate the VAT amount.
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return string
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string $branch The table &gt; Branch &gt; The branch associated with this journal entry.
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets customer_supplier
     *
     * @return string
     */
    public function getCustomerSupplier()
    {
        return $this->container['customer_supplier'];
    }

    /**
     * Sets customer_supplier
     *
     * @param string $customer_supplier The table &gt; Customer/Supplier &gt; The customer or supplier associated with the entry.
     *
     * @return $this
     */
    public function setCustomerSupplier($customer_supplier)
    {
        $this->container['customer_supplier'] = $customer_supplier;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type The top part &gt; Type &gt; The type of this general ledger batch, which is specified by the system automatically.
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets module
     *
     * @return string
     */
    public function getModule()
    {
        return $this->container['module'];
    }

    /**
     * Sets module
     *
     * @param string $module The workspace where the batch originates. See module in the Top part &gt; Workspace
     *
     * @return $this
     */
    public function setModule($module)
    {
        $allowedValues = $this->getModuleAllowableValues();
        if (!is_null($module) && !in_array($module, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'module', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['module'] = $module;

        return $this;
    }

    /**
     * Gets uom
     *
     * @return string
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     *
     * @param string $uom The table &gt; UoM &gt; The quantity of items associated with the transaction, if relevant.
     *
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets project
     *
     * @return object
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param object $project The table &gt; Project &gt; The project with which this batch is associated, or the code indicating that this batch is not associated with any project.
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets project_task
     *
     * @return object
     */
    public function getProjectTask()
    {
        return $this->container['project_task'];
    }

    /**
     * Sets project_task
     *
     * @param object $project_task The table &gt; Project task &gt; The particular task of the project with which this batch is associated.
     *
     * @return $this
     */
    public function setProjectTask($project_task)
    {
        $this->container['project_task'] = $project_task;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Ekstralys\VismaNetApi\Model\AttachmentDto[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Ekstralys\VismaNetApi\Model\AttachmentDto[] $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity The table &gt; Quantity &gt; The quantity of items associated with the transaction, if relevant.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets inventory_number
     *
     * @return string
     */
    public function getInventoryNumber()
    {
        return $this->container['inventory_number'];
    }

    /**
     * Sets inventory_number
     *
     * @param string $inventory_number Item ID &gt; The item ID of the line item, if applicable.
     *
     * @return $this
     */
    public function setInventoryNumber($inventory_number)
    {
        $this->container['inventory_number'] = $inventory_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


